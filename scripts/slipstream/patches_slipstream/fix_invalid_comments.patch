diff --git a/crates/iota-json-rpc-api/src/coin.rs b/crates/iota-json-rpc-api/src/coin.rs
index ebd6ff06..2b0e61ee 100644
--- a/crates/iota-json-rpc-api/src/coin.rs
+++ b/crates/iota-json-rpc-api/src/coin.rs
@@ -13,6 +13,7 @@ use iota_types::base_types::{ObjectID, IotaAddress};
 #[rpc(server, client, namespace = "iotax")]
 pub trait CoinReadApi {
     /// Return all Coin<`coin_type`> objects owned by an address.
+    #[rustfmt::skip]
     #[method(name = "getCoins")]
     async fn get_coins(
         &self,
@@ -39,6 +40,7 @@ pub trait CoinReadApi {
     ) -> RpcResult<CoinPage>;
 
     /// Return the total coin balance for one coin type, owned by the address owner.
+    #[rustfmt::skip]
     #[method(name = "getBalance")]
     async fn get_balance(
         &self,
@@ -57,6 +59,7 @@ pub trait CoinReadApi {
     ) -> RpcResult<Vec<Balance>>;
 
     /// Return metadata(e.g., symbol, decimals) for a coin
+    #[rustfmt::skip]
     #[method(name = "getCoinMetadata")]
     async fn get_coin_metadata(
         &self,
@@ -65,6 +68,7 @@ pub trait CoinReadApi {
     ) -> RpcResult<Option<IotaCoinMetadata>>;
 
     /// Return total supply for a coin
+    #[rustfmt::skip]
     #[method(name = "getTotalSupply")]
     async fn get_total_supply(
         &self,
diff --git a/crates/iota-json-rpc-api/src/extended.rs b/crates/iota-json-rpc-api/src/extended.rs
index 68f7d893..7ada25b2 100644
--- a/crates/iota-json-rpc-api/src/extended.rs
+++ b/crates/iota-json-rpc-api/src/extended.rs
@@ -31,6 +31,7 @@ pub trait ExtendedApi {
     async fn get_current_epoch(&self) -> RpcResult<EpochInfo>;
 
     /// Return the list of queried objects. Note that this is an enhanced full node only api.
+    #[rustfmt::skip]
     #[method(name = "queryObjects")]
     async fn query_objects(
         &self,
diff --git a/crates/iota-json-rpc-api/src/indexer.rs b/crates/iota-json-rpc-api/src/indexer.rs
index 4522fe20..c7ad18c6 100644
--- a/crates/iota-json-rpc-api/src/indexer.rs
+++ b/crates/iota-json-rpc-api/src/indexer.rs
@@ -25,6 +25,7 @@ pub trait IndexerApi {
     /// the pagination is not accurate, because previous page may have been updated when
     /// the next page is fetched.
     /// Please use iotax_queryObjects if this is a concern.
+    #[rustfmt::skip]
     #[method(name = "getOwnedObjects")]
     async fn get_owned_objects(
         &self,
@@ -39,6 +40,7 @@ pub trait IndexerApi {
     ) -> RpcResult<ObjectsPage>;
 
     /// Return list of transactions for a specified query criteria.
+    #[rustfmt::skip]
     #[method(name = "queryTransactionBlocks")]
     async fn query_transaction_blocks(
         &self,
@@ -53,6 +55,7 @@ pub trait IndexerApi {
     ) -> RpcResult<TransactionBlocksPage>;
 
     /// Return list of events for a specified query criteria.
+    #[rustfmt::skip]
     #[method(name = "queryEvents")]
     async fn query_events(
         &self,
@@ -67,6 +70,7 @@ pub trait IndexerApi {
     ) -> RpcResult<EventPage>;
 
     /// Subscribe to a stream of Iota event
+    #[rustfmt::skip]
     #[subscription(name = "subscribeEvent", item = IotaEvent)]
     fn subscribe_event(
         &self,
@@ -79,6 +83,7 @@ pub trait IndexerApi {
     fn subscribe_transaction(&self, filter: TransactionFilter);
 
     /// Return the list of dynamic field objects owned by an object.
+    #[rustfmt::skip]
     #[method(name = "getDynamicFields")]
     async fn get_dynamic_fields(
         &self,
diff --git a/crates/iota-json-rpc-api/src/read.rs b/crates/iota-json-rpc-api/src/read.rs
index 995c7500..47926785 100644
--- a/crates/iota-json-rpc-api/src/read.rs
+++ b/crates/iota-json-rpc-api/src/read.rs
@@ -64,6 +64,7 @@ pub trait ReadApi {
     /// can be retrieved by this API, even if the object and version exists/existed.
     /// The result may vary across nodes depending on their pruning policies.
     /// Return the object information for a specified version
+    #[rustfmt::skip]
     #[method(name = "tryGetPastObject")]
     async fn try_get_past_object(
         &self,
@@ -102,6 +103,7 @@ pub trait ReadApi {
     ) -> RpcResult<Vec<IotaPastObjectResponse>>;
 
     /// Return a checkpoint
+    #[rustfmt::skip]
     #[method(name = "getCheckpoint")]
     async fn get_checkpoint(
         &self,
@@ -110,6 +112,7 @@ pub trait ReadApi {
     ) -> RpcResult<Checkpoint>;
 
     /// Return paginated list of checkpoints
+    #[rustfmt::skip]
     #[method(name = "getCheckpoints")]
     async fn get_checkpoints(
         &self,
@@ -121,6 +124,7 @@ pub trait ReadApi {
         descending_order: bool,
     ) -> RpcResult<CheckpointPage>;
 
+    #[rustfmt::skip]
     #[method(name = "getCheckpoints", version <= "0.31")]
     async fn get_checkpoints_deprecated_limit(
         &self,
@@ -150,6 +154,7 @@ pub trait ReadApi {
 
     /// Return the protocol config table for the given version number.
     /// If the version number is not specified, If none is specified, the node uses the version of the latest epoch it has processed.
+    #[rustfmt::skip]
     #[method(name = "getProtocolConfig")]
     async fn get_protocol_config(
         &self,
diff --git a/crates/iota-json-rpc-api/src/transaction_builder.rs b/crates/iota-json-rpc-api/src/transaction_builder.rs
index e77620d8..b28b4af6 100644
--- a/crates/iota-json-rpc-api/src/transaction_builder.rs
+++ b/crates/iota-json-rpc-api/src/transaction_builder.rs
@@ -19,6 +19,7 @@ use iota_types::iota_serde::BigInt;
 pub trait TransactionBuilder {
     /// Create an unsigned transaction to transfer an object from one address to another. The object's type
     /// must allow public transfers
+    #[rustfmt::skip]
     #[method(name = "transferObject")]
     async fn transfer_object(
         &self,
@@ -35,6 +36,7 @@ pub trait TransactionBuilder {
     ) -> RpcResult<TransactionBlockBytes>;
 
     /// Create an unsigned transaction to send IOTA coin object to a Iota address. The IOTA object is also used as the gas object.
+    #[rustfmt::skip]
     #[method(name = "transferIota")]
     async fn transfer_iota(
         &self,
@@ -54,6 +56,7 @@ pub trait TransactionBuilder {
     /// The object specified in the `gas` field will be used to pay the gas fee for the transaction.
     /// The gas object can not appear in `input_coins`. If the gas object is not specified, the RPC server
     /// will auto-select one.
+    #[rustfmt::skip]
     #[method(name = "pay")]
     async fn pay(
         &self,
@@ -80,6 +83,7 @@ pub trait TransactionBuilder {
     /// input coin, then use the first input coin as the gas coin object.
     /// 3. the balance of the first input coin after tx is sum(input_coins) - sum(amounts) - actual_gas_cost
     /// 4. all other input coints other than the first one are deleted.
+    #[rustfmt::skip]
     #[method(name = "payIota")]
     async fn pay_iota(
         &self,
@@ -102,6 +106,7 @@ pub trait TransactionBuilder {
     /// 2. transfer the updated first coin to the recipient and also use this first coin as gas coin object.
     /// 3. the balance of the first input coin after tx is sum(input_coins) - actual_gas_cost.
     /// 4. all other input coins other than the first are deleted.
+    #[rustfmt::skip]
     #[method(name = "payAllIota")]
     async fn pay_all_iota(
         &self,
@@ -116,6 +121,7 @@ pub trait TransactionBuilder {
     ) -> RpcResult<TransactionBlockBytes>;
 
     /// Create an unsigned transaction to execute a Move call on the network, by calling the specified function in the module of a given package.
+    #[rustfmt::skip]
     #[method(name = "moveCall")]
     async fn move_call(
         &self,
@@ -140,6 +146,7 @@ pub trait TransactionBuilder {
     ) -> RpcResult<TransactionBlockBytes>;
 
     /// Create an unsigned transaction to publish a Move package.
+    #[rustfmt::skip]
     #[method(name = "publish")]
     async fn publish(
         &self,
@@ -156,6 +163,7 @@ pub trait TransactionBuilder {
     ) -> RpcResult<TransactionBlockBytes>;
 
     /// Create an unsigned transaction to split a coin object into multiple coins.
+    #[rustfmt::skip]
     #[method(name = "splitCoin")]
     async fn split_coin(
         &self,
@@ -172,6 +180,7 @@ pub trait TransactionBuilder {
     ) -> RpcResult<TransactionBlockBytes>;
 
     /// Create an unsigned transaction to split a coin object into multiple equal-size coins.
+    #[rustfmt::skip]
     #[method(name = "splitCoinEqual")]
     async fn split_coin_equal(
         &self,
@@ -188,6 +197,7 @@ pub trait TransactionBuilder {
     ) -> RpcResult<TransactionBlockBytes>;
 
     /// Create an unsigned transaction to merge multiple coins into one coin.
+    #[rustfmt::skip]
     #[method(name = "mergeCoins")]
     async fn merge_coin(
         &self,
@@ -204,6 +214,7 @@ pub trait TransactionBuilder {
     ) -> RpcResult<TransactionBlockBytes>;
 
     /// Create an unsigned batched transaction.
+    #[rustfmt::skip]
     #[method(name = "batchTransaction")]
     async fn batch_transaction(
         &self,
@@ -220,6 +231,7 @@ pub trait TransactionBuilder {
     ) -> RpcResult<TransactionBlockBytes>;
 
     /// Add stake to a validator's staking pool using multiple coins and amount.
+    #[rustfmt::skip]
     #[method(name = "requestAddStake")]
     async fn request_add_stake(
         &self,
@@ -238,6 +250,7 @@ pub trait TransactionBuilder {
     ) -> RpcResult<TransactionBlockBytes>;
 
     /// Withdraw stake from a validator's staking pool.
+    #[rustfmt::skip]
     #[method(name = "requestWithdrawStake")]
     async fn request_withdraw_stake(
         &self,
diff --git a/crates/iota-json-rpc-api/src/write.rs b/crates/iota-json-rpc-api/src/write.rs
index 9a3c9adc..79034336 100644
--- a/crates/iota-json-rpc-api/src/write.rs
+++ b/crates/iota-json-rpc-api/src/write.rs
@@ -28,6 +28,7 @@ pub trait WriteApi {
     ///     However if the node fails to execute the transaction locally in a timely manner,
     ///     a bool type in the response is set to false to indicated the case.
     /// request_type is default to be `WaitForEffectsCert` unless options.show_events or options.show_effects is true
+    #[rustfmt::skip]
     #[method(name = "executeTransactionBlock")]
     async fn execute_transaction_block(
         &self,
@@ -44,6 +45,7 @@ pub trait WriteApi {
     /// Runs the transaction in dev-inspect mode. Which allows for nearly any
     /// transaction (or Move call) with any arguments. Detailed results are
     /// provided, including both the transaction effects and any return values.
+    #[rustfmt::skip]
     #[method(name = "devInspectTransactionBlock")]
     async fn dev_inspect_transaction_block(
         &self,
