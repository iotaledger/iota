name: Rust tests

on:
  workflow_call:
    inputs:
      isRust:
        type: boolean

concurrency:
  group: ext-rust-tests-${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/develop' }}

env:
  CARGO_TERM_COLOR: always
  RUST_LOG: "error"
  CARGO_INCREMENTAL: 0

jobs:
  changes:
    if: inputs.isRust
    runs-on: [self-hosted]
    outputs:
      components: ${{ steps.filter.outputs.changes }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          list-files: "json"
          filters: .github/external-crates-filters.yml

  test:
    name: Test external crates
    needs: changes
    if: (!cancelled() && inputs.isRust)
    env:
      # Tests written with #[sim_test] are often flaky if run as #[tokio::test] - this var
      # causes #[sim_test] to only run under the deterministic `simtest` job, and not the
      # non-deterministic `test` job.
      IOTA_SKIP_SIMTESTS: 1
    runs-on: [self-hosted]
    steps:
      - uses: actions/checkout@v4
      - uses: taiki-e/install-action@v2
        with:
          tool: nextest
      - name: Install python dependencies
        run: pip install pyopenssl --upgrade --break-system-packages
      - name: cargo test
        run: |
          array=(${{ join(fromJson(needs.changes.outputs.components), ' ') }})

          result=""

          for item in "${array[@]}"; do
              mapped_item="-E 'rdeps(${item})'"

              if [ -z "$result" ]; then
                  result="$mapped_item"
              else
                  result="$result $mapped_item"
              fi
          done

          command="cargo nextest run \
            --config-file .config/nextest.toml \
            --manifest-path external-crates/move/Cargo.toml \
            -E '!test(prove) and !test(run_all::simple_build_with_docs/args.txt) and !test(run_test::nested_deps_bad_parent/Move.toml)' \
            $result \
            --profile ci"

          echo "$command"

          eval ${command}

  check-unused-deps:
    name: Check Unused Dependencies (${{ matrix.flags }})
    if: (!cancelled() && inputs.isRust)
    strategy:
      matrix:
        flags: ["--all-features", "--no-default-features"]
      fail-fast: false
    runs-on: [self-hosted]

    steps:
      - uses: actions/checkout@v4
      - name: Run Cargo Udeps
        run: cargo +nightly ci-udeps-external ${{ matrix.flags }}
