name: Nightly Narwhal tests

on:
  ## Allow triggering this workflow manually via GitHub CLI/web
  workflow_dispatch:
  schedule:
    - cron: "0 3 * * *" # every 03:00 every night

env:
  CARGO_TERM_COLOR: always
  # Disable incremental compilation.
  #
  # Incremental compilation is useful as part of an edit-build-test-edit cycle,
  # as it lets the compiler avoid recompiling code that hasn't changed. However,
  # on CI, we're not making small edits; we're almost always building the entire
  # project from scratch. Thus, incremental compilation on CI actually
  # introduces *additional* overhead to support making future builds
  # faster...but no future builds will ever occur in any given CI environment.
  #
  # See https://matklad.github.io/2021/09/04/fast-rust-builds.html#ci-workflow
  # for details.
  CARGO_INCREMENTAL: 0
  # Allow more retries for network requests in cargo (downloading crates) and
  # rustup (installing toolchains). This should help to reduce flaky CI failures
  # from transient network timeouts or other issues.
  CARGO_NET_RETRY: 10
  RUSTUP_MAX_RETRIES: 10
  # Don't emit giant backtraces in the CI logs.
  RUST_BACKTRACE: short

jobs:
  end-to-end-tests:
    name: Narwhal run long-running end-to-end tests
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4
      - uses: taiki-e/install-action@nextest
      # Enable caching of the 'librocksdb-sys' crate by additionally caching the
      # 'librocksdb-sys' src directory which is managed by cargo
      - uses: bmwill/rust-cache@v1 # Fork of 'Swatinem/rust-cache' which allows caching additional paths
        with:
          path: ~/.cargo/registry/src/**/librocksdb-sys-*
      # We run only the integration tests that are ignored under the primary package.
      # These are considered the end-to-end "slow" tests for us
      - name: cargo nextest
        run: |
          cargo nextest run -E 'kind(test) and package(narwhal-primary)' --profile narwhalnightly --run-ignored ignored-only
