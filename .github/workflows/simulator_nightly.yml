name: Simulator Tests

on:
  schedule:
    - cron: "0 9 * * *" # UTC timing is every day at 1am PST
  workflow_dispatch:
    inputs:
      iota_ref:
        description: "Branch / commit to test"
        type: string
        required: true
        default: develop
      test_num:
        description: "MSIM_TEST_NUM (test iterations)"
        type: string
        required: false
        default: "30"

concurrency:
  group: ${{ github.workflow }}

env:
  IOTA_REF: "${{ github.event.inputs.iota_ref || 'develop' }}"
  TEST_NUM: "${{ github.event.inputs.test_num || '30' }}"
  CARGO_TERM_COLOR: always
  # Disable incremental compilation.
  #
  # Incremental compilation is useful as part of an edit-build-test-edit cycle,
  # as it lets the compiler avoid recompiling code that hasn't changed. However,
  # on CI, we're not making small edits; we're almost always building the entire
  # project from scratch. Thus, incremental compilation on CI actually
  # introduces *additional* overhead to support making future builds
  # faster...but no future builds will ever occur in any given CI environment.
  #
  # See https://matklad.github.io/2021/09/04/fast-rust-builds.html#ci-workflow
  # for details.
  CARGO_INCREMENTAL: 0
  # Allow more retries for network requests in cargo (downloading crates) and
  # rustup (installing toolchains). This should help to reduce flaky CI failures
  # from transient network timeouts or other issues.
  CARGO_NET_RETRY: 10
  RUSTUP_MAX_RETRIES: 10
  # Don't emit giant backtraces in the CI logs.
  RUST_BACKTRACE: short
  RUST_LOG: off
  NUM_CPUS: 24

jobs:
  simtest:
    timeout-minutes: 240
    runs-on: [self-hosted]

    steps:
      - uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871 # v4.2.1
        with:
          ref: ${{ env.IOTA_REF }}
      - uses: taiki-e/install-action@375e0c7f08a66b8c2ba7e7eef31a6f91043a81b0 # v2.44.38
        with:
          tool: nextest
      - name: Run simtest
        run: scripts/simtest/simtest-run.sh
