name: External crates

on:
    push:
        branches: [develop, extensions, devnet]
    pull_request:
        types: [opened, synchronize, reopened, ready_for_review]

concurrency:
    group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
    cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

env:
    CARGO_TERM_COLOR: always
    # Disable incremental compilation.
    #
    # Incremental compilation is useful as part of an edit-build-test-edit cycle,
    # as it lets the compiler avoid recompiling code that hasn't changed. However,
    # on CI, we're not making small edits; we're almost always building the entire
    # project from scratch. Thus, incremental compilation on CI actually
    # introduces *additional* overhead to support making future builds
    # faster...but no future builds will ever occur in any given CI environment.
    #
    # See https://matklad.github.io/2021/09/04/fast-rust-builds.html#ci-workflow
    # for details.
    CARGO_INCREMENTAL: 0
    # Allow more retries for network requests in cargo (downloading crates) and
    # rustup (installing toolchains). This should help to reduce flaky CI failures
    # from transient network timeouts or other issues.
    CARGO_NET_RETRY: 10
    RUSTUP_MAX_RETRIES: 10
    # Don't emit giant backtraces in the CI logs.
    RUST_BACKTRACE: short
    # RUSTFLAGS: -D warnings
    RUSTDOCFLAGS: -D warnings

jobs:
    changes:
        runs-on: [self-hosted-rust]
        outputs:
            components: ${{ steps.filter.outputs.changes }}
        steps:
            - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11
            - uses: dorny/paths-filter@v3
              id: filter
              with:
                  list-files: "json"
                  filters: .github/external-crates-filters.yml

    diff:
        runs-on: [self-hosted-rust]
        outputs:
            isRust: ${{ steps.diff.outputs.isRust }}
            isMove: ${{ steps.diff.outputs.isMove }}
        steps:
            - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # Pin v4.1.1
            - name: Detect Changes
              uses: './.github/actions/diffs'
              id: diff

    test:
        name: Test ${{ matrix.components }}
        if: needs.diff.outputs.isRust == 'true'
        env:
            # Tests written with #[sim_test] are often flaky if run as #[tokio::test] - this var
            # causes #[sim_test] to only run under the deterministic `simtest` job, and not the
            # non-deterministic `test` job.
            IOTA_SKIP_SIMTESTS: 1
        strategy:
            matrix:
                components: ${{ fromJson(needs.changes.outputs.components) }}
            fail-fast: false
        runs-on: [self-hosted-rust]
        needs: changes
        steps:
            - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11
            - uses: taiki-e/install-action@nextest
            - name: Install python dependencies
              run: pip install pyopenssl --upgrade
            - name: cargo test
              run: >
                  cargo nextest run
                  --config-file .config/nextest.toml
                  --manifest-path external-crates/move/Cargo.toml
                  -E '!test(prove) and !test(run_all::simple_build_with_docs/args.txt) and !test(run_test::nested_deps_bad_parent/Move.toml) and rdeps(${{matrix.components}})'
                  -p ${{matrix.components}}
                  --profile ci

    clippy:
        needs: diff
        if: needs.diff.outputs.isRust == 'true'
        runs-on: [self-hosted-rust]
        steps:
            - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # Pin v4.1.1
            - run: rustup component add clippy

            # See '.cargo/config' for list of enabled/disabled clippy lints
            - name: cargo move-clippy
              run: |
                  cargo +stable ci-clippy-external

    rustfmt:
        needs: diff
        if: needs.diff.outputs.isRust == 'true'
        runs-on: [self-hosted-rust]
        steps:
            - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # Pin v4.1.1
            - name: Install latest nightly
              run: rustup toolchain install nightly --component rustfmt --allow-downgrade
            - name: Check Rust formatting
              run: |
                  cargo +nightly ci-fmt-external

    cargo-deny:
        name: cargo-deny (advisories, licenses, bans, ...)
        needs: diff
        if: needs.diff.outputs.isRust == 'true'
        runs-on: [self-hosted-rust]
        steps:
            - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # Pin v4.1.1
            - uses: EmbarkStudios/cargo-deny-action@v1
