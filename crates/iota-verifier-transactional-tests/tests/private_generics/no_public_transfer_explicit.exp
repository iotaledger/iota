processed 16 tasks

task 1, lines 9-25:
//# publish
created: object(1,0)
mutated: object(0,0)
gas summary: computation_cost: 1000000, storage_cost: 5175600,  storage_rebate: 0, non_refundable_storage_fee: 0

task 3, lines 31-40:
//# publish
Error: Transaction Effects Status: Iota Move Bytecode Verification Error. Please run the Iota Move Verifier for more information.
Execution Error: ExecutionError: ExecutionError { inner: ExecutionErrorInner { kind: IotaMoveVerificationError, source: Some("Enum StoreEnum cannot have the 'key' ability. Enums cannot have the 'key' ability."), command: Some(0) } }

task 4, lines 42-52:
//# publish --dependencies test
Error: Transaction Effects Status: Iota Move Bytecode Verification Error. Please run the Iota Move Verifier for more information.
Execution Error: ExecutionError: ExecutionError { inner: ExecutionErrorInner { kind: IotaMoveVerificationError, source: Some("_::u::f. Invalid call to 'iota::transfer::transfer' on an object of type 'test::m::KeyStruct'. The transferred object's type must be defined in the current module. If the object has the 'store' type ability, you can use the non-internal variant instead, i.e. 'iota::transfer::public_transfer'"), command: Some(0) } }

task 5, lines 54-64:
//# publish --dependencies test
Error: Transaction Effects Status: Iota Move Bytecode Verification Error. Please run the Iota Move Verifier for more information.
Execution Error: ExecutionError: ExecutionError { inner: ExecutionErrorInner { kind: IotaMoveVerificationError, source: Some("_::u::f. Invalid call to 'iota::transfer::freeze_object' on an object of type 'test::m::KeyStruct'. The transferred object's type must be defined in the current module. If the object has the 'store' type ability, you can use the non-internal variant instead, i.e. 'iota::transfer::public_freeze_object'"), command: Some(0) } }

task 6, lines 66-76:
//# publish --dependencies test
Error: Transaction Effects Status: Iota Move Bytecode Verification Error. Please run the Iota Move Verifier for more information.
Execution Error: ExecutionError: ExecutionError { inner: ExecutionErrorInner { kind: IotaMoveVerificationError, source: Some("_::u::f. Invalid call to 'iota::transfer::share_object' on an object of type 'test::m::KeyStruct'. The transferred object's type must be defined in the current module. If the object has the 'store' type ability, you can use the non-internal variant instead, i.e. 'iota::transfer::public_share_object'"), command: Some(0) } }

task 7, lines 78-92:
//# publish --dependencies test
Error: Transaction Effects Status: Iota Move Bytecode Verification Error. Please run the Iota Move Verifier for more information.
Execution Error: ExecutionError: ExecutionError { inner: ExecutionErrorInner { kind: IotaMoveVerificationError, source: Some("_::u::f. Invalid call to 'iota::transfer::receive' on an object of type 'test::m::KeyStruct'. The transferred object's type must be defined in the current module. If the object has the 'store' type ability, you can use the non-internal variant instead, i.e. 'iota::transfer::public_receive'"), command: Some(0) } }

task 8, lines 94-104:
//# publish --dependencies test
Error: Transaction Effects Status: Iota Move Bytecode Verification Error. Please run the Iota Move Verifier for more information.
Execution Error: ExecutionError: ExecutionError { inner: ExecutionErrorInner { kind: IotaMoveVerificationError, source: Some("_::u::f. Invalid call to 'iota::transfer::transfer' on an object of type 'test::m::KeyStoreStruct'. The transferred object's type must be defined in the current module. If the object has the 'store' type ability, you can use the non-internal variant instead, i.e. 'iota::transfer::public_transfer'"), command: Some(0) } }

task 9, lines 106-116:
//# publish --dependencies test
Error: Transaction Effects Status: Iota Move Bytecode Verification Error. Please run the Iota Move Verifier for more information.
Execution Error: ExecutionError: ExecutionError { inner: ExecutionErrorInner { kind: IotaMoveVerificationError, source: Some("_::u::f. Invalid call to 'iota::transfer::freeze_object' on an object of type 'test::m::KeyStoreStruct'. The transferred object's type must be defined in the current module. If the object has the 'store' type ability, you can use the non-internal variant instead, i.e. 'iota::transfer::public_freeze_object'"), command: Some(0) } }

task 10, lines 118-128:
//# publish --dependencies test
Error: Transaction Effects Status: Iota Move Bytecode Verification Error. Please run the Iota Move Verifier for more information.
Execution Error: ExecutionError: ExecutionError { inner: ExecutionErrorInner { kind: IotaMoveVerificationError, source: Some("_::u::f. Invalid call to 'iota::transfer::share_object' on an object of type 'test::m::KeyStoreStruct'. The transferred object's type must be defined in the current module. If the object has the 'store' type ability, you can use the non-internal variant instead, i.e. 'iota::transfer::public_share_object'"), command: Some(0) } }

task 11, lines 130-144:
//# publish --dependencies test
Error: Transaction Effects Status: Iota Move Bytecode Verification Error. Please run the Iota Move Verifier for more information.
Execution Error: ExecutionError: ExecutionError { inner: ExecutionErrorInner { kind: IotaMoveVerificationError, source: Some("_::u::f. Invalid call to 'iota::transfer::receive' on an object of type 'test::m::KeyStoreStruct'. The transferred object's type must be defined in the current module. If the object has the 'store' type ability, you can use the non-internal variant instead, i.e. 'iota::transfer::public_receive'"), command: Some(0) } }

task 12, lines 146-156:
//# publish --dependencies test
Error: Transaction Effects Status: Move Bytecode Verification Error. Please run the Bytecode Verifier for more information.
Execution Error: ExecutionError: ExecutionError { inner: ExecutionErrorInner { kind: VMVerificationOrDeserializationError, source: Some(VMError { major_status: CONSTRAINT_NOT_SATISFIED, sub_status: None, message: Some("expected type with abilities [Key, ] got type actual Struct(DatatypeHandleIndex(0)) with incompatible abilities [Store, ] at offset 2 "), exec_state: None, location: Module(ModuleId { address: _, name: Identifier("u") }), indices: [(Signature, 1), (FunctionDefinition, 0)], offsets: [] }), command: Some(0) } }

task 13, lines 158-168:
//# publish --dependencies test
Error: Transaction Effects Status: Move Bytecode Verification Error. Please run the Bytecode Verifier for more information.
Execution Error: ExecutionError: ExecutionError { inner: ExecutionErrorInner { kind: VMVerificationOrDeserializationError, source: Some(VMError { major_status: CONSTRAINT_NOT_SATISFIED, sub_status: None, message: Some("expected type with abilities [Key, ] got type actual Struct(DatatypeHandleIndex(0)) with incompatible abilities [Store, ] at offset 1 "), exec_state: None, location: Module(ModuleId { address: _, name: Identifier("u") }), indices: [(Signature, 1), (FunctionDefinition, 0)], offsets: [] }), command: Some(0) } }

task 14, lines 170-180:
//# publish --dependencies test
Error: Transaction Effects Status: Move Bytecode Verification Error. Please run the Bytecode Verifier for more information.
Execution Error: ExecutionError: ExecutionError { inner: ExecutionErrorInner { kind: VMVerificationOrDeserializationError, source: Some(VMError { major_status: CONSTRAINT_NOT_SATISFIED, sub_status: None, message: Some("expected type with abilities [Key, ] got type actual Struct(DatatypeHandleIndex(0)) with incompatible abilities [Store, ] at offset 1 "), exec_state: None, location: Module(ModuleId { address: _, name: Identifier("u") }), indices: [(Signature, 1), (FunctionDefinition, 0)], offsets: [] }), command: Some(0) } }

task 15, lines 182-194:
//# publish --dependencies test
Error: Transaction Effects Status: Move Bytecode Verification Error. Please run the Bytecode Verifier for more information.
Execution Error: ExecutionError: ExecutionError { inner: ExecutionErrorInner { kind: VMVerificationOrDeserializationError, source: Some(VMError { major_status: CONSTRAINT_NOT_SATISFIED, sub_status: None, message: Some("expected type with abilities [Key, ] got type actual Struct(DatatypeHandleIndex(0)) with incompatible abilities [Store, ]"), exec_state: None, location: Module(ModuleId { address: _, name: Identifier("u") }), indices: [(Signature, 0), (FunctionHandle, 0)], offsets: [] }), command: Some(0) } }
