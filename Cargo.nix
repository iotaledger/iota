
# This file was @generated by crate2nix 0.14.0 with the command:
#   "generate"
# See https://github.com/kolloch/crate2nix for more info.

{ nixpkgs ? <nixpkgs>
, pkgs ? import nixpkgs { config = {}; }
, lib ? pkgs.lib
, stdenv ? pkgs.stdenv
, buildRustCrateForPkgs ? pkgs: pkgs.buildRustCrate
  # This is used as the `crateOverrides` argument for `buildRustCrate`.
, defaultCrateOverrides ? pkgs.defaultCrateOverrides
  # The features to enable for the root_crate or the workspace_members.
, rootFeatures ? [ "default" ]
  # If true, throw errors instead of issueing deprecation warnings.
, strictDeprecation ? false
  # Used for conditional compilation based on CPU feature detection.
, targetFeatures ? []
  # Whether to perform release builds: longer compile times, faster binaries.
, release ? true
  # Additional crate2nix configuration if it exists.
, crateConfig
  ? if builtins.pathExists ./crate-config.nix
    then pkgs.callPackage ./crate-config.nix {}
    else {}
}:

rec {
  #
  # "public" attributes that we attempt to keep stable with new versions of crate2nix.
  #


  # Refer your crate build derivation by name here.
  # You can override the features with
  # workspaceMembers."${crateName}".build.override { features = [ "default" "feature1" ... ]; }.
  workspaceMembers = {
    "bin-version" = rec {
      packageId = "bin-version";
      build = internal.buildRustCrateWithFeatures {
        packageId = "bin-version";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "consensus-config" = rec {
      packageId = "consensus-config";
      build = internal.buildRustCrateWithFeatures {
        packageId = "consensus-config";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "consensus-core" = rec {
      packageId = "consensus-core";
      build = internal.buildRustCrateWithFeatures {
        packageId = "consensus-core";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "docs-examples" = rec {
      packageId = "docs-examples";
      build = internal.buildRustCrateWithFeatures {
        packageId = "docs-examples";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "iota" = rec {
      packageId = "iota";
      build = internal.buildRustCrateWithFeatures {
        packageId = "iota";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "iota-adapter-latest" = rec {
      packageId = "iota-adapter-latest";
      build = internal.buildRustCrateWithFeatures {
        packageId = "iota-adapter-latest";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "iota-adapter-transactional-tests" = rec {
      packageId = "iota-adapter-transactional-tests";
      build = internal.buildRustCrateWithFeatures {
        packageId = "iota-adapter-transactional-tests";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "iota-adapter-v0" = rec {
      packageId = "iota-adapter-v0";
      build = internal.buildRustCrateWithFeatures {
        packageId = "iota-adapter-v0";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "iota-analytics-indexer" = rec {
      packageId = "iota-analytics-indexer";
      build = internal.buildRustCrateWithFeatures {
        packageId = "iota-analytics-indexer";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "iota-analytics-indexer-derive" = rec {
      packageId = "iota-analytics-indexer-derive";
      build = internal.buildRustCrateWithFeatures {
        packageId = "iota-analytics-indexer-derive";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "iota-archival" = rec {
      packageId = "iota-archival";
      build = internal.buildRustCrateWithFeatures {
        packageId = "iota-archival";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "iota-authority-aggregation" = rec {
      packageId = "iota-authority-aggregation";
      build = internal.buildRustCrateWithFeatures {
        packageId = "iota-authority-aggregation";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "iota-aws-orchestrator" = rec {
      packageId = "iota-aws-orchestrator";
      build = internal.buildRustCrateWithFeatures {
        packageId = "iota-aws-orchestrator";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "iota-benchmark" = rec {
      packageId = "iota-benchmark";
      build = internal.buildRustCrateWithFeatures {
        packageId = "iota-benchmark";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "iota-bridge" = rec {
      packageId = "iota-bridge";
      build = internal.buildRustCrateWithFeatures {
        packageId = "iota-bridge";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "iota-bridge-cli" = rec {
      packageId = "iota-bridge-cli";
      build = internal.buildRustCrateWithFeatures {
        packageId = "iota-bridge-cli";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "iota-bridge-indexer" = rec {
      packageId = "iota-bridge-indexer";
      build = internal.buildRustCrateWithFeatures {
        packageId = "iota-bridge-indexer";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "iota-cluster-test" = rec {
      packageId = "iota-cluster-test";
      build = internal.buildRustCrateWithFeatures {
        packageId = "iota-cluster-test";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "iota-common" = rec {
      packageId = "iota-common";
      build = internal.buildRustCrateWithFeatures {
        packageId = "iota-common";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "iota-config" = rec {
      packageId = "iota-config";
      build = internal.buildRustCrateWithFeatures {
        packageId = "iota-config";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "iota-core" = rec {
      packageId = "iota-core";
      build = internal.buildRustCrateWithFeatures {
        packageId = "iota-core";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "iota-cost" = rec {
      packageId = "iota-cost";
      build = internal.buildRustCrateWithFeatures {
        packageId = "iota-cost";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "iota-data-ingestion" = rec {
      packageId = "iota-data-ingestion";
      build = internal.buildRustCrateWithFeatures {
        packageId = "iota-data-ingestion";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "iota-data-ingestion-core" = rec {
      packageId = "iota-data-ingestion-core";
      build = internal.buildRustCrateWithFeatures {
        packageId = "iota-data-ingestion-core";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "iota-e2e-tests" = rec {
      packageId = "iota-e2e-tests";
      build = internal.buildRustCrateWithFeatures {
        packageId = "iota-e2e-tests";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "iota-enum-compat-util" = rec {
      packageId = "iota-enum-compat-util";
      build = internal.buildRustCrateWithFeatures {
        packageId = "iota-enum-compat-util";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "iota-execution" = rec {
      packageId = "iota-execution";
      build = internal.buildRustCrateWithFeatures {
        packageId = "iota-execution";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "iota-execution-cut" = rec {
      packageId = "iota-execution-cut";
      build = internal.buildRustCrateWithFeatures {
        packageId = "iota-execution-cut";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "iota-faucet" = rec {
      packageId = "iota-faucet";
      build = internal.buildRustCrateWithFeatures {
        packageId = "iota-faucet";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "iota-framework" = rec {
      packageId = "iota-framework";
      build = internal.buildRustCrateWithFeatures {
        packageId = "iota-framework";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "iota-framework-snapshot" = rec {
      packageId = "iota-framework-snapshot";
      build = internal.buildRustCrateWithFeatures {
        packageId = "iota-framework-snapshot";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "iota-framework-tests" = rec {
      packageId = "iota-framework-tests";
      build = internal.buildRustCrateWithFeatures {
        packageId = "iota-framework-tests";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "iota-genesis-builder" = rec {
      packageId = "iota-genesis-builder";
      build = internal.buildRustCrateWithFeatures {
        packageId = "iota-genesis-builder";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "iota-genesis-common" = rec {
      packageId = "iota-genesis-common";
      build = internal.buildRustCrateWithFeatures {
        packageId = "iota-genesis-common";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "iota-graphql-config" = rec {
      packageId = "iota-graphql-config";
      build = internal.buildRustCrateWithFeatures {
        packageId = "iota-graphql-config";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "iota-graphql-e2e-tests" = rec {
      packageId = "iota-graphql-e2e-tests";
      build = internal.buildRustCrateWithFeatures {
        packageId = "iota-graphql-e2e-tests";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "iota-graphql-rpc" = rec {
      packageId = "iota-graphql-rpc";
      build = internal.buildRustCrateWithFeatures {
        packageId = "iota-graphql-rpc";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "iota-graphql-rpc-client" = rec {
      packageId = "iota-graphql-rpc-client";
      build = internal.buildRustCrateWithFeatures {
        packageId = "iota-graphql-rpc-client";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "iota-graphql-rpc-headers" = rec {
      packageId = "iota-graphql-rpc-headers";
      build = internal.buildRustCrateWithFeatures {
        packageId = "iota-graphql-rpc-headers";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "iota-indexer" = rec {
      packageId = "iota-indexer";
      build = internal.buildRustCrateWithFeatures {
        packageId = "iota-indexer";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "iota-indexer-builder" = rec {
      packageId = "iota-indexer-builder";
      build = internal.buildRustCrateWithFeatures {
        packageId = "iota-indexer-builder";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "iota-json" = rec {
      packageId = "iota-json";
      build = internal.buildRustCrateWithFeatures {
        packageId = "iota-json";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "iota-json-rpc" = rec {
      packageId = "iota-json-rpc";
      build = internal.buildRustCrateWithFeatures {
        packageId = "iota-json-rpc";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "iota-json-rpc-api" = rec {
      packageId = "iota-json-rpc-api";
      build = internal.buildRustCrateWithFeatures {
        packageId = "iota-json-rpc-api";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "iota-json-rpc-tests" = rec {
      packageId = "iota-json-rpc-tests";
      build = internal.buildRustCrateWithFeatures {
        packageId = "iota-json-rpc-tests";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "iota-json-rpc-types" = rec {
      packageId = "iota-json-rpc-types";
      build = internal.buildRustCrateWithFeatures {
        packageId = "iota-json-rpc-types";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "iota-keys" = rec {
      packageId = "iota-keys";
      build = internal.buildRustCrateWithFeatures {
        packageId = "iota-keys";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "iota-light-client" = rec {
      packageId = "iota-light-client";
      build = internal.buildRustCrateWithFeatures {
        packageId = "iota-light-client";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "iota-macros" = rec {
      packageId = "iota-macros";
      build = internal.buildRustCrateWithFeatures {
        packageId = "iota-macros";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "iota-metric-checker" = rec {
      packageId = "iota-metric-checker";
      build = internal.buildRustCrateWithFeatures {
        packageId = "iota-metric-checker";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "iota-metrics" = rec {
      packageId = "iota-metrics";
      build = internal.buildRustCrateWithFeatures {
        packageId = "iota-metrics";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "iota-move" = rec {
      packageId = "iota-move";
      build = internal.buildRustCrateWithFeatures {
        packageId = "iota-move";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "iota-move-build" = rec {
      packageId = "iota-move-build";
      build = internal.buildRustCrateWithFeatures {
        packageId = "iota-move-build";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "iota-move-lsp" = rec {
      packageId = "iota-move-lsp";
      build = internal.buildRustCrateWithFeatures {
        packageId = "iota-move-lsp";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "iota-move-natives-latest" = rec {
      packageId = "iota-move-natives-latest";
      build = internal.buildRustCrateWithFeatures {
        packageId = "iota-move-natives-latest";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "iota-move-natives-v0" = rec {
      packageId = "iota-move-natives-v0";
      build = internal.buildRustCrateWithFeatures {
        packageId = "iota-move-natives-v0";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "iota-network" = rec {
      packageId = "iota-network";
      build = internal.buildRustCrateWithFeatures {
        packageId = "iota-network";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "iota-network-stack" = rec {
      packageId = "iota-network-stack";
      build = internal.buildRustCrateWithFeatures {
        packageId = "iota-network-stack";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "iota-node" = rec {
      packageId = "iota-node";
      build = internal.buildRustCrateWithFeatures {
        packageId = "iota-node";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "iota-open-rpc" = rec {
      packageId = "iota-open-rpc";
      build = internal.buildRustCrateWithFeatures {
        packageId = "iota-open-rpc";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "iota-open-rpc-macros" = rec {
      packageId = "iota-open-rpc-macros";
      build = internal.buildRustCrateWithFeatures {
        packageId = "iota-open-rpc-macros";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "iota-package-dump" = rec {
      packageId = "iota-package-dump";
      build = internal.buildRustCrateWithFeatures {
        packageId = "iota-package-dump";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "iota-package-management" = rec {
      packageId = "iota-package-management";
      build = internal.buildRustCrateWithFeatures {
        packageId = "iota-package-management";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "iota-package-resolver" = rec {
      packageId = "iota-package-resolver";
      build = internal.buildRustCrateWithFeatures {
        packageId = "iota-package-resolver";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "iota-proc-macros" = rec {
      packageId = "iota-proc-macros";
      build = internal.buildRustCrateWithFeatures {
        packageId = "iota-proc-macros";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "iota-protocol-config" = rec {
      packageId = "iota-protocol-config";
      build = internal.buildRustCrateWithFeatures {
        packageId = "iota-protocol-config";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "iota-protocol-config-macros" = rec {
      packageId = "iota-protocol-config-macros";
      build = internal.buildRustCrateWithFeatures {
        packageId = "iota-protocol-config-macros";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "iota-replay" = rec {
      packageId = "iota-replay";
      build = internal.buildRustCrateWithFeatures {
        packageId = "iota-replay";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "iota-rest-api" = rec {
      packageId = "iota-rest-api";
      build = internal.buildRustCrateWithFeatures {
        packageId = "iota-rest-api";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "iota-rosetta" = rec {
      packageId = "iota-rosetta";
      build = internal.buildRustCrateWithFeatures {
        packageId = "iota-rosetta";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "iota-rpc-loadgen" = rec {
      packageId = "iota-rpc-loadgen";
      build = internal.buildRustCrateWithFeatures {
        packageId = "iota-rpc-loadgen";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "iota-sdk" = rec {
      packageId = "iota-sdk 0.5.0-alpha";
      build = internal.buildRustCrateWithFeatures {
        packageId = "iota-sdk 0.5.0-alpha";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "iota-simulator" = rec {
      packageId = "iota-simulator";
      build = internal.buildRustCrateWithFeatures {
        packageId = "iota-simulator";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "iota-single-node-benchmark" = rec {
      packageId = "iota-single-node-benchmark";
      build = internal.buildRustCrateWithFeatures {
        packageId = "iota-single-node-benchmark";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "iota-snapshot" = rec {
      packageId = "iota-snapshot";
      build = internal.buildRustCrateWithFeatures {
        packageId = "iota-snapshot";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "iota-source-validation" = rec {
      packageId = "iota-source-validation";
      build = internal.buildRustCrateWithFeatures {
        packageId = "iota-source-validation";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "iota-source-validation-service" = rec {
      packageId = "iota-source-validation-service";
      build = internal.buildRustCrateWithFeatures {
        packageId = "iota-source-validation-service";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "iota-storage" = rec {
      packageId = "iota-storage";
      build = internal.buildRustCrateWithFeatures {
        packageId = "iota-storage";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "iota-surfer" = rec {
      packageId = "iota-surfer";
      build = internal.buildRustCrateWithFeatures {
        packageId = "iota-surfer";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "iota-swarm" = rec {
      packageId = "iota-swarm";
      build = internal.buildRustCrateWithFeatures {
        packageId = "iota-swarm";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "iota-swarm-config" = rec {
      packageId = "iota-swarm-config";
      build = internal.buildRustCrateWithFeatures {
        packageId = "iota-swarm-config";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "iota-test-transaction-builder" = rec {
      packageId = "iota-test-transaction-builder";
      build = internal.buildRustCrateWithFeatures {
        packageId = "iota-test-transaction-builder";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "iota-tls" = rec {
      packageId = "iota-tls";
      build = internal.buildRustCrateWithFeatures {
        packageId = "iota-tls";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "iota-tool" = rec {
      packageId = "iota-tool";
      build = internal.buildRustCrateWithFeatures {
        packageId = "iota-tool";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "iota-transaction-builder" = rec {
      packageId = "iota-transaction-builder";
      build = internal.buildRustCrateWithFeatures {
        packageId = "iota-transaction-builder";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "iota-transaction-checks" = rec {
      packageId = "iota-transaction-checks";
      build = internal.buildRustCrateWithFeatures {
        packageId = "iota-transaction-checks";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "iota-transactional-test-runner" = rec {
      packageId = "iota-transactional-test-runner";
      build = internal.buildRustCrateWithFeatures {
        packageId = "iota-transactional-test-runner";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "iota-types" = rec {
      packageId = "iota-types";
      build = internal.buildRustCrateWithFeatures {
        packageId = "iota-types";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "iota-upgrade-compatibility-transactional-tests" = rec {
      packageId = "iota-upgrade-compatibility-transactional-tests";
      build = internal.buildRustCrateWithFeatures {
        packageId = "iota-upgrade-compatibility-transactional-tests";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "iota-util-mem" = rec {
      packageId = "iota-util-mem";
      build = internal.buildRustCrateWithFeatures {
        packageId = "iota-util-mem";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "iota-util-mem-derive" = rec {
      packageId = "iota-util-mem-derive";
      build = internal.buildRustCrateWithFeatures {
        packageId = "iota-util-mem-derive";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "iota-verifier-latest" = rec {
      packageId = "iota-verifier-latest";
      build = internal.buildRustCrateWithFeatures {
        packageId = "iota-verifier-latest";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "iota-verifier-transactional-tests" = rec {
      packageId = "iota-verifier-transactional-tests";
      build = internal.buildRustCrateWithFeatures {
        packageId = "iota-verifier-transactional-tests";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "iota-verifier-v0" = rec {
      packageId = "iota-verifier-v0";
      build = internal.buildRustCrateWithFeatures {
        packageId = "iota-verifier-v0";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "prometheus-closure-metric" = rec {
      packageId = "prometheus-closure-metric";
      build = internal.buildRustCrateWithFeatures {
        packageId = "prometheus-closure-metric";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "shared-crypto" = rec {
      packageId = "shared-crypto";
      build = internal.buildRustCrateWithFeatures {
        packageId = "shared-crypto";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "simulacrum" = rec {
      packageId = "simulacrum";
      build = internal.buildRustCrateWithFeatures {
        packageId = "simulacrum";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "telemetry-subscribers" = rec {
      packageId = "telemetry-subscribers";
      build = internal.buildRustCrateWithFeatures {
        packageId = "telemetry-subscribers";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "test-cluster" = rec {
      packageId = "test-cluster";
      build = internal.buildRustCrateWithFeatures {
        packageId = "test-cluster";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "transaction-fuzzer" = rec {
      packageId = "transaction-fuzzer";
      build = internal.buildRustCrateWithFeatures {
        packageId = "transaction-fuzzer";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "typed-store" = rec {
      packageId = "typed-store";
      build = internal.buildRustCrateWithFeatures {
        packageId = "typed-store";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "typed-store-derive" = rec {
      packageId = "typed-store-derive";
      build = internal.buildRustCrateWithFeatures {
        packageId = "typed-store-derive";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "typed-store-error" = rec {
      packageId = "typed-store-error";
      build = internal.buildRustCrateWithFeatures {
        packageId = "typed-store-error";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "typed-store-workspace-hack" = rec {
      packageId = "typed-store-workspace-hack";
      build = internal.buildRustCrateWithFeatures {
        packageId = "typed-store-workspace-hack";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
  };

  # A derivation that joins the outputs of all workspace members together.
  allWorkspaceMembers = pkgs.symlinkJoin {
      name = "all-workspace-members";
      paths =
        let members = builtins.attrValues workspaceMembers;
        in builtins.map (m: m.build) members;
  };

  #
  # "internal" ("private") attributes that may change in every new version of crate2nix.
  #

  internal = rec {
    # Build and dependency information for crates.
    # Many of the fields are passed one-to-one to buildRustCrate.
    #
    # Noteworthy:
    # * `dependencies`/`buildDependencies`: similar to the corresponding fields for buildRustCrate.
    #   but with additional information which is used during dependency/feature resolution.
    # * `resolvedDependencies`: the selected default features reported by cargo - only included for debugging.
    # * `devDependencies` as of now not used by `buildRustCrate` but used to
    #   inject test dependencies into the build

    crates = {
      "Inflector" = rec {
        crateName = "Inflector";
        version = "0.11.4";
        edition = "2015";
        sha256 = "1lqmcni21ifzyq41fhz6k1j2b23cmsx469s4g4sf01l78miqqhzy";
        libName = "inflector";
        authors = [
          "Josh Teeter<joshteeter@gmail.com>"
        ];
        dependencies = [
          {
            name = "lazy_static";
            packageId = "lazy_static";
            optional = true;
          }
          {
            name = "regex";
            packageId = "regex";
            optional = true;
          }
        ];
        features = {
          "default" = [ "heavyweight" ];
          "heavyweight" = [ "regex" "lazy_static" ];
          "lazy_static" = [ "dep:lazy_static" ];
          "regex" = [ "dep:regex" ];
        };
        resolvedDefaultFeatures = [ "default" "heavyweight" "lazy_static" "regex" ];
      };
      "addchain" = rec {
        crateName = "addchain";
        version = "0.2.0";
        edition = "2018";
        sha256 = "0w45hpybsx9gzhlxf6x9451kycg8xwj3x8qzjnk8wqm55926jbiv";
        authors = [
          "Jack Grigg <thestr4d@gmail.com>"
        ];
        dependencies = [
          {
            name = "num-bigint";
            packageId = "num-bigint 0.3.3";
          }
          {
            name = "num-integer";
            packageId = "num-integer";
          }
          {
            name = "num-traits";
            packageId = "num-traits";
          }
        ];

      };
      "addr2line" = rec {
        crateName = "addr2line";
        version = "0.21.0";
        edition = "2018";
        sha256 = "1jx0k3iwyqr8klqbzk6kjvr496yd94aspis10vwsj5wy7gib4c4a";
        dependencies = [
          {
            name = "gimli";
            packageId = "gimli";
            usesDefaultFeatures = false;
            features = [ "read" ];
          }
        ];
        features = {
          "alloc" = [ "dep:alloc" ];
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "cpp_demangle" = [ "dep:cpp_demangle" ];
          "default" = [ "rustc-demangle" "cpp_demangle" "std-object" "fallible-iterator" "smallvec" "memmap2" ];
          "fallible-iterator" = [ "dep:fallible-iterator" ];
          "memmap2" = [ "dep:memmap2" ];
          "object" = [ "dep:object" ];
          "rustc-demangle" = [ "dep:rustc-demangle" ];
          "rustc-dep-of-std" = [ "core" "alloc" "compiler_builtins" "gimli/rustc-dep-of-std" ];
          "smallvec" = [ "dep:smallvec" ];
          "std" = [ "gimli/std" ];
          "std-object" = [ "std" "object" "object/std" "object/compression" "gimli/endian-reader" ];
        };
      };
      "adler" = rec {
        crateName = "adler";
        version = "1.0.2";
        edition = "2015";
        sha256 = "1zim79cvzd5yrkzl3nyfx0avijwgk9fqv3yrscdy1cc79ih02qpj";
        authors = [
          "Jonas Schievink <jonasschievink@gmail.com>"
        ];
        features = {
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "default" = [ "std" ];
          "rustc-dep-of-std" = [ "core" "compiler_builtins" ];
        };
      };
      "adler2" = rec {
        crateName = "adler2";
        version = "2.0.0";
        edition = "2021";
        sha256 = "09r6drylvgy8vv8k20lnbvwq8gp09h7smfn6h1rxsy15pgh629si";
        authors = [
          "Jonas Schievink <jonasschievink@gmail.com>"
          "oyvindln <oyvindln@users.noreply.github.com>"
        ];
        features = {
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "default" = [ "std" ];
          "rustc-dep-of-std" = [ "core" "compiler_builtins" ];
        };
      };
      "adler32" = rec {
        crateName = "adler32";
        version = "1.2.0";
        edition = "2018";
        sha256 = "0d7jq7jsjyhsgbhnfq5fvrlh9j0i9g1fqrl2735ibv5f75yjgqda";
        authors = [
          "Remi Rampin <remirampin@gmail.com>"
        ];
        features = {
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "default" = [ "std" ];
          "rustc-dep-of-std" = [ "core" "compiler_builtins" ];
        };
      };
      "aead" = rec {
        crateName = "aead";
        version = "0.5.2";
        edition = "2021";
        sha256 = "1c32aviraqag7926xcb9sybdm36v5vh9gnxpn4pxdwjc50zl28ni";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "crypto-common";
            packageId = "crypto-common";
          }
          {
            name = "generic-array";
            packageId = "generic-array";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "arrayvec" = [ "dep:arrayvec" ];
          "blobby" = [ "dep:blobby" ];
          "bytes" = [ "dep:bytes" ];
          "default" = [ "rand_core" ];
          "dev" = [ "blobby" ];
          "getrandom" = [ "crypto-common/getrandom" "rand_core" ];
          "heapless" = [ "dep:heapless" ];
          "rand_core" = [ "crypto-common/rand_core" ];
          "std" = [ "alloc" "crypto-common/std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "getrandom" "rand_core" ];
      };
      "aes" = rec {
        crateName = "aes";
        version = "0.8.4";
        edition = "2021";
        sha256 = "1853796anlwp4kqim0s6wm1srl4ib621nm0cl2h3c8klsjkgfsdi";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "cipher";
            packageId = "cipher";
          }
          {
            name = "cpufeatures";
            packageId = "cpufeatures";
            target = { target, features }: (("aarch64" == target."arch" or null) || ("x86_64" == target."arch" or null) || ("x86" == target."arch" or null));
          }
        ];
        devDependencies = [
          {
            name = "cipher";
            packageId = "cipher";
            features = [ "dev" ];
          }
        ];
        features = {
          "zeroize" = [ "dep:zeroize" ];
        };
      };
      "aes-gcm" = rec {
        crateName = "aes-gcm";
        version = "0.10.3";
        edition = "2021";
        sha256 = "1lgaqgg1gh9crg435509lqdhajg1m2vgma6f7fdj1qa2yyh10443";
        libName = "aes_gcm";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "aead";
            packageId = "aead";
            usesDefaultFeatures = false;
          }
          {
            name = "aes";
            packageId = "aes";
            optional = true;
          }
          {
            name = "cipher";
            packageId = "cipher";
          }
          {
            name = "ctr";
            packageId = "ctr";
          }
          {
            name = "ghash";
            packageId = "ghash";
            usesDefaultFeatures = false;
          }
          {
            name = "subtle";
            packageId = "subtle";
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "aead";
            packageId = "aead";
            usesDefaultFeatures = false;
            features = [ "dev" ];
          }
        ];
        features = {
          "aes" = [ "dep:aes" ];
          "alloc" = [ "aead/alloc" ];
          "arrayvec" = [ "aead/arrayvec" ];
          "default" = [ "aes" "alloc" "getrandom" ];
          "getrandom" = [ "aead/getrandom" "rand_core" ];
          "heapless" = [ "aead/heapless" ];
          "rand_core" = [ "aead/rand_core" ];
          "std" = [ "aead/std" "alloc" ];
          "stream" = [ "aead/stream" ];
          "zeroize" = [ "dep:zeroize" ];
        };
        resolvedDefaultFeatures = [ "aes" "alloc" "default" "getrandom" "rand_core" ];
      };
      "ahash 0.7.8" = rec {
        crateName = "ahash";
        version = "0.7.8";
        edition = "2018";
        sha256 = "1y9014qsy6gs9xld4ch7a6xi9bpki8vaciawxq4p75d8qvh7f549";
        authors = [
          "Tom Kaitchuck <Tom.Kaitchuck@gmail.com>"
        ];
        dependencies = [
          {
            name = "getrandom";
            packageId = "getrandom 0.2.15";
            target = { target, features }: (("linux" == target."os" or null) || ("android" == target."os" or null) || ("windows" == target."os" or null) || ("macos" == target."os" or null) || ("ios" == target."os" or null) || ("freebsd" == target."os" or null) || ("openbsd" == target."os" or null) || ("netbsd" == target."os" or null) || ("dragonfly" == target."os" or null) || ("solaris" == target."os" or null) || ("illumos" == target."os" or null) || ("fuchsia" == target."os" or null) || ("redox" == target."os" or null) || ("cloudabi" == target."os" or null) || ("haiku" == target."os" or null) || ("vxworks" == target."os" or null) || ("emscripten" == target."os" or null) || ("wasi" == target."os" or null));
          }
          {
            name = "once_cell";
            packageId = "once_cell";
            usesDefaultFeatures = false;
            target = { target, features }: (!(("arm" == target."arch" or null) && ("none" == target."os" or null)));
            features = [ "alloc" ];
          }
        ];
        buildDependencies = [
          {
            name = "version_check";
            packageId = "version_check";
          }
        ];
        features = {
          "atomic-polyfill" = [ "dep:atomic-polyfill" "once_cell/atomic-polyfill" ];
          "compile-time-rng" = [ "const-random" ];
          "const-random" = [ "dep:const-random" ];
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
        };
      };
      "ahash 0.8.11" = rec {
        crateName = "ahash";
        version = "0.8.11";
        edition = "2018";
        sha256 = "04chdfkls5xmhp1d48gnjsmglbqibizs3bpbj6rsj604m10si7g8";
        authors = [
          "Tom Kaitchuck <Tom.Kaitchuck@gmail.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "const-random";
            packageId = "const-random";
            optional = true;
          }
          {
            name = "getrandom";
            packageId = "getrandom 0.2.15";
            optional = true;
          }
          {
            name = "once_cell";
            packageId = "once_cell";
            usesDefaultFeatures = false;
            target = { target, features }: (!(("arm" == target."arch" or null) && ("none" == target."os" or null)));
            features = [ "alloc" ];
          }
          {
            name = "zerocopy";
            packageId = "zerocopy";
            usesDefaultFeatures = false;
            features = [ "simd" ];
          }
        ];
        buildDependencies = [
          {
            name = "version_check";
            packageId = "version_check";
          }
        ];
        features = {
          "atomic-polyfill" = [ "dep:atomic-polyfill" "once_cell/atomic-polyfill" ];
          "compile-time-rng" = [ "const-random" ];
          "const-random" = [ "dep:const-random" ];
          "default" = [ "std" "runtime-rng" ];
          "getrandom" = [ "dep:getrandom" ];
          "runtime-rng" = [ "getrandom" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "compile-time-rng" "const-random" "default" "getrandom" "runtime-rng" "std" ];
      };
      "aho-corasick" = rec {
        crateName = "aho-corasick";
        version = "1.1.3";
        edition = "2021";
        sha256 = "05mrpkvdgp5d20y2p989f187ry9diliijgwrs254fs9s1m1x6q4f";
        libName = "aho_corasick";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "memchr";
            packageId = "memchr";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" "perf-literal" ];
          "logging" = [ "dep:log" ];
          "perf-literal" = [ "dep:memchr" ];
          "std" = [ "memchr?/std" ];
        };
        resolvedDefaultFeatures = [ "perf-literal" "std" ];
      };
      "aliasable" = rec {
        crateName = "aliasable";
        version = "0.1.3";
        edition = "2018";
        sha256 = "1z8548zdjlm4ps1k0d7x68lfdyji02crwcc9rw3q3bb106f643r5";
        authors = [
          "avitex <avitex@wfxlabs.com>"
        ];
        features = {
          "aliasable_deref_trait" = [ "dep:aliasable_deref_trait" ];
          "default" = [ "alloc" ];
          "stable_deref_trait" = [ "dep:stable_deref_trait" ];
          "traits" = [ "stable_deref_trait" "aliasable_deref_trait" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" ];
      };
      "alloc-no-stdlib" = rec {
        crateName = "alloc-no-stdlib";
        version = "2.0.4";
        edition = "2015";
        crateBin = [];
        sha256 = "1cy6r2sfv5y5cigv86vms7n5nlwhx1rbyxwcraqnmm1rxiib2yyc";
        libName = "alloc_no_stdlib";
        authors = [
          "Daniel Reiter Horn <danielrh@dropbox.com>"
        ];
        features = {
        };
      };
      "alloc-stdlib" = rec {
        crateName = "alloc-stdlib";
        version = "0.2.2";
        edition = "2015";
        crateBin = [];
        sha256 = "1kkfbld20ab4165p29v172h8g0wvq8i06z8vnng14whw0isq5ywl";
        libName = "alloc_stdlib";
        authors = [
          "Daniel Reiter Horn <danielrh@dropbox.com>"
        ];
        dependencies = [
          {
            name = "alloc-no-stdlib";
            packageId = "alloc-no-stdlib";
          }
        ];
        features = {
        };
      };
      "allocator-api2" = rec {
        crateName = "allocator-api2";
        version = "0.2.18";
        edition = "2018";
        sha256 = "0kr6lfnxvnj164j1x38g97qjlhb7akppqzvgfs0697140ixbav2w";
        libName = "allocator_api2";
        authors = [
          "Zakarum <zaq.dev@icloud.com>"
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" ];
      };
      "android-tzdata" = rec {
        crateName = "android-tzdata";
        version = "0.1.1";
        edition = "2018";
        sha256 = "1w7ynjxrfs97xg3qlcdns4kgfpwcdv824g611fq32cag4cdr96g9";
        libName = "android_tzdata";
        authors = [
          "RumovZ"
        ];

      };
      "android_system_properties" = rec {
        crateName = "android_system_properties";
        version = "0.1.5";
        edition = "2018";
        sha256 = "04b3wrz12837j7mdczqd95b732gw5q7q66cv4yn4646lvccp57l1";
        authors = [
          "Nicolas Silva <nical@fastmail.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
        ];

      };
      "anemo" = rec {
        crateName = "anemo";
        version = "0.0.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/mystenlabs/anemo.git";
          rev = "dbb5a074c2d25660525ab5d36d65ff0cb8051949";
          sha256 = "19v8kjhmnqq66lpbnjfp802r3l6jr4mc06ilgg6709x6jacvklr6";
        };
        authors = [
          "Brandon Williams <bwilliamseng@gmail.com>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "bincode";
            packageId = "bincode";
          }
          {
            name = "bytes";
            packageId = "bytes";
            features = [ "serde" ];
          }
          {
            name = "ed25519";
            packageId = "ed25519 1.5.3";
            features = [ "pkcs8" "alloc" "zeroize" ];
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "hex";
            packageId = "hex";
          }
          {
            name = "http";
            packageId = "http 1.1.0";
          }
          {
            name = "matchit";
            packageId = "matchit 0.5.0";
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "pkcs8";
            packageId = "pkcs8 0.9.0";
            features = [ "std" ];
          }
          {
            name = "quinn";
            packageId = "quinn";
            usesDefaultFeatures = false;
            features = [ "runtime-tokio" "rustls" "futures-io" ];
          }
          {
            name = "quinn-proto";
            packageId = "quinn-proto";
            usesDefaultFeatures = false;
            features = [ "rustls" ];
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "rcgen";
            packageId = "rcgen";
          }
          {
            name = "ring";
            packageId = "ring 0.17.8";
          }
          {
            name = "rustls";
            packageId = "rustls 0.23.13";
            usesDefaultFeatures = false;
            features = [ "std" "tls12" "ring" ];
          }
          {
            name = "rustls-webpki";
            packageId = "rustls-webpki 0.102.8";
            rename = "webpki";
            features = [ "alloc" "std" ];
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "socket2";
            packageId = "socket2";
          }
          {
            name = "tap";
            packageId = "tap";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "sync" "rt" "macros" "io-util" ];
          }
          {
            name = "tokio-util";
            packageId = "tokio-util 0.7.12";
            features = [ "codec" ];
          }
          {
            name = "tower";
            packageId = "tower 0.4.13";
            usesDefaultFeatures = false;
            features = [ "full" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "x509-parser";
            packageId = "x509-parser";
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "full" "test-util" ];
          }
        ];

      };
      "anemo-build" = rec {
        crateName = "anemo-build";
        version = "0.0.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/mystenlabs/anemo.git";
          rev = "dbb5a074c2d25660525ab5d36d65ff0cb8051949";
          sha256 = "19v8kjhmnqq66lpbnjfp802r3l6jr4mc06ilgg6709x6jacvklr6";
        };
        libName = "anemo_build";
        authors = [
          "Brandon Williams <bwilliamseng@gmail.com>"
        ];
        dependencies = [
          {
            name = "prettyplease";
            packageId = "prettyplease";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.86";
          }
          {
            name = "quote";
            packageId = "quote 1.0.37";
          }
          {
            name = "syn";
            packageId = "syn 2.0.77";
          }
        ];

      };
      "anemo-cli" = rec {
        crateName = "anemo-cli";
        version = "0.0.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/mystenlabs/anemo.git";
          rev = "dbb5a074c2d25660525ab5d36d65ff0cb8051949";
          sha256 = "19v8kjhmnqq66lpbnjfp802r3l6jr4mc06ilgg6709x6jacvklr6";
        };
        libName = "anemo_cli";
        authors = [
          "Andrew Schran <aschran@mystenlabs.com>"
        ];
        dependencies = [
          {
            name = "anemo";
            packageId = "anemo";
          }
          {
            name = "anemo-tower";
            packageId = "anemo-tower";
          }
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "clap";
            packageId = "clap";
            features = [ "derive" ];
          }
          {
            name = "dashmap";
            packageId = "dashmap";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "sync" "rt" "macros" "io-util" ];
          }
          {
            name = "tower";
            packageId = "tower 0.4.13";
            features = [ "full" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "full" ];
          }
        ];

      };
      "anemo-tower" = rec {
        crateName = "anemo-tower";
        version = "0.0.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/mystenlabs/anemo.git";
          rev = "dbb5a074c2d25660525ab5d36d65ff0cb8051949";
          sha256 = "19v8kjhmnqq66lpbnjfp802r3l6jr4mc06ilgg6709x6jacvklr6";
        };
        libName = "anemo_tower";
        authors = [
          "Brandon Williams <bwilliamseng@gmail.com>"
        ];
        dependencies = [
          {
            name = "anemo";
            packageId = "anemo";
          }
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "dashmap";
            packageId = "dashmap";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "governor";
            packageId = "governor";
          }
          {
            name = "nonzero_ext";
            packageId = "nonzero_ext";
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "sync" "rt" "macros" "io-util" ];
          }
          {
            name = "tower";
            packageId = "tower 0.4.13";
            usesDefaultFeatures = false;
            features = [ "full" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "uuid";
            packageId = "uuid 1.10.0";
            features = [ "v4" ];
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "full" ];
          }
        ];

      };
      "anes" = rec {
        crateName = "anes";
        version = "0.1.6";
        edition = "2018";
        sha256 = "16bj1ww1xkwzbckk32j2pnbn5vk6wgsl3q4p3j9551xbcarwnijb";
        authors = [
          "Robert Vojta <rvojta@me.com>"
        ];
        features = {
          "bitflags" = [ "dep:bitflags" ];
          "parser" = [ "bitflags" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "anstream" = rec {
        crateName = "anstream";
        version = "0.6.15";
        edition = "2021";
        sha256 = "09nm4qj34kiwgzczdvj14x7hgsb235g4sqsay3xsz7zqn4d5rqb4";
        dependencies = [
          {
            name = "anstyle";
            packageId = "anstyle";
          }
          {
            name = "anstyle-parse";
            packageId = "anstyle-parse";
          }
          {
            name = "anstyle-query";
            packageId = "anstyle-query";
            optional = true;
          }
          {
            name = "anstyle-wincon";
            packageId = "anstyle-wincon";
            optional = true;
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "colorchoice";
            packageId = "colorchoice";
          }
          {
            name = "is_terminal_polyfill";
            packageId = "is_terminal_polyfill";
          }
          {
            name = "utf8parse";
            packageId = "utf8parse";
          }
        ];
        features = {
          "auto" = [ "dep:anstyle-query" ];
          "default" = [ "auto" "wincon" ];
          "wincon" = [ "dep:anstyle-wincon" ];
        };
        resolvedDefaultFeatures = [ "auto" "default" "wincon" ];
      };
      "anstyle" = rec {
        crateName = "anstyle";
        version = "1.0.8";
        edition = "2021";
        sha256 = "1cfmkza63xpn1kkz844mgjwm9miaiz4jkyczmwxzivcsypk1vv0v";
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "anstyle-parse" = rec {
        crateName = "anstyle-parse";
        version = "0.2.5";
        edition = "2021";
        sha256 = "1jy12rvgbldflnb2x7mcww9dcffw1mx22nyv6p3n7d62h0gdwizb";
        libName = "anstyle_parse";
        dependencies = [
          {
            name = "utf8parse";
            packageId = "utf8parse";
            optional = true;
          }
        ];
        features = {
          "core" = [ "dep:arrayvec" ];
          "default" = [ "utf8" ];
          "utf8" = [ "dep:utf8parse" ];
        };
        resolvedDefaultFeatures = [ "default" "utf8" ];
      };
      "anstyle-query" = rec {
        crateName = "anstyle-query";
        version = "1.1.1";
        edition = "2021";
        sha256 = "0aj22iy4pzk6mz745sfrm1ym14r0y892jhcrbs8nkj7nqx9gqdkd";
        libName = "anstyle_query";
        dependencies = [
          {
            name = "windows-sys";
            packageId = "windows-sys 0.52.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_System_Console" "Win32_Foundation" ];
          }
        ];

      };
      "anstyle-wincon" = rec {
        crateName = "anstyle-wincon";
        version = "3.0.4";
        edition = "2021";
        sha256 = "1y2pkvsrdxbcwircahb4wimans2pzmwwxad7ikdhj5lpdqdlxxsv";
        libName = "anstyle_wincon";
        dependencies = [
          {
            name = "anstyle";
            packageId = "anstyle";
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.52.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_System_Console" "Win32_Foundation" ];
          }
        ];

      };
      "anyhow" = rec {
        crateName = "anyhow";
        version = "1.0.89";
        edition = "2018";
        sha256 = "1xh1vg89n56h6nqikcmgbpmkixjds33492klrp9m96xrbmhgizc6";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "backtrace";
            packageId = "backtrace";
            optional = true;
          }
        ];
        features = {
          "backtrace" = [ "dep:backtrace" ];
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "backtrace" "default" "std" ];
      };
      "arbitrary" = rec {
        crateName = "arbitrary";
        version = "1.3.2";
        edition = "2021";
        sha256 = "0471f0c4f1bgibhyhf8vnapkp158h1nkrzx0wnq97jwd9n0jcnkx";
        authors = [
          "The Rust-Fuzz Project Developers"
          "Nick Fitzgerald <fitzgen@gmail.com>"
          "Manish Goregaokar <manishsmail@gmail.com>"
          "Simonas Kazlauskas <arbitrary@kazlauskas.me>"
          "Brian L. Troutwine <brian@troutwine.us>"
          "Corey Farwell <coreyf@rwell.org>"
        ];
        dependencies = [
          {
            name = "derive_arbitrary";
            packageId = "derive_arbitrary";
            optional = true;
          }
        ];
        features = {
          "derive" = [ "derive_arbitrary" ];
          "derive_arbitrary" = [ "dep:derive_arbitrary" ];
        };
        resolvedDefaultFeatures = [ "derive" "derive_arbitrary" ];
      };
      "arc-swap" = rec {
        crateName = "arc-swap";
        version = "1.7.1";
        edition = "2018";
        sha256 = "0mrl9a9r9p9bln74q6aszvf22q1ijiw089jkrmabfqkbj31zixv9";
        libName = "arc_swap";
        authors = [
          "Michal 'vorner' Vaner <vorner@vorner.cz>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            features = [ "rc" ];
          }
        ];
        features = {
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "serde" ];
      };
      "ark-bls12-381" = rec {
        crateName = "ark-bls12-381";
        version = "0.4.0";
        edition = "2021";
        sha256 = "127lmg29wz42jcvsb2ls8k3q21x5nrxm9syawjmagjv9478z0xf7";
        libName = "ark_bls12_381";
        authors = [
          "arkworks contributors"
        ];
        dependencies = [
          {
            name = "ark-ec";
            packageId = "ark-ec";
          }
          {
            name = "ark-ff";
            packageId = "ark-ff";
            usesDefaultFeatures = false;
          }
          {
            name = "ark-serialize";
            packageId = "ark-serialize";
            usesDefaultFeatures = false;
          }
          {
            name = "ark-std";
            packageId = "ark-std";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "curve" = [ "scalar_field" ];
          "default" = [ "curve" ];
          "std" = [ "ark-std/std" "ark-ff/std" "ark-ec/std" ];
        };
        resolvedDefaultFeatures = [ "curve" "default" "scalar_field" ];
      };
      "ark-bn254" = rec {
        crateName = "ark-bn254";
        version = "0.4.0";
        edition = "2021";
        sha256 = "03qjfa4zvfkv974z7xr1s8q28ncgvz2x9mvq1mclknaca9hlabx2";
        libName = "ark_bn254";
        authors = [
          "arkworks contributors"
        ];
        dependencies = [
          {
            name = "ark-ec";
            packageId = "ark-ec";
            usesDefaultFeatures = false;
          }
          {
            name = "ark-ff";
            packageId = "ark-ff";
            usesDefaultFeatures = false;
          }
          {
            name = "ark-std";
            packageId = "ark-std";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "curve" = [ "scalar_field" ];
          "default" = [ "curve" ];
          "std" = [ "ark-std/std" "ark-ff/std" "ark-ec/std" ];
        };
        resolvedDefaultFeatures = [ "curve" "default" "scalar_field" ];
      };
      "ark-crypto-primitives" = rec {
        crateName = "ark-crypto-primitives";
        version = "0.4.0";
        edition = "2021";
        sha256 = "0mhs3z75aknslcqy0b0rn70sgfpzzlri4w5spal7d4d09nri6fhz";
        libName = "ark_crypto_primitives";
        authors = [
          "arkworks contributors"
        ];
        dependencies = [
          {
            name = "ark-ec";
            packageId = "ark-ec";
            usesDefaultFeatures = false;
          }
          {
            name = "ark-ff";
            packageId = "ark-ff";
            usesDefaultFeatures = false;
          }
          {
            name = "ark-relations";
            packageId = "ark-relations";
            usesDefaultFeatures = false;
          }
          {
            name = "ark-serialize";
            packageId = "ark-serialize";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "ark-snark";
            packageId = "ark-snark";
            usesDefaultFeatures = false;
          }
          {
            name = "ark-std";
            packageId = "ark-std";
            usesDefaultFeatures = false;
          }
          {
            name = "blake2";
            packageId = "blake2";
            usesDefaultFeatures = false;
          }
          {
            name = "derivative";
            packageId = "derivative";
            features = [ "use_core" ];
          }
          {
            name = "digest";
            packageId = "digest 0.10.7";
            usesDefaultFeatures = false;
          }
          {
            name = "sha2";
            packageId = "sha2 0.10.8";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "ark-r1cs-std" = [ "dep:ark-r1cs-std" ];
          "commitment" = [ "crh" ];
          "crh" = [ "sponge" ];
          "default" = [ "std" ];
          "merkle_tree" = [ "crh" ];
          "parallel" = [ "std" "rayon" "ark-ec/parallel" "ark-std/parallel" "ark-ff/parallel" ];
          "print-trace" = [ "ark-std/print-trace" ];
          "r1cs" = [ "ark-r1cs-std" "tracing" ];
          "rayon" = [ "dep:rayon" ];
          "std" = [ "ark-ff/std" "ark-ec/std" "ark-std/std" "ark-relations/std" ];
          "tracing" = [ "dep:tracing" ];
        };
        resolvedDefaultFeatures = [ "snark" ];
      };
      "ark-ec" = rec {
        crateName = "ark-ec";
        version = "0.4.2";
        edition = "2021";
        sha256 = "1fkh0rswp4d5rn4hmmbibz2wh6x6k3sp21faijb29b2nkm1rmzfy";
        libName = "ark_ec";
        authors = [
          "arkworks contributors"
        ];
        dependencies = [
          {
            name = "ark-ff";
            packageId = "ark-ff";
            usesDefaultFeatures = false;
          }
          {
            name = "ark-poly";
            packageId = "ark-poly";
            usesDefaultFeatures = false;
          }
          {
            name = "ark-serialize";
            packageId = "ark-serialize";
            usesDefaultFeatures = false;
          }
          {
            name = "ark-std";
            packageId = "ark-std";
            usesDefaultFeatures = false;
          }
          {
            name = "derivative";
            packageId = "derivative";
            features = [ "use_core" ];
          }
          {
            name = "hashbrown";
            packageId = "hashbrown 0.13.2";
          }
          {
            name = "itertools";
            packageId = "itertools 0.10.5";
            usesDefaultFeatures = false;
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            usesDefaultFeatures = false;
            features = [ "zeroize_derive" ];
          }
        ];
        features = {
          "parallel" = [ "std" "rayon" "ark-std/parallel" ];
          "rayon" = [ "dep:rayon" ];
          "std" = [ "ark-std/std" "ark-ff/std" "ark-serialize/std" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "ark-ff" = rec {
        crateName = "ark-ff";
        version = "0.4.2";
        edition = "2021";
        sha256 = "1fk6546nddgs3lsnv1s06fh8mnik5h1ijmck928d4jpla3w7m17c";
        libName = "ark_ff";
        authors = [
          "arkworks contributors"
        ];
        dependencies = [
          {
            name = "ark-ff-asm";
            packageId = "ark-ff-asm";
          }
          {
            name = "ark-ff-macros";
            packageId = "ark-ff-macros";
          }
          {
            name = "ark-serialize";
            packageId = "ark-serialize";
            usesDefaultFeatures = false;
          }
          {
            name = "ark-std";
            packageId = "ark-std";
            usesDefaultFeatures = false;
          }
          {
            name = "derivative";
            packageId = "derivative";
            features = [ "use_core" ];
          }
          {
            name = "digest";
            packageId = "digest 0.10.7";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "itertools";
            packageId = "itertools 0.10.5";
            usesDefaultFeatures = false;
          }
          {
            name = "num-bigint";
            packageId = "num-bigint 0.4.6";
            usesDefaultFeatures = false;
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
          {
            name = "paste";
            packageId = "paste";
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            usesDefaultFeatures = false;
            features = [ "zeroize_derive" ];
          }
        ];
        buildDependencies = [
          {
            name = "rustc_version";
            packageId = "rustc_version";
          }
        ];
        features = {
          "parallel" = [ "std" "rayon" "ark-std/parallel" ];
          "rayon" = [ "dep:rayon" ];
          "std" = [ "ark-std/std" "ark-serialize/std" "itertools/use_std" ];
        };
        resolvedDefaultFeatures = [ "asm" "default" ];
      };
      "ark-ff-asm" = rec {
        crateName = "ark-ff-asm";
        version = "0.4.2";
        edition = "2021";
        sha256 = "0j13p6ymma3ypbjipfkc937pn57as8qpwgrpg5nvrl2mw97smm1y";
        procMacro = true;
        libName = "ark_ff_asm";
        authors = [
          "arkworks contributors"
        ];
        dependencies = [
          {
            name = "quote";
            packageId = "quote 1.0.37";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            features = [ "full" "parsing" "extra-traits" ];
          }
        ];

      };
      "ark-ff-macros" = rec {
        crateName = "ark-ff-macros";
        version = "0.4.2";
        edition = "2021";
        sha256 = "0ra5a4paqbqqlc9a3cnwkwxh7l1411wsnna1az28k218wjq7kgks";
        procMacro = true;
        libName = "ark_ff_macros";
        authors = [
          "arkworks contributors"
        ];
        dependencies = [
          {
            name = "num-bigint";
            packageId = "num-bigint 0.4.6";
            usesDefaultFeatures = false;
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.86";
          }
          {
            name = "quote";
            packageId = "quote 1.0.37";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            features = [ "full" "parsing" "extra-traits" ];
          }
        ];

      };
      "ark-groth16" = rec {
        crateName = "ark-groth16";
        version = "0.4.0";
        edition = "2021";
        sha256 = "1z4m3d89m04hwbh0j87hncwydcwk66y29wfby68f7hs872lazki0";
        libName = "ark_groth16";
        authors = [
          "arkworks contributors"
        ];
        dependencies = [
          {
            name = "ark-crypto-primitives";
            packageId = "ark-crypto-primitives";
            usesDefaultFeatures = false;
            features = [ "snark" ];
          }
          {
            name = "ark-ec";
            packageId = "ark-ec";
            usesDefaultFeatures = false;
          }
          {
            name = "ark-ff";
            packageId = "ark-ff";
            usesDefaultFeatures = false;
          }
          {
            name = "ark-poly";
            packageId = "ark-poly";
            usesDefaultFeatures = false;
          }
          {
            name = "ark-relations";
            packageId = "ark-relations";
            usesDefaultFeatures = false;
          }
          {
            name = "ark-serialize";
            packageId = "ark-serialize";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "ark-std";
            packageId = "ark-std";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "ark-r1cs-std" = [ "dep:ark-r1cs-std" ];
          "default" = [ "parallel" ];
          "derivative" = [ "dep:derivative" ];
          "parallel" = [ "std" "ark-ff/parallel" "ark-poly/parallel" "ark-ec/parallel" "ark-crypto-primitives/parallel" "ark-std/parallel" "rayon" ];
          "print-trace" = [ "ark-std/print-trace" ];
          "r1cs" = [ "ark-crypto-primitives/r1cs" "ark-r1cs-std" "tracing" "derivative" ];
          "rayon" = [ "dep:rayon" ];
          "std" = [ "ark-ff/std" "ark-ec/std" "ark-poly/std" "ark-relations/std" "ark-crypto-primitives/std" "ark-std/std" ];
          "tracing" = [ "dep:tracing" ];
        };
      };
      "ark-poly" = rec {
        crateName = "ark-poly";
        version = "0.4.2";
        edition = "2021";
        sha256 = "1gw6zrbl1rx1jwcnwwaq2p727fda66yaipxsrjcxi1g19v2by86k";
        libName = "ark_poly";
        authors = [
          "arkworks contributors"
        ];
        dependencies = [
          {
            name = "ark-ff";
            packageId = "ark-ff";
            usesDefaultFeatures = false;
          }
          {
            name = "ark-serialize";
            packageId = "ark-serialize";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "ark-std";
            packageId = "ark-std";
            usesDefaultFeatures = false;
          }
          {
            name = "derivative";
            packageId = "derivative";
            usesDefaultFeatures = false;
            features = [ "use_core" ];
          }
          {
            name = "hashbrown";
            packageId = "hashbrown 0.13.2";
          }
        ];
        features = {
          "parallel" = [ "std" "ark-ff/parallel" "rayon" "ark-std/parallel" ];
          "rayon" = [ "dep:rayon" ];
          "std" = [ "ark-std/std" "ark-ff/std" ];
        };
      };
      "ark-relations" = rec {
        crateName = "ark-relations";
        version = "0.4.0";
        edition = "2021";
        sha256 = "1w5l3zri5wdahrbjv1whqgkq3257rnibd7754n1g98q5zip6ny80";
        libName = "ark_relations";
        authors = [
          "arkworks contributors"
        ];
        dependencies = [
          {
            name = "ark-ff";
            packageId = "ark-ff";
            usesDefaultFeatures = false;
          }
          {
            name = "ark-std";
            packageId = "ark-std";
            usesDefaultFeatures = false;
          }
          {
            name = "tracing";
            packageId = "tracing";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "std" = [ "ark-std/std" "ark-ff/std" "tracing-subscriber" "tracing/std" ];
          "tracing-subscriber" = [ "dep:tracing-subscriber" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "ark-secp256r1" = rec {
        crateName = "ark-secp256r1";
        version = "0.4.0";
        edition = "2021";
        sha256 = "0czni3bpqfx3rkszd0arz9rgq836i9cshz7cf87swgkf18ds0x9r";
        libName = "ark_secp256r1";
        authors = [
          "arkworks contributors"
        ];
        dependencies = [
          {
            name = "ark-ec";
            packageId = "ark-ec";
            usesDefaultFeatures = false;
          }
          {
            name = "ark-ff";
            packageId = "ark-ff";
            usesDefaultFeatures = false;
          }
          {
            name = "ark-std";
            packageId = "ark-std";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "ark-r1cs-std" = [ "dep:ark-r1cs-std" ];
          "r1cs" = [ "ark-r1cs-std" ];
          "std" = [ "ark-std/std" "ark-ff/std" "ark-ec/std" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "ark-serialize" = rec {
        crateName = "ark-serialize";
        version = "0.4.2";
        edition = "2021";
        sha256 = "1992x2cd05pw3v5hfqnb8114g2cwdk3cmmcvz0i2ygdq09dbidxd";
        libName = "ark_serialize";
        authors = [
          "arkworks contributors"
        ];
        dependencies = [
          {
            name = "ark-serialize-derive";
            packageId = "ark-serialize-derive";
            optional = true;
          }
          {
            name = "ark-std";
            packageId = "ark-std";
            usesDefaultFeatures = false;
          }
          {
            name = "digest";
            packageId = "digest 0.10.7";
            usesDefaultFeatures = false;
          }
          {
            name = "num-bigint";
            packageId = "num-bigint 0.4.6";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "ark-serialize-derive" = [ "dep:ark-serialize-derive" ];
          "derive" = [ "ark-serialize-derive" ];
          "std" = [ "ark-std/std" ];
        };
        resolvedDefaultFeatures = [ "ark-serialize-derive" "default" "derive" ];
      };
      "ark-serialize-derive" = rec {
        crateName = "ark-serialize-derive";
        version = "0.4.2";
        edition = "2021";
        sha256 = "1sl2yrpk88v4lfgkblwgd2yqa89hw48jbd9jmx4ybmqgdny82cmf";
        procMacro = true;
        libName = "ark_serialize_derive";
        authors = [
          "arkworks Contributors"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.86";
          }
          {
            name = "quote";
            packageId = "quote 1.0.37";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
          }
        ];

      };
      "ark-snark" = rec {
        crateName = "ark-snark";
        version = "0.4.0";
        edition = "2021";
        sha256 = "0qys0gjhyk39nwghhj44ryiqkvk8mng8hh82c25bndd36dlcrlw4";
        libName = "ark_snark";
        authors = [
          "arkworks contributors"
        ];
        dependencies = [
          {
            name = "ark-ff";
            packageId = "ark-ff";
            usesDefaultFeatures = false;
          }
          {
            name = "ark-relations";
            packageId = "ark-relations";
            usesDefaultFeatures = false;
          }
          {
            name = "ark-serialize";
            packageId = "ark-serialize";
            usesDefaultFeatures = false;
          }
          {
            name = "ark-std";
            packageId = "ark-std";
            usesDefaultFeatures = false;
          }
        ];

      };
      "ark-std" = rec {
        crateName = "ark-std";
        version = "0.4.0";
        edition = "2021";
        sha256 = "11aigd20y0x9l3mw1bxsrgklzbscn86lrp78mmjbgskf1hg3z2cl";
        libName = "ark_std";
        authors = [
          "arkworks contributors"
        ];
        dependencies = [
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
            usesDefaultFeatures = false;
            features = [ "std_rng" ];
          }
        ];
        devDependencies = [
          {
            name = "rand";
            packageId = "rand 0.8.5";
            features = [ "std" ];
          }
        ];
        features = {
          "colored" = [ "dep:colored" ];
          "default" = [ "std" ];
          "getrandom" = [ "rand/std" ];
          "parallel" = [ "rayon" "std" ];
          "print-trace" = [ "std" "colored" ];
          "rayon" = [ "dep:rayon" ];
        };
      };
      "arrayref" = rec {
        crateName = "arrayref";
        version = "0.3.9";
        edition = "2015";
        sha256 = "1jzyp0nvp10dmahaq9a2rnxqdd5wxgbvp8xaibps3zai8c9fi8kn";
        authors = [
          "David Roundy <roundyd@physics.oregonstate.edu>"
        ];

      };
      "arrayvec" = rec {
        crateName = "arrayvec";
        version = "0.7.6";
        edition = "2018";
        sha256 = "0l1fz4ccgv6pm609rif37sl5nv5k6lbzi7kkppgzqzh1vwix20kw";
        authors = [
          "bluss"
        ];
        features = {
          "borsh" = [ "dep:borsh" ];
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
          "zeroize" = [ "dep:zeroize" ];
        };
      };
      "arrow" = rec {
        crateName = "arrow";
        version = "53.1.0";
        edition = "2021";
        sha256 = "134g7f23dq46w7fa3hmsxnyv70pcwfig0dzv28m4wbwk91r0vfm9";
        authors = [
          "Apache Arrow <dev@arrow.apache.org>"
        ];
        dependencies = [
          {
            name = "arrow-arith";
            packageId = "arrow-arith";
          }
          {
            name = "arrow-array";
            packageId = "arrow-array";
          }
          {
            name = "arrow-buffer";
            packageId = "arrow-buffer";
          }
          {
            name = "arrow-cast";
            packageId = "arrow-cast";
          }
          {
            name = "arrow-csv";
            packageId = "arrow-csv";
            optional = true;
          }
          {
            name = "arrow-data";
            packageId = "arrow-data";
          }
          {
            name = "arrow-ipc";
            packageId = "arrow-ipc";
            optional = true;
          }
          {
            name = "arrow-json";
            packageId = "arrow-json";
            optional = true;
          }
          {
            name = "arrow-ord";
            packageId = "arrow-ord";
          }
          {
            name = "arrow-row";
            packageId = "arrow-row";
          }
          {
            name = "arrow-schema";
            packageId = "arrow-schema";
          }
          {
            name = "arrow-select";
            packageId = "arrow-select";
          }
          {
            name = "arrow-string";
            packageId = "arrow-string";
          }
        ];
        features = {
          "arrow-csv" = [ "dep:arrow-csv" ];
          "arrow-ipc" = [ "dep:arrow-ipc" ];
          "arrow-json" = [ "dep:arrow-json" ];
          "chrono-tz" = [ "arrow-array/chrono-tz" ];
          "csv" = [ "arrow-csv" ];
          "default" = [ "csv" "ipc" "json" ];
          "ffi" = [ "arrow-schema/ffi" "arrow-data/ffi" "arrow-array/ffi" ];
          "force_validate" = [ "arrow-array/force_validate" "arrow-data/force_validate" ];
          "ipc" = [ "arrow-ipc" ];
          "ipc_compression" = [ "ipc" "arrow-ipc/lz4" "arrow-ipc/zstd" ];
          "json" = [ "arrow-json" ];
          "prettyprint" = [ "arrow-cast/prettyprint" ];
          "pyarrow" = [ "pyo3" "ffi" ];
          "pyo3" = [ "dep:pyo3" ];
          "rand" = [ "dep:rand" ];
          "test_utils" = [ "rand" "dep:chrono" ];
        };
        resolvedDefaultFeatures = [ "arrow-csv" "arrow-ipc" "arrow-json" "csv" "default" "ipc" "json" ];
      };
      "arrow-arith" = rec {
        crateName = "arrow-arith";
        version = "53.1.0";
        edition = "2021";
        sha256 = "13z3yry5l5vzsznvrx0yq301ksv45ni4ykysv34aaha803fgq2nn";
        libName = "arrow_arith";
        authors = [
          "Apache Arrow <dev@arrow.apache.org>"
        ];
        dependencies = [
          {
            name = "arrow-array";
            packageId = "arrow-array";
          }
          {
            name = "arrow-buffer";
            packageId = "arrow-buffer";
          }
          {
            name = "arrow-data";
            packageId = "arrow-data";
          }
          {
            name = "arrow-schema";
            packageId = "arrow-schema";
          }
          {
            name = "chrono";
            packageId = "chrono";
            usesDefaultFeatures = false;
            features = [ "clock" ];
          }
          {
            name = "half";
            packageId = "half";
            usesDefaultFeatures = false;
          }
          {
            name = "num";
            packageId = "num";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
        ];

      };
      "arrow-array" = rec {
        crateName = "arrow-array";
        version = "53.1.0";
        edition = "2021";
        sha256 = "1nm5pwvgrj9ajjv61fy2qqrczi2laa39v1pxb4bbpnwrhmg865kz";
        libName = "arrow_array";
        authors = [
          "Apache Arrow <dev@arrow.apache.org>"
        ];
        dependencies = [
          {
            name = "ahash";
            packageId = "ahash 0.8.11";
            usesDefaultFeatures = false;
            target = { target, features }: (!("wasm32" == target."arch" or null));
            features = [ "runtime-rng" ];
          }
          {
            name = "ahash";
            packageId = "ahash 0.8.11";
            usesDefaultFeatures = false;
            target = { target, features }: ("wasm32" == target."arch" or null);
            features = [ "compile-time-rng" ];
          }
          {
            name = "arrow-buffer";
            packageId = "arrow-buffer";
          }
          {
            name = "arrow-data";
            packageId = "arrow-data";
          }
          {
            name = "arrow-schema";
            packageId = "arrow-schema";
          }
          {
            name = "chrono";
            packageId = "chrono";
            usesDefaultFeatures = false;
            features = [ "clock" ];
          }
          {
            name = "half";
            packageId = "half";
            usesDefaultFeatures = false;
            features = [ "num-traits" ];
          }
          {
            name = "hashbrown";
            packageId = "hashbrown 0.14.5";
            usesDefaultFeatures = false;
          }
          {
            name = "num";
            packageId = "num";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
        ];
        features = {
          "chrono-tz" = [ "dep:chrono-tz" ];
          "ffi" = [ "arrow-schema/ffi" "arrow-data/ffi" ];
        };
      };
      "arrow-buffer" = rec {
        crateName = "arrow-buffer";
        version = "53.1.0";
        edition = "2021";
        sha256 = "105smi018d3v66z7iccjflb60vfblbmivdid2imxlxxfzbq387qs";
        libName = "arrow_buffer";
        authors = [
          "Apache Arrow <dev@arrow.apache.org>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "half";
            packageId = "half";
            usesDefaultFeatures = false;
          }
          {
            name = "num";
            packageId = "num";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
        ];

      };
      "arrow-cast" = rec {
        crateName = "arrow-cast";
        version = "53.1.0";
        edition = "2021";
        sha256 = "1i208n78wva3qihmcqmx8gzpxq2s38dwy2zc1dsa1g3mayxll3j5";
        libName = "arrow_cast";
        authors = [
          "Apache Arrow <dev@arrow.apache.org>"
        ];
        dependencies = [
          {
            name = "arrow-array";
            packageId = "arrow-array";
          }
          {
            name = "arrow-buffer";
            packageId = "arrow-buffer";
          }
          {
            name = "arrow-data";
            packageId = "arrow-data";
          }
          {
            name = "arrow-schema";
            packageId = "arrow-schema";
          }
          {
            name = "arrow-select";
            packageId = "arrow-select";
          }
          {
            name = "atoi";
            packageId = "atoi";
          }
          {
            name = "base64";
            packageId = "base64 0.22.1";
          }
          {
            name = "chrono";
            packageId = "chrono";
            usesDefaultFeatures = false;
            features = [ "clock" ];
          }
          {
            name = "half";
            packageId = "half";
            usesDefaultFeatures = false;
          }
          {
            name = "lexical-core";
            packageId = "lexical-core";
            usesDefaultFeatures = false;
            features = [ "write-integers" "write-floats" "parse-integers" "parse-floats" ];
          }
          {
            name = "num";
            packageId = "num";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "ryu";
            packageId = "ryu";
          }
        ];
        devDependencies = [
          {
            name = "half";
            packageId = "half";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "comfy-table" = [ "dep:comfy-table" ];
          "prettyprint" = [ "comfy-table" ];
        };
      };
      "arrow-csv" = rec {
        crateName = "arrow-csv";
        version = "53.1.0";
        edition = "2021";
        sha256 = "1i3h2gcql6v8lkv5ryj2bwfj9ipva8ja9n9m7rql38rh73bf996k";
        libName = "arrow_csv";
        authors = [
          "Apache Arrow <dev@arrow.apache.org>"
        ];
        dependencies = [
          {
            name = "arrow-array";
            packageId = "arrow-array";
          }
          {
            name = "arrow-buffer";
            packageId = "arrow-buffer";
          }
          {
            name = "arrow-cast";
            packageId = "arrow-cast";
          }
          {
            name = "arrow-data";
            packageId = "arrow-data";
          }
          {
            name = "arrow-schema";
            packageId = "arrow-schema";
          }
          {
            name = "chrono";
            packageId = "chrono";
            usesDefaultFeatures = false;
            features = [ "clock" ];
          }
          {
            name = "csv";
            packageId = "csv";
            usesDefaultFeatures = false;
          }
          {
            name = "csv-core";
            packageId = "csv-core";
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
            usesDefaultFeatures = false;
          }
          {
            name = "lexical-core";
            packageId = "lexical-core";
            usesDefaultFeatures = false;
          }
          {
            name = "regex";
            packageId = "regex";
            usesDefaultFeatures = false;
            features = [ "std" "unicode" "perf" ];
          }
        ];

      };
      "arrow-data" = rec {
        crateName = "arrow-data";
        version = "53.1.0";
        edition = "2021";
        sha256 = "0d06ajgnhxdhs65dqfmff7zi5w1lcy03q84ping7lk3ipy5n27ib";
        libName = "arrow_data";
        authors = [
          "Apache Arrow <dev@arrow.apache.org>"
        ];
        dependencies = [
          {
            name = "arrow-buffer";
            packageId = "arrow-buffer";
          }
          {
            name = "arrow-schema";
            packageId = "arrow-schema";
          }
          {
            name = "half";
            packageId = "half";
            usesDefaultFeatures = false;
          }
          {
            name = "num";
            packageId = "num";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
        ];
        features = {
          "ffi" = [ "arrow-schema/ffi" ];
        };
      };
      "arrow-ipc" = rec {
        crateName = "arrow-ipc";
        version = "53.1.0";
        edition = "2021";
        sha256 = "1hk5pnb13ssc9slrj3h4h8b93f18izxyvxws0jbjp6i594sri3pr";
        libName = "arrow_ipc";
        authors = [
          "Apache Arrow <dev@arrow.apache.org>"
        ];
        dependencies = [
          {
            name = "arrow-array";
            packageId = "arrow-array";
          }
          {
            name = "arrow-buffer";
            packageId = "arrow-buffer";
          }
          {
            name = "arrow-cast";
            packageId = "arrow-cast";
          }
          {
            name = "arrow-data";
            packageId = "arrow-data";
          }
          {
            name = "arrow-schema";
            packageId = "arrow-schema";
          }
          {
            name = "flatbuffers";
            packageId = "flatbuffers";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "lz4" = [ "lz4_flex" ];
          "lz4_flex" = [ "dep:lz4_flex" ];
          "zstd" = [ "dep:zstd" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "arrow-json" = rec {
        crateName = "arrow-json";
        version = "53.1.0";
        edition = "2021";
        sha256 = "18sjnc27sih6pgvml4hnl4q97cqp6d4cpfzg60bm11phzk3bk65i";
        libName = "arrow_json";
        authors = [
          "Apache Arrow <dev@arrow.apache.org>"
        ];
        dependencies = [
          {
            name = "arrow-array";
            packageId = "arrow-array";
          }
          {
            name = "arrow-buffer";
            packageId = "arrow-buffer";
          }
          {
            name = "arrow-cast";
            packageId = "arrow-cast";
          }
          {
            name = "arrow-data";
            packageId = "arrow-data";
          }
          {
            name = "arrow-schema";
            packageId = "arrow-schema";
          }
          {
            name = "chrono";
            packageId = "chrono";
            usesDefaultFeatures = false;
            features = [ "clock" ];
          }
          {
            name = "half";
            packageId = "half";
            usesDefaultFeatures = false;
          }
          {
            name = "indexmap";
            packageId = "indexmap 2.5.0";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "lexical-core";
            packageId = "lexical-core";
            usesDefaultFeatures = false;
          }
          {
            name = "num";
            packageId = "num";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
        ];
        devDependencies = [
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
        ];

      };
      "arrow-ord" = rec {
        crateName = "arrow-ord";
        version = "53.1.0";
        edition = "2021";
        sha256 = "0gzgqhnaw9shshpjrz53jl4mwfhqln3vwnh46gjvk92r8ixz69r4";
        libName = "arrow_ord";
        authors = [
          "Apache Arrow <dev@arrow.apache.org>"
        ];
        dependencies = [
          {
            name = "arrow-array";
            packageId = "arrow-array";
          }
          {
            name = "arrow-buffer";
            packageId = "arrow-buffer";
          }
          {
            name = "arrow-data";
            packageId = "arrow-data";
          }
          {
            name = "arrow-schema";
            packageId = "arrow-schema";
          }
          {
            name = "arrow-select";
            packageId = "arrow-select";
          }
          {
            name = "half";
            packageId = "half";
            usesDefaultFeatures = false;
            features = [ "num-traits" ];
          }
          {
            name = "num";
            packageId = "num";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
        ];

      };
      "arrow-row" = rec {
        crateName = "arrow-row";
        version = "53.1.0";
        edition = "2021";
        sha256 = "1xk7ql1j5vpb4kj94r4azpcszxc7mx07cl93lfkn28ifv5brd58m";
        libName = "arrow_row";
        authors = [
          "Apache Arrow <dev@arrow.apache.org>"
        ];
        dependencies = [
          {
            name = "ahash";
            packageId = "ahash 0.8.11";
            usesDefaultFeatures = false;
            target = { target, features }: (!("wasm32" == target."arch" or null));
            features = [ "runtime-rng" ];
          }
          {
            name = "ahash";
            packageId = "ahash 0.8.11";
            usesDefaultFeatures = false;
            target = { target, features }: ("wasm32" == target."arch" or null);
            features = [ "compile-time-rng" ];
          }
          {
            name = "arrow-array";
            packageId = "arrow-array";
          }
          {
            name = "arrow-buffer";
            packageId = "arrow-buffer";
          }
          {
            name = "arrow-data";
            packageId = "arrow-data";
          }
          {
            name = "arrow-schema";
            packageId = "arrow-schema";
          }
          {
            name = "half";
            packageId = "half";
            usesDefaultFeatures = false;
          }
        ];

      };
      "arrow-schema" = rec {
        crateName = "arrow-schema";
        version = "53.1.0";
        edition = "2021";
        sha256 = "1517xm1shfxy1xqdn14h5wcdakpm60nqa0fywczpyzzx3253iw7v";
        libName = "arrow_schema";
        authors = [
          "Apache Arrow <dev@arrow.apache.org>"
        ];
        features = {
          "bitflags" = [ "dep:bitflags" ];
          "ffi" = [ "bitflags" ];
          "serde" = [ "dep:serde" ];
        };
      };
      "arrow-select" = rec {
        crateName = "arrow-select";
        version = "53.1.0";
        edition = "2021";
        sha256 = "0fiz8qj9m2lm17v49c1yzp3kj4wd0z6p4afd1vq8p8q7scimfgmq";
        libName = "arrow_select";
        authors = [
          "Apache Arrow <dev@arrow.apache.org>"
        ];
        dependencies = [
          {
            name = "ahash";
            packageId = "ahash 0.8.11";
            usesDefaultFeatures = false;
          }
          {
            name = "arrow-array";
            packageId = "arrow-array";
          }
          {
            name = "arrow-buffer";
            packageId = "arrow-buffer";
          }
          {
            name = "arrow-data";
            packageId = "arrow-data";
          }
          {
            name = "arrow-schema";
            packageId = "arrow-schema";
          }
          {
            name = "num";
            packageId = "num";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "arrow-string" = rec {
        crateName = "arrow-string";
        version = "53.1.0";
        edition = "2021";
        sha256 = "0193hl6nsxzg30l2rmbmrx3nbl0ys17dhqcn0xs6x0nx15ydpcvs";
        libName = "arrow_string";
        authors = [
          "Apache Arrow <dev@arrow.apache.org>"
        ];
        dependencies = [
          {
            name = "arrow-array";
            packageId = "arrow-array";
          }
          {
            name = "arrow-buffer";
            packageId = "arrow-buffer";
          }
          {
            name = "arrow-data";
            packageId = "arrow-data";
          }
          {
            name = "arrow-schema";
            packageId = "arrow-schema";
          }
          {
            name = "arrow-select";
            packageId = "arrow-select";
          }
          {
            name = "memchr";
            packageId = "memchr";
          }
          {
            name = "num";
            packageId = "num";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "regex";
            packageId = "regex";
            usesDefaultFeatures = false;
            features = [ "std" "unicode" "perf" ];
          }
          {
            name = "regex-syntax";
            packageId = "regex-syntax 0.8.4";
            usesDefaultFeatures = false;
            features = [ "unicode" ];
          }
        ];

      };
      "ascii-canvas" = rec {
        crateName = "ascii-canvas";
        version = "3.0.0";
        edition = "2018";
        sha256 = "1in38ziqn4kh9sw89ys4naaqzvvjscfs0m4djqbfq7455v5fq948";
        libName = "ascii_canvas";
        authors = [
          "Niko Matsakis <niko@alum.mit.edu>"
        ];
        dependencies = [
          {
            name = "term";
            packageId = "term";
          }
        ];

      };
      "ascii_utils" = rec {
        crateName = "ascii_utils";
        version = "0.9.3";
        edition = "2015";
        sha256 = "0jpp550pwi38msflpy7lnqm2r153kn9k19bss6k9ak9yacq8z4vi";
        authors = [
          "Jonas mg (https://github.com/tredoe)"
        ];

      };
      "asn1-rs" = rec {
        crateName = "asn1-rs";
        version = "0.5.2";
        edition = "2018";
        sha256 = "1w7zq0392qs7kkv0nzw50bfqvq7q9zxv48fsp3sxyl83mzfxavvz";
        libName = "asn1_rs";
        authors = [
          "Pierre Chifflier <chifflier@wzdftpd.net>"
        ];
        dependencies = [
          {
            name = "asn1-rs-derive";
            packageId = "asn1-rs-derive";
          }
          {
            name = "asn1-rs-impl";
            packageId = "asn1-rs-impl";
          }
          {
            name = "displaydoc";
            packageId = "displaydoc";
          }
          {
            name = "nom";
            packageId = "nom";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "num-traits";
            packageId = "num-traits";
          }
          {
            name = "rusticata-macros";
            packageId = "rusticata-macros";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "time";
            packageId = "time";
            optional = true;
            features = [ "macros" "parsing" "formatting" ];
          }
        ];
        features = {
          "bigint" = [ "num-bigint" ];
          "bits" = [ "bitvec" ];
          "bitvec" = [ "dep:bitvec" ];
          "cookie-factory" = [ "dep:cookie-factory" ];
          "datetime" = [ "time" ];
          "default" = [ "std" ];
          "num-bigint" = [ "dep:num-bigint" ];
          "serialize" = [ "cookie-factory" ];
          "time" = [ "dep:time" ];
        };
        resolvedDefaultFeatures = [ "datetime" "default" "std" "time" ];
      };
      "asn1-rs-derive" = rec {
        crateName = "asn1-rs-derive";
        version = "0.4.0";
        edition = "2018";
        sha256 = "0v7fgmnzk7jjxv51grhwzcx5bf167nlqwk3vcmq7xblf5s4karbj";
        procMacro = true;
        libName = "asn1_rs_derive";
        authors = [
          "Pierre Chifflier <chifflier@wzdftpd.net>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.86";
          }
          {
            name = "quote";
            packageId = "quote 1.0.37";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            features = [ "full" ];
          }
          {
            name = "synstructure";
            packageId = "synstructure";
          }
        ];

      };
      "asn1-rs-impl" = rec {
        crateName = "asn1-rs-impl";
        version = "0.1.0";
        edition = "2018";
        sha256 = "1va27bn7qxqp4wanzjlkagnynv6jnrhnwmcky2ahzb1r405p6xr7";
        procMacro = true;
        libName = "asn1_rs_impl";
        authors = [
          "Pierre Chifflier <chifflier@wzdftpd.net>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.86";
          }
          {
            name = "quote";
            packageId = "quote 1.0.37";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
          }
        ];

      };
      "assert_cmd" = rec {
        crateName = "assert_cmd";
        version = "2.0.16";
        edition = "2021";
        crateBin = [];
        sha256 = "0gdj0710k3lnvyjmpv8a4dgwrk9ib85l2wfw4n2xwy3qyavka66w";
        authors = [
          "Pascal Hertleif <killercup@gmail.com>"
          "Ed Page <eopage@gmail.com>"
        ];
        dependencies = [
          {
            name = "anstyle";
            packageId = "anstyle";
          }
          {
            name = "bstr";
            packageId = "bstr";
          }
          {
            name = "doc-comment";
            packageId = "doc-comment";
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: false;
          }
          {
            name = "predicates";
            packageId = "predicates 3.1.2";
            usesDefaultFeatures = false;
            features = [ "diff" ];
          }
          {
            name = "predicates-core";
            packageId = "predicates-core";
          }
          {
            name = "predicates-tree";
            packageId = "predicates-tree";
          }
          {
            name = "wait-timeout";
            packageId = "wait-timeout";
          }
        ];
        features = {
          "color" = [ "dep:anstream" "predicates/color" ];
          "color-auto" = [ "color" ];
        };
      };
      "async-compression" = rec {
        crateName = "async-compression";
        version = "0.4.12";
        edition = "2018";
        sha256 = "1ap403q889b1gghca7vigvydsnf8vr94xz3d488p9i9b9vv39hgy";
        libName = "async_compression";
        authors = [
          "Wim Looman <wim@nemo157.com>"
          "Allen Bui <fairingrey@gmail.com>"
        ];
        dependencies = [
          {
            name = "brotli";
            packageId = "brotli";
            optional = true;
          }
          {
            name = "flate2";
            packageId = "flate2";
            optional = true;
          }
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "memchr";
            packageId = "memchr";
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "tokio";
            packageId = "tokio";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "zstd";
            packageId = "zstd 0.13.2";
            rename = "libzstd";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "zstd-safe";
            packageId = "zstd-safe 7.2.1";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            usesDefaultFeatures = false;
            features = [ "io-util" "macros" "rt-multi-thread" "io-std" ];
          }
        ];
        features = {
          "all" = [ "all-implementations" "all-algorithms" ];
          "all-algorithms" = [ "brotli" "bzip2" "deflate" "gzip" "lzma" "xz" "zlib" "zstd" "deflate64" ];
          "all-implementations" = [ "futures-io" "tokio" ];
          "brotli" = [ "dep:brotli" ];
          "bzip2" = [ "dep:bzip2" ];
          "deflate" = [ "flate2" ];
          "deflate64" = [ "dep:deflate64" ];
          "flate2" = [ "dep:flate2" ];
          "futures-io" = [ "dep:futures-io" ];
          "gzip" = [ "flate2" ];
          "libzstd" = [ "dep:libzstd" ];
          "lzma" = [ "xz2" ];
          "tokio" = [ "dep:tokio" ];
          "xz" = [ "xz2" ];
          "xz2" = [ "dep:xz2" ];
          "zlib" = [ "flate2" ];
          "zstd" = [ "libzstd" "zstd-safe" ];
          "zstd-safe" = [ "dep:zstd-safe" ];
          "zstdmt" = [ "zstd" "zstd-safe/zstdmt" ];
        };
        resolvedDefaultFeatures = [ "brotli" "flate2" "gzip" "libzstd" "tokio" "zlib" "zstd" "zstd-safe" ];
      };
      "async-graphql" = rec {
        crateName = "async-graphql";
        version = "7.0.1";
        edition = "2021";
        sha256 = "010rby5yi08y0pcsa1qbfdsa7mpk4abcfp03gfsg6gv8gzwjcsdi";
        libName = "async_graphql";
        authors = [
          "sunli <scott_s829@163.com>"
          "Koxiaet"
        ];
        dependencies = [
          {
            name = "async-graphql-derive";
            packageId = "async-graphql-derive";
          }
          {
            name = "async-graphql-parser";
            packageId = "async-graphql-parser";
          }
          {
            name = "async-graphql-value";
            packageId = "async-graphql-value";
          }
          {
            name = "async-stream";
            packageId = "async-stream";
          }
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "base64";
            packageId = "base64 0.13.1";
          }
          {
            name = "bytes";
            packageId = "bytes";
            features = [ "serde" ];
          }
          {
            name = "chrono";
            packageId = "chrono";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "clock" "std" ];
          }
          {
            name = "fast_chemail";
            packageId = "fast_chemail";
            optional = true;
          }
          {
            name = "fnv";
            packageId = "fnv";
          }
          {
            name = "futures-channel";
            packageId = "futures-channel";
            optional = true;
          }
          {
            name = "futures-timer";
            packageId = "futures-timer";
            optional = true;
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
            features = [ "std" "io" "sink" "async-await" "async-await-macro" ];
          }
          {
            name = "handlebars";
            packageId = "handlebars";
            optional = true;
          }
          {
            name = "http";
            packageId = "http 1.1.0";
            rename = "http";
          }
          {
            name = "indexmap";
            packageId = "indexmap 2.5.0";
            features = [ "serde" ];
          }
          {
            name = "lru";
            packageId = "lru 0.7.8";
            optional = true;
          }
          {
            name = "mime";
            packageId = "mime";
          }
          {
            name = "multer";
            packageId = "multer";
          }
          {
            name = "num-traits";
            packageId = "num-traits";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "opentelemetry";
            packageId = "opentelemetry 0.21.0";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "trace" ];
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "regex";
            packageId = "regex";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "serde_urlencoded";
            packageId = "serde_urlencoded";
          }
          {
            name = "static_assertions_next";
            packageId = "static_assertions_next";
          }
          {
            name = "tempfile";
            packageId = "tempfile";
            optional = true;
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "tracing";
            packageId = "tracing";
            rename = "tracinglib";
            optional = true;
          }
          {
            name = "tracing-futures";
            packageId = "tracing-futures";
            optional = true;
            features = [ "std-future" "futures-03" ];
          }
        ];
        devDependencies = [
          {
            name = "futures-channel";
            packageId = "futures-channel";
          }
        ];
        features = {
          "apollo_persisted_queries" = [ "lru" "sha2" ];
          "apollo_tracing" = [ "chrono" ];
          "bigdecimal" = [ "dep:bigdecimal" ];
          "blocking" = [ "dep:blocking" ];
          "bson" = [ "dep:bson" ];
          "cbor" = [ "serde_cbor" ];
          "chrono" = [ "dep:chrono" ];
          "chrono-duration" = [ "chrono" "iso8601" ];
          "chrono-tz" = [ "dep:chrono-tz" ];
          "dataloader" = [ "futures-timer" "futures-channel" "lru" ];
          "decimal" = [ "rust_decimal" ];
          "default" = [ "email-validator" "tempfile" "playground" "graphiql" ];
          "email-validator" = [ "fast_chemail" ];
          "fast_chemail" = [ "dep:fast_chemail" ];
          "futures-channel" = [ "dep:futures-channel" ];
          "futures-timer" = [ "dep:futures-timer" ];
          "graphiql" = [ "handlebars" ];
          "handlebars" = [ "dep:handlebars" ];
          "hashbrown" = [ "dep:hashbrown" ];
          "iso8601" = [ "dep:iso8601" ];
          "log" = [ "dep:log" ];
          "lru" = [ "dep:lru" ];
          "opentelemetry" = [ "dep:opentelemetry" ];
          "password-strength-validator" = [ "zxcvbn" ];
          "rust_decimal" = [ "dep:rust_decimal" ];
          "secrecy" = [ "dep:secrecy" ];
          "serde_cbor" = [ "dep:serde_cbor" ];
          "sha2" = [ "dep:sha2" ];
          "smol_str" = [ "dep:smol_str" ];
          "tempfile" = [ "dep:tempfile" ];
          "time" = [ "dep:time" ];
          "tokio" = [ "dep:tokio" ];
          "tokio-sync" = [ "tokio" ];
          "tracing" = [ "tracinglib" "tracing-futures" ];
          "tracing-futures" = [ "dep:tracing-futures" ];
          "tracinglib" = [ "dep:tracinglib" ];
          "unblock" = [ "blocking" ];
          "url" = [ "dep:url" ];
          "uuid" = [ "dep:uuid" ];
          "zxcvbn" = [ "dep:zxcvbn" ];
        };
        resolvedDefaultFeatures = [ "apollo_tracing" "chrono" "dataloader" "default" "email-validator" "fast_chemail" "futures-channel" "futures-timer" "graphiql" "handlebars" "lru" "opentelemetry" "playground" "tempfile" "tracing" "tracing-futures" "tracinglib" ];
      };
      "async-graphql-axum" = rec {
        crateName = "async-graphql-axum";
        version = "7.0.1";
        edition = "2021";
        sha256 = "0pi4kvf37b7brx68w1nfc6b9havyj0dbh2ysj9r3jm5gvg4iad6y";
        libName = "async_graphql_axum";
        authors = [
          "sunli <scott_s829@163.com>"
        ];
        dependencies = [
          {
            name = "async-graphql";
            packageId = "async-graphql";
            usesDefaultFeatures = false;
          }
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "axum";
            packageId = "axum";
            features = [ "ws" ];
          }
          {
            name = "bytes";
            packageId = "bytes";
            features = [ "serde" ];
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "time" ];
          }
          {
            name = "tokio-stream";
            packageId = "tokio-stream";
          }
          {
            name = "tokio-util";
            packageId = "tokio-util 0.7.12";
            usesDefaultFeatures = false;
            features = [ "io" "compat" ];
          }
          {
            name = "tower-service";
            packageId = "tower-service";
          }
        ];

      };
      "async-graphql-derive" = rec {
        crateName = "async-graphql-derive";
        version = "7.0.1";
        edition = "2021";
        sha256 = "01g51ww85w7gflaf8126jn52cqh01r7hyqia2zik145pd28k99x6";
        procMacro = true;
        libName = "async_graphql_derive";
        authors = [
          "sunli <scott_s829@163.com>"
          "Koxiaet"
        ];
        dependencies = [
          {
            name = "Inflector";
            packageId = "Inflector";
          }
          {
            name = "async-graphql-parser";
            packageId = "async-graphql-parser";
          }
          {
            name = "darling";
            packageId = "darling 0.20.10";
          }
          {
            name = "proc-macro-crate";
            packageId = "proc-macro-crate 1.3.1";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.86";
          }
          {
            name = "quote";
            packageId = "quote 1.0.37";
          }
          {
            name = "strum";
            packageId = "strum 0.25.0";
            features = [ "derive" ];
          }
          {
            name = "syn";
            packageId = "syn 2.0.77";
            features = [ "full" "extra-traits" "visit-mut" "visit" ];
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
        ];

      };
      "async-graphql-parser" = rec {
        crateName = "async-graphql-parser";
        version = "7.0.1";
        edition = "2021";
        sha256 = "07gbbl06yjs4dwk4h3ld4jgjj4hrp861gx8gpdjjng7mz6nw1zaq";
        libName = "async_graphql_parser";
        authors = [
          "sunli <scott_s829@163.com>"
          "Koxiaet"
        ];
        dependencies = [
          {
            name = "async-graphql-value";
            packageId = "async-graphql-value";
          }
          {
            name = "pest";
            packageId = "pest";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
        ];

      };
      "async-graphql-value" = rec {
        crateName = "async-graphql-value";
        version = "7.0.1";
        edition = "2021";
        sha256 = "108n4kf69ziick7ckrh56nnjjzvfgv046fah3awgkx08cbld9x3w";
        libName = "async_graphql_value";
        authors = [
          "sunli <scott_s829@163.com>"
          "Koxiaet"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
            features = [ "serde" ];
          }
          {
            name = "indexmap";
            packageId = "indexmap 2.5.0";
            features = [ "serde" ];
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
        ];

      };
      "async-recursion" = rec {
        crateName = "async-recursion";
        version = "1.1.1";
        edition = "2018";
        sha256 = "04ac4zh8qz2xjc79lmfi4jlqj5f92xjvfaqvbzwkizyqd4pl4hrv";
        procMacro = true;
        libName = "async_recursion";
        authors = [
          "Robert Usher <266585+dcchut@users.noreply.github.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.86";
            usesDefaultFeatures = false;
          }
          {
            name = "quote";
            packageId = "quote 1.0.37";
            usesDefaultFeatures = false;
          }
          {
            name = "syn";
            packageId = "syn 2.0.77";
            usesDefaultFeatures = false;
            features = [ "full" "visit-mut" "parsing" "printing" "proc-macro" "clone-impls" ];
          }
        ];

      };
      "async-stream" = rec {
        crateName = "async-stream";
        version = "0.3.5";
        edition = "2018";
        sha256 = "0l8sjq1rylkb1ak0pdyjn83b3k6x36j22myngl4sqqgg7whdsmnd";
        libName = "async_stream";
        authors = [
          "Carl Lerche <me@carllerche.com>"
        ];
        dependencies = [
          {
            name = "async-stream-impl";
            packageId = "async-stream-impl";
          }
          {
            name = "futures-core";
            packageId = "futures-core";
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
        ];

      };
      "async-stream-impl" = rec {
        crateName = "async-stream-impl";
        version = "0.3.5";
        edition = "2018";
        sha256 = "14q179j4y8p2z1d0ic6aqgy9fhwz8p9cai1ia8kpw4bw7q12mrhn";
        procMacro = true;
        libName = "async_stream_impl";
        authors = [
          "Carl Lerche <me@carllerche.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.86";
          }
          {
            name = "quote";
            packageId = "quote 1.0.37";
          }
          {
            name = "syn";
            packageId = "syn 2.0.77";
            features = [ "full" "visit-mut" ];
          }
        ];

      };
      "async-task" = rec {
        crateName = "async-task";
        version = "4.7.1";
        edition = "2021";
        sha256 = "1pp3avr4ri2nbh7s6y9ws0397nkx1zymmcr14sq761ljarh3axcb";
        libName = "async_task";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
          "portable-atomic" = [ "dep:portable-atomic" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "async-trait" = rec {
        crateName = "async-trait";
        version = "0.1.83";
        edition = "2021";
        sha256 = "1p8q8gm4fv2fdka8hwy2w3f8df7p5inixqi7rlmbnky3wmysw73j";
        procMacro = true;
        libName = "async_trait";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.86";
          }
          {
            name = "quote";
            packageId = "quote 1.0.37";
          }
          {
            name = "syn";
            packageId = "syn 2.0.77";
            usesDefaultFeatures = false;
            features = [ "full" "parsing" "printing" "proc-macro" "visit-mut" ];
          }
        ];

      };
      "async_io_stream" = rec {
        crateName = "async_io_stream";
        version = "0.3.3";
        edition = "2021";
        sha256 = "0k5rv51935p3il74q59hwaaid6sy9kv05vz3lw48jpgkrpgbkmxn";
        authors = [
          "Naja Melan <najamelan@autistici.org>"
        ];
        dependencies = [
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "pharos";
            packageId = "pharos";
            optional = true;
          }
        ];
        buildDependencies = [
          {
            name = "rustc_version";
            packageId = "rustc_version";
          }
        ];
        devDependencies = [
          {
            name = "futures";
            packageId = "futures";
          }
        ];
        features = {
          "map_pharos" = [ "pharos" ];
          "pharos" = [ "dep:pharos" ];
          "tokio" = [ "dep:tokio" ];
          "tokio_io" = [ "tokio" ];
        };
        resolvedDefaultFeatures = [ "map_pharos" "pharos" ];
      };
      "async_once" = rec {
        crateName = "async_once";
        version = "0.2.6";
        edition = "2018";
        sha256 = "10nyq5s78lfds0scxncbfx52ncy5s68rzbivhwbndkdblc7g3r1c";
        authors = [
          "hjiayz <hjiayz@gmail.com>"
        ];

      };
      "atoi" = rec {
        crateName = "atoi";
        version = "2.0.0";
        edition = "2021";
        sha256 = "0a05h42fggmy7h0ajjv6m7z72l924i7igbx13hk9d8pyign9k3gj";
        authors = [
          "Markus Klein"
        ];
        dependencies = [
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "num-traits/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "atomic-waker" = rec {
        crateName = "atomic-waker";
        version = "1.1.2";
        edition = "2018";
        sha256 = "1h5av1lw56m0jf0fd3bchxq8a30xv0b4wv8s4zkp4s0i7mfvs18m";
        libName = "atomic_waker";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
          "Contributors to futures-rs"
        ];
        features = {
          "portable-atomic" = [ "dep:portable-atomic" ];
        };
      };
      "atomic_float" = rec {
        crateName = "atomic_float";
        version = "1.1.0";
        edition = "2021";
        sha256 = "02j85l9wf0pycq1ad8rwq6h681nk373jqdchwlpvihwaj67j53b2";
        authors = [
          "Thom Chiovoloni <chiovolonit@gmail.com>"
        ];
        features = {
          "default" = [ "atomic_f64" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "atomic_f64" "default" ];
      };
      "auto_impl" = rec {
        crateName = "auto_impl";
        version = "1.2.0";
        edition = "2021";
        sha256 = "0hmfcahj0vrnzq7rayk7r428zp54x9a8awgw6wil753pbvqz71rw";
        procMacro = true;
        authors = [
          "Ashley Mannix <ashleymannix@live.com.au>"
          "Lukas Kalbertodt <lukas.kalbertodt@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.86";
          }
          {
            name = "quote";
            packageId = "quote 1.0.37";
          }
          {
            name = "syn";
            packageId = "syn 2.0.77";
            features = [ "full" "visit" "visit-mut" ];
          }
        ];

      };
      "auto_ops" = rec {
        crateName = "auto_ops";
        version = "0.3.0";
        edition = "2018";
        sha256 = "0ndgb35m2jg1f9rbm43bwcg26v7b40dcmbv35aw4f08hivfzfq3l";
        authors = [
          "Quy Nguyen <quy.d.x.nguyen@gmail.com>"
        ];

      };
      "autocfg" = rec {
        crateName = "autocfg";
        version = "1.3.0";
        edition = "2015";
        sha256 = "1c3njkfzpil03k92q0mij5y1pkhhfr4j3bf0h53bgl2vs85lsjqc";
        authors = [
          "Josh Stone <cuviper@gmail.com>"
        ];

      };
      "aws-config" = rec {
        crateName = "aws-config";
        version = "1.5.6";
        edition = "2021";
        sha256 = "1z10q2rvfkhfnyjwqvqlwc64s94grr2ad7r756crh82pc2dpp3c4";
        libName = "aws_config";
        authors = [
          "AWS Rust SDK Team <aws-sdk-rust@amazon.com>"
          "Russell Cohen <rcoh@amazon.com>"
        ];
        dependencies = [
          {
            name = "aws-credential-types";
            packageId = "aws-credential-types";
            features = [ "test-util" ];
          }
          {
            name = "aws-runtime";
            packageId = "aws-runtime";
          }
          {
            name = "aws-sdk-sso";
            packageId = "aws-sdk-sso";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "aws-sdk-ssooidc";
            packageId = "aws-sdk-ssooidc";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "aws-sdk-sts";
            packageId = "aws-sdk-sts";
            usesDefaultFeatures = false;
          }
          {
            name = "aws-smithy-async";
            packageId = "aws-smithy-async";
          }
          {
            name = "aws-smithy-http";
            packageId = "aws-smithy-http";
          }
          {
            name = "aws-smithy-json";
            packageId = "aws-smithy-json";
          }
          {
            name = "aws-smithy-runtime";
            packageId = "aws-smithy-runtime";
            features = [ "client" ];
          }
          {
            name = "aws-smithy-runtime-api";
            packageId = "aws-smithy-runtime-api";
            features = [ "client" ];
          }
          {
            name = "aws-smithy-types";
            packageId = "aws-smithy-types";
          }
          {
            name = "aws-types";
            packageId = "aws-types";
          }
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "fastrand";
            packageId = "fastrand";
          }
          {
            name = "hex";
            packageId = "hex";
            optional = true;
          }
          {
            name = "http";
            packageId = "http 0.2.12";
          }
          {
            name = "ring";
            packageId = "ring 0.17.8";
            optional = true;
          }
          {
            name = "time";
            packageId = "time";
            features = [ "parsing" ];
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "sync" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "url";
            packageId = "url";
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            optional = true;
          }
        ];
        devDependencies = [
          {
            name = "aws-smithy-async";
            packageId = "aws-smithy-async";
            features = [ "rt-tokio" "test-util" ];
          }
          {
            name = "aws-smithy-runtime";
            packageId = "aws-smithy-runtime";
            features = [ "client" "connector-hyper-0-14-x" "test-util" ];
          }
          {
            name = "aws-smithy-runtime-api";
            packageId = "aws-smithy-runtime-api";
            features = [ "test-util" ];
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "full" "test-util" ];
          }
        ];
        features = {
          "client-hyper" = [ "aws-smithy-runtime/connector-hyper-0-14-x" ];
          "credentials-process" = [ "tokio/process" ];
          "default" = [ "client-hyper" "rustls" "rt-tokio" "credentials-process" "sso" ];
          "rt-tokio" = [ "aws-smithy-async/rt-tokio" "aws-smithy-runtime/rt-tokio" "tokio/rt" ];
          "rustls" = [ "aws-smithy-runtime/tls-rustls" "client-hyper" ];
          "sso" = [ "dep:aws-sdk-sso" "dep:aws-sdk-ssooidc" "dep:ring" "dep:hex" "dep:zeroize" "aws-smithy-runtime-api/http-auth" ];
        };
        resolvedDefaultFeatures = [ "client-hyper" "credentials-process" "default" "rt-tokio" "rustls" "sso" ];
      };
      "aws-credential-types" = rec {
        crateName = "aws-credential-types";
        version = "1.2.1";
        edition = "2021";
        sha256 = "1njlj7gyyxpf5v1a29gv1h7k216ii986h8hkk05ccpyb2nvgds30";
        libName = "aws_credential_types";
        authors = [
          "AWS Rust SDK Team <aws-sdk-rust@amazon.com>"
        ];
        dependencies = [
          {
            name = "aws-smithy-async";
            packageId = "aws-smithy-async";
          }
          {
            name = "aws-smithy-runtime-api";
            packageId = "aws-smithy-runtime-api";
            features = [ "client" "http-auth" ];
          }
          {
            name = "aws-smithy-types";
            packageId = "aws-smithy-types";
          }
          {
            name = "zeroize";
            packageId = "zeroize";
          }
        ];
        features = {
          "test-util" = [ "aws-smithy-runtime-api/test-util" ];
        };
        resolvedDefaultFeatures = [ "test-util" ];
      };
      "aws-lc-rs" = rec {
        crateName = "aws-lc-rs";
        version = "1.10.0";
        edition = "2021";
        links = "aws_lc_rs_1_10_0_sys";
        sha256 = "07gz0dx42rsn45rf964m56aiyrbq9fly146127dzs2fj8jx2vn6d";
        libName = "aws_lc_rs";
        authors = [
          "AWS-LibCrypto"
        ];
        dependencies = [
          {
            name = "aws-lc-sys";
            packageId = "aws-lc-sys";
            optional = true;
          }
          {
            name = "mirai-annotations";
            packageId = "mirai-annotations";
          }
          {
            name = "paste";
            packageId = "paste";
          }
          {
            name = "zeroize";
            packageId = "zeroize";
          }
        ];
        features = {
          "asan" = [ "aws-lc-sys?/asan" "aws-lc-fips-sys?/asan" ];
          "aws-lc-sys" = [ "dep:aws-lc-sys" ];
          "bindgen" = [ "aws-lc-sys?/bindgen" "aws-lc-fips-sys?/bindgen" ];
          "default" = [ "aws-lc-sys" "alloc" "ring-io" "ring-sig-verify" ];
          "fips" = [ "dep:aws-lc-fips-sys" ];
          "non-fips" = [ "aws-lc-sys" ];
          "prebuilt-nasm" = [ "aws-lc-sys?/prebuilt-nasm" ];
          "ring-io" = [ "dep:untrusted" ];
          "ring-sig-verify" = [ "dep:untrusted" ];
        };
        resolvedDefaultFeatures = [ "aws-lc-sys" "prebuilt-nasm" ];
      };
      "aws-lc-sys" = rec {
        crateName = "aws-lc-sys";
        version = "0.22.0";
        edition = "2021";
        links = "aws_lc_0_22_0";
        sha256 = "0wirg7f308vldma4rx4l2xz0m72hp1bl088vlcibczhx25l42ynz";
        build = "builder/main.rs";
        libName = "aws_lc_sys";
        authors = [
          "AWS-LC"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "paste";
            packageId = "paste";
          }
        ];
        buildDependencies = [
          {
            name = "bindgen";
            packageId = "bindgen 0.69.5";
            optional = true;
            target = {target, features}: (((("x86_64" == target."arch" or null) || ("aarch64" == target."arch" or null)) && (("linux" == target."os" or null) || ("macos" == target."os" or null) || ("windows" == target."os" or null)) && (("gnu" == target."env" or null) || ("musl" == target."env" or null) || ("msvc" == target."env" or null) || ("" == target."env" or null))) || (("x86" == target."arch" or null) && ("windows" == target."os" or null) && ("msvc" == target."env" or null)) || (("x86" == target."arch" or null) && ("linux" == target."os" or null) && ("gnu" == target."env" or null)));
          }
          {
            name = "bindgen";
            packageId = "bindgen 0.69.5";
            target = {target, features}: (!(((("x86_64" == target."arch" or null) || ("aarch64" == target."arch" or null)) && (("linux" == target."os" or null) || ("macos" == target."os" or null) || ("windows" == target."os" or null)) && (("gnu" == target."env" or null) || ("musl" == target."env" or null) || ("msvc" == target."env" or null) || ("" == target."env" or null))) || (("x86" == target."arch" or null) && ("windows" == target."os" or null) && ("msvc" == target."env" or null)) || (("x86" == target."arch" or null) && ("linux" == target."os" or null) && ("gnu" == target."env" or null))));
          }
          {
            name = "cc";
            packageId = "cc";
            features = [ "parallel" ];
          }
          {
            name = "cmake";
            packageId = "cmake";
          }
          {
            name = "dunce";
            packageId = "dunce";
          }
          {
            name = "fs_extra";
            packageId = "fs_extra";
          }
        ];
        features = {
          "bindgen" = [ "dep:bindgen" ];
          "ssl" = [ "bindgen" ];
        };
        resolvedDefaultFeatures = [ "prebuilt-nasm" ];
      };
      "aws-runtime" = rec {
        crateName = "aws-runtime";
        version = "1.4.3";
        edition = "2021";
        sha256 = "0s14fv2zkp9kcwpskhwkfg7hs3yk9bky5831jm6ich55b82mq3d1";
        libName = "aws_runtime";
        authors = [
          "AWS Rust SDK Team <aws-sdk-rust@amazon.com>"
        ];
        dependencies = [
          {
            name = "aws-credential-types";
            packageId = "aws-credential-types";
          }
          {
            name = "aws-sigv4";
            packageId = "aws-sigv4";
            features = [ "http0-compat" ];
          }
          {
            name = "aws-smithy-async";
            packageId = "aws-smithy-async";
          }
          {
            name = "aws-smithy-eventstream";
            packageId = "aws-smithy-eventstream";
            optional = true;
          }
          {
            name = "aws-smithy-http";
            packageId = "aws-smithy-http";
          }
          {
            name = "aws-smithy-runtime";
            packageId = "aws-smithy-runtime";
            features = [ "client" ];
          }
          {
            name = "aws-smithy-runtime-api";
            packageId = "aws-smithy-runtime-api";
            features = [ "client" ];
          }
          {
            name = "aws-smithy-types";
            packageId = "aws-smithy-types";
          }
          {
            name = "aws-types";
            packageId = "aws-types";
          }
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "fastrand";
            packageId = "fastrand";
          }
          {
            name = "http";
            packageId = "http 0.2.12";
            rename = "http-02x";
          }
          {
            name = "http-body";
            packageId = "http-body 0.4.6";
            rename = "http-body-04x";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "percent-encoding";
            packageId = "percent-encoding";
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "uuid";
            packageId = "uuid 1.10.0";
          }
        ];
        devDependencies = [
          {
            name = "aws-credential-types";
            packageId = "aws-credential-types";
            features = [ "test-util" ];
          }
          {
            name = "aws-smithy-async";
            packageId = "aws-smithy-async";
            features = [ "test-util" ];
          }
          {
            name = "aws-smithy-runtime-api";
            packageId = "aws-smithy-runtime-api";
            features = [ "test-util" ];
          }
          {
            name = "aws-smithy-types";
            packageId = "aws-smithy-types";
            features = [ "test-util" ];
          }
        ];
        features = {
          "event-stream" = [ "dep:aws-smithy-eventstream" "aws-sigv4/sign-eventstream" ];
          "http-1x" = [ "dep:http-1x" "dep:http-body-1x" ];
          "sigv4a" = [ "aws-sigv4/sigv4a" ];
          "test-util" = [ "dep:regex-lite" ];
        };
        resolvedDefaultFeatures = [ "event-stream" "http-02x" "sigv4a" ];
      };
      "aws-sdk-dynamodb" = rec {
        crateName = "aws-sdk-dynamodb";
        version = "1.47.0";
        edition = "2021";
        sha256 = "06zs4mfw61dcpwb6gchmbx2q66rfb9jnbm1zrkmyq0aa6zkn3g4a";
        libName = "aws_sdk_dynamodb";
        authors = [
          "AWS Rust SDK Team <aws-sdk-rust@amazon.com>"
          "Russell Cohen <rcoh@amazon.com>"
        ];
        dependencies = [
          {
            name = "aws-credential-types";
            packageId = "aws-credential-types";
          }
          {
            name = "aws-runtime";
            packageId = "aws-runtime";
          }
          {
            name = "aws-smithy-async";
            packageId = "aws-smithy-async";
          }
          {
            name = "aws-smithy-http";
            packageId = "aws-smithy-http";
          }
          {
            name = "aws-smithy-json";
            packageId = "aws-smithy-json";
          }
          {
            name = "aws-smithy-runtime";
            packageId = "aws-smithy-runtime";
            features = [ "client" ];
          }
          {
            name = "aws-smithy-runtime-api";
            packageId = "aws-smithy-runtime-api";
            features = [ "client" "http-02x" ];
          }
          {
            name = "aws-smithy-types";
            packageId = "aws-smithy-types";
          }
          {
            name = "aws-types";
            packageId = "aws-types";
          }
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "fastrand";
            packageId = "fastrand";
          }
          {
            name = "http";
            packageId = "http 0.2.12";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "regex-lite";
            packageId = "regex-lite";
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
        ];
        devDependencies = [
          {
            name = "aws-credential-types";
            packageId = "aws-credential-types";
            features = [ "test-util" ];
          }
          {
            name = "aws-runtime";
            packageId = "aws-runtime";
            features = [ "test-util" ];
          }
          {
            name = "aws-smithy-async";
            packageId = "aws-smithy-async";
            features = [ "test-util" ];
          }
          {
            name = "aws-smithy-runtime";
            packageId = "aws-smithy-runtime";
            features = [ "test-util" "wire-mock" "client" ];
          }
          {
            name = "aws-smithy-runtime-api";
            packageId = "aws-smithy-runtime-api";
            features = [ "test-util" ];
          }
          {
            name = "aws-smithy-types";
            packageId = "aws-smithy-types";
            features = [ "test-util" ];
          }
        ];
        features = {
          "default" = [ "rustls" "rt-tokio" ];
          "rt-tokio" = [ "aws-smithy-async/rt-tokio" "aws-smithy-types/rt-tokio" ];
          "rustls" = [ "aws-smithy-runtime/tls-rustls" ];
          "test-util" = [ "aws-credential-types/test-util" "aws-smithy-runtime/test-util" ];
        };
        resolvedDefaultFeatures = [ "default" "rt-tokio" "rustls" ];
      };
      "aws-sdk-ec2" = rec {
        crateName = "aws-sdk-ec2";
        version = "1.74.1";
        edition = "2021";
        sha256 = "1gpy1fwrbypfydrzyy3fs4wwd3klqfxvpspsdzamwir4igfp8vxb";
        libName = "aws_sdk_ec2";
        authors = [
          "AWS Rust SDK Team <aws-sdk-rust@amazon.com>"
          "Russell Cohen <rcoh@amazon.com>"
        ];
        dependencies = [
          {
            name = "aws-credential-types";
            packageId = "aws-credential-types";
          }
          {
            name = "aws-runtime";
            packageId = "aws-runtime";
          }
          {
            name = "aws-smithy-async";
            packageId = "aws-smithy-async";
          }
          {
            name = "aws-smithy-http";
            packageId = "aws-smithy-http";
          }
          {
            name = "aws-smithy-json";
            packageId = "aws-smithy-json";
          }
          {
            name = "aws-smithy-query";
            packageId = "aws-smithy-query";
          }
          {
            name = "aws-smithy-runtime";
            packageId = "aws-smithy-runtime";
            features = [ "client" ];
          }
          {
            name = "aws-smithy-runtime-api";
            packageId = "aws-smithy-runtime-api";
            features = [ "client" "http-02x" ];
          }
          {
            name = "aws-smithy-types";
            packageId = "aws-smithy-types";
          }
          {
            name = "aws-smithy-xml";
            packageId = "aws-smithy-xml";
          }
          {
            name = "aws-types";
            packageId = "aws-types";
          }
          {
            name = "fastrand";
            packageId = "fastrand";
          }
          {
            name = "http";
            packageId = "http 0.2.12";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "regex-lite";
            packageId = "regex-lite";
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
        ];
        devDependencies = [
          {
            name = "aws-credential-types";
            packageId = "aws-credential-types";
            features = [ "test-util" ];
          }
          {
            name = "aws-runtime";
            packageId = "aws-runtime";
            features = [ "test-util" ];
          }
          {
            name = "aws-smithy-async";
            packageId = "aws-smithy-async";
            features = [ "test-util" ];
          }
          {
            name = "aws-smithy-runtime";
            packageId = "aws-smithy-runtime";
            features = [ "test-util" "wire-mock" ];
          }
          {
            name = "aws-smithy-runtime-api";
            packageId = "aws-smithy-runtime-api";
            features = [ "test-util" ];
          }
          {
            name = "aws-smithy-types";
            packageId = "aws-smithy-types";
            features = [ "test-util" ];
          }
        ];
        features = {
          "default" = [ "rustls" "rt-tokio" ];
          "rt-tokio" = [ "aws-smithy-async/rt-tokio" "aws-smithy-types/rt-tokio" ];
          "rustls" = [ "aws-smithy-runtime/tls-rustls" ];
          "test-util" = [ "aws-credential-types/test-util" "aws-smithy-runtime/test-util" ];
        };
        resolvedDefaultFeatures = [ "default" "rt-tokio" "rustls" ];
      };
      "aws-sdk-kms" = rec {
        crateName = "aws-sdk-kms";
        version = "1.44.0";
        edition = "2021";
        sha256 = "0al0gxvgs6hyrrzi0y5135x5c5q8alpmljjz6y1r6g4iw12h8mf6";
        libName = "aws_sdk_kms";
        authors = [
          "AWS Rust SDK Team <aws-sdk-rust@amazon.com>"
          "Russell Cohen <rcoh@amazon.com>"
        ];
        dependencies = [
          {
            name = "aws-credential-types";
            packageId = "aws-credential-types";
          }
          {
            name = "aws-runtime";
            packageId = "aws-runtime";
          }
          {
            name = "aws-smithy-async";
            packageId = "aws-smithy-async";
          }
          {
            name = "aws-smithy-http";
            packageId = "aws-smithy-http";
          }
          {
            name = "aws-smithy-json";
            packageId = "aws-smithy-json";
          }
          {
            name = "aws-smithy-runtime";
            packageId = "aws-smithy-runtime";
            features = [ "client" ];
          }
          {
            name = "aws-smithy-runtime-api";
            packageId = "aws-smithy-runtime-api";
            features = [ "client" "http-02x" ];
          }
          {
            name = "aws-smithy-types";
            packageId = "aws-smithy-types";
          }
          {
            name = "aws-types";
            packageId = "aws-types";
          }
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "http";
            packageId = "http 0.2.12";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "regex-lite";
            packageId = "regex-lite";
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
        ];
        devDependencies = [
          {
            name = "aws-credential-types";
            packageId = "aws-credential-types";
            features = [ "test-util" ];
          }
          {
            name = "aws-runtime";
            packageId = "aws-runtime";
            features = [ "test-util" ];
          }
          {
            name = "aws-smithy-async";
            packageId = "aws-smithy-async";
            features = [ "test-util" ];
          }
          {
            name = "aws-smithy-runtime";
            packageId = "aws-smithy-runtime";
            features = [ "test-util" "wire-mock" ];
          }
          {
            name = "aws-smithy-runtime-api";
            packageId = "aws-smithy-runtime-api";
            features = [ "test-util" ];
          }
          {
            name = "aws-smithy-types";
            packageId = "aws-smithy-types";
            features = [ "test-util" ];
          }
        ];
        features = {
          "default" = [ "rustls" "rt-tokio" ];
          "rt-tokio" = [ "aws-smithy-async/rt-tokio" "aws-smithy-types/rt-tokio" ];
          "rustls" = [ "aws-smithy-runtime/tls-rustls" ];
          "test-util" = [ "aws-credential-types/test-util" "aws-smithy-runtime/test-util" ];
        };
        resolvedDefaultFeatures = [ "default" "rt-tokio" "rustls" ];
      };
      "aws-sdk-s3" = rec {
        crateName = "aws-sdk-s3";
        version = "1.51.0";
        edition = "2021";
        sha256 = "0a05ph69hls5vd2nspqjp667zbhxa3q3ykrvj4mzaxgdqysx97y0";
        libName = "aws_sdk_s3";
        authors = [
          "AWS Rust SDK Team <aws-sdk-rust@amazon.com>"
          "Russell Cohen <rcoh@amazon.com>"
        ];
        dependencies = [
          {
            name = "ahash";
            packageId = "ahash 0.8.11";
            usesDefaultFeatures = false;
          }
          {
            name = "aws-credential-types";
            packageId = "aws-credential-types";
          }
          {
            name = "aws-runtime";
            packageId = "aws-runtime";
            features = [ "event-stream" "http-02x" ];
          }
          {
            name = "aws-sigv4";
            packageId = "aws-sigv4";
          }
          {
            name = "aws-smithy-async";
            packageId = "aws-smithy-async";
          }
          {
            name = "aws-smithy-checksums";
            packageId = "aws-smithy-checksums";
          }
          {
            name = "aws-smithy-eventstream";
            packageId = "aws-smithy-eventstream";
          }
          {
            name = "aws-smithy-http";
            packageId = "aws-smithy-http";
            features = [ "event-stream" ];
          }
          {
            name = "aws-smithy-json";
            packageId = "aws-smithy-json";
          }
          {
            name = "aws-smithy-runtime";
            packageId = "aws-smithy-runtime";
            features = [ "client" ];
          }
          {
            name = "aws-smithy-runtime-api";
            packageId = "aws-smithy-runtime-api";
            features = [ "client" "http-02x" ];
          }
          {
            name = "aws-smithy-types";
            packageId = "aws-smithy-types";
          }
          {
            name = "aws-smithy-xml";
            packageId = "aws-smithy-xml";
          }
          {
            name = "aws-types";
            packageId = "aws-types";
          }
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "fastrand";
            packageId = "fastrand";
          }
          {
            name = "hex";
            packageId = "hex";
          }
          {
            name = "hmac";
            packageId = "hmac";
          }
          {
            name = "http";
            packageId = "http 0.2.12";
          }
          {
            name = "http-body";
            packageId = "http-body 0.4.6";
          }
          {
            name = "lru";
            packageId = "lru 0.12.4";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "percent-encoding";
            packageId = "percent-encoding";
          }
          {
            name = "regex-lite";
            packageId = "regex-lite";
          }
          {
            name = "sha2";
            packageId = "sha2 0.10.8";
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "url";
            packageId = "url";
          }
        ];
        devDependencies = [
          {
            name = "aws-credential-types";
            packageId = "aws-credential-types";
            features = [ "test-util" ];
          }
          {
            name = "aws-runtime";
            packageId = "aws-runtime";
            features = [ "test-util" ];
          }
          {
            name = "aws-smithy-async";
            packageId = "aws-smithy-async";
            features = [ "test-util" ];
          }
          {
            name = "aws-smithy-runtime";
            packageId = "aws-smithy-runtime";
            features = [ "test-util" "wire-mock" "client" ];
          }
          {
            name = "aws-smithy-runtime-api";
            packageId = "aws-smithy-runtime-api";
            features = [ "test-util" "client" "http-02x" ];
          }
          {
            name = "aws-smithy-types";
            packageId = "aws-smithy-types";
            features = [ "test-util" ];
          }
        ];
        features = {
          "default" = [ "sigv4a" "rustls" "rt-tokio" ];
          "http-1x" = [ "dep:http-1x" "dep:http-body-1x" "aws-smithy-runtime-api/http-1x" ];
          "rt-tokio" = [ "aws-smithy-async/rt-tokio" "aws-smithy-types/rt-tokio" ];
          "rustls" = [ "aws-smithy-runtime/tls-rustls" ];
          "sigv4a" = [ "aws-runtime/sigv4a" ];
          "test-util" = [ "aws-credential-types/test-util" "aws-smithy-runtime/test-util" ];
        };
        resolvedDefaultFeatures = [ "default" "rt-tokio" "rustls" "sigv4a" ];
      };
      "aws-sdk-sso" = rec {
        crateName = "aws-sdk-sso";
        version = "1.43.0";
        edition = "2021";
        sha256 = "1wpf7h2b03ajgmww866rmzyl6v30872ipbvxqi012ay1s5zd5abh";
        libName = "aws_sdk_sso";
        authors = [
          "AWS Rust SDK Team <aws-sdk-rust@amazon.com>"
          "Russell Cohen <rcoh@amazon.com>"
        ];
        dependencies = [
          {
            name = "aws-credential-types";
            packageId = "aws-credential-types";
          }
          {
            name = "aws-runtime";
            packageId = "aws-runtime";
          }
          {
            name = "aws-smithy-async";
            packageId = "aws-smithy-async";
          }
          {
            name = "aws-smithy-http";
            packageId = "aws-smithy-http";
          }
          {
            name = "aws-smithy-json";
            packageId = "aws-smithy-json";
          }
          {
            name = "aws-smithy-runtime";
            packageId = "aws-smithy-runtime";
            features = [ "client" ];
          }
          {
            name = "aws-smithy-runtime-api";
            packageId = "aws-smithy-runtime-api";
            features = [ "client" "http-02x" ];
          }
          {
            name = "aws-smithy-types";
            packageId = "aws-smithy-types";
          }
          {
            name = "aws-types";
            packageId = "aws-types";
          }
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "http";
            packageId = "http 0.2.12";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "regex-lite";
            packageId = "regex-lite";
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
        ];
        devDependencies = [
          {
            name = "aws-credential-types";
            packageId = "aws-credential-types";
            features = [ "test-util" ];
          }
        ];
        features = {
          "default" = [ "rustls" "rt-tokio" ];
          "rt-tokio" = [ "aws-smithy-async/rt-tokio" "aws-smithy-types/rt-tokio" ];
          "rustls" = [ "aws-smithy-runtime/tls-rustls" ];
          "test-util" = [ "aws-credential-types/test-util" "aws-smithy-runtime/test-util" ];
        };
      };
      "aws-sdk-ssooidc" = rec {
        crateName = "aws-sdk-ssooidc";
        version = "1.44.0";
        edition = "2021";
        sha256 = "16y2dz5isjawpkcah3ap7q73v27idvgq26ra3vg6qs37m5n4lla4";
        libName = "aws_sdk_ssooidc";
        authors = [
          "AWS Rust SDK Team <aws-sdk-rust@amazon.com>"
          "Russell Cohen <rcoh@amazon.com>"
        ];
        dependencies = [
          {
            name = "aws-credential-types";
            packageId = "aws-credential-types";
          }
          {
            name = "aws-runtime";
            packageId = "aws-runtime";
          }
          {
            name = "aws-smithy-async";
            packageId = "aws-smithy-async";
          }
          {
            name = "aws-smithy-http";
            packageId = "aws-smithy-http";
          }
          {
            name = "aws-smithy-json";
            packageId = "aws-smithy-json";
          }
          {
            name = "aws-smithy-runtime";
            packageId = "aws-smithy-runtime";
            features = [ "client" ];
          }
          {
            name = "aws-smithy-runtime-api";
            packageId = "aws-smithy-runtime-api";
            features = [ "client" "http-02x" ];
          }
          {
            name = "aws-smithy-types";
            packageId = "aws-smithy-types";
          }
          {
            name = "aws-types";
            packageId = "aws-types";
          }
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "http";
            packageId = "http 0.2.12";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "regex-lite";
            packageId = "regex-lite";
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
        ];
        devDependencies = [
          {
            name = "aws-credential-types";
            packageId = "aws-credential-types";
            features = [ "test-util" ];
          }
        ];
        features = {
          "default" = [ "rustls" "rt-tokio" ];
          "rt-tokio" = [ "aws-smithy-async/rt-tokio" "aws-smithy-types/rt-tokio" ];
          "rustls" = [ "aws-smithy-runtime/tls-rustls" ];
          "test-util" = [ "aws-credential-types/test-util" "aws-smithy-runtime/test-util" ];
        };
      };
      "aws-sdk-sts" = rec {
        crateName = "aws-sdk-sts";
        version = "1.43.0";
        edition = "2021";
        sha256 = "0nhcjs1h42i09mmk3qkzaiwgxm4mif0gc2bjz6fmp8v2jwklsynd";
        libName = "aws_sdk_sts";
        authors = [
          "AWS Rust SDK Team <aws-sdk-rust@amazon.com>"
          "Russell Cohen <rcoh@amazon.com>"
        ];
        dependencies = [
          {
            name = "aws-credential-types";
            packageId = "aws-credential-types";
          }
          {
            name = "aws-runtime";
            packageId = "aws-runtime";
          }
          {
            name = "aws-smithy-async";
            packageId = "aws-smithy-async";
          }
          {
            name = "aws-smithy-http";
            packageId = "aws-smithy-http";
          }
          {
            name = "aws-smithy-json";
            packageId = "aws-smithy-json";
          }
          {
            name = "aws-smithy-query";
            packageId = "aws-smithy-query";
          }
          {
            name = "aws-smithy-runtime";
            packageId = "aws-smithy-runtime";
            features = [ "client" ];
          }
          {
            name = "aws-smithy-runtime-api";
            packageId = "aws-smithy-runtime-api";
            features = [ "client" "http-02x" ];
          }
          {
            name = "aws-smithy-types";
            packageId = "aws-smithy-types";
          }
          {
            name = "aws-smithy-xml";
            packageId = "aws-smithy-xml";
          }
          {
            name = "aws-types";
            packageId = "aws-types";
          }
          {
            name = "http";
            packageId = "http 0.2.12";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "regex-lite";
            packageId = "regex-lite";
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
        ];
        devDependencies = [
          {
            name = "aws-credential-types";
            packageId = "aws-credential-types";
            features = [ "test-util" ];
          }
          {
            name = "aws-runtime";
            packageId = "aws-runtime";
            features = [ "test-util" ];
          }
          {
            name = "aws-smithy-async";
            packageId = "aws-smithy-async";
            features = [ "test-util" ];
          }
          {
            name = "aws-smithy-runtime";
            packageId = "aws-smithy-runtime";
            features = [ "test-util" "wire-mock" ];
          }
          {
            name = "aws-smithy-runtime-api";
            packageId = "aws-smithy-runtime-api";
            features = [ "test-util" ];
          }
          {
            name = "aws-smithy-types";
            packageId = "aws-smithy-types";
            features = [ "test-util" ];
          }
        ];
        features = {
          "default" = [ "rustls" "rt-tokio" ];
          "rt-tokio" = [ "aws-smithy-async/rt-tokio" "aws-smithy-types/rt-tokio" ];
          "rustls" = [ "aws-smithy-runtime/tls-rustls" ];
          "test-util" = [ "aws-credential-types/test-util" "aws-smithy-runtime/test-util" ];
        };
      };
      "aws-sigv4" = rec {
        crateName = "aws-sigv4";
        version = "1.2.4";
        edition = "2021";
        sha256 = "0s5ysci4xnwjz44580hswj4i1hccz0ir3jn6fdsgxfjh8j8bd3fc";
        libName = "aws_sigv4";
        authors = [
          "AWS Rust SDK Team <aws-sdk-rust@amazon.com>"
          "David Barsky <me@davidbarsky.com>"
        ];
        dependencies = [
          {
            name = "aws-credential-types";
            packageId = "aws-credential-types";
          }
          {
            name = "aws-smithy-eventstream";
            packageId = "aws-smithy-eventstream";
            optional = true;
          }
          {
            name = "aws-smithy-http";
            packageId = "aws-smithy-http";
          }
          {
            name = "aws-smithy-runtime-api";
            packageId = "aws-smithy-runtime-api";
            features = [ "client" ];
          }
          {
            name = "aws-smithy-types";
            packageId = "aws-smithy-types";
          }
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "crypto-bigint";
            packageId = "crypto-bigint 0.5.5";
            optional = true;
          }
          {
            name = "form_urlencoded";
            packageId = "form_urlencoded";
            optional = true;
          }
          {
            name = "hex";
            packageId = "hex";
          }
          {
            name = "hmac";
            packageId = "hmac";
          }
          {
            name = "http";
            packageId = "http 0.2.12";
            rename = "http0";
            optional = true;
          }
          {
            name = "http";
            packageId = "http 1.1.0";
            optional = true;
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "p256";
            packageId = "p256 0.11.1";
            optional = true;
            features = [ "ecdsa" ];
          }
          {
            name = "percent-encoding";
            packageId = "percent-encoding";
            optional = true;
          }
          {
            name = "ring";
            packageId = "ring 0.17.8";
            optional = true;
          }
          {
            name = "sha2";
            packageId = "sha2 0.10.8";
          }
          {
            name = "subtle";
            packageId = "subtle";
            optional = true;
          }
          {
            name = "time";
            packageId = "time";
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            optional = true;
          }
        ];
        devDependencies = [
          {
            name = "aws-credential-types";
            packageId = "aws-credential-types";
            features = [ "test-util" "hardcoded-credentials" ];
          }
          {
            name = "aws-smithy-runtime-api";
            packageId = "aws-smithy-runtime-api";
            features = [ "client" "test-util" ];
          }
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "ring";
            packageId = "ring 0.17.8";
            target = {target, features}: (!(("powerpc" == target."arch" or null) || ("powerpc64" == target."arch" or null)));
          }
          {
            name = "time";
            packageId = "time";
            features = [ "parsing" ];
          }
        ];
        features = {
          "default" = [ "sign-http" "http1" ];
          "http0-compat" = [ "dep:http0" ];
          "http1" = [ "dep:http" ];
          "sign-eventstream" = [ "dep:aws-smithy-eventstream" ];
          "sign-http" = [ "dep:http0" "dep:percent-encoding" "dep:form_urlencoded" ];
          "sigv4a" = [ "dep:p256" "dep:crypto-bigint" "dep:subtle" "dep:zeroize" "dep:ring" ];
        };
        resolvedDefaultFeatures = [ "default" "http0-compat" "http1" "sign-eventstream" "sign-http" "sigv4a" ];
      };
      "aws-smithy-async" = rec {
        crateName = "aws-smithy-async";
        version = "1.2.1";
        edition = "2021";
        sha256 = "131pl4pagdv6zyj1iidgfx370vlrg0gkdwdma7fnv53zx730n8k2";
        libName = "aws_smithy_async";
        authors = [
          "AWS Rust SDK Team <aws-sdk-rust@amazon.com>"
          "John DiSanti <jdisanti@amazon.com>"
        ];
        dependencies = [
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "sync" ];
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "rt" "macros" "test-util" ];
          }
        ];
        features = {
          "rt-tokio" = [ "tokio/time" ];
          "test-util" = [ "rt-tokio" "tokio/rt" ];
        };
        resolvedDefaultFeatures = [ "rt-tokio" ];
      };
      "aws-smithy-checksums" = rec {
        crateName = "aws-smithy-checksums";
        version = "0.60.12";
        edition = "2021";
        sha256 = "08rxpwbc3nna9cr4pb73ms1nfy1pgnqav1mk7kfd9i01s24id2sr";
        libName = "aws_smithy_checksums";
        authors = [
          "AWS Rust SDK Team <aws-sdk-rust@amazon.com>"
          "Zelda Hessler <zhessler@amazon.com>"
        ];
        dependencies = [
          {
            name = "aws-smithy-http";
            packageId = "aws-smithy-http";
          }
          {
            name = "aws-smithy-types";
            packageId = "aws-smithy-types";
          }
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "crc32c";
            packageId = "crc32c";
          }
          {
            name = "crc32fast";
            packageId = "crc32fast";
          }
          {
            name = "hex";
            packageId = "hex";
          }
          {
            name = "http";
            packageId = "http 0.2.12";
          }
          {
            name = "http-body";
            packageId = "http-body 0.4.6";
          }
          {
            name = "md-5";
            packageId = "md-5";
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "sha1";
            packageId = "sha1";
          }
          {
            name = "sha2";
            packageId = "sha2 0.10.8";
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
        ];

      };
      "aws-smithy-eventstream" = rec {
        crateName = "aws-smithy-eventstream";
        version = "0.60.5";
        edition = "2021";
        sha256 = "143wxwb9kmm6cz1imbj9kqdzck8yqbw8kgx23gjqfpvjfaid1xyf";
        libName = "aws_smithy_eventstream";
        authors = [
          "AWS Rust SDK Team <aws-sdk-rust@amazon.com>"
          "John DiSanti <jdisanti@amazon.com>"
        ];
        dependencies = [
          {
            name = "aws-smithy-types";
            packageId = "aws-smithy-types";
          }
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "crc32fast";
            packageId = "crc32fast";
          }
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "derive-arbitrary" = [ "arbitrary" "derive_arbitrary" ];
          "derive_arbitrary" = [ "dep:derive_arbitrary" ];
        };
      };
      "aws-smithy-http" = rec {
        crateName = "aws-smithy-http";
        version = "0.60.11";
        edition = "2021";
        sha256 = "1dksgm36hch21s1fm7vskfip4gsmzq11qc3fjxyx1f66zplc72sw";
        libName = "aws_smithy_http";
        authors = [
          "AWS Rust SDK Team <aws-sdk-rust@amazon.com>"
          "Russell Cohen <rcoh@amazon.com>"
        ];
        dependencies = [
          {
            name = "aws-smithy-eventstream";
            packageId = "aws-smithy-eventstream";
            optional = true;
          }
          {
            name = "aws-smithy-runtime-api";
            packageId = "aws-smithy-runtime-api";
            features = [ "client" "http-02x" ];
          }
          {
            name = "aws-smithy-types";
            packageId = "aws-smithy-types";
            features = [ "byte-stream-poll-next" "http-body-0-4-x" ];
          }
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "bytes-utils";
            packageId = "bytes-utils";
          }
          {
            name = "futures-core";
            packageId = "futures-core";
          }
          {
            name = "http";
            packageId = "http 0.2.12";
            rename = "http-02x";
          }
          {
            name = "http-body";
            packageId = "http-body 0.4.6";
            rename = "http-body-04x";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "percent-encoding";
            packageId = "percent-encoding";
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "pin-utils";
            packageId = "pin-utils";
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
        ];
        features = {
          "aws-smithy-eventstream" = [ "dep:aws-smithy-eventstream" ];
          "event-stream" = [ "aws-smithy-eventstream" ];
          "rt-tokio" = [ "aws-smithy-types/rt-tokio" ];
        };
        resolvedDefaultFeatures = [ "aws-smithy-eventstream" "event-stream" ];
      };
      "aws-smithy-json" = rec {
        crateName = "aws-smithy-json";
        version = "0.60.7";
        edition = "2021";
        sha256 = "1mpjhs26q22jglmm85rnb79s0681jqlx2wrlmn6lc2ggd6adz0s6";
        libName = "aws_smithy_json";
        authors = [
          "AWS Rust SDK Team <aws-sdk-rust@amazon.com>"
          "John DiSanti <jdisanti@amazon.com>"
        ];
        dependencies = [
          {
            name = "aws-smithy-types";
            packageId = "aws-smithy-types";
          }
        ];

      };
      "aws-smithy-query" = rec {
        crateName = "aws-smithy-query";
        version = "0.60.7";
        edition = "2021";
        sha256 = "1fv43jv9p3z9c4x1154zrlrmhcy5rs4jdr2jfg5s3s1zxcfddyzj";
        libName = "aws_smithy_query";
        authors = [
          "AWS Rust SDK Team <aws-sdk-rust@amazon.com>"
          "John DiSanti <jdisanti@amazon.com>"
        ];
        dependencies = [
          {
            name = "aws-smithy-types";
            packageId = "aws-smithy-types";
          }
          {
            name = "urlencoding";
            packageId = "urlencoding";
          }
        ];

      };
      "aws-smithy-runtime" = rec {
        crateName = "aws-smithy-runtime";
        version = "1.7.1";
        edition = "2021";
        sha256 = "11zbz3bw02mdsmypdl32m12nvnwm603zwf8b03kp4irr8rbnkkni";
        libName = "aws_smithy_runtime";
        authors = [
          "AWS Rust SDK Team <aws-sdk-rust@amazon.com>"
          "Zelda Hessler <zhessler@amazon.com>"
        ];
        dependencies = [
          {
            name = "aws-smithy-async";
            packageId = "aws-smithy-async";
          }
          {
            name = "aws-smithy-http";
            packageId = "aws-smithy-http";
          }
          {
            name = "aws-smithy-runtime-api";
            packageId = "aws-smithy-runtime-api";
          }
          {
            name = "aws-smithy-types";
            packageId = "aws-smithy-types";
            features = [ "http-body-0-4-x" ];
          }
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "fastrand";
            packageId = "fastrand";
          }
          {
            name = "h2";
            packageId = "h2 0.3.26";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "http";
            packageId = "http 0.2.12";
            rename = "http-02x";
          }
          {
            name = "http-body";
            packageId = "http-body 0.4.6";
            rename = "http-body-04x";
          }
          {
            name = "http-body";
            packageId = "http-body 1.0.1";
            rename = "http-body-1x";
          }
          {
            name = "httparse";
            packageId = "httparse";
          }
          {
            name = "hyper";
            packageId = "hyper 0.14.30";
            rename = "hyper-0-14";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "hyper-rustls";
            packageId = "hyper-rustls 0.24.2";
            optional = true;
            features = [ "rustls-native-certs" "http2" ];
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "pin-utils";
            packageId = "pin-utils";
          }
          {
            name = "rustls";
            packageId = "rustls 0.21.12";
            optional = true;
          }
          {
            name = "tokio";
            packageId = "tokio";
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
        ];
        devDependencies = [
          {
            name = "aws-smithy-async";
            packageId = "aws-smithy-async";
            features = [ "rt-tokio" "test-util" ];
          }
          {
            name = "aws-smithy-runtime-api";
            packageId = "aws-smithy-runtime-api";
            features = [ "test-util" ];
          }
          {
            name = "aws-smithy-types";
            packageId = "aws-smithy-types";
            features = [ "test-util" ];
          }
          {
            name = "hyper";
            packageId = "hyper 0.14.30";
            rename = "hyper_0_14";
            features = [ "client" "server" "tcp" "http1" "http2" ];
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "macros" "rt" "rt-multi-thread" "test-util" "full" ];
          }
        ];
        features = {
          "client" = [ "aws-smithy-runtime-api/client" "aws-smithy-types/http-body-1-x" ];
          "connector-hyper-0-14-x" = [ "dep:hyper-0-14" "hyper-0-14?/client" "hyper-0-14?/http2" "hyper-0-14?/http1" "hyper-0-14?/tcp" "hyper-0-14?/stream" "dep:h2" ];
          "http-auth" = [ "aws-smithy-runtime-api/http-auth" ];
          "rt-tokio" = [ "tokio/rt" ];
          "test-util" = [ "aws-smithy-runtime-api/test-util" "dep:aws-smithy-protocol-test" "dep:tracing-subscriber" "dep:serde" "dep:serde_json" "dep:indexmap" ];
          "tls-rustls" = [ "dep:hyper-rustls" "dep:rustls" "connector-hyper-0-14-x" ];
          "wire-mock" = [ "test-util" "connector-hyper-0-14-x" "hyper-0-14?/server" ];
        };
        resolvedDefaultFeatures = [ "client" "connector-hyper-0-14-x" "rt-tokio" "tls-rustls" ];
      };
      "aws-smithy-runtime-api" = rec {
        crateName = "aws-smithy-runtime-api";
        version = "1.7.2";
        edition = "2021";
        sha256 = "15nvixz2qn219pl0vb9fmksz566fvyl0y4daj88j9ankacm6i1p0";
        libName = "aws_smithy_runtime_api";
        authors = [
          "AWS Rust SDK Team <aws-sdk-rust@amazon.com>"
          "Zelda Hessler <zhessler@amazon.com>"
        ];
        dependencies = [
          {
            name = "aws-smithy-async";
            packageId = "aws-smithy-async";
          }
          {
            name = "aws-smithy-types";
            packageId = "aws-smithy-types";
          }
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "http";
            packageId = "http 0.2.12";
            rename = "http-02x";
          }
          {
            name = "http";
            packageId = "http 1.1.0";
            rename = "http-1x";
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "sync" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            optional = true;
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "macros" "rt" "rt-multi-thread" ];
          }
        ];
        features = {
          "http-auth" = [ "dep:zeroize" ];
          "test-util" = [ "aws-smithy-types/test-util" "http-1x" ];
        };
        resolvedDefaultFeatures = [ "client" "default" "http-02x" "http-1x" "http-auth" "test-util" ];
      };
      "aws-smithy-types" = rec {
        crateName = "aws-smithy-types";
        version = "1.2.6";
        edition = "2021";
        sha256 = "0196yb1mhpv1qzq5mv1r6jwlrlnm1pppz8bykhvba5bj114i8w03";
        libName = "aws_smithy_types";
        authors = [
          "AWS Rust SDK Team <aws-sdk-rust@amazon.com>"
          "Russell Cohen <rcoh@amazon.com>"
        ];
        dependencies = [
          {
            name = "base64-simd";
            packageId = "base64-simd";
          }
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "bytes-utils";
            packageId = "bytes-utils";
          }
          {
            name = "futures-core";
            packageId = "futures-core";
            optional = true;
          }
          {
            name = "http";
            packageId = "http 0.2.12";
            optional = true;
          }
          {
            name = "http";
            packageId = "http 1.1.0";
            rename = "http-1x";
            optional = true;
          }
          {
            name = "http-body";
            packageId = "http-body 0.4.6";
            rename = "http-body-0-4";
            optional = true;
          }
          {
            name = "http-body";
            packageId = "http-body 1.0.1";
            rename = "http-body-1-0";
            optional = true;
          }
          {
            name = "http-body-util";
            packageId = "http-body-util";
            optional = true;
          }
          {
            name = "itoa";
            packageId = "itoa";
          }
          {
            name = "num-integer";
            packageId = "num-integer";
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "pin-utils";
            packageId = "pin-utils";
          }
          {
            name = "ryu";
            packageId = "ryu";
          }
          {
            name = "serde";
            packageId = "serde";
            target = { target, features }: (target."aws_sdk_unstable" or false);
            features = [ "derive" ];
          }
          {
            name = "time";
            packageId = "time";
            features = [ "parsing" ];
          }
          {
            name = "tokio";
            packageId = "tokio";
            optional = true;
          }
          {
            name = "tokio-util";
            packageId = "tokio-util 0.7.12";
            optional = true;
          }
        ];
        devDependencies = [
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "macros" "rt" "rt-multi-thread" "fs" "io-util" ];
          }
        ];
        features = {
          "http-body-0-4-x" = [ "dep:http-body-0-4" "dep:http" ];
          "http-body-1-x" = [ "dep:http-body-1-0" "dep:http-body-util" "dep:http-body-0-4" "dep:http-1x" "dep:http" ];
          "hyper-0-14-x" = [ "dep:hyper-0-14" ];
          "rt-tokio" = [ "dep:http-body-0-4" "dep:tokio-util" "dep:tokio" "tokio?/rt" "tokio?/fs" "tokio?/io-util" "tokio-util?/io" "dep:futures-core" "dep:http" ];
        };
        resolvedDefaultFeatures = [ "byte-stream-poll-next" "http-body-0-4-x" "http-body-1-x" "rt-tokio" "test-util" ];
      };
      "aws-smithy-xml" = rec {
        crateName = "aws-smithy-xml";
        version = "0.60.9";
        edition = "2021";
        sha256 = "1z280vwfd49scifxqhnhp383a759ngw757sivk9h19vsh9k022xb";
        libName = "aws_smithy_xml";
        authors = [
          "AWS Rust SDK Team <aws-sdk-rust@amazon.com>"
          "Russell Cohen <rcoh@amazon.com>"
        ];
        dependencies = [
          {
            name = "xmlparser";
            packageId = "xmlparser";
          }
        ];

      };
      "aws-types" = rec {
        crateName = "aws-types";
        version = "1.3.3";
        edition = "2021";
        sha256 = "1vrzq4d9zv2dwp0gcvjln4n7f6w0hj4zsa8865snc7j47qdvj8aj";
        libName = "aws_types";
        authors = [
          "AWS Rust SDK Team <aws-sdk-rust@amazon.com>"
          "Russell Cohen <rcoh@amazon.com>"
        ];
        dependencies = [
          {
            name = "aws-credential-types";
            packageId = "aws-credential-types";
          }
          {
            name = "aws-smithy-async";
            packageId = "aws-smithy-async";
          }
          {
            name = "aws-smithy-runtime-api";
            packageId = "aws-smithy-runtime-api";
            features = [ "client" ];
          }
          {
            name = "aws-smithy-types";
            packageId = "aws-smithy-types";
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
        ];
        buildDependencies = [
          {
            name = "rustc_version";
            packageId = "rustc_version";
          }
        ];
        devDependencies = [
          {
            name = "aws-smithy-runtime-api";
            packageId = "aws-smithy-runtime-api";
            features = [ "http-02x" ];
          }
        ];
        features = {
          "aws-smithy-runtime" = [ "dep:aws-smithy-runtime" ];
          "examples" = [ "dep:hyper-rustls" "aws-smithy-runtime/client" "aws-smithy-runtime/connector-hyper-0-14-x" "aws-smithy-runtime/tls-rustls" ];
        };
      };
      "axum" = rec {
        crateName = "axum";
        version = "0.7.6";
        edition = "2021";
        sha256 = "1v1czdx91xnsi8bz1gbg3whcs0gadb6nwhxgy5s563v9xm768hwg";
        dependencies = [
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "axum-core";
            packageId = "axum-core";
          }
          {
            name = "base64";
            packageId = "base64 0.21.7";
            optional = true;
          }
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "http";
            packageId = "http 1.1.0";
          }
          {
            name = "http-body";
            packageId = "http-body 1.0.1";
          }
          {
            name = "http-body-util";
            packageId = "http-body-util";
          }
          {
            name = "hyper";
            packageId = "hyper 1.4.1";
            optional = true;
          }
          {
            name = "hyper-util";
            packageId = "hyper-util";
            optional = true;
            features = [ "tokio" "server" "service" ];
          }
          {
            name = "itoa";
            packageId = "itoa";
          }
          {
            name = "matchit";
            packageId = "matchit 0.7.3";
          }
          {
            name = "memchr";
            packageId = "memchr";
          }
          {
            name = "mime";
            packageId = "mime";
          }
          {
            name = "percent-encoding";
            packageId = "percent-encoding";
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "rustversion";
            packageId = "rustversion";
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            optional = true;
            features = [ "raw_value" ];
          }
          {
            name = "serde_path_to_error";
            packageId = "serde_path_to_error";
            optional = true;
          }
          {
            name = "serde_urlencoded";
            packageId = "serde_urlencoded";
            optional = true;
          }
          {
            name = "sha1";
            packageId = "sha1";
            optional = true;
          }
          {
            name = "sync_wrapper";
            packageId = "sync_wrapper 1.0.1";
          }
          {
            name = "tokio";
            packageId = "tokio";
            rename = "tokio";
            optional = true;
            features = [ "time" ];
          }
          {
            name = "tokio-tungstenite";
            packageId = "tokio-tungstenite 0.23.1";
            optional = true;
          }
          {
            name = "tower";
            packageId = "tower 0.5.1";
            usesDefaultFeatures = false;
            features = [ "util" ];
          }
          {
            name = "tower-layer";
            packageId = "tower-layer";
          }
          {
            name = "tower-service";
            packageId = "tower-service";
          }
          {
            name = "tracing";
            packageId = "tracing";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "tokio";
            packageId = "tokio";
            rename = "tokio";
            features = [ "macros" "rt" "rt-multi-thread" "net" "test-util" ];
          }
          {
            name = "tokio-tungstenite";
            packageId = "tokio-tungstenite 0.23.1";
          }
          {
            name = "tower";
            packageId = "tower 0.5.1";
            rename = "tower";
            features = [ "util" "timeout" "limit" "load-shed" "steer" "filter" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
        ];
        features = {
          "__private_docs" = [ "tower/full" "dep:tower-http" ];
          "default" = [ "form" "http1" "json" "matched-path" "original-uri" "query" "tokio" "tower-log" "tracing" ];
          "form" = [ "dep:serde_urlencoded" ];
          "http1" = [ "dep:hyper" "hyper?/http1" "hyper-util?/http1" ];
          "http2" = [ "dep:hyper" "hyper?/http2" "hyper-util?/http2" ];
          "json" = [ "dep:serde_json" "dep:serde_path_to_error" ];
          "macros" = [ "dep:axum-macros" ];
          "multipart" = [ "dep:multer" ];
          "query" = [ "dep:serde_urlencoded" ];
          "tokio" = [ "dep:hyper-util" "dep:tokio" "tokio/net" "tokio/rt" "tower/make" "tokio/macros" ];
          "tower-log" = [ "tower/log" ];
          "tracing" = [ "dep:tracing" "axum-core/tracing" ];
          "ws" = [ "dep:hyper" "tokio" "dep:tokio-tungstenite" "dep:sha1" "dep:base64" ];
        };
        resolvedDefaultFeatures = [ "default" "form" "http1" "http2" "json" "matched-path" "original-uri" "query" "tokio" "tower-log" "tracing" "ws" ];
      };
      "axum-core" = rec {
        crateName = "axum-core";
        version = "0.4.4";
        edition = "2021";
        sha256 = "005zckpdaag6a9a5nv4qdzd4jqgnvjfqp8nzk8ydcn522ah8nssy";
        libName = "axum_core";
        dependencies = [
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "http";
            packageId = "http 1.1.0";
          }
          {
            name = "http-body";
            packageId = "http-body 1.0.1";
          }
          {
            name = "http-body-util";
            packageId = "http-body-util";
          }
          {
            name = "mime";
            packageId = "mime";
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "rustversion";
            packageId = "rustversion";
          }
          {
            name = "sync_wrapper";
            packageId = "sync_wrapper 1.0.1";
          }
          {
            name = "tower-layer";
            packageId = "tower-layer";
          }
          {
            name = "tower-service";
            packageId = "tower-service";
          }
          {
            name = "tracing";
            packageId = "tracing";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
        ];
        features = {
          "__private_docs" = [ "dep:tower-http" ];
          "tracing" = [ "dep:tracing" ];
        };
        resolvedDefaultFeatures = [ "tracing" ];
      };
      "axum-extra" = rec {
        crateName = "axum-extra";
        version = "0.9.4";
        edition = "2021";
        sha256 = "1ydi660sqd9bl6252axx12xkdn9v3jqgkidny6f71sla305j5hvk";
        libName = "axum_extra";
        dependencies = [
          {
            name = "axum";
            packageId = "axum";
            usesDefaultFeatures = false;
          }
          {
            name = "axum-core";
            packageId = "axum-core";
          }
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "headers";
            packageId = "headers";
            optional = true;
          }
          {
            name = "http";
            packageId = "http 1.1.0";
          }
          {
            name = "http-body";
            packageId = "http-body 1.0.1";
          }
          {
            name = "http-body-util";
            packageId = "http-body-util";
          }
          {
            name = "mime";
            packageId = "mime";
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "tower";
            packageId = "tower 0.5.1";
            usesDefaultFeatures = false;
            features = [ "util" ];
          }
          {
            name = "tower-layer";
            packageId = "tower-layer";
          }
          {
            name = "tower-service";
            packageId = "tower-service";
          }
          {
            name = "tracing";
            packageId = "tracing";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "axum";
            packageId = "axum";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "tower";
            packageId = "tower 0.5.1";
            features = [ "util" ];
          }
        ];
        features = {
          "async-read-body" = [ "dep:tokio-util" "tokio-util?/io" "dep:tokio" ];
          "attachment" = [ "dep:tracing" ];
          "cookie" = [ "dep:cookie" ];
          "cookie-key-expansion" = [ "cookie" "cookie?/key-expansion" ];
          "cookie-private" = [ "cookie" "cookie?/private" ];
          "cookie-signed" = [ "cookie" "cookie?/signed" ];
          "default" = [ "tracing" ];
          "erased-json" = [ "dep:serde_json" ];
          "form" = [ "dep:serde_html_form" ];
          "json-deserializer" = [ "dep:serde_json" "dep:serde_path_to_error" ];
          "json-lines" = [ "dep:serde_json" "dep:tokio-util" "dep:tokio-stream" "tokio-util?/io" "tokio-stream?/io-util" "dep:tokio" ];
          "multipart" = [ "dep:multer" ];
          "protobuf" = [ "dep:prost" ];
          "query" = [ "dep:serde_html_form" ];
          "tracing" = [ "dep:tracing" "axum-core/tracing" "axum/tracing" ];
          "typed-header" = [ "dep:headers" ];
          "typed-routing" = [ "dep:axum-macros" "dep:percent-encoding" "dep:serde_html_form" "dep:form_urlencoded" ];
        };
        resolvedDefaultFeatures = [ "default" "tracing" "typed-header" ];
      };
      "axum-server" = rec {
        crateName = "axum-server";
        version = "0.6.1";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/bmwill/axum-server.git";
          rev = "f44323e271afdd1365fd0c8b0a4c0bbdf4956cb7";
          sha256 = "102ya135423jgynryjqdq2ik3q94fazywpm8gfxf6089aascz4mh";
        };
        libName = "axum_server";
        authors = [
          "Programatik <programatik29@gmail.com>"
          "Adi Salimgereev <adisalimgereev@gmail.com>"
        ];
        dependencies = [
          {
            name = "arc-swap";
            packageId = "arc-swap";
            optional = true;
          }
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "http";
            packageId = "http 1.1.0";
          }
          {
            name = "http-body";
            packageId = "http-body 1.0.1";
          }
          {
            name = "http-body-util";
            packageId = "http-body-util";
          }
          {
            name = "hyper";
            packageId = "hyper 1.4.1";
            features = [ "http1" "http2" "server" ];
          }
          {
            name = "hyper-util";
            packageId = "hyper-util";
            features = [ "server-auto" "tokio" ];
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "rustls";
            packageId = "rustls 0.23.13";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "rustls-pemfile";
            packageId = "rustls-pemfile 2.1.3";
            optional = true;
          }
          {
            name = "rustls-pki-types";
            packageId = "rustls-pki-types";
            optional = true;
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "macros" "net" "sync" ];
          }
          {
            name = "tokio-rustls";
            packageId = "tokio-rustls 0.26.0";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "tower";
            packageId = "tower 0.4.13";
            features = [ "util" ];
          }
          {
            name = "tower-service";
            packageId = "tower-service";
          }
        ];
        devDependencies = [
          {
            name = "hyper";
            packageId = "hyper 1.4.1";
            features = [ "full" ];
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "full" ];
          }
          {
            name = "tower";
            packageId = "tower 0.4.13";
            features = [ "util" ];
          }
        ];
        features = {
          "arc-swap" = [ "dep:arc-swap" ];
          "openssl" = [ "dep:openssl" ];
          "rustls" = [ "dep:rustls" ];
          "rustls-pemfile" = [ "dep:rustls-pemfile" ];
          "rustls-pki-types" = [ "dep:rustls-pki-types" ];
          "tls-openssl" = [ "arc-swap" "openssl" "tokio-openssl" ];
          "tls-rustls" = [ "arc-swap" "rustls" "rustls-pemfile" "tokio/fs" "tokio/time" "tokio-rustls" "rustls-pki-types" ];
          "tokio-openssl" = [ "dep:tokio-openssl" ];
          "tokio-rustls" = [ "dep:tokio-rustls" ];
        };
        resolvedDefaultFeatures = [ "arc-swap" "rustls" "rustls-pemfile" "rustls-pki-types" "tls-rustls" "tokio-rustls" ];
      };
      "backoff" = rec {
        crateName = "backoff";
        version = "0.4.0";
        edition = "2018";
        sha256 = "1h80d9xn5wngxdgza2m8w4x1kyhk0x6k9ydvsj50j2pcn6fdnbdn";
        authors = [
          "Tibor Benke <ihrwein@gmail.com>"
        ];
        dependencies = [
          {
            name = "futures-core";
            packageId = "futures-core";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "getrandom";
            packageId = "getrandom 0.2.15";
          }
          {
            name = "instant";
            packageId = "instant";
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
            optional = true;
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "tokio";
            packageId = "tokio";
            rename = "tokio_1";
            optional = true;
            features = [ "time" ];
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            rename = "tokio_1";
            features = [ "macros" "time" "rt-multi-thread" ];
          }
        ];
        features = {
          "async-std" = [ "futures" "async_std_1" ];
          "async_std_1" = [ "dep:async_std_1" ];
          "futures" = [ "futures-core" "pin-project-lite" ];
          "futures-core" = [ "dep:futures-core" ];
          "pin-project-lite" = [ "dep:pin-project-lite" ];
          "tokio" = [ "futures" "tokio_1" ];
          "tokio_1" = [ "dep:tokio_1" ];
          "wasm-bindgen" = [ "instant/wasm-bindgen" "getrandom/js" ];
        };
        resolvedDefaultFeatures = [ "default" "futures" "futures-core" "pin-project-lite" "tokio" "tokio_1" ];
      };
      "backtrace" = rec {
        crateName = "backtrace";
        version = "0.3.71";
        edition = "2021";
        sha256 = "17bgd7pbjb9gc8q47qwsg2lmy9i62x3bsjmmnjrwh5z8s805ic16";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "addr2line";
            packageId = "addr2line";
            usesDefaultFeatures = false;
            target = { target, features }: (!((target."windows" or false) && ("msvc" == target."env" or null) && (!("uwp" == target."vendor" or null))));
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: (!((target."windows" or false) && ("msvc" == target."env" or null) && (!("uwp" == target."vendor" or null))));
          }
          {
            name = "miniz_oxide";
            packageId = "miniz_oxide 0.7.4";
            usesDefaultFeatures = false;
            target = { target, features }: (!((target."windows" or false) && ("msvc" == target."env" or null) && (!("uwp" == target."vendor" or null))));
          }
          {
            name = "object";
            packageId = "object";
            usesDefaultFeatures = false;
            target = { target, features }: (!((target."windows" or false) && ("msvc" == target."env" or null) && (!("uwp" == target."vendor" or null))));
            features = [ "read_core" "elf" "macho" "pe" "xcoff" "unaligned" "archive" ];
          }
          {
            name = "rustc-demangle";
            packageId = "rustc-demangle";
          }
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
          }
        ];
        features = {
          "cpp_demangle" = [ "dep:cpp_demangle" ];
          "default" = [ "std" ];
          "rustc-serialize" = [ "dep:rustc-serialize" ];
          "serde" = [ "dep:serde" ];
          "serialize-rustc" = [ "rustc-serialize" ];
          "serialize-serde" = [ "serde" ];
          "verify-winapi" = [ "winapi/dbghelp" "winapi/handleapi" "winapi/libloaderapi" "winapi/memoryapi" "winapi/minwindef" "winapi/processthreadsapi" "winapi/synchapi" "winapi/tlhelp32" "winapi/winbase" "winapi/winnt" ];
          "winapi" = [ "dep:winapi" ];
        };
        resolvedDefaultFeatures = [ "default" "gimli-symbolize" "std" ];
      };
      "backtrace-ext" = rec {
        crateName = "backtrace-ext";
        version = "0.2.1";
        edition = "2018";
        sha256 = "0l4xacjnx4jrn9k14xbs2swks018mviq03sp7c1gn62apviywysk";
        libName = "backtrace_ext";
        dependencies = [
          {
            name = "backtrace";
            packageId = "backtrace";
          }
        ];

      };
      "base-x" = rec {
        crateName = "base-x";
        version = "0.2.11";
        edition = "2015";
        sha256 = "0w02sdqvg7zwm91agb2phikw4ri8jmncw32paxsv8ra1jv8ckfsc";
        libName = "base_x";
        authors = [
          "Alex R. <alexei.rudenko@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
      };
      "base16ct 0.1.1" = rec {
        crateName = "base16ct";
        version = "0.1.1";
        edition = "2021";
        sha256 = "1klccxr7igf73wpi0x3asjd8n0xjg0v6a7vxgvfk5ybvgh1hd6il";
        authors = [
          "RustCrypto Developers"
        ];
        features = {
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" ];
      };
      "base16ct 0.2.0" = rec {
        crateName = "base16ct";
        version = "0.2.0";
        edition = "2021";
        sha256 = "1kylrjhdzk7qpknrvlphw8ywdnvvg39dizw9622w3wk5xba04zsc";
        authors = [
          "RustCrypto Developers"
        ];
        features = {
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" ];
      };
      "base64 0.13.1" = rec {
        crateName = "base64";
        version = "0.13.1";
        edition = "2018";
        sha256 = "1s494mqmzjb766fy1kqlccgfg2sdcjb6hzbvzqv2jw65fdi5h6wy";
        authors = [
          "Alice Maz <alice@alicemaz.com>"
          "Marshall Pierce <marshall@mpierce.org>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "base64 0.21.7" = rec {
        crateName = "base64";
        version = "0.21.7";
        edition = "2018";
        sha256 = "0rw52yvsk75kar9wgqfwgb414kvil1gn7mqkrhn9zf1537mpsacx";
        authors = [
          "Alice Maz <alice@alicemaz.com>"
          "Marshall Pierce <marshall@mpierce.org>"
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "base64 0.22.1" = rec {
        crateName = "base64";
        version = "0.22.1";
        edition = "2018";
        sha256 = "1imqzgh7bxcikp5vx3shqvw9j09g9ly0xr0jma0q66i52r7jbcvj";
        authors = [
          "Marshall Pierce <marshall@mpierce.org>"
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "base64-simd" = rec {
        crateName = "base64-simd";
        version = "0.8.0";
        edition = "2021";
        sha256 = "15cihnjqpxy0h7llpk816czyp5z613yrvsivw9i8f5vkivkvp6ik";
        libName = "base64_simd";
        dependencies = [
          {
            name = "outref";
            packageId = "outref";
          }
          {
            name = "vsimd";
            packageId = "vsimd";
          }
        ];
        features = {
          "alloc" = [ "vsimd/alloc" ];
          "default" = [ "std" "detect" ];
          "detect" = [ "vsimd/detect" ];
          "std" = [ "alloc" "vsimd/std" ];
          "unstable" = [ "vsimd/unstable" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "detect" "std" ];
      };
      "base64-url" = rec {
        crateName = "base64-url";
        version = "2.0.2";
        edition = "2021";
        sha256 = "0sc53i8ysxnsa0b4x84q2j3ka9zsxqhrm3f8bwxhdhwc0pxvk7zv";
        libName = "base64_url";
        authors = [
          "Magic Len <len@magiclen.org>"
        ];
        dependencies = [
          {
            name = "base64";
            packageId = "base64 0.21.7";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "base64/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "base64ct" = rec {
        crateName = "base64ct";
        version = "1.6.0";
        edition = "2021";
        sha256 = "0nvdba4jb8aikv60az40x2w1y96sjdq8z3yp09rwzmkhiwv1lg4c";
        authors = [
          "RustCrypto Developers"
        ];
        features = {
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "std" ];
      };
      "bcrypt-pbkdf" = rec {
        crateName = "bcrypt-pbkdf";
        version = "0.10.0";
        edition = "2021";
        sha256 = "18pjhsy3m2v0silsp4mjzz8i92zrpqxk9b059zrnk1w8zvhw5ska";
        libName = "bcrypt_pbkdf";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "blowfish";
            packageId = "blowfish";
            features = [ "bcrypt" ];
          }
          {
            name = "pbkdf2";
            packageId = "pbkdf2 0.12.2";
            usesDefaultFeatures = false;
          }
          {
            name = "sha2";
            packageId = "sha2 0.10.8";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "alloc" "std" ];
          "zeroize" = [ "dep:zeroize" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "bcs" = rec {
        crateName = "bcs";
        version = "0.1.6";
        edition = "2018";
        sha256 = "02j4gd4kh6829lx8d2xxf9dgz363s5pv1ijxhnvlymjx5y55kdl5";
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
        ];

      };
      "bech32" = rec {
        crateName = "bech32";
        version = "0.9.1";
        edition = "2018";
        sha256 = "0igl565rfpxwbh0g36cb7469sjkiap8yd21kcr0ppi2jfbwr6syq";
        authors = [
          "Clark Moody"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "beef" = rec {
        crateName = "beef";
        version = "0.5.2";
        edition = "2018";
        sha256 = "1c95lbnhld96iwwbyh5kzykbpysq0fnjfhwxa1mhap5qxgrl30is";
        authors = [
          "Maciej Hirsz <hello@maciej.codes>"
        ];
        features = {
          "impl_serde" = [ "serde" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "bellpepper" = rec {
        crateName = "bellpepper";
        version = "0.4.1";
        edition = "2021";
        sha256 = "0yyz3qn2gvfp4skhi6a2m4nfapxjrs6wcz2ccjmj8cs0rg18dqls";
        authors = [
          "porcuquine <porcuquine@gmail.com>"
          "dignifiedquire <me@dignifiedquire.com>"
          "Sean Bowe <ewillbefull@gmail.com>"
        ];
        dependencies = [
          {
            name = "bellpepper-core";
            packageId = "bellpepper-core";
          }
          {
            name = "byteorder";
            packageId = "byteorder";
          }
          {
            name = "ff";
            packageId = "ff 0.13.0";
          }
        ];

      };
      "bellpepper-core" = rec {
        crateName = "bellpepper-core";
        version = "0.4.0";
        edition = "2021";
        sha256 = "1shsrc708qq6c688kkz1i571vhpyxlcip112syb66xbhhm0vp2hx";
        libName = "bellpepper_core";
        authors = [
          "porcuquine <porcuquine@gmail.com>"
          "dignifiedquire <me@dignifiedquire.com>"
          "Sean Bowe <ewillbefull@gmail.com>"
        ];
        dependencies = [
          {
            name = "blake2s_simd";
            packageId = "blake2s_simd";
          }
          {
            name = "byteorder";
            packageId = "byteorder";
          }
          {
            name = "ff";
            packageId = "ff 0.13.0";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
        ];

      };
      "better_any" = rec {
        crateName = "better_any";
        version = "0.1.1";
        edition = "2018";
        sha256 = "186l77d2db2d48r72gn5956g10q841hvdz4yw4jwf5vwjfyswndk";
        authors = [
          "Konstantin Anisimov <rrevenantt@gmail.com>"
        ];
        dependencies = [
          {
            name = "better_typeid_derive";
            packageId = "better_typeid_derive";
          }
        ];

      };
      "better_typeid_derive" = rec {
        crateName = "better_typeid_derive";
        version = "0.1.1";
        edition = "2018";
        sha256 = "1qr6kaqxarf1g7fr3iin7lf53lzbq8676vznsfvh0lya2awfrvix";
        procMacro = true;
        authors = [
          "Konstantin Anisimov <rrevenantt@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.86";
          }
          {
            name = "quote";
            packageId = "quote 1.0.37";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            features = [ "full" ];
          }
        ];

      };
      "bigdecimal" = rec {
        crateName = "bigdecimal";
        version = "0.4.5";
        edition = "2015";
        sha256 = "1vhcsi3y2683y9kzskq3v7v5a6x9bwd34yv74q1ibir7i8qi5msi";
        authors = [
          "Andrew Kubera"
        ];
        dependencies = [
          {
            name = "libm";
            packageId = "libm";
          }
          {
            name = "num-bigint";
            packageId = "num-bigint 0.4.6";
            usesDefaultFeatures = false;
          }
          {
            name = "num-integer";
            packageId = "num-integer";
            usesDefaultFeatures = false;
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
          "serde-json" = [ "serde/derive" "serde_json" ];
          "serde_json" = [ "dep:serde_json" ];
          "std" = [ "num-bigint/std" "num-integer/std" "num-traits/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "bimap" = rec {
        crateName = "bimap";
        version = "0.6.3";
        edition = "2018";
        sha256 = "1xx4dns6hj0mf1sl47lh3r0z4jcvmhqhsr7qacjs69d3lqf5y313";
        authors = [
          "Billy Rieger <wrieger@protonmail.com>"
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "bin-version" = rec {
        crateName = "bin-version";
        version = "0.5.0-alpha";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/bin-version; }
          else ./crates/bin-version;
        libName = "bin_version";
        dependencies = [
          {
            name = "const-str";
            packageId = "const-str";
          }
          {
            name = "git-version";
            packageId = "git-version";
          }
        ];

      };
      "bincode" = rec {
        crateName = "bincode";
        version = "1.3.3";
        edition = "2015";
        sha256 = "1bfw3mnwzx5g1465kiqllp5n4r10qrqy88kdlp3jfwnq2ya5xx5i";
        authors = [
          "Ty Overby <ty@pre-alpha.com>"
          "Francesco Mazzoli <f@mazzo.li>"
          "David Tolnay <dtolnay@gmail.com>"
          "Zoey Riordan <zoey@dos.cafe>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
          }
        ];
        features = {
        };
      };
      "bindgen 0.65.1" = rec {
        crateName = "bindgen";
        version = "0.65.1";
        edition = "2018";
        sha256 = "1i9wci1h3xnk8hi7cf06capgifnmpk9dd59zqznh6jcsdx37ppyg";
        libPath = "lib.rs";
        authors = [
          "Jyun-Yan You <jyyou.tw@gmail.com>"
          "Emilio Cobos Álvarez <emilio@crisal.io>"
          "Nick Fitzgerald <fitzgen@gmail.com>"
          "The Servo project developers"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 1.3.2";
          }
          {
            name = "cexpr";
            packageId = "cexpr";
          }
          {
            name = "clang-sys";
            packageId = "clang-sys";
            features = [ "clang_6_0" ];
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "lazycell";
            packageId = "lazycell";
          }
          {
            name = "peeking_take_while";
            packageId = "peeking_take_while";
          }
          {
            name = "prettyplease";
            packageId = "prettyplease";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.86";
            usesDefaultFeatures = false;
          }
          {
            name = "quote";
            packageId = "quote 1.0.37";
            usesDefaultFeatures = false;
          }
          {
            name = "regex";
            packageId = "regex";
            usesDefaultFeatures = false;
            features = [ "std" "unicode" ];
          }
          {
            name = "rustc-hash";
            packageId = "rustc-hash 1.1.0";
          }
          {
            name = "shlex";
            packageId = "shlex";
          }
          {
            name = "syn";
            packageId = "syn 2.0.77";
            features = [ "full" "extra-traits" "visit-mut" ];
          }
        ];
        features = {
          "annotate-snippets" = [ "dep:annotate-snippets" ];
          "default" = [ "logging" "runtime" "which-rustfmt" ];
          "experimental" = [ "annotate-snippets" ];
          "log" = [ "dep:log" ];
          "logging" = [ "log" ];
          "runtime" = [ "clang-sys/runtime" ];
          "static" = [ "clang-sys/static" ];
          "which" = [ "dep:which" ];
          "which-rustfmt" = [ "which" ];
        };
        resolvedDefaultFeatures = [ "runtime" ];
      };
      "bindgen 0.69.5" = rec {
        crateName = "bindgen";
        version = "0.69.5";
        edition = "2018";
        sha256 = "1240snlcfj663k04bjsg629g4wx6f83flgbjh5rzpgyagk3864r7";
        libPath = "lib.rs";
        authors = [
          "Jyun-Yan You <jyyou.tw@gmail.com>"
          "Emilio Cobos Álvarez <emilio@crisal.io>"
          "Nick Fitzgerald <fitzgen@gmail.com>"
          "The Servo project developers"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.6.0";
          }
          {
            name = "cexpr";
            packageId = "cexpr";
          }
          {
            name = "clang-sys";
            packageId = "clang-sys";
            features = [ "clang_6_0" ];
          }
          {
            name = "itertools";
            packageId = "itertools 0.10.5";
            usesDefaultFeatures = false;
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "lazycell";
            packageId = "lazycell";
          }
          {
            name = "log";
            packageId = "log";
            optional = true;
          }
          {
            name = "prettyplease";
            packageId = "prettyplease";
            optional = true;
            features = [ "verbatim" ];
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.86";
            usesDefaultFeatures = false;
          }
          {
            name = "quote";
            packageId = "quote 1.0.37";
            usesDefaultFeatures = false;
          }
          {
            name = "regex";
            packageId = "regex";
            usesDefaultFeatures = false;
            features = [ "std" "unicode-perl" ];
          }
          {
            name = "rustc-hash";
            packageId = "rustc-hash 1.1.0";
          }
          {
            name = "shlex";
            packageId = "shlex";
          }
          {
            name = "syn";
            packageId = "syn 2.0.77";
            features = [ "full" "extra-traits" "visit-mut" ];
          }
          {
            name = "which";
            packageId = "which";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "logging" "prettyplease" "runtime" "which-rustfmt" ];
          "experimental" = [ "dep:annotate-snippets" ];
          "logging" = [ "dep:log" ];
          "prettyplease" = [ "dep:prettyplease" ];
          "runtime" = [ "clang-sys/runtime" ];
          "static" = [ "clang-sys/static" ];
          "which-rustfmt" = [ "dep:which" ];
        };
        resolvedDefaultFeatures = [ "default" "logging" "prettyplease" "runtime" "which-rustfmt" ];
      };
      "bip32" = rec {
        crateName = "bip32";
        version = "0.5.2";
        edition = "2021";
        sha256 = "0nx175kmrf3iczz7p7v0g1yisrk826sg9ypphvyp4n15nvlgl4xa";
        authors = [
          "Tony Arcieri <tony@iqlusion.io>"
        ];
        dependencies = [
          {
            name = "bs58";
            packageId = "bs58 0.5.1";
            usesDefaultFeatures = false;
            features = [ "check" ];
          }
          {
            name = "hmac";
            packageId = "hmac";
            usesDefaultFeatures = false;
          }
          {
            name = "k256";
            packageId = "k256";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "ecdsa" "sha256" ];
          }
          {
            name = "once_cell";
            packageId = "once_cell";
            optional = true;
          }
          {
            name = "pbkdf2";
            packageId = "pbkdf2 0.12.2";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "hmac" ];
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
            usesDefaultFeatures = false;
          }
          {
            name = "ripemd";
            packageId = "ripemd";
            usesDefaultFeatures = false;
          }
          {
            name = "sha2";
            packageId = "sha2 0.10.8";
            usesDefaultFeatures = false;
          }
          {
            name = "subtle";
            packageId = "subtle";
            usesDefaultFeatures = false;
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
            features = [ "std" ];
          }
        ];
        features = {
          "alloc" = [ "zeroize/alloc" ];
          "bip39" = [ "mnemonic" "pbkdf2" "std" ];
          "default" = [ "bip39" "secp256k1" "std" ];
          "k256" = [ "dep:k256" ];
          "mnemonic" = [ "alloc" "once_cell" ];
          "once_cell" = [ "dep:once_cell" ];
          "pbkdf2" = [ "dep:pbkdf2" ];
          "secp256k1" = [ "k256" ];
          "secp256k1-ffi" = [ "dep:secp256k1-ffi" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "bip39" "default" "k256" "mnemonic" "once_cell" "pbkdf2" "secp256k1" "std" ];
      };
      "bit-set" = rec {
        crateName = "bit-set";
        version = "0.5.3";
        edition = "2015";
        sha256 = "1wcm9vxi00ma4rcxkl3pzzjli6ihrpn9cfdi0c5b4cvga2mxs007";
        libName = "bit_set";
        authors = [
          "Alexis Beingessner <a.beingessner@gmail.com>"
        ];
        dependencies = [
          {
            name = "bit-vec";
            packageId = "bit-vec";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "bit-vec/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "bit-vec" = rec {
        crateName = "bit-vec";
        version = "0.6.3";
        edition = "2015";
        sha256 = "1ywqjnv60cdh1slhz67psnp422md6jdliji6alq0gmly2xm9p7rl";
        libName = "bit_vec";
        authors = [
          "Alexis Beingessner <a.beingessner@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
          "serde_no_std" = [ "serde/alloc" ];
          "serde_std" = [ "std" "serde/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "bitcoin-private" = rec {
        crateName = "bitcoin-private";
        version = "0.1.0";
        edition = "2018";
        sha256 = "0mvskwi8hndf1p4d875qli4sfzmbhw1ms5jyqa7g750n05vh2abk";
        libName = "bitcoin_private";
        authors = [
          "Andrew Poelstra <apoelstra@wpsoftware.net>"
          "The Rust Bitcoin developers"
        ];
        features = {
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "bitcoin_hashes" = rec {
        crateName = "bitcoin_hashes";
        version = "0.12.0";
        edition = "2018";
        sha256 = "009515xwsczs6qh6qwlmkziff758nggk4nb44c5v5m0kic8ncw2x";
        authors = [
          "Andrew Poelstra <apoelstra@wpsoftware.net>"
        ];
        dependencies = [
          {
            name = "bitcoin-private";
            packageId = "bitcoin-private";
            rename = "internals";
          }
        ];
        features = {
          "actual-schemars" = [ "dep:actual-schemars" ];
          "alloc" = [ "internals/alloc" ];
          "core2" = [ "dep:core2" ];
          "default" = [ "std" ];
          "dyn-clone" = [ "dep:dyn-clone" ];
          "schemars" = [ "actual-schemars" "dyn-clone" ];
          "serde" = [ "dep:serde" ];
          "serde-std" = [ "serde/std" ];
          "std" = [ "alloc" "internals/std" ];
        };
      };
      "bitflags 1.3.2" = rec {
        crateName = "bitflags";
        version = "1.3.2";
        edition = "2018";
        sha256 = "12ki6w8gn1ldq7yz9y680llwk5gmrhrzszaa17g1sbrw2r2qvwxy";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "rustc-dep-of-std" = [ "core" "compiler_builtins" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "bitflags 2.6.0" = rec {
        crateName = "bitflags";
        version = "2.6.0";
        edition = "2021";
        sha256 = "1pkidwzn3hnxlsl8zizh0bncgbjnw7c41cx7bby26ncbzmiznj5h";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "bytemuck" = [ "dep:bytemuck" ];
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "rustc-dep-of-std" = [ "core" "compiler_builtins" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "serde" "std" ];
      };
      "bitmaps" = rec {
        crateName = "bitmaps";
        version = "2.1.0";
        edition = "2018";
        sha256 = "18k4mcwxl96yvii5kcljkpb8pg5j4jj1zbsdn26nsx4r83846403";
        authors = [
          "Bodil Stokke <bodil@bodil.org>"
        ];
        dependencies = [
          {
            name = "typenum";
            packageId = "typenum";
          }
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "bitvec 0.20.4" = rec {
        crateName = "bitvec";
        version = "0.20.4";
        edition = "2018";
        sha256 = "0j3qn0z31j06c965hs3kh41l78hxbzzsf1h46xvs3ym48i1i8x3p";
        authors = [
          "myrrlyn <self@myrrlyn.dev>"
        ];
        dependencies = [
          {
            name = "funty";
            packageId = "funty 1.1.0";
            usesDefaultFeatures = false;
          }
          {
            name = "radium";
            packageId = "radium 0.6.2";
          }
          {
            name = "tap";
            packageId = "tap";
          }
          {
            name = "wyz";
            packageId = "wyz 0.2.0";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "wyz/alloc" ];
          "default" = [ "atomic" "std" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "std" ];
      };
      "bitvec 1.0.1" = rec {
        crateName = "bitvec";
        version = "1.0.1";
        edition = "2021";
        sha256 = "173ydyj2q5vwj88k6xgjnfsshs4x9wbvjjv7sm0h36r34hn87hhv";
        dependencies = [
          {
            name = "funty";
            packageId = "funty 2.0.0";
            usesDefaultFeatures = false;
          }
          {
            name = "radium";
            packageId = "radium 0.7.0";
          }
          {
            name = "tap";
            packageId = "tap";
          }
          {
            name = "wyz";
            packageId = "wyz 0.5.1";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "atomic" "std" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "atomic" "default" "std" ];
      };
      "blake2" = rec {
        crateName = "blake2";
        version = "0.10.6";
        edition = "2018";
        sha256 = "1zlf7w7gql12v61d9jcbbswa3dw8qxsjglylsiljp9f9b3a2ll26";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "digest";
            packageId = "digest 0.10.7";
            features = [ "mac" ];
          }
        ];
        devDependencies = [
          {
            name = "digest";
            packageId = "digest 0.10.7";
            features = [ "dev" ];
          }
        ];
        features = {
          "default" = [ "std" ];
          "simd_asm" = [ "simd_opt" ];
          "simd_opt" = [ "simd" ];
          "std" = [ "digest/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "blake2b_simd" = rec {
        crateName = "blake2b_simd";
        version = "1.0.2";
        edition = "2018";
        sha256 = "102pfciq6g59hf47gv6kix42cgpqw8pjyf9hx0r3jyb94b9mla13";
        authors = [
          "Jack O'Connor"
        ];
        dependencies = [
          {
            name = "arrayref";
            packageId = "arrayref";
          }
          {
            name = "arrayvec";
            packageId = "arrayvec";
            usesDefaultFeatures = false;
          }
          {
            name = "constant_time_eq";
            packageId = "constant_time_eq 0.3.1";
          }
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "blake2s_simd" = rec {
        crateName = "blake2s_simd";
        version = "1.0.2";
        edition = "2018";
        sha256 = "1bjnywrhn17ndnzzp40z6cjif3m2fxfyl4yz4c6r5fcmwchh88wl";
        authors = [
          "Jack O'Connor"
        ];
        dependencies = [
          {
            name = "arrayref";
            packageId = "arrayref";
          }
          {
            name = "arrayvec";
            packageId = "arrayvec";
            usesDefaultFeatures = false;
          }
          {
            name = "constant_time_eq";
            packageId = "constant_time_eq 0.3.1";
          }
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "block-buffer 0.10.4" = rec {
        crateName = "block-buffer";
        version = "0.10.4";
        edition = "2018";
        sha256 = "0w9sa2ypmrsqqvc20nhwr75wbb5cjr4kkyhpjm1z1lv2kdicfy1h";
        libName = "block_buffer";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "generic-array";
            packageId = "generic-array";
          }
        ];

      };
      "block-buffer 0.9.0" = rec {
        crateName = "block-buffer";
        version = "0.9.0";
        edition = "2018";
        sha256 = "1r4pf90s7d7lj1wdjhlnqa26vvbm6pnc33z138lxpnp9srpi2lj1";
        libName = "block_buffer";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "block-padding";
            packageId = "block-padding 0.2.1";
            optional = true;
          }
          {
            name = "generic-array";
            packageId = "generic-array";
          }
        ];
        features = {
          "block-padding" = [ "dep:block-padding" ];
        };
        resolvedDefaultFeatures = [ "block-padding" ];
      };
      "block-padding 0.2.1" = rec {
        crateName = "block-padding";
        version = "0.2.1";
        edition = "2018";
        sha256 = "1bickjlmfw9iv63dp781n589rfybw879mik1va59833m1hvnqscd";
        libName = "block_padding";
        authors = [
          "RustCrypto Developers"
        ];

      };
      "block-padding 0.3.3" = rec {
        crateName = "block-padding";
        version = "0.3.3";
        edition = "2021";
        sha256 = "14wdad0r1qk5gmszxqd8cky6vx8qg7c153jv981mixzrpzmlz2d8";
        libName = "block_padding";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "generic-array";
            packageId = "generic-array";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "blowfish" = rec {
        crateName = "blowfish";
        version = "0.9.1";
        edition = "2021";
        sha256 = "1mw7bvj3bg5w8vh9xw9xawqh7ixk2xwsxkj34ph96b9b1z6y44p4";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "byteorder";
            packageId = "byteorder";
            usesDefaultFeatures = false;
          }
          {
            name = "cipher";
            packageId = "cipher";
          }
        ];
        devDependencies = [
          {
            name = "cipher";
            packageId = "cipher";
            features = [ "dev" ];
          }
        ];
        features = {
          "zeroize" = [ "cipher/zeroize" ];
        };
        resolvedDefaultFeatures = [ "bcrypt" ];
      };
      "blst" = rec {
        crateName = "blst";
        version = "0.3.13";
        edition = "2018";
        links = "blst";
        sha256 = "0x78slcs8y2h2rzpwx32i0550fr3vvv66j4672jz35f1migp4y23";
        authors = [
          "sean-sn <sean@supranational.net>"
        ];
        dependencies = [
          {
            name = "threadpool";
            packageId = "threadpool";
            target = { target, features }: (!(("wasm32" == target."arch" or null) || ("none" == target."os" or null) || ("unknown" == target."os" or null) || ("uefi" == target."os" or null)));
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            features = [ "zeroize_derive" ];
          }
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
          }
          {
            name = "glob";
            packageId = "glob";
            target = {target, features}: ("msvc" == target."env" or null);
          }
        ];
        features = {
          "serde" = [ "dep:serde" ];
          "serde-secret" = [ "serde" ];
        };
        resolvedDefaultFeatures = [ "default" "no-threads" ];
      };
      "blstrs" = rec {
        crateName = "blstrs";
        version = "0.7.1";
        edition = "2018";
        sha256 = "0afg9l66bbg6m8hjdwvwbcmf5i8j1q8y8q5lqylg9vpvzvb8x2ks";
        authors = [
          "dignifiedquire <me@dignifiedquire.com>"
        ];
        dependencies = [
          {
            name = "blst";
            packageId = "blst";
          }
          {
            name = "byte-slice-cast";
            packageId = "byte-slice-cast";
          }
          {
            name = "ff";
            packageId = "ff 0.13.0";
          }
          {
            name = "group";
            packageId = "group 0.13.0";
            features = [ "tests" ];
          }
          {
            name = "pairing";
            packageId = "pairing";
            rename = "pairing_lib";
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            features = [ "derive" ];
          }
          {
            name = "subtle";
            packageId = "subtle";
          }
        ];
        features = {
          "default" = [ "serde" ];
          "ec-gpu" = [ "dep:ec-gpu" ];
          "gpu" = [ "ec-gpu" ];
          "portable" = [ "blst/portable" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "default" "serde" ];
      };
      "bnum" = rec {
        crateName = "bnum";
        version = "0.11.0";
        edition = "2021";
        sha256 = "1457svpk7q3wwnfldzqkzfnifqvnvpnpzkx8p342mrkf7wcflc9y";
        authors = [
          "isaac-holt <isaac_holt@icloud.com>"
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "num-integer" = [ "dep:num-integer" ];
          "num-traits" = [ "dep:num-traits" ];
          "numtraits" = [ "num-integer" "num-traits" ];
          "quickcheck" = [ "dep:quickcheck" ];
          "rand" = [ "dep:rand" ];
          "serde" = [ "dep:serde" "serde-big-array" ];
          "serde-big-array" = [ "dep:serde-big-array" ];
          "valuable" = [ "dep:valuable" ];
          "zeroize" = [ "dep:zeroize" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "brotli" = rec {
        crateName = "brotli";
        version = "6.0.0";
        edition = "2015";
        crateBin = [];
        sha256 = "0swvf6cgbwhwrpd5y23vq6wipb6q2wqvi2j0hy0xa9lkplfrgxvl";
        authors = [
          "Daniel Reiter Horn <danielrh@dropbox.com>"
          "The Brotli Authors"
        ];
        dependencies = [
          {
            name = "alloc-no-stdlib";
            packageId = "alloc-no-stdlib";
          }
          {
            name = "alloc-stdlib";
            packageId = "alloc-stdlib";
            optional = true;
          }
          {
            name = "brotli-decompressor";
            packageId = "brotli-decompressor";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc-stdlib" = [ "dep:alloc-stdlib" ];
          "benchmark" = [ "brotli-decompressor/benchmark" ];
          "default" = [ "std" ];
          "disable-timer" = [ "brotli-decompressor/disable-timer" ];
          "ffi-api" = [ "brotli-decompressor/ffi-api" ];
          "seccomp" = [ "brotli-decompressor/seccomp" ];
          "sha2" = [ "dep:sha2" ];
          "std" = [ "alloc-stdlib" "brotli-decompressor/std" ];
          "validation" = [ "sha2" ];
        };
        resolvedDefaultFeatures = [ "alloc-stdlib" "default" "std" ];
      };
      "brotli-decompressor" = rec {
        crateName = "brotli-decompressor";
        version = "4.0.1";
        edition = "2015";
        crateBin = [];
        sha256 = "0qn39c7n6wm40i2bm0d3q2qslmaavlh804iv0ccbba4m80pbsics";
        libName = "brotli_decompressor";
        authors = [
          "Daniel Reiter Horn <danielrh@dropbox.com>"
          "The Brotli Authors"
        ];
        dependencies = [
          {
            name = "alloc-no-stdlib";
            packageId = "alloc-no-stdlib";
          }
          {
            name = "alloc-stdlib";
            packageId = "alloc-stdlib";
            optional = true;
          }
        ];
        features = {
          "alloc-stdlib" = [ "dep:alloc-stdlib" ];
          "default" = [ "std" ];
          "std" = [ "alloc-stdlib" ];
          "unsafe" = [ "alloc-no-stdlib/unsafe" "alloc-stdlib/unsafe" ];
        };
        resolvedDefaultFeatures = [ "alloc-stdlib" "std" ];
      };
      "bs58 0.4.0" = rec {
        crateName = "bs58";
        version = "0.4.0";
        edition = "2018";
        sha256 = "1lr3vwzhhyica4y7rbkf26vr1h7vpjb1m6rml8zcqgw81c2y07vp";
        authors = [
          "Wim Looman <wim@nemo157.com>"
        ];
        features = {
          "check" = [ "sha2" ];
          "default" = [ "std" ];
          "sha2" = [ "dep:sha2" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "bs58 0.5.1" = rec {
        crateName = "bs58";
        version = "0.5.1";
        edition = "2021";
        sha256 = "1x3v51n5n2s3l0rgrsn142akdf331n2qsa75pscw71fi848vm25z";
        dependencies = [
          {
            name = "sha2";
            packageId = "sha2 0.10.8";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "tinyvec";
            packageId = "tinyvec";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "grab_spare_slice" ];
          }
        ];
        devDependencies = [
          {
            name = "tinyvec";
            packageId = "tinyvec";
            features = [ "rustc_1_55" ];
          }
        ];
        features = {
          "alloc" = [ "tinyvec?/alloc" ];
          "cb58" = [ "sha2" ];
          "check" = [ "sha2" ];
          "default" = [ "std" ];
          "sha2" = [ "dep:sha2" ];
          "smallvec" = [ "dep:smallvec" ];
          "std" = [ "alloc" "tinyvec?/std" ];
          "tinyvec" = [ "dep:tinyvec" ];
        };
        resolvedDefaultFeatures = [ "alloc" "check" "default" "sha2" "std" ];
      };
      "bstr" = rec {
        crateName = "bstr";
        version = "1.10.0";
        edition = "2021";
        sha256 = "036wwrchd5gq3q4k6w1j2bfl2bk2ff8c0dsa9y7w7aw7nf7knwj0";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "memchr";
            packageId = "memchr";
            usesDefaultFeatures = false;
          }
          {
            name = "regex-automata";
            packageId = "regex-automata 0.4.7";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "dfa-search" ];
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "memchr/alloc" "serde?/alloc" ];
          "default" = [ "std" "unicode" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "alloc" "memchr/std" "serde?/std" ];
          "unicode" = [ "dep:regex-automata" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" "unicode" ];
      };
      "bumpalo" = rec {
        crateName = "bumpalo";
        version = "3.16.0";
        edition = "2021";
        sha256 = "0b015qb4knwanbdlp1x48pkb4pm57b8gidbhhhxr900q2wb6fabr";
        authors = [
          "Nick Fitzgerald <fitzgen@gmail.com>"
        ];
        features = {
          "allocator-api2" = [ "dep:allocator-api2" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "byte-slice-cast" = rec {
        crateName = "byte-slice-cast";
        version = "1.2.2";
        edition = "2018";
        sha256 = "033vv1qddzsj9yfsam4abj55rp60digngcr9a8wgv9pccf5rzb63";
        libName = "byte_slice_cast";
        authors = [
          "Sebastian Dröge <sebastian@centricular.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "bytecount" = rec {
        crateName = "bytecount";
        version = "0.6.8";
        edition = "2018";
        sha256 = "1klqfjwn41fwmcqw4z03v6i4imgrf7lmf3b5s9v74hxir8hrps2w";
        authors = [
          "Andre Bogus <bogusandre@gmail.de>"
          "Joshua Landau <joshua@landau.ws>"
        ];
        features = {
        };
      };
      "bytemuck" = rec {
        crateName = "bytemuck";
        version = "1.18.0";
        edition = "2018";
        sha256 = "1bp2s9wn0gjsaygv21nsbfpf854vl897ll6sqpfn3naaannv1fwl";
        authors = [
          "Lokathor <zefria@gmail.com>"
        ];
        features = {
          "bytemuck_derive" = [ "dep:bytemuck_derive" ];
          "derive" = [ "bytemuck_derive" ];
          "extern_crate_std" = [ "extern_crate_alloc" ];
          "latest_stable_rust" = [ "aarch64_simd" "align_offset" "const_zeroed" "derive" "min_const_generics" "must_cast" "wasm_simd" "zeroable_atomics" "zeroable_maybe_uninit" ];
        };
      };
      "byteorder" = rec {
        crateName = "byteorder";
        version = "1.5.0";
        edition = "2021";
        sha256 = "0jzncxyf404mwqdbspihyzpkndfgda450l0893pz5xj685cg5l0z";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "i128" "std" ];
      };
      "bytes" = rec {
        crateName = "bytes";
        version = "1.7.2";
        edition = "2018";
        sha256 = "1wzs7l57iwqmrszdpr2mmqf1b1hgvpxafc30imxhnry0zfl9m3a2";
        authors = [
          "Carl Lerche <me@carllerche.com>"
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "default" "serde" "std" ];
      };
      "bytes-utils" = rec {
        crateName = "bytes-utils";
        version = "0.1.4";
        edition = "2021";
        sha256 = "0dcd0lxfpj367j9nwm7izj4mkib3slg61rg4wqmpw0kvfnlf7bvx";
        libName = "bytes_utils";
        authors = [
          "Michal 'vorner' Vaner <vorner@vorner.cz>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
            usesDefaultFeatures = false;
          }
          {
            name = "either";
            packageId = "either";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" "bytes/serde" ];
          "std" = [ "bytes/default" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "bytes-varint" = rec {
        crateName = "bytes-varint";
        version = "1.0.3";
        edition = "2021";
        sha256 = "0brkr2n9cpb99x7fbbcsjrcml42l8ihf2hviqhk9ssrngh685hal";
        libName = "bytes_varint";
        authors = [
          "Arno Haase <arno.haase@haase-consulting.com>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
        ];

      };
      "bzip2" = rec {
        crateName = "bzip2";
        version = "0.4.4";
        edition = "2015";
        sha256 = "1y27wgqkx3k2jmh4k26vra2kqjq1qc1asww8hac3cv1zxyk1dcdx";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "bzip2-sys";
            packageId = "bzip2-sys";
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        features = {
          "futures" = [ "dep:futures" ];
          "static" = [ "bzip2-sys/static" ];
          "tokio" = [ "tokio-io" "futures" ];
          "tokio-io" = [ "dep:tokio-io" ];
        };
      };
      "bzip2-sys" = rec {
        crateName = "bzip2-sys";
        version = "0.1.11+1.0.8";
        edition = "2015";
        links = "bzip2";
        sha256 = "1p2crnv8d8gpz5c2vlvzl0j55i3yqg5bi0kwsl1531x77xgraskk";
        libName = "bzip2_sys";
        libPath = "lib.rs";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
          }
          {
            name = "pkg-config";
            packageId = "pkg-config";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "static" ];
      };
      "cached" = rec {
        crateName = "cached";
        version = "0.43.0";
        edition = "2018";
        sha256 = "09cr17659rslwk59a8db90hrpscrkfjrb4h9wy43glc8y7fsybxw";
        authors = [
          "James Kominick <james@kominick.com>"
        ];
        dependencies = [
          {
            name = "async-trait";
            packageId = "async-trait";
            optional = true;
          }
          {
            name = "async_once";
            packageId = "async_once";
            optional = true;
          }
          {
            name = "cached_proc_macro";
            packageId = "cached_proc_macro";
            optional = true;
          }
          {
            name = "cached_proc_macro_types";
            packageId = "cached_proc_macro_types";
            optional = true;
          }
          {
            name = "futures";
            packageId = "futures";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "hashbrown";
            packageId = "hashbrown 0.13.2";
            usesDefaultFeatures = false;
            features = [ "raw" "inline-more" ];
          }
          {
            name = "instant";
            packageId = "instant";
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
            optional = true;
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "tokio";
            packageId = "tokio";
            optional = true;
            features = [ "macros" "time" "sync" ];
          }
        ];
        devDependencies = [
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
        ];
        features = {
          "async" = [ "futures" "tokio" "async-trait" "async_once" "lazy_static" ];
          "async-trait" = [ "dep:async-trait" ];
          "async_once" = [ "dep:async_once" ];
          "async_tokio_rt_multi_thread" = [ "async" "tokio/rt-multi-thread" ];
          "cached_proc_macro" = [ "dep:cached_proc_macro" ];
          "cached_proc_macro_types" = [ "dep:cached_proc_macro_types" ];
          "default" = [ "proc_macro" "async" ];
          "futures" = [ "dep:futures" ];
          "lazy_static" = [ "dep:lazy_static" ];
          "proc_macro" = [ "tokio" "cached_proc_macro" "cached_proc_macro_types" ];
          "r2d2" = [ "dep:r2d2" ];
          "redis" = [ "dep:redis" ];
          "redis_ahash" = [ "redis_store" "redis/ahash" ];
          "redis_async_std" = [ "redis_store" "async" "redis/aio" "redis/async-std-comp" "redis/tls" "redis/async-std-tls-comp" ];
          "redis_store" = [ "redis" "r2d2" "serde" "serde_json" ];
          "redis_tokio" = [ "redis_store" "async" "redis/aio" "redis/tokio-comp" "redis/tls" "redis/tokio-native-tls-comp" ];
          "serde" = [ "dep:serde" ];
          "serde_json" = [ "dep:serde_json" ];
          "tokio" = [ "dep:tokio" ];
          "wasm" = [ "instant/wasm-bindgen" ];
        };
        resolvedDefaultFeatures = [ "async" "async-trait" "async_once" "cached_proc_macro" "cached_proc_macro_types" "default" "futures" "lazy_static" "proc_macro" "tokio" ];
      };
      "cached_proc_macro" = rec {
        crateName = "cached_proc_macro";
        version = "0.16.0";
        edition = "2018";
        sha256 = "1p73gc4cb7pz67m4azl9li5wkns55in5waxyvd4sk8xah5yah371";
        procMacro = true;
        authors = [
          "csos95 <csoscss@gmail.com>"
          "James Kominick <james@kominick.com>"
        ];
        dependencies = [
          {
            name = "cached_proc_macro_types";
            packageId = "cached_proc_macro_types";
          }
          {
            name = "darling";
            packageId = "darling 0.14.4";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.86";
          }
          {
            name = "quote";
            packageId = "quote 1.0.37";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            features = [ "full" ];
          }
        ];

      };
      "cached_proc_macro_types" = rec {
        crateName = "cached_proc_macro_types";
        version = "0.1.1";
        edition = "2018";
        sha256 = "1h3gw61v1inay4g3b8pirxlz18m81k63dw2q18zj9fnmidmkds5d";
        authors = [
          "James Kominick <james@kominick.com>"
        ];

      };
      "camino" = rec {
        crateName = "camino";
        version = "1.1.9";
        edition = "2018";
        sha256 = "1lqszl12l1146jf8g01rvjmapif82mhzih870ln3x0dmcr4yr5lb";
        authors = [
          "Without Boats <saoirse@without.boats>"
          "Ashley Williams <ashley666ashley@gmail.com>"
          "Steve Klabnik <steve@steveklabnik.com>"
          "Rain <rain@sunshowers.io>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            features = [ "derive" ];
          }
        ];
        features = {
          "proptest" = [ "dep:proptest" ];
          "proptest1" = [ "proptest" ];
          "serde" = [ "dep:serde" ];
          "serde1" = [ "serde" ];
        };
        resolvedDefaultFeatures = [ "serde" "serde1" ];
      };
      "capitalize" = rec {
        crateName = "capitalize";
        version = "0.3.4";
        edition = "2021";
        sha256 = "1gxmp8s740i1g6pqfmq9cbcv6v5x0dsfcbsqqzl5x0r2201p2lkb";
        authors = [
          "Jesus Hernandez <jesushdez@protonmail.com>"
          "Bartek Winter <bartekwinter3@gmail.com>"
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "cargo-platform" = rec {
        crateName = "cargo-platform";
        version = "0.1.8";
        edition = "2021";
        sha256 = "1z5b7ivbj508wkqdg2vb0hw4vi1k1pyhcn6h1h1b8svcb8vg1c94";
        libName = "cargo_platform";
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
          }
        ];

      };
      "cargo_metadata 0.15.4" = rec {
        crateName = "cargo_metadata";
        version = "0.15.4";
        edition = "2018";
        sha256 = "0fm767r349p5rh50k21g8w2hpcg2970kjx0ff517mz163wzj9r7f";
        authors = [
          "Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de>"
        ];
        dependencies = [
          {
            name = "camino";
            packageId = "camino";
            features = [ "serde1" ];
          }
          {
            name = "cargo-platform";
            packageId = "cargo-platform";
          }
          {
            name = "semver";
            packageId = "semver";
            features = [ "serde" ];
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            features = [ "unbounded_depth" ];
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
        ];
        features = {
          "builder" = [ "derive_builder" ];
          "derive_builder" = [ "dep:derive_builder" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "cargo_metadata 0.18.1" = rec {
        crateName = "cargo_metadata";
        version = "0.18.1";
        edition = "2018";
        sha256 = "0drh0zndl4qgndy6kg6783cydbvhxgv0hcg7d9hhqx0zwi3nb21d";
        authors = [
          "Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de>"
        ];
        dependencies = [
          {
            name = "camino";
            packageId = "camino";
            features = [ "serde1" ];
          }
          {
            name = "cargo-platform";
            packageId = "cargo-platform";
          }
          {
            name = "semver";
            packageId = "semver";
            features = [ "serde" ];
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            features = [ "unbounded_depth" ];
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
        ];
        features = {
          "builder" = [ "derive_builder" ];
          "derive_builder" = [ "dep:derive_builder" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "cassowary" = rec {
        crateName = "cassowary";
        version = "0.3.0";
        edition = "2015";
        sha256 = "0lvanj0gsk6pc1chqrh4k5k0vi1rfbgzmsk46dwy3nmrqyw711nz";
        authors = [
          "Dylan Ede <dylanede@googlemail.com>"
        ];

      };
      "cast" = rec {
        crateName = "cast";
        version = "0.3.0";
        edition = "2018";
        sha256 = "1dbyngbyz2qkk0jn2sxil8vrz3rnpcj142y184p9l4nbl9radcip";
        authors = [
          "Jorge Aparicio <jorge@japaric.io>"
        ];
        features = {
        };
      };
      "cbc" = rec {
        crateName = "cbc";
        version = "0.1.2";
        edition = "2021";
        sha256 = "19l9y9ccv1ffg6876hshd123f2f8v7zbkc4nkckqycxf8fajmd96";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "cipher";
            packageId = "cipher";
          }
        ];
        devDependencies = [
          {
            name = "cipher";
            packageId = "cipher";
            features = [ "dev" ];
          }
        ];
        features = {
          "alloc" = [ "cipher/alloc" ];
          "block-padding" = [ "cipher/block-padding" ];
          "default" = [ "block-padding" ];
          "std" = [ "cipher/std" "alloc" ];
          "zeroize" = [ "cipher/zeroize" ];
        };
        resolvedDefaultFeatures = [ "alloc" "block-padding" "default" "std" ];
      };
      "cc" = rec {
        crateName = "cc";
        version = "1.1.21";
        edition = "2018";
        sha256 = "1w00h696rxwx7yfj07f9jgsrfc3ymgm5ms6d219wi3vy5ig6kc87";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "jobserver";
            packageId = "jobserver";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "libc";
            packageId = "libc";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "shlex";
            packageId = "shlex";
          }
        ];
        features = {
          "parallel" = [ "dep:libc" "dep:jobserver" ];
        };
        resolvedDefaultFeatures = [ "parallel" ];
      };
      "cesu8" = rec {
        crateName = "cesu8";
        version = "1.1.0";
        edition = "2015";
        sha256 = "0g6q58wa7khxrxcxgnqyi9s1z2cjywwwd3hzr5c55wskhx6s0hvd";
        authors = [
          "Eric Kidd <git@randomhacks.net>"
        ];
        features = {
        };
      };
      "cexpr" = rec {
        crateName = "cexpr";
        version = "0.6.0";
        edition = "2018";
        sha256 = "0rl77bwhs5p979ih4r0202cn5jrfsrbgrksp40lkfz5vk1x3ib3g";
        authors = [
          "Jethro Beekman <jethro@jbeekman.nl>"
        ];
        dependencies = [
          {
            name = "nom";
            packageId = "nom";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
        ];

      };
      "cfg-if" = rec {
        crateName = "cfg-if";
        version = "1.0.0";
        edition = "2018";
        sha256 = "1za0vb97n4brpzpv8lsbnzmq5r8f2b0cpqqr0sy8h5bn751xxwds";
        libName = "cfg_if";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "rustc-dep-of-std" = [ "core" "compiler_builtins" ];
        };
      };
      "cfg_aliases" = rec {
        crateName = "cfg_aliases";
        version = "0.1.1";
        edition = "2018";
        sha256 = "17p821nc6jm830vzl2lmwz60g3a30hcm33nk6l257i1rjdqw85px";
        authors = [
          "Zicklag <zicklag@katharostech.com>"
        ];

      };
      "chacha20" = rec {
        crateName = "chacha20";
        version = "0.9.1";
        edition = "2021";
        sha256 = "0678wipx6kghp71hpzhl2qvx80q7caz3vm8vsvd07b1fpms3yqf3";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "cipher";
            packageId = "cipher";
          }
          {
            name = "cpufeatures";
            packageId = "cpufeatures";
            target = { target, features }: (("x86_64" == target."arch" or null) || ("x86" == target."arch" or null));
          }
        ];
        devDependencies = [
          {
            name = "cipher";
            packageId = "cipher";
            features = [ "dev" ];
          }
        ];
        features = {
          "std" = [ "cipher/std" ];
          "zeroize" = [ "cipher/zeroize" ];
        };
        resolvedDefaultFeatures = [ "zeroize" ];
      };
      "chacha20poly1305" = rec {
        crateName = "chacha20poly1305";
        version = "0.10.1";
        edition = "2021";
        sha256 = "0dfwq9ag7x7lnd0znafpcn8h7k4nfr9gkzm0w7sc1lcj451pkk8h";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "aead";
            packageId = "aead";
            usesDefaultFeatures = false;
          }
          {
            name = "chacha20";
            packageId = "chacha20";
            features = [ "zeroize" ];
          }
          {
            name = "cipher";
            packageId = "cipher";
          }
          {
            name = "poly1305";
            packageId = "poly1305";
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "aead";
            packageId = "aead";
            usesDefaultFeatures = false;
            features = [ "dev" ];
          }
        ];
        features = {
          "alloc" = [ "aead/alloc" ];
          "default" = [ "alloc" "getrandom" ];
          "getrandom" = [ "aead/getrandom" "rand_core" ];
          "heapless" = [ "aead/heapless" ];
          "rand_core" = [ "aead/rand_core" ];
          "std" = [ "aead/std" "alloc" ];
          "stream" = [ "aead/stream" ];
        };
      };
      "chrono" = rec {
        crateName = "chrono";
        version = "0.4.38";
        edition = "2021";
        sha256 = "009l8vc5p8750vn02z30mblg4pv2qhkbfizhfwmzc6vpy5nr67x2";
        dependencies = [
          {
            name = "android-tzdata";
            packageId = "android-tzdata";
            optional = true;
            target = { target, features }: ("android" == target."os" or null);
          }
          {
            name = "iana-time-zone";
            packageId = "iana-time-zone";
            optional = true;
            target = { target, features }: (target."unix" or false);
            features = [ "fallback" ];
          }
          {
            name = "js-sys";
            packageId = "js-sys";
            optional = true;
            target = { target, features }: (("wasm32" == target."arch" or null) && (!(("emscripten" == target."os" or null) || ("wasi" == target."os" or null))));
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            optional = true;
            target = { target, features }: (("wasm32" == target."arch" or null) && (!(("emscripten" == target."os" or null) || ("wasi" == target."os" or null))));
          }
          {
            name = "windows-targets";
            packageId = "windows-targets 0.52.6";
            optional = true;
            target = { target, features }: (target."windows" or false);
          }
        ];
        features = {
          "android-tzdata" = [ "dep:android-tzdata" ];
          "arbitrary" = [ "dep:arbitrary" ];
          "clock" = [ "winapi" "iana-time-zone" "android-tzdata" "now" ];
          "default" = [ "clock" "std" "oldtime" "wasmbind" ];
          "iana-time-zone" = [ "dep:iana-time-zone" ];
          "js-sys" = [ "dep:js-sys" ];
          "now" = [ "std" ];
          "pure-rust-locales" = [ "dep:pure-rust-locales" ];
          "rkyv" = [ "dep:rkyv" "rkyv/size_32" ];
          "rkyv-16" = [ "dep:rkyv" "rkyv?/size_16" ];
          "rkyv-32" = [ "dep:rkyv" "rkyv?/size_32" ];
          "rkyv-64" = [ "dep:rkyv" "rkyv?/size_64" ];
          "rkyv-validation" = [ "rkyv?/validation" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "alloc" ];
          "unstable-locales" = [ "pure-rust-locales" ];
          "wasm-bindgen" = [ "dep:wasm-bindgen" ];
          "wasmbind" = [ "wasm-bindgen" "js-sys" ];
          "winapi" = [ "windows-targets" ];
          "windows-targets" = [ "dep:windows-targets" ];
        };
        resolvedDefaultFeatures = [ "alloc" "android-tzdata" "clock" "default" "iana-time-zone" "js-sys" "now" "oldtime" "serde" "std" "wasm-bindgen" "wasmbind" "winapi" "windows-targets" ];
      };
      "ciborium" = rec {
        crateName = "ciborium";
        version = "0.2.2";
        edition = "2021";
        sha256 = "03hgfw4674im1pdqblcp77m7rc8x2v828si5570ga5q9dzyrzrj2";
        authors = [
          "Nathaniel McCallum <npmccallum@profian.com>"
        ];
        dependencies = [
          {
            name = "ciborium-io";
            packageId = "ciborium-io";
            features = [ "alloc" ];
          }
          {
            name = "ciborium-ll";
            packageId = "ciborium-ll";
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [ "alloc" "derive" ];
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "ciborium-io/std" "serde/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "ciborium-io" = rec {
        crateName = "ciborium-io";
        version = "0.2.2";
        edition = "2021";
        sha256 = "0my7s5g24hvp1rs1zd1cxapz94inrvqpdf1rslrvxj8618gfmbq5";
        libName = "ciborium_io";
        authors = [
          "Nathaniel McCallum <npmccallum@profian.com>"
        ];
        features = {
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "std" ];
      };
      "ciborium-ll" = rec {
        crateName = "ciborium-ll";
        version = "0.2.2";
        edition = "2021";
        sha256 = "1n8g4j5rwkfs3rzfi6g1p7ngmz6m5yxsksryzf5k72ll7mjknrjp";
        libName = "ciborium_ll";
        authors = [
          "Nathaniel McCallum <npmccallum@profian.com>"
        ];
        dependencies = [
          {
            name = "ciborium-io";
            packageId = "ciborium-io";
          }
          {
            name = "half";
            packageId = "half";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "std" = [ "alloc" "half/std" ];
        };
      };
      "cipher" = rec {
        crateName = "cipher";
        version = "0.4.4";
        edition = "2021";
        sha256 = "1b9x9agg67xq5nq879z66ni4l08m6m3hqcshk37d4is4ysd3ngvp";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "crypto-common";
            packageId = "crypto-common";
          }
          {
            name = "inout";
            packageId = "inout";
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "blobby" = [ "dep:blobby" ];
          "block-padding" = [ "inout/block-padding" ];
          "dev" = [ "blobby" ];
          "rand_core" = [ "crypto-common/rand_core" ];
          "std" = [ "alloc" "crypto-common/std" "inout/std" ];
          "zeroize" = [ "dep:zeroize" ];
        };
        resolvedDefaultFeatures = [ "alloc" "block-padding" "std" "zeroize" ];
      };
      "clang-sys" = rec {
        crateName = "clang-sys";
        version = "1.8.1";
        edition = "2021";
        links = "clang";
        sha256 = "1x1r9yqss76z8xwpdanw313ss6fniwc1r7dzb5ycjn0ph53kj0hb";
        libName = "clang_sys";
        authors = [
          "Kyle Mayes <kyle@mayeses.com>"
        ];
        dependencies = [
          {
            name = "glob";
            packageId = "glob";
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
          }
          {
            name = "libloading";
            packageId = "libloading";
            optional = true;
          }
        ];
        buildDependencies = [
          {
            name = "glob";
            packageId = "glob";
          }
        ];
        devDependencies = [
          {
            name = "glob";
            packageId = "glob";
          }
        ];
        features = {
          "clang_10_0" = [ "clang_9_0" ];
          "clang_11_0" = [ "clang_10_0" ];
          "clang_12_0" = [ "clang_11_0" ];
          "clang_13_0" = [ "clang_12_0" ];
          "clang_14_0" = [ "clang_13_0" ];
          "clang_15_0" = [ "clang_14_0" ];
          "clang_16_0" = [ "clang_15_0" ];
          "clang_17_0" = [ "clang_16_0" ];
          "clang_18_0" = [ "clang_17_0" ];
          "clang_3_6" = [ "clang_3_5" ];
          "clang_3_7" = [ "clang_3_6" ];
          "clang_3_8" = [ "clang_3_7" ];
          "clang_3_9" = [ "clang_3_8" ];
          "clang_4_0" = [ "clang_3_9" ];
          "clang_5_0" = [ "clang_4_0" ];
          "clang_6_0" = [ "clang_5_0" ];
          "clang_7_0" = [ "clang_6_0" ];
          "clang_8_0" = [ "clang_7_0" ];
          "clang_9_0" = [ "clang_8_0" ];
          "libloading" = [ "dep:libloading" ];
          "runtime" = [ "libloading" ];
        };
        resolvedDefaultFeatures = [ "clang_3_5" "clang_3_6" "clang_3_7" "clang_3_8" "clang_3_9" "clang_4_0" "clang_5_0" "clang_6_0" "libloading" "runtime" ];
      };
      "clap" = rec {
        crateName = "clap";
        version = "4.5.18";
        edition = "2021";
        crateBin = [];
        sha256 = "1lsxa59bgfxaag1q65ndp801h7vw9dffsly0zzx1mb13nd1nm5dh";
        dependencies = [
          {
            name = "clap_builder";
            packageId = "clap_builder";
            usesDefaultFeatures = false;
          }
          {
            name = "clap_derive";
            packageId = "clap_derive";
            optional = true;
          }
        ];
        features = {
          "cargo" = [ "clap_builder/cargo" ];
          "color" = [ "clap_builder/color" ];
          "debug" = [ "clap_builder/debug" "clap_derive?/debug" ];
          "default" = [ "std" "color" "help" "usage" "error-context" "suggestions" ];
          "deprecated" = [ "clap_builder/deprecated" "clap_derive?/deprecated" ];
          "derive" = [ "dep:clap_derive" ];
          "env" = [ "clap_builder/env" ];
          "error-context" = [ "clap_builder/error-context" ];
          "help" = [ "clap_builder/help" ];
          "std" = [ "clap_builder/std" ];
          "string" = [ "clap_builder/string" ];
          "suggestions" = [ "clap_builder/suggestions" ];
          "unicode" = [ "clap_builder/unicode" ];
          "unstable-doc" = [ "clap_builder/unstable-doc" "derive" ];
          "unstable-ext" = [ "clap_builder/unstable-ext" ];
          "unstable-styles" = [ "clap_builder/unstable-styles" ];
          "unstable-v5" = [ "clap_builder/unstable-v5" "clap_derive?/unstable-v5" "deprecated" ];
          "usage" = [ "clap_builder/usage" ];
          "wrap_help" = [ "clap_builder/wrap_help" ];
        };
        resolvedDefaultFeatures = [ "color" "default" "derive" "error-context" "help" "std" "suggestions" "usage" "wrap_help" ];
      };
      "clap_builder" = rec {
        crateName = "clap_builder";
        version = "4.5.18";
        edition = "2021";
        sha256 = "06wnncyif421qgrkd73hhhfych773avpx903b1nhhd0nsinicwjd";
        dependencies = [
          {
            name = "anstream";
            packageId = "anstream";
            optional = true;
          }
          {
            name = "anstyle";
            packageId = "anstyle";
          }
          {
            name = "clap_lex";
            packageId = "clap_lex";
          }
          {
            name = "strsim";
            packageId = "strsim 0.11.1";
            optional = true;
          }
          {
            name = "terminal_size";
            packageId = "terminal_size";
            optional = true;
          }
        ];
        features = {
          "color" = [ "dep:anstream" ];
          "debug" = [ "dep:backtrace" ];
          "default" = [ "std" "color" "help" "usage" "error-context" "suggestions" ];
          "std" = [ "anstyle/std" ];
          "suggestions" = [ "dep:strsim" "error-context" ];
          "unicode" = [ "dep:unicode-width" "dep:unicase" ];
          "unstable-doc" = [ "cargo" "wrap_help" "env" "unicode" "string" "unstable-ext" ];
          "unstable-styles" = [ "color" ];
          "unstable-v5" = [ "deprecated" ];
          "wrap_help" = [ "help" "dep:terminal_size" ];
        };
        resolvedDefaultFeatures = [ "color" "error-context" "help" "std" "suggestions" "usage" "wrap_help" ];
      };
      "clap_derive" = rec {
        crateName = "clap_derive";
        version = "4.5.18";
        edition = "2021";
        sha256 = "1ardb26bvcpg72q9myr7yir3a8c83gx7vxk1cccabsd9n73s1ija";
        procMacro = true;
        dependencies = [
          {
            name = "heck";
            packageId = "heck 0.5.0";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.86";
          }
          {
            name = "quote";
            packageId = "quote 1.0.37";
          }
          {
            name = "syn";
            packageId = "syn 2.0.77";
            features = [ "full" ];
          }
        ];
        features = {
          "raw-deprecated" = [ "deprecated" ];
          "unstable-v5" = [ "deprecated" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "clap_lex" = rec {
        crateName = "clap_lex";
        version = "0.7.2";
        edition = "2021";
        sha256 = "15zcrc2fa6ycdzaihxghf48180bnvzsivhf0fmah24bnnaf76qhl";

      };
      "clipboard-win" = rec {
        crateName = "clipboard-win";
        version = "5.4.0";
        edition = "2018";
        sha256 = "14n87fc0vzbd0wdhqzvcs1lqgafsncplzcanhpik93xhhalfgvqm";
        libName = "clipboard_win";
        authors = [
          "Douman <douman@gmx.se>"
        ];
        dependencies = [
          {
            name = "error-code";
            packageId = "error-code";
            target = { target, features }: (target."windows" or false);
          }
        ];
        features = {
          "monitor" = [ "windows-win" ];
          "std" = [ "error-code/std" ];
          "windows-win" = [ "dep:windows-win" ];
        };
      };
      "cmake" = rec {
        crateName = "cmake";
        version = "0.1.51";
        edition = "2021";
        sha256 = "06prag07c611ancwcwzkgy3d21mkvsy7szvqd3wv2lnigym467pv";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "cc";
            packageId = "cc";
          }
        ];

      };
      "codespan" = rec {
        crateName = "codespan";
        version = "0.11.1";
        edition = "2018";
        sha256 = "0plvi6igsn77j207kkd8zsapl2slpfr0m7p8s31xf7cz1lm9jqik";
        authors = [
          "Brendan Zabarauskas <bjzaba@yahoo.com.au>"
        ];
        dependencies = [
          {
            name = "codespan-reporting";
            packageId = "codespan-reporting";
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            features = [ "derive" ];
          }
        ];
        features = {
          "serde" = [ "dep:serde" ];
          "serialization" = [ "serde" "codespan-reporting/serialization" ];
        };
        resolvedDefaultFeatures = [ "serde" "serialization" ];
      };
      "codespan-reporting" = rec {
        crateName = "codespan-reporting";
        version = "0.11.1";
        edition = "2018";
        sha256 = "0vkfay0aqk73d33kh79k1kqxx06ka22894xhqi89crnc6c6jff1m";
        libName = "codespan_reporting";
        authors = [
          "Brendan Zabarauskas <bjzaba@yahoo.com.au>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            features = [ "derive" ];
          }
          {
            name = "termcolor";
            packageId = "termcolor";
          }
          {
            name = "unicode-width";
            packageId = "unicode-width";
          }
        ];
        features = {
          "serde" = [ "dep:serde" ];
          "serialization" = [ "serde" "serde/rc" ];
        };
        resolvedDefaultFeatures = [ "serde" "serialization" ];
      };
      "coins-bip32" = rec {
        crateName = "coins-bip32";
        version = "0.8.7";
        edition = "2018";
        sha256 = "1lqsn2bh05mhqyd6ingzddh6ghlnvd6zd51i3y0wv610vyjy8srv";
        libName = "coins_bip32";
        authors = [
          "James Prestwich <james@prestwi.ch>"
        ];
        dependencies = [
          {
            name = "bs58";
            packageId = "bs58 0.5.1";
          }
          {
            name = "coins-core";
            packageId = "coins-core";
          }
          {
            name = "digest";
            packageId = "digest 0.10.7";
          }
          {
            name = "hmac";
            packageId = "hmac";
          }
          {
            name = "k256";
            packageId = "k256";
            features = [ "std" "arithmetic" ];
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "sha2";
            packageId = "sha2 0.10.8";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
        ];
        features = {
          "default" = [ "mainnet" ];
        };
        resolvedDefaultFeatures = [ "default" "mainnet" ];
      };
      "coins-bip39" = rec {
        crateName = "coins-bip39";
        version = "0.8.7";
        edition = "2018";
        sha256 = "0a1528zylpy90s71y5i9105rd2xnkq1p8h40gm7w0gff16jgpf1x";
        libName = "coins_bip39";
        authors = [
          "Rohit Narurkar <rohit.narurkar@protonmail.com>"
          "James Prestwich <james@prestwi.ch>"
          "0xYYY <0xYYY@pm.me>"
        ];
        dependencies = [
          {
            name = "bitvec";
            packageId = "bitvec 1.0.1";
          }
          {
            name = "coins-bip32";
            packageId = "coins-bip32";
          }
          {
            name = "hmac";
            packageId = "hmac";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
            optional = true;
          }
          {
            name = "pbkdf2";
            packageId = "pbkdf2 0.12.2";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "sha2";
            packageId = "sha2 0.10.8";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
        ];
        features = {
          "all-langs" = [ "chinese-simplified" "chinese-traditional" "czech" "english" "french" "italian" "japanese" "korean" "portuguese" "spanish" ];
          "chinese-simplified" = [ "dep:once_cell" ];
          "chinese-traditional" = [ "dep:once_cell" ];
          "czech" = [ "dep:once_cell" ];
          "default" = [ "all-langs" ];
          "english" = [ "dep:once_cell" ];
          "french" = [ "dep:once_cell" ];
          "italian" = [ "dep:once_cell" ];
          "japanese" = [ "dep:once_cell" ];
          "korean" = [ "dep:once_cell" ];
          "portuguese" = [ "dep:once_cell" ];
          "spanish" = [ "dep:once_cell" ];
        };
        resolvedDefaultFeatures = [ "all-langs" "chinese-simplified" "chinese-traditional" "czech" "default" "english" "french" "italian" "japanese" "korean" "portuguese" "spanish" ];
      };
      "coins-core" = rec {
        crateName = "coins-core";
        version = "0.8.7";
        edition = "2018";
        sha256 = "0ya9szvxzaimwzbfik4b3lrf08mqz6fzhd77gdzkdy117j2a11jj";
        libName = "coins_core";
        authors = [
          "James Prestwich <james@prestwi.ch>"
        ];
        dependencies = [
          {
            name = "base64";
            packageId = "base64 0.21.7";
          }
          {
            name = "bech32";
            packageId = "bech32";
          }
          {
            name = "bs58";
            packageId = "bs58 0.5.1";
            features = [ "check" ];
          }
          {
            name = "digest";
            packageId = "digest 0.10.7";
          }
          {
            name = "generic-array";
            packageId = "generic-array";
          }
          {
            name = "hex";
            packageId = "hex";
          }
          {
            name = "ripemd";
            packageId = "ripemd";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
          }
          {
            name = "sha2";
            packageId = "sha2 0.10.8";
          }
          {
            name = "sha3";
            packageId = "sha3 0.10.8";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
        ];

      };
      "collectable" = rec {
        crateName = "collectable";
        version = "0.0.2";
        edition = "2018";
        sha256 = "0np47fw24sjq9r1hdw3xpcbnzh04ij6k1m3x7kjh35i0mnxdvaq8";
        authors = [
          "RustCrypto Developers"
        ];
        features = {
        };
      };
      "color-eyre" = rec {
        crateName = "color-eyre";
        version = "0.6.3";
        edition = "2018";
        sha256 = "1m9shifr9sdw0drszzyhvaq5jysrsiki44bl7m1gfdzj8rg6y52m";
        libName = "color_eyre";
        authors = [
          "Jane Lusby <jlusby@yaah.dev>"
        ];
        dependencies = [
          {
            name = "backtrace";
            packageId = "backtrace";
            features = [ "gimli-symbolize" ];
          }
          {
            name = "color-spantrace";
            packageId = "color-spantrace";
            optional = true;
          }
          {
            name = "eyre";
            packageId = "eyre";
          }
          {
            name = "indenter";
            packageId = "indenter";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "owo-colors";
            packageId = "owo-colors 3.5.0";
          }
          {
            name = "tracing-error";
            packageId = "tracing-error";
            optional = true;
          }
        ];
        features = {
          "capture-spantrace" = [ "tracing-error" "color-spantrace" ];
          "color-spantrace" = [ "dep:color-spantrace" ];
          "default" = [ "track-caller" "capture-spantrace" ];
          "issue-url" = [ "url" ];
          "tracing-error" = [ "dep:tracing-error" ];
          "url" = [ "dep:url" ];
        };
        resolvedDefaultFeatures = [ "capture-spantrace" "color-spantrace" "default" "tracing-error" "track-caller" ];
      };
      "color-spantrace" = rec {
        crateName = "color-spantrace";
        version = "0.2.1";
        edition = "2018";
        sha256 = "1hkjgaqixrishwiq3lxxy1d4c3mvlv6avcj3ifwy50p3lyrf2syd";
        libName = "color_spantrace";
        authors = [
          "Jane Lusby <jlusby@yaah.dev>"
        ];
        dependencies = [
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "owo-colors";
            packageId = "owo-colors 3.5.0";
          }
          {
            name = "tracing-core";
            packageId = "tracing-core";
          }
          {
            name = "tracing-error";
            packageId = "tracing-error";
          }
        ];

      };
      "colorchoice" = rec {
        crateName = "colorchoice";
        version = "1.0.2";
        edition = "2021";
        sha256 = "1h18ph538y8yjmbpaf8li98l0ifms2xmh3rax9666c5qfjfi3zfk";

      };
      "colored" = rec {
        crateName = "colored";
        version = "2.1.0";
        edition = "2021";
        sha256 = "1f4h9p64snrnz4x432iza15p4diqjcgpmpvhi956d6r1rq61bwnb";
        authors = [
          "Thomas Wickham <mackwic@gmail.com>"
        ];
        dependencies = [
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.48.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_Foundation" "Win32_System_Console" ];
          }
        ];
        features = {
        };
      };
      "combine" = rec {
        crateName = "combine";
        version = "4.6.7";
        edition = "2018";
        sha256 = "1z8rh8wp59gf8k23ar010phgs0wgf5i8cx4fg01gwcnzfn5k0nms";
        authors = [
          "Markus Westerlind <marwes91@gmail.com>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
            optional = true;
          }
          {
            name = "memchr";
            packageId = "memchr";
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
        ];
        features = {
          "bytes" = [ "dep:bytes" ];
          "bytes_05" = [ "dep:bytes_05" ];
          "default" = [ "std" ];
          "futures-03" = [ "pin-project" "std" "futures-core-03" "futures-io-03" "pin-project-lite" ];
          "futures-core-03" = [ "dep:futures-core-03" ];
          "futures-io-03" = [ "dep:futures-io-03" ];
          "pin-project" = [ "pin-project-lite" ];
          "pin-project-lite" = [ "dep:pin-project-lite" ];
          "regex" = [ "dep:regex" ];
          "std" = [ "memchr/std" "bytes" "alloc" ];
          "tokio" = [ "tokio-dep" "tokio-util/io" "futures-core-03" "pin-project-lite" ];
          "tokio-02" = [ "pin-project" "std" "tokio-02-dep" "futures-core-03" "pin-project-lite" "bytes_05" ];
          "tokio-02-dep" = [ "dep:tokio-02-dep" ];
          "tokio-03" = [ "pin-project" "std" "tokio-03-dep" "futures-core-03" "pin-project-lite" ];
          "tokio-03-dep" = [ "dep:tokio-03-dep" ];
          "tokio-dep" = [ "dep:tokio-dep" ];
          "tokio-util" = [ "dep:tokio-util" ];
        };
        resolvedDefaultFeatures = [ "alloc" "bytes" "default" "std" ];
      };
      "comfy-table" = rec {
        crateName = "comfy-table";
        version = "6.2.0";
        edition = "2021";
        sha256 = "1fmqjhry6xa6a9kr0769wiw06694n60kxs5c6nfvzqv8h9w9v5by";
        libName = "comfy_table";
        authors = [
          "Arne Beer <contact@arne.beer>"
        ];
        dependencies = [
          {
            name = "crossterm";
            packageId = "crossterm 0.26.1";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "strum";
            packageId = "strum 0.24.1";
          }
          {
            name = "strum_macros";
            packageId = "strum_macros 0.24.3";
          }
          {
            name = "unicode-width";
            packageId = "unicode-width";
          }
        ];
        features = {
          "console" = [ "dep:console" ];
          "crossterm" = [ "dep:crossterm" ];
          "custom_styling" = [ "console" ];
          "default" = [ "tty" ];
          "tty" = [ "crossterm" ];
        };
        resolvedDefaultFeatures = [ "crossterm" "default" "tty" ];
      };
      "consensus-config" = rec {
        crateName = "consensus-config";
        version = "0.1.0";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./consensus/config; }
          else ./consensus/config;
        libName = "consensus_config";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "fastcrypto";
            packageId = "fastcrypto";
          }
          {
            name = "iota-network-stack";
            packageId = "iota-network-stack";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" "rc" ];
          }
          {
            name = "shared-crypto";
            packageId = "shared-crypto";
          }
        ];
        devDependencies = [
          {
            name = "insta";
            packageId = "insta";
            features = [ "redactions" "yaml" "json" ];
          }
        ];

      };
      "consensus-core" = rec {
        crateName = "consensus-core";
        version = "0.1.0";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./consensus/core; }
          else ./consensus/core;
        libName = "consensus_core";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "arc-swap";
            packageId = "arc-swap";
            features = [ "serde" ];
          }
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "base64";
            packageId = "base64 0.21.7";
          }
          {
            name = "bcs";
            packageId = "bcs";
          }
          {
            name = "bytes";
            packageId = "bytes";
            features = [ "serde" ];
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "consensus-config";
            packageId = "consensus-config";
          }
          {
            name = "dashmap";
            packageId = "dashmap";
          }
          {
            name = "enum_dispatch";
            packageId = "enum_dispatch";
          }
          {
            name = "fastcrypto";
            packageId = "fastcrypto";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "http";
            packageId = "http 1.1.0";
          }
          {
            name = "hyper";
            packageId = "hyper 1.4.1";
          }
          {
            name = "hyper-rustls";
            packageId = "hyper-rustls 0.27.3";
            usesDefaultFeatures = false;
            features = [ "webpki-roots" "http2" "ring" "tls12" ];
          }
          {
            name = "hyper-util";
            packageId = "hyper-util";
          }
          {
            name = "iota-common";
            packageId = "iota-common";
          }
          {
            name = "iota-macros";
            packageId = "iota-macros";
          }
          {
            name = "iota-metrics";
            packageId = "iota-metrics";
          }
          {
            name = "iota-network-stack";
            packageId = "iota-network-stack";
          }
          {
            name = "iota-protocol-config";
            packageId = "iota-protocol-config";
          }
          {
            name = "iota-tls";
            packageId = "iota-tls";
          }
          {
            name = "itertools";
            packageId = "itertools 0.13.0";
          }
          {
            name = "nom";
            packageId = "nom";
          }
          {
            name = "parking_lot";
            packageId = "parking_lot 0.12.3";
          }
          {
            name = "prometheus";
            packageId = "prometheus";
          }
          {
            name = "prost";
            packageId = "prost";
          }
          {
            name = "quinn-proto";
            packageId = "quinn-proto";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "rustls";
            packageId = "rustls 0.23.13";
            usesDefaultFeatures = false;
            features = [ "std" "tls12" "ring" ];
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" "rc" ];
          }
          {
            name = "shared-crypto";
            packageId = "shared-crypto";
          }
          {
            name = "strum_macros";
            packageId = "strum_macros 0.26.4";
          }
          {
            name = "tap";
            packageId = "tap";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "tokio";
            packageId = "tokio";
          }
          {
            name = "tokio-rustls";
            packageId = "tokio-rustls 0.26.0";
            usesDefaultFeatures = false;
            features = [ "tls12" "ring" ];
          }
          {
            name = "tokio-stream";
            packageId = "tokio-stream";
            features = [ "sync" "net" ];
          }
          {
            name = "tokio-util";
            packageId = "tokio-util 0.7.12";
          }
          {
            name = "tonic";
            packageId = "tonic";
            features = [ "transport" ];
          }
          {
            name = "tower";
            packageId = "tower 0.4.13";
            features = [ "full" "util" "timeout" "load-shed" "limit" ];
          }
          {
            name = "tower-http";
            packageId = "tower-http";
            features = [ "cors" "full" "trace" "set-header" "propagate-header" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "typed-store";
            packageId = "typed-store";
          }
        ];
        buildDependencies = [
          {
            name = "tonic-build";
            packageId = "tonic-build";
            features = [ "prost" "transport" ];
          }
        ];
        devDependencies = [
          {
            name = "rstest";
            packageId = "rstest";
          }
          {
            name = "telemetry-subscribers";
            packageId = "telemetry-subscribers";
          }
          {
            name = "tempfile";
            packageId = "tempfile";
          }
        ];

      };
      "console" = rec {
        crateName = "console";
        version = "0.15.8";
        edition = "2018";
        sha256 = "1sz4nl9nz8pkmapqni6py7jxzi7nzqjxzb3ya4kxvmkb0zy867qf";
        authors = [
          "Armin Ronacher <armin.ronacher@active-4.com>"
        ];
        dependencies = [
          {
            name = "encode_unicode";
            packageId = "encode_unicode 0.3.6";
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "unicode-width";
            packageId = "unicode-width";
            optional = true;
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.52.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_Foundation" "Win32_System_Console" "Win32_Storage_FileSystem" "Win32_UI_Input_KeyboardAndMouse" ];
          }
        ];
        features = {
          "default" = [ "unicode-width" "ansi-parsing" ];
          "unicode-width" = [ "dep:unicode-width" ];
          "windows-console-colors" = [ "ansi-parsing" ];
        };
        resolvedDefaultFeatures = [ "ansi-parsing" "unicode-width" ];
      };
      "console-api" = rec {
        crateName = "console-api";
        version = "0.8.0";
        edition = "2021";
        sha256 = "0c89bwfl70vrrfi4ps7g6ihl1lxaz9syzwz4qq9p54lzkjm19vc6";
        libName = "console_api";
        authors = [
          "Eliza Weisman <eliza@buoyant.io>"
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "futures-core";
            packageId = "futures-core";
          }
          {
            name = "prost";
            packageId = "prost";
          }
          {
            name = "prost-types";
            packageId = "prost-types";
          }
          {
            name = "tonic";
            packageId = "tonic";
            usesDefaultFeatures = false;
            features = [ "prost" "codegen" "transport" ];
          }
          {
            name = "tracing-core";
            packageId = "tracing-core";
          }
        ];
        features = {
          "transport" = [ "tonic/transport" ];
        };
        resolvedDefaultFeatures = [ "transport" ];
      };
      "console-subscriber" = rec {
        crateName = "console-subscriber";
        version = "0.4.0";
        edition = "2021";
        sha256 = "00h3k0hxv25l7rlfqhmkisqpfmawp9qa77dzdsa36cvzlc8s3qz2";
        libName = "console_subscriber";
        authors = [
          "Eliza Weisman <eliza@buoyant.io>"
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "console-api";
            packageId = "console-api";
            features = [ "transport" ];
          }
          {
            name = "crossbeam-channel";
            packageId = "crossbeam-channel";
          }
          {
            name = "crossbeam-utils";
            packageId = "crossbeam-utils";
          }
          {
            name = "futures-task";
            packageId = "futures-task";
            usesDefaultFeatures = false;
          }
          {
            name = "hdrhistogram";
            packageId = "hdrhistogram";
            usesDefaultFeatures = false;
            features = [ "serialization" ];
          }
          {
            name = "humantime";
            packageId = "humantime";
          }
          {
            name = "hyper-util";
            packageId = "hyper-util";
            features = [ "tokio" ];
          }
          {
            name = "prost";
            packageId = "prost";
          }
          {
            name = "prost-types";
            packageId = "prost-types";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "thread_local";
            packageId = "thread_local";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "sync" "time" "macros" "tracing" ];
          }
          {
            name = "tokio-stream";
            packageId = "tokio-stream";
            features = [ "net" ];
          }
          {
            name = "tonic";
            packageId = "tonic";
            features = [ "transport" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "tracing-core";
            packageId = "tracing-core";
          }
          {
            name = "tracing-subscriber";
            packageId = "tracing-subscriber";
            usesDefaultFeatures = false;
            features = [ "fmt" "registry" ];
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "full" "rt-multi-thread" ];
          }
        ];
        features = {
          "default" = [ "env-filter" ];
          "env-filter" = [ "tracing-subscriber/env-filter" ];
          "grpc-web" = [ "dep:tonic-web" ];
          "parking_lot" = [ "dep:parking_lot" "tracing-subscriber/parking_lot" ];
        };
        resolvedDefaultFeatures = [ "default" "env-filter" ];
      };
      "const-hex" = rec {
        crateName = "const-hex";
        version = "1.12.0";
        edition = "2021";
        sha256 = "1ihbc6gc4yixrcpjzha4xb758rpyr4yk4hskskzy2dvdl8j8mywl";
        libName = "const_hex";
        authors = [
          "DaniPopes <57450786+DaniPopes@users.noreply.github.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "cpufeatures";
            packageId = "cpufeatures";
            target = { target, features }: (("x86" == target."arch" or null) || ("x86_64" == target."arch" or null));
          }
          {
            name = "hex";
            packageId = "hex";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "proptest";
            packageId = "proptest";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "hex";
            packageId = "hex";
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
        ];
        features = {
          "__fuzzing" = [ "dep:proptest" "std" ];
          "alloc" = [ "hex?/alloc" "serde?/alloc" "proptest?/alloc" ];
          "default" = [ "std" ];
          "hex" = [ "dep:hex" ];
          "serde" = [ "hex?/serde" "dep:serde" ];
          "std" = [ "hex?/std" "serde?/std" "proptest?/std" "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "hex" "std" ];
      };
      "const-oid" = rec {
        crateName = "const-oid";
        version = "0.9.6";
        edition = "2021";
        sha256 = "1y0jnqaq7p2wvspnx7qj76m7hjcqpz73qzvr9l2p9n2s51vr6if2";
        libName = "const_oid";
        authors = [
          "RustCrypto Developers"
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
        };
      };
      "const-random" = rec {
        crateName = "const-random";
        version = "0.1.18";
        edition = "2018";
        sha256 = "0n8kqz3y82ks8znvz1mxn3a9hadca3amzf33gmi6dc3lzs103q47";
        libName = "const_random";
        authors = [
          "Tom Kaitchuck <Tom.Kaitchuck@gmail.com>"
        ];
        dependencies = [
          {
            name = "const-random-macro";
            packageId = "const-random-macro";
          }
        ];

      };
      "const-random-macro" = rec {
        crateName = "const-random-macro";
        version = "0.1.16";
        edition = "2018";
        sha256 = "03iram4ijjjq9j5a7hbnmdngj8935wbsd0f5bm8yw2hblbr3kn7r";
        procMacro = true;
        libName = "const_random_macro";
        authors = [
          "Tom Kaitchuck <Tom.Kaitchuck@gmail.com>"
        ];
        dependencies = [
          {
            name = "getrandom";
            packageId = "getrandom 0.2.15";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
            usesDefaultFeatures = false;
            features = [ "race" "alloc" ];
          }
          {
            name = "tiny-keccak";
            packageId = "tiny-keccak";
            features = [ "shake" ];
          }
        ];

      };
      "const-str" = rec {
        crateName = "const-str";
        version = "0.5.7";
        edition = "2021";
        sha256 = "1agvan36a2fgks5w47kk8idym54rdk504p6q2nj8gf9v136cq61n";
        libName = "const_str";
        authors = [
          "Nugine <nugine@foxmail.com>"
        ];
        features = {
          "all" = [ "std" "proc" "regex" "http" "case" ];
          "case" = [ "proc" "const-str-proc-macro?/heck" ];
          "http" = [ "proc" "const-str-proc-macro?/http" ];
          "proc" = [ "dep:const-str-proc-macro" ];
          "regex" = [ "proc" "const-str-proc-macro?/regex" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "constant_time_eq 0.1.5" = rec {
        crateName = "constant_time_eq";
        version = "0.1.5";
        edition = "2015";
        sha256 = "1g3vp04qzmk6cpzrd19yci6a95m7ap6wy7wkwgiy2pjklklrfl14";
        authors = [
          "Cesar Eduardo Barros <cesarb@cesarb.eti.br>"
        ];

      };
      "constant_time_eq 0.3.1" = rec {
        crateName = "constant_time_eq";
        version = "0.3.1";
        edition = "2021";
        sha256 = "19nwwczii762pwlsm7bpizgjg8hkg1kqi32b2g4rglijklsbhx3w";
        authors = [
          "Cesar Eduardo Barros <cesarb@cesarb.eti.br>"
        ];
        features = {
        };
      };
      "convert_case" = rec {
        crateName = "convert_case";
        version = "0.4.0";
        edition = "2018";
        sha256 = "03jaf1wrsyqzcaah9jf8l1iznvdw5mlsca2qghhzr9w27sddaib2";
        authors = [
          "David Purdum <purdum41@gmail.com>"
        ];
        features = {
          "rand" = [ "dep:rand" ];
          "random" = [ "rand" ];
        };
      };
      "core-foundation" = rec {
        crateName = "core-foundation";
        version = "0.9.4";
        edition = "2018";
        sha256 = "13zvbbj07yk3b61b8fhwfzhy35535a583irf23vlcg59j7h9bqci";
        libName = "core_foundation";
        authors = [
          "The Servo Project Developers"
        ];
        dependencies = [
          {
            name = "core-foundation-sys";
            packageId = "core-foundation-sys";
            usesDefaultFeatures = false;
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        features = {
          "chrono" = [ "dep:chrono" ];
          "default" = [ "link" ];
          "link" = [ "core-foundation-sys/link" ];
          "mac_os_10_7_support" = [ "core-foundation-sys/mac_os_10_7_support" ];
          "mac_os_10_8_features" = [ "core-foundation-sys/mac_os_10_8_features" ];
          "uuid" = [ "dep:uuid" ];
          "with-chrono" = [ "chrono" ];
          "with-uuid" = [ "uuid" ];
        };
        resolvedDefaultFeatures = [ "default" "link" ];
      };
      "core-foundation-sys" = rec {
        crateName = "core-foundation-sys";
        version = "0.8.7";
        edition = "2018";
        sha256 = "12w8j73lazxmr1z0h98hf3z623kl8ms7g07jch7n4p8f9nwlhdkp";
        libName = "core_foundation_sys";
        authors = [
          "The Servo Project Developers"
        ];
        features = {
          "default" = [ "link" ];
        };
        resolvedDefaultFeatures = [ "default" "link" ];
      };
      "core2" = rec {
        crateName = "core2";
        version = "0.4.0";
        edition = "2018";
        sha256 = "01f5xv0kf3ds3xm7byg78hycbanb8zlpvsfv4j47y46n3bpsg6xl";
        authors = [
          "Brendan Molloy <brendan@bbqsrc.net>"
        ];
        dependencies = [
          {
            name = "memchr";
            packageId = "memchr";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "std" ];
      };
      "coset" = rec {
        crateName = "coset";
        version = "0.3.8";
        edition = "2018";
        sha256 = "1yyqg9dqyvlg32v6wzrns1y45g1sri6s5b3zi1xk1y1iys0crj7l";
        authors = [
          "David Drysdale <drysdale@google.com>"
          "Paul Crowley <paulcrowley@google.com>"
        ];
        dependencies = [
          {
            name = "ciborium";
            packageId = "ciborium";
            usesDefaultFeatures = false;
          }
          {
            name = "ciborium-io";
            packageId = "ciborium-io";
            features = [ "alloc" ];
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "count-min-sketch" = rec {
        crateName = "count-min-sketch";
        version = "0.1.7";
        edition = "2018";
        sha256 = "1izc1z1drnj58md6cjbx2n3sy22p449bcy0dlafr8s3v1pirycfa";
        libName = "count_min_sketch";
        authors = [
          "Frank Denis <github@pureftpd.org>"
        ];
        dependencies = [
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "siphasher";
            packageId = "siphasher";
          }
        ];

      };
      "counter" = rec {
        crateName = "counter";
        version = "0.5.7";
        edition = "2018";
        sha256 = "1kfw3l651rixf1y6hnc3r9sj0m2ig5zvpkzzsdpzaj4kk5k8wi9d";
        authors = [
          "Peter Goodspeed-Niklaus <peter.r.goodspeedniklaus@gmail.com>"
        ];
        dependencies = [
          {
            name = "num-traits";
            packageId = "num-traits";
          }
        ];

      };
      "cpp_demangle" = rec {
        crateName = "cpp_demangle";
        version = "0.4.4";
        edition = "2018";
        crateBin = [];
        sha256 = "0z8c656jiwphnw1brkb0whm4kgh39h1msvgig2wc44yi58s8vrcn";
        authors = [
          "Nick Fitzgerald <fitzgen@gmail.com>"
          "Jim Blandy <jimb@red-bean.com>"
          "Kyle Huey <khuey@kylehuey.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
        ];
        features = {
          "afl" = [ "dep:afl" ];
          "default" = [ "std" ];
          "fuzz" = [ "afl" ];
          "logging" = [ "std" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "cpufeatures" = rec {
        crateName = "cpufeatures";
        version = "0.2.14";
        edition = "2018";
        sha256 = "1q3qd9qkw94vs7n5i0y3zz2cqgzcxvdgyb54ryngwmjhfbgrg1k0";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (pkgs.rust.lib.toRustTarget stdenv.hostPlatform == "aarch64-linux-android");
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (("aarch64" == target."arch" or null) && ("linux" == target."os" or null));
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (("aarch64" == target."arch" or null) && ("apple" == target."vendor" or null));
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (("loongarch64" == target."arch" or null) && ("linux" == target."os" or null));
          }
        ];

      };
      "crc32c" = rec {
        crateName = "crc32c";
        version = "0.6.8";
        edition = "2018";
        sha256 = "0iwyr3jivcnhylczqgk1rkpp9b46r25vi5dj1y7il29dc8hsyirs";
        authors = [
          "Zack Owens"
        ];
        buildDependencies = [
          {
            name = "rustc_version";
            packageId = "rustc_version";
          }
        ];

      };
      "crc32fast" = rec {
        crateName = "crc32fast";
        version = "1.4.2";
        edition = "2015";
        sha256 = "1czp7vif73b8xslr3c9yxysmh9ws2r8824qda7j47ffs9pcnjxx9";
        authors = [
          "Sam Rijs <srijs@airpost.net>"
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "criterion" = rec {
        crateName = "criterion";
        version = "0.5.1";
        edition = "2018";
        sha256 = "0bv9ipygam3z8kk6k771gh9zi0j0lb9ir0xi1pc075ljg80jvcgj";
        authors = [
          "Jorge Aparicio <japaricious@gmail.com>"
          "Brook Heisler <brookheisler@gmail.com>"
        ];
        dependencies = [
          {
            name = "anes";
            packageId = "anes";
          }
          {
            name = "cast";
            packageId = "cast";
          }
          {
            name = "ciborium";
            packageId = "ciborium";
          }
          {
            name = "clap";
            packageId = "clap";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "criterion-plot";
            packageId = "criterion-plot";
          }
          {
            name = "futures";
            packageId = "futures";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "is-terminal";
            packageId = "is-terminal";
          }
          {
            name = "itertools";
            packageId = "itertools 0.10.5";
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "oorandom";
            packageId = "oorandom";
          }
          {
            name = "plotters";
            packageId = "plotters";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "svg_backend" "area_series" "line_series" ];
          }
          {
            name = "rayon";
            packageId = "rayon";
            optional = true;
          }
          {
            name = "regex";
            packageId = "regex";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "tinytemplate";
            packageId = "tinytemplate";
          }
          {
            name = "tokio";
            packageId = "tokio";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "rt" ];
          }
          {
            name = "walkdir";
            packageId = "walkdir";
          }
        ];
        devDependencies = [
          {
            name = "futures";
            packageId = "futures";
            usesDefaultFeatures = false;
            features = [ "executor" ];
          }
        ];
        features = {
          "async" = [ "futures" ];
          "async-std" = [ "dep:async-std" ];
          "async_futures" = [ "futures/executor" "async" ];
          "async_smol" = [ "smol" "async" ];
          "async_std" = [ "async-std" "async" ];
          "async_tokio" = [ "tokio" "async" ];
          "csv" = [ "dep:csv" ];
          "csv_output" = [ "csv" ];
          "default" = [ "rayon" "plotters" "cargo_bench_support" ];
          "futures" = [ "dep:futures" ];
          "plotters" = [ "dep:plotters" ];
          "rayon" = [ "dep:rayon" ];
          "smol" = [ "dep:smol" ];
          "stable" = [ "csv_output" "html_reports" "async_futures" "async_smol" "async_tokio" "async_std" ];
          "tokio" = [ "dep:tokio" ];
        };
        resolvedDefaultFeatures = [ "async" "async_tokio" "cargo_bench_support" "default" "futures" "html_reports" "plotters" "rayon" "tokio" ];
      };
      "criterion-plot" = rec {
        crateName = "criterion-plot";
        version = "0.5.0";
        edition = "2018";
        sha256 = "1c866xkjqqhzg4cjvg01f8w6xc1j3j7s58rdksl52skq89iq4l3b";
        libName = "criterion_plot";
        authors = [
          "Jorge Aparicio <japaricious@gmail.com>"
          "Brook Heisler <brookheisler@gmail.com>"
        ];
        dependencies = [
          {
            name = "cast";
            packageId = "cast";
          }
          {
            name = "itertools";
            packageId = "itertools 0.10.5";
          }
        ];

      };
      "crossbeam" = rec {
        crateName = "crossbeam";
        version = "0.8.4";
        edition = "2021";
        sha256 = "1a5c7yacnk723x0hfycdbl91ks2nxhwbwy46b8y5vyy0gxzcsdqi";
        dependencies = [
          {
            name = "crossbeam-channel";
            packageId = "crossbeam-channel";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "crossbeam-deque";
            packageId = "crossbeam-deque";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "crossbeam-epoch";
            packageId = "crossbeam-epoch";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "crossbeam-queue";
            packageId = "crossbeam-queue";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "crossbeam-utils";
            packageId = "crossbeam-utils";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "crossbeam-epoch/alloc" "crossbeam-queue/alloc" ];
          "crossbeam-channel" = [ "dep:crossbeam-channel" ];
          "crossbeam-deque" = [ "dep:crossbeam-deque" ];
          "crossbeam-epoch" = [ "dep:crossbeam-epoch" ];
          "crossbeam-queue" = [ "dep:crossbeam-queue" ];
          "default" = [ "std" ];
          "nightly" = [ "crossbeam-epoch/nightly" "crossbeam-utils/nightly" "crossbeam-queue/nightly" ];
          "std" = [ "alloc" "crossbeam-channel/std" "crossbeam-deque/std" "crossbeam-epoch/std" "crossbeam-queue/std" "crossbeam-utils/std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "crossbeam-channel" "crossbeam-deque" "crossbeam-epoch" "crossbeam-queue" "default" "std" ];
      };
      "crossbeam-channel" = rec {
        crateName = "crossbeam-channel";
        version = "0.5.13";
        edition = "2021";
        sha256 = "1wkx45r34v7g3wyi3lg2wz536lrrrab4h4hh741shfhr8rlhsj1k";
        libName = "crossbeam_channel";
        dependencies = [
          {
            name = "crossbeam-utils";
            packageId = "crossbeam-utils";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "crossbeam-utils/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "crossbeam-deque" = rec {
        crateName = "crossbeam-deque";
        version = "0.8.5";
        edition = "2021";
        sha256 = "03bp38ljx4wj6vvy4fbhx41q8f585zyqix6pncz1mkz93z08qgv1";
        libName = "crossbeam_deque";
        dependencies = [
          {
            name = "crossbeam-epoch";
            packageId = "crossbeam-epoch";
            usesDefaultFeatures = false;
          }
          {
            name = "crossbeam-utils";
            packageId = "crossbeam-utils";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "crossbeam-epoch/std" "crossbeam-utils/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "crossbeam-epoch" = rec {
        crateName = "crossbeam-epoch";
        version = "0.9.18";
        edition = "2021";
        sha256 = "03j2np8llwf376m3fxqx859mgp9f83hj1w34153c7a9c7i5ar0jv";
        libName = "crossbeam_epoch";
        dependencies = [
          {
            name = "crossbeam-utils";
            packageId = "crossbeam-utils";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "loom" = [ "loom-crate" "crossbeam-utils/loom" ];
          "loom-crate" = [ "dep:loom-crate" ];
          "nightly" = [ "crossbeam-utils/nightly" ];
          "std" = [ "alloc" "crossbeam-utils/std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "crossbeam-queue" = rec {
        crateName = "crossbeam-queue";
        version = "0.3.11";
        edition = "2021";
        sha256 = "0d8y8y3z48r9javzj67v3p2yfswd278myz1j9vzc4sp7snslc0yz";
        libName = "crossbeam_queue";
        dependencies = [
          {
            name = "crossbeam-utils";
            packageId = "crossbeam-utils";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "nightly" = [ "crossbeam-utils/nightly" ];
          "std" = [ "alloc" "crossbeam-utils/std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "std" ];
      };
      "crossbeam-utils" = rec {
        crateName = "crossbeam-utils";
        version = "0.8.20";
        edition = "2021";
        sha256 = "100fksq5mm1n7zj242cclkw6yf7a4a8ix3lvpfkhxvdhbda9kv12";
        libName = "crossbeam_utils";
        features = {
          "default" = [ "std" ];
          "loom" = [ "dep:loom" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "crossterm 0.25.0" = rec {
        crateName = "crossterm";
        version = "0.25.0";
        edition = "2021";
        sha256 = "0rsbkkhdf61aipc06b7vpl4cw3wnxz0miizp0ms3a5rcpq7nqkp6";
        authors = [
          "T. Post"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 1.3.2";
          }
          {
            name = "crossterm_winapi";
            packageId = "crossterm_winapi";
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "mio";
            packageId = "mio 0.8.11";
            target = { target, features }: (target."unix" or false);
            features = [ "os-poll" ];
          }
          {
            name = "parking_lot";
            packageId = "parking_lot 0.12.3";
          }
          {
            name = "signal-hook";
            packageId = "signal-hook";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "signal-hook-mio";
            packageId = "signal-hook-mio";
            target = { target, features }: (target."unix" or false);
            features = [ "support-v0_8" ];
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: (target."windows" or false);
            features = [ "winuser" "winerror" ];
          }
        ];
        features = {
          "default" = [ "bracketed-paste" ];
          "event-stream" = [ "futures-core" ];
          "futures-core" = [ "dep:futures-core" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "bracketed-paste" "default" ];
      };
      "crossterm 0.26.1" = rec {
        crateName = "crossterm";
        version = "0.26.1";
        edition = "2021";
        sha256 = "04rxvmbf3scywy0m7rhg586lf833vpb33czijxi80fakadkxlk58";
        authors = [
          "T. Post"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 1.3.2";
          }
          {
            name = "crossterm_winapi";
            packageId = "crossterm_winapi";
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "mio";
            packageId = "mio 0.8.11";
            target = { target, features }: (target."unix" or false);
            features = [ "os-poll" ];
          }
          {
            name = "parking_lot";
            packageId = "parking_lot 0.12.3";
          }
          {
            name = "signal-hook";
            packageId = "signal-hook";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "signal-hook-mio";
            packageId = "signal-hook-mio";
            target = { target, features }: (target."unix" or false);
            features = [ "support-v0_8" ];
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: (target."windows" or false);
            features = [ "winuser" "winerror" ];
          }
        ];
        features = {
          "default" = [ "bracketed-paste" ];
          "event-stream" = [ "futures-core" ];
          "filedescriptor" = [ "dep:filedescriptor" ];
          "futures-core" = [ "dep:futures-core" ];
          "serde" = [ "dep:serde" ];
          "use-dev-tty" = [ "filedescriptor" ];
        };
      };
      "crossterm_winapi" = rec {
        crateName = "crossterm_winapi";
        version = "0.9.1";
        edition = "2018";
        sha256 = "0axbfb2ykbwbpf1hmxwpawwfs8wvmkcka5m561l7yp36ldi7rpdc";
        authors = [
          "T. Post"
        ];
        dependencies = [
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: (target."windows" or false);
            features = [ "winbase" "consoleapi" "processenv" "handleapi" "synchapi" "impl-default" ];
          }
        ];

      };
      "crunchy" = rec {
        crateName = "crunchy";
        version = "0.2.2";
        edition = "2015";
        sha256 = "1dx9mypwd5mpfbbajm78xcrg5lirqk7934ik980mmaffg3hdm0bs";
        authors = [
          "Vurich <jackefransham@hotmail.co.uk>"
        ];
        features = {
          "default" = [ "limit_128" ];
        };
        resolvedDefaultFeatures = [ "default" "limit_128" "limit_256" "std" ];
      };
      "crypto-bigint 0.4.9" = rec {
        crateName = "crypto-bigint";
        version = "0.4.9";
        edition = "2021";
        sha256 = "1vqprgj0aj1340w186zyspi58397ih78jsc0iydvhs6zrlilnazg";
        libName = "crypto_bigint";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "generic-array";
            packageId = "generic-array";
            optional = true;
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
            optional = true;
          }
          {
            name = "subtle";
            packageId = "subtle";
            usesDefaultFeatures = false;
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
            features = [ "std" ];
          }
        ];
        features = {
          "default" = [ "rand" ];
          "der" = [ "dep:der" ];
          "generic-array" = [ "dep:generic-array" ];
          "rand" = [ "rand_core/std" ];
          "rand_core" = [ "dep:rand_core" ];
          "rlp" = [ "dep:rlp" ];
          "serde" = [ "serdect" ];
          "serdect" = [ "dep:serdect" ];
          "zeroize" = [ "dep:zeroize" ];
        };
        resolvedDefaultFeatures = [ "generic-array" "rand_core" "zeroize" ];
      };
      "crypto-bigint 0.5.5" = rec {
        crateName = "crypto-bigint";
        version = "0.5.5";
        edition = "2021";
        sha256 = "0xmbdff3g6ii5sbxjxc31xfkv9lrmyril4arh3dzckd4gjsjzj8d";
        libName = "crypto_bigint";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "generic-array";
            packageId = "generic-array";
            optional = true;
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
            optional = true;
          }
          {
            name = "subtle";
            packageId = "subtle";
            usesDefaultFeatures = false;
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
            features = [ "std" ];
          }
        ];
        features = {
          "alloc" = [ "serdect?/alloc" ];
          "default" = [ "rand" ];
          "der" = [ "dep:der" ];
          "generic-array" = [ "dep:generic-array" ];
          "rand" = [ "rand_core/std" ];
          "rand_core" = [ "dep:rand_core" ];
          "rlp" = [ "dep:rlp" ];
          "serde" = [ "dep:serdect" ];
          "zeroize" = [ "dep:zeroize" ];
        };
        resolvedDefaultFeatures = [ "default" "generic-array" "rand" "rand_core" "zeroize" ];
      };
      "crypto-common" = rec {
        crateName = "crypto-common";
        version = "0.1.6";
        edition = "2018";
        sha256 = "1cvby95a6xg7kxdz5ln3rl9xh66nz66w46mm3g56ri1z5x815yqv";
        libName = "crypto_common";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "generic-array";
            packageId = "generic-array";
            features = [ "more_lengths" ];
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
            optional = true;
          }
          {
            name = "typenum";
            packageId = "typenum";
          }
        ];
        features = {
          "getrandom" = [ "rand_core/getrandom" ];
          "rand_core" = [ "dep:rand_core" ];
        };
        resolvedDefaultFeatures = [ "getrandom" "rand_core" "std" ];
      };
      "csv" = rec {
        crateName = "csv";
        version = "1.3.0";
        edition = "2021";
        sha256 = "1zjrlycvn44fxd9m8nwy8x33r9ncgk0k3wvy4fnvb9rpsks4ymxc";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "csv-core";
            packageId = "csv-core";
          }
          {
            name = "itoa";
            packageId = "itoa";
          }
          {
            name = "ryu";
            packageId = "ryu";
          }
          {
            name = "serde";
            packageId = "serde";
          }
        ];
        devDependencies = [
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
        ];

      };
      "csv-core" = rec {
        crateName = "csv-core";
        version = "0.1.11";
        edition = "2018";
        sha256 = "0w7s7qa60xb054rqddpyg53xq2b29sf3rbhcl8sbdx02g4yjpyjy";
        libName = "csv_core";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "memchr";
            packageId = "memchr";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "libc" = [ "memchr/libc" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "ctr" = rec {
        crateName = "ctr";
        version = "0.9.2";
        edition = "2021";
        sha256 = "0d88b73waamgpfjdml78icxz45d95q7vi2aqa604b0visqdfws83";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "cipher";
            packageId = "cipher";
          }
        ];
        devDependencies = [
          {
            name = "cipher";
            packageId = "cipher";
            features = [ "dev" ];
          }
        ];
        features = {
          "alloc" = [ "cipher/alloc" ];
          "block-padding" = [ "cipher/block-padding" ];
          "std" = [ "cipher/std" "alloc" ];
          "zeroize" = [ "cipher/zeroize" ];
        };
      };
      "curve25519-dalek" = rec {
        crateName = "curve25519-dalek";
        version = "4.1.3";
        edition = "2021";
        sha256 = "1gmjb9dsknrr8lypmhkyjd67p1arb8mbfamlwxm7vph38my8pywp";
        libName = "curve25519_dalek";
        authors = [
          "Isis Lovecruft <isis@patternsinthevoid.net>"
          "Henry de Valence <hdevalence@hdevalence.ca>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "cpufeatures";
            packageId = "cpufeatures";
            target = { target, features }: ("x86_64" == target."arch" or null);
          }
          {
            name = "curve25519-dalek-derive";
            packageId = "curve25519-dalek-derive";
            target = { target, features }: ((!("fiat" == target."curve25519_dalek_backend" or null)) && (!("serial" == target."curve25519_dalek_backend" or null)) && ("x86_64" == target."arch" or null));
          }
          {
            name = "digest";
            packageId = "digest 0.10.7";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "fiat-crypto";
            packageId = "fiat-crypto";
            usesDefaultFeatures = false;
            target = { target, features }: ("fiat" == target."curve25519_dalek_backend" or null);
          }
          {
            name = "subtle";
            packageId = "subtle";
            usesDefaultFeatures = false;
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "rustc_version";
            packageId = "rustc_version";
          }
        ];
        features = {
          "alloc" = [ "zeroize?/alloc" ];
          "default" = [ "alloc" "precomputed-tables" "zeroize" ];
          "digest" = [ "dep:digest" ];
          "ff" = [ "dep:ff" ];
          "group" = [ "dep:group" "rand_core" ];
          "group-bits" = [ "group" "ff/bits" ];
          "rand_core" = [ "dep:rand_core" ];
          "serde" = [ "dep:serde" ];
          "zeroize" = [ "dep:zeroize" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "digest" "precomputed-tables" "zeroize" ];
      };
      "curve25519-dalek-derive" = rec {
        crateName = "curve25519-dalek-derive";
        version = "0.1.1";
        edition = "2021";
        sha256 = "1cry71xxrr0mcy5my3fb502cwfxy6822k4pm19cwrilrg7hq4s7l";
        procMacro = true;
        libName = "curve25519_dalek_derive";
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.86";
          }
          {
            name = "quote";
            packageId = "quote 1.0.37";
          }
          {
            name = "syn";
            packageId = "syn 2.0.77";
            features = [ "full" ];
          }
        ];

      };
      "curve25519-dalek-ng" = rec {
        crateName = "curve25519-dalek-ng";
        version = "4.1.1";
        edition = "2015";
        sha256 = "1j6y6dsqdfp26ifyygibsrm1a8f9f7870i4053xlczil95r9nd8w";
        libName = "curve25519_dalek_ng";
        authors = [
          "Isis Lovecruft <isis@patternsinthevoid.net>"
          "Henry de Valence <hdevalence@hdevalence.ca>"
        ];
        dependencies = [
          {
            name = "byteorder";
            packageId = "byteorder";
            usesDefaultFeatures = false;
            features = [ "i128" ];
          }
          {
            name = "digest";
            packageId = "digest 0.9.0";
            usesDefaultFeatures = false;
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
            usesDefaultFeatures = false;
          }
          {
            name = "subtle-ng";
            packageId = "subtle-ng";
            rename = "subtle";
            usesDefaultFeatures = false;
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "zeroize/alloc" ];
          "avx2_backend" = [ "simd_backend" ];
          "default" = [ "std" "u64_backend" ];
          "nightly" = [ "subtle/nightly" ];
          "packed_simd" = [ "dep:packed_simd" ];
          "serde" = [ "dep:serde" ];
          "simd_backend" = [ "nightly" "u64_backend" "packed_simd" ];
          "std" = [ "alloc" "subtle/std" "rand_core/std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" "u64_backend" ];
      };
      "cynic" = rec {
        crateName = "cynic";
        version = "3.7.3";
        edition = "2021";
        sha256 = "09iprq89yh09is74gfjvj1afam11zhn4q0jg6wfg5qq76ssh5327";
        authors = [
          "Graeme Coupar <graeme@turbofish.tech>"
        ];
        dependencies = [
          {
            name = "cynic-proc-macros";
            packageId = "cynic-proc-macros";
          }
          {
            name = "ref-cast";
            packageId = "ref-cast";
          }
          {
            name = "reqwest";
            packageId = "reqwest 0.12.7";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "json" ];
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            optional = true;
          }
          {
            name = "static_assertions";
            packageId = "static_assertions";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
        ];
        devDependencies = [
          {
            name = "serde_json";
            packageId = "serde_json";
          }
        ];
        features = {
          "all" = [ "http-surf" "http-reqwest" "http-reqwest-blocking" "rkyv" ];
          "http-reqwest" = [ "reqwest" "serde_json" ];
          "http-reqwest-blocking" = [ "http-reqwest" "reqwest/blocking" "serde_json" ];
          "http-surf" = [ "surf" "serde_json" ];
          "reqwest" = [ "dep:reqwest" ];
          "rkyv" = [ "cynic-proc-macros/rkyv" ];
          "serde_json" = [ "dep:serde_json" ];
          "surf" = [ "dep:surf" ];
        };
        resolvedDefaultFeatures = [ "default" "http-reqwest" "reqwest" "serde_json" ];
      };
      "cynic-codegen" = rec {
        crateName = "cynic-codegen";
        version = "3.7.3";
        edition = "2021";
        sha256 = "074q8d0zn0vcl35fi76nfrl8pwkg7w3nzzwngq4cw00ajrpwh3kw";
        libName = "cynic_codegen";
        authors = [
          "Graeme Coupar <graeme@turbofish.tech>"
        ];
        dependencies = [
          {
            name = "counter";
            packageId = "counter";
          }
          {
            name = "cynic-parser";
            packageId = "cynic-parser";
          }
          {
            name = "darling";
            packageId = "darling 0.20.10";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "ouroboros";
            packageId = "ouroboros 0.18.4";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.86";
          }
          {
            name = "quote";
            packageId = "quote 1.0.37";
          }
          {
            name = "strsim";
            packageId = "strsim 0.10.0";
          }
          {
            name = "syn";
            packageId = "syn 2.0.77";
            features = [ "visit-mut" ];
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
        ];
        features = {
          "default" = [ "rustfmt" ];
          "rkyv" = [ "dep:rkyv" ];
        };
        resolvedDefaultFeatures = [ "default" "rustfmt" ];
      };
      "cynic-parser" = rec {
        crateName = "cynic-parser";
        version = "0.4.5";
        edition = "2021";
        sha256 = "0lql93hy5k8mp7qyb8pfhs50n47hkmiqc31bsjgj9raaqpc6r3vi";
        libName = "cynic_parser";
        authors = [
          "Graeme Coupar <graeme@turbofish.tech>"
        ];
        dependencies = [
          {
            name = "indexmap";
            packageId = "indexmap 2.5.0";
          }
          {
            name = "lalrpop-util";
            packageId = "lalrpop-util";
          }
          {
            name = "logos";
            packageId = "logos";
          }
        ];
        features = {
          "ariadne" = [ "dep:ariadne" ];
          "pretty" = [ "print" "dep:pretty" ];
          "report" = [ "ariadne" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "cynic-proc-macros" = rec {
        crateName = "cynic-proc-macros";
        version = "3.7.3";
        edition = "2021";
        sha256 = "169qzzvbs2lg84pwycw770sjijwcpj8f538c3knhy4dayk6rx9i5";
        procMacro = true;
        libName = "cynic_proc_macros";
        authors = [
          "Graeme Coupar <graeme@turbofish.tech>"
        ];
        dependencies = [
          {
            name = "cynic-codegen";
            packageId = "cynic-codegen";
          }
          {
            name = "darling";
            packageId = "darling 0.20.10";
          }
          {
            name = "quote";
            packageId = "quote 1.0.37";
          }
          {
            name = "syn";
            packageId = "syn 2.0.77";
          }
        ];
        features = {
          "rkyv" = [ "cynic-codegen/rkyv" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "darling 0.14.4" = rec {
        crateName = "darling";
        version = "0.14.4";
        edition = "2018";
        sha256 = "0l1qrn805bsxa0iy7x8bmdwr8c10hlw0yiqs8ckv7lbz86rhqxbv";
        authors = [
          "Ted Driggs <ted.driggs@outlook.com>"
        ];
        dependencies = [
          {
            name = "darling_core";
            packageId = "darling_core 0.14.4";
          }
          {
            name = "darling_macro";
            packageId = "darling_macro 0.14.4";
          }
        ];
        features = {
          "default" = [ "suggestions" ];
          "diagnostics" = [ "darling_core/diagnostics" ];
          "suggestions" = [ "darling_core/suggestions" ];
        };
        resolvedDefaultFeatures = [ "default" "suggestions" ];
      };
      "darling 0.20.10" = rec {
        crateName = "darling";
        version = "0.20.10";
        edition = "2021";
        sha256 = "1299h2z88qn71mizhh05j26yr3ik0wnqmw11ijds89l8i9nbhqvg";
        authors = [
          "Ted Driggs <ted.driggs@outlook.com>"
        ];
        dependencies = [
          {
            name = "darling_core";
            packageId = "darling_core 0.20.10";
          }
          {
            name = "darling_macro";
            packageId = "darling_macro 0.20.10";
          }
        ];
        features = {
          "default" = [ "suggestions" ];
          "diagnostics" = [ "darling_core/diagnostics" ];
          "suggestions" = [ "darling_core/suggestions" ];
        };
        resolvedDefaultFeatures = [ "default" "suggestions" ];
      };
      "darling_core 0.14.4" = rec {
        crateName = "darling_core";
        version = "0.14.4";
        edition = "2018";
        sha256 = "1w4b2ndxmkwghwq84yphk8x15jnpivm08w596g12ry5pwsk1r70h";
        authors = [
          "Ted Driggs <ted.driggs@outlook.com>"
        ];
        dependencies = [
          {
            name = "fnv";
            packageId = "fnv";
          }
          {
            name = "ident_case";
            packageId = "ident_case";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.86";
          }
          {
            name = "quote";
            packageId = "quote 1.0.37";
          }
          {
            name = "strsim";
            packageId = "strsim 0.10.0";
            optional = true;
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            features = [ "full" "extra-traits" ];
          }
        ];
        features = {
          "strsim" = [ "dep:strsim" ];
          "suggestions" = [ "strsim" ];
        };
        resolvedDefaultFeatures = [ "strsim" "suggestions" ];
      };
      "darling_core 0.20.10" = rec {
        crateName = "darling_core";
        version = "0.20.10";
        edition = "2021";
        sha256 = "1rgr9nci61ahnim93yh3xy6fkfayh7sk4447hahawah3m1hkh4wm";
        authors = [
          "Ted Driggs <ted.driggs@outlook.com>"
        ];
        dependencies = [
          {
            name = "fnv";
            packageId = "fnv";
          }
          {
            name = "ident_case";
            packageId = "ident_case";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.86";
          }
          {
            name = "quote";
            packageId = "quote 1.0.37";
          }
          {
            name = "strsim";
            packageId = "strsim 0.11.1";
            optional = true;
          }
          {
            name = "syn";
            packageId = "syn 2.0.77";
            features = [ "full" "extra-traits" ];
          }
        ];
        features = {
          "strsim" = [ "dep:strsim" ];
          "suggestions" = [ "strsim" ];
        };
        resolvedDefaultFeatures = [ "strsim" "suggestions" ];
      };
      "darling_macro 0.14.4" = rec {
        crateName = "darling_macro";
        version = "0.14.4";
        edition = "2018";
        sha256 = "13mlyd5w275c815k0ijf6g4c446hs8b3m2h4an5isqgpr7dv9am4";
        procMacro = true;
        authors = [
          "Ted Driggs <ted.driggs@outlook.com>"
        ];
        dependencies = [
          {
            name = "darling_core";
            packageId = "darling_core 0.14.4";
          }
          {
            name = "quote";
            packageId = "quote 1.0.37";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
          }
        ];

      };
      "darling_macro 0.20.10" = rec {
        crateName = "darling_macro";
        version = "0.20.10";
        edition = "2021";
        sha256 = "01kq3ibbn47czijj39h3vxyw0c2ksd0jvc097smcrk7n2jjs4dnk";
        procMacro = true;
        authors = [
          "Ted Driggs <ted.driggs@outlook.com>"
        ];
        dependencies = [
          {
            name = "darling_core";
            packageId = "darling_core 0.20.10";
          }
          {
            name = "quote";
            packageId = "quote 1.0.37";
          }
          {
            name = "syn";
            packageId = "syn 2.0.77";
          }
        ];

      };
      "dary_heap" = rec {
        crateName = "dary_heap";
        version = "0.3.6";
        edition = "2018";
        sha256 = "1jm04p72s7xij3cr71h59dw07s63nah5b10sh8akcr2129zx2qkp";
        authors = [
          "Han Mertens <hanmertens@outlook.com>"
        ];
        features = {
          "serde" = [ "dep:serde" ];
        };
      };
      "dashmap" = rec {
        crateName = "dashmap";
        version = "5.5.3";
        edition = "2018";
        sha256 = "0miqnlxi501vfbv6mw5jbmzgnj0wjrch3p4abvpd59s9v30lg1wp";
        authors = [
          "Acrimon <joel.wejdenstal@gmail.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "hashbrown";
            packageId = "hashbrown 0.14.5";
            usesDefaultFeatures = false;
          }
          {
            name = "lock_api";
            packageId = "lock_api";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "parking_lot_core";
            packageId = "parking_lot_core 0.9.10";
          }
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "inline" = [ "hashbrown/inline-more" ];
          "rayon" = [ "dep:rayon" ];
          "serde" = [ "dep:serde" ];
        };
      };
      "data-encoding" = rec {
        crateName = "data-encoding";
        version = "2.6.0";
        edition = "2018";
        sha256 = "1qnn68n4vragxaxlkqcb1r28d3hhj43wch67lm4rpxlw89wnjmp8";
        libName = "data_encoding";
        authors = [
          "Julien Cretin <git@ia0.eu>"
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "data-encoding-macro" = rec {
        crateName = "data-encoding-macro";
        version = "0.1.15";
        edition = "2018";
        sha256 = "0fg6abipcn5h8qa09r5ki5dv3vhq4qaxn1ipsvb7c8k2p9n9nmgi";
        libName = "data_encoding_macro";
        authors = [
          "Julien Cretin <cretin@google.com>"
        ];
        dependencies = [
          {
            name = "data-encoding";
            packageId = "data-encoding";
            usesDefaultFeatures = false;
          }
          {
            name = "data-encoding-macro-internal";
            packageId = "data-encoding-macro-internal";
          }
        ];

      };
      "data-encoding-macro-internal" = rec {
        crateName = "data-encoding-macro-internal";
        version = "0.1.13";
        edition = "2018";
        sha256 = "0gyk580bjsjdy10n06f4gqh5kkqy296ndvcg21ychfzm1967ab9k";
        procMacro = true;
        libName = "data_encoding_macro_internal";
        authors = [
          "Julien Cretin <cretin@google.com>"
        ];
        dependencies = [
          {
            name = "data-encoding";
            packageId = "data-encoding";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            usesDefaultFeatures = false;
            features = [ "parsing" "proc-macro" ];
          }
        ];

      };
      "datatest-stable" = rec {
        crateName = "datatest-stable";
        version = "0.1.3";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/nextest-rs/datatest-stable.git";
          rev = "72db7f6d1bbe36a5407e96b9488a581f763e106f";
          sha256 = "0zgqv8v6792r2akikhcw0w6d8nmi9lh9l9f5dkdfgs51k87nn1sl";
        };
        libName = "datatest_stable";
        dependencies = [
          {
            name = "libtest-mimic";
            packageId = "libtest-mimic";
          }
          {
            name = "regex";
            packageId = "regex";
          }
          {
            name = "walkdir";
            packageId = "walkdir";
          }
        ];

      };
      "debugid" = rec {
        crateName = "debugid";
        version = "0.8.0";
        edition = "2018";
        sha256 = "13f15dfvn07fa7087pmacixqqv0lmj4hv93biw4ldr48ypk55xdy";
        authors = [
          "Sentry <hello@sentry.io>"
        ];
        dependencies = [
          {
            name = "uuid";
            packageId = "uuid 1.10.0";
          }
        ];
        features = {
          "serde" = [ "dep:serde" ];
        };
      };
      "der 0.6.1" = rec {
        crateName = "der";
        version = "0.6.1";
        edition = "2021";
        sha256 = "1pnl3y52m1s6srxpfrfbazf6qilzq8fgksk5dv79nxaybjk6g97i";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "const-oid";
            packageId = "const-oid";
            optional = true;
          }
          {
            name = "pem-rfc7468";
            packageId = "pem-rfc7468 0.6.0";
            optional = true;
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
        ];
        features = {
          "const-oid" = [ "dep:const-oid" ];
          "der_derive" = [ "dep:der_derive" ];
          "derive" = [ "der_derive" ];
          "flagset" = [ "dep:flagset" ];
          "oid" = [ "const-oid" ];
          "pem" = [ "alloc" "pem-rfc7468/alloc" "zeroize" ];
          "pem-rfc7468" = [ "dep:pem-rfc7468" ];
          "std" = [ "alloc" ];
          "time" = [ "dep:time" ];
          "zeroize" = [ "dep:zeroize" ];
        };
        resolvedDefaultFeatures = [ "alloc" "const-oid" "oid" "pem" "pem-rfc7468" "std" "zeroize" ];
      };
      "der 0.7.9" = rec {
        crateName = "der";
        version = "0.7.9";
        edition = "2021";
        sha256 = "1h4vzjfa1lczxdf8avfj9qlwh1qianqlxdy1g5rn762qnvkzhnzm";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "const-oid";
            packageId = "const-oid";
            optional = true;
          }
          {
            name = "pem-rfc7468";
            packageId = "pem-rfc7468 0.7.0";
            optional = true;
            features = [ "alloc" ];
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "zeroize?/alloc" ];
          "arbitrary" = [ "dep:arbitrary" "const-oid?/arbitrary" "std" ];
          "bytes" = [ "dep:bytes" "alloc" ];
          "derive" = [ "dep:der_derive" ];
          "flagset" = [ "dep:flagset" ];
          "oid" = [ "dep:const-oid" ];
          "pem" = [ "dep:pem-rfc7468" "alloc" "zeroize" ];
          "std" = [ "alloc" ];
          "time" = [ "dep:time" ];
          "zeroize" = [ "dep:zeroize" ];
        };
        resolvedDefaultFeatures = [ "alloc" "oid" "pem" "std" "zeroize" ];
      };
      "der-parser" = rec {
        crateName = "der-parser";
        version = "8.2.0";
        edition = "2018";
        sha256 = "07mnz9y395zyxwj7nam2dbzkqdngfraxp2i7y2714dxmpbxpdmnv";
        libName = "der_parser";
        authors = [
          "Pierre Chifflier <chifflier@wzdftpd.net>"
        ];
        dependencies = [
          {
            name = "asn1-rs";
            packageId = "asn1-rs";
          }
          {
            name = "displaydoc";
            packageId = "displaydoc";
            usesDefaultFeatures = false;
          }
          {
            name = "nom";
            packageId = "nom";
          }
          {
            name = "num-bigint";
            packageId = "num-bigint 0.4.6";
            optional = true;
          }
          {
            name = "num-traits";
            packageId = "num-traits";
          }
          {
            name = "rusticata-macros";
            packageId = "rusticata-macros";
          }
        ];
        features = {
          "bigint" = [ "num-bigint" ];
          "cookie-factory" = [ "dep:cookie-factory" ];
          "default" = [ "std" ];
          "num-bigint" = [ "dep:num-bigint" ];
          "serialize" = [ "std" "cookie-factory" ];
        };
        resolvedDefaultFeatures = [ "bigint" "default" "num-bigint" "std" ];
      };
      "deranged" = rec {
        crateName = "deranged";
        version = "0.3.11";
        edition = "2021";
        sha256 = "1d1ibqqnr5qdrpw8rclwrf1myn3wf0dygl04idf4j2s49ah6yaxl";
        authors = [
          "Jacob Pratt <jacob@jhpratt.dev>"
        ];
        dependencies = [
          {
            name = "powerfmt";
            packageId = "powerfmt";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "num" = [ "dep:num-traits" ];
          "powerfmt" = [ "dep:powerfmt" ];
          "quickcheck" = [ "dep:quickcheck" "alloc" ];
          "rand" = [ "dep:rand" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "powerfmt" "serde" "std" ];
      };
      "derivative" = rec {
        crateName = "derivative";
        version = "2.2.0";
        edition = "2015";
        sha256 = "02vpb81wisk2zh1d5f44szzxamzinqgq2k8ydrfjj2wwkrgdvhzw";
        procMacro = true;
        authors = [
          "mcarton <cartonmartin+git@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.86";
          }
          {
            name = "quote";
            packageId = "quote 1.0.37";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            features = [ "visit" "extra-traits" ];
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "use_core" ];
      };
      "derive-syn-parse" = rec {
        crateName = "derive-syn-parse";
        version = "0.1.5";
        edition = "2018";
        sha256 = "1kb8qwyqmvdxzr5qd0rqgai7j3lv7gq0ad0zpwdbl7fx37qid4g7";
        procMacro = true;
        libName = "derive_syn_parse";
        authors = [
          "sharnoff <github@max.sharnoff.org>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.86";
          }
          {
            name = "quote";
            packageId = "quote 1.0.37";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            features = [ "derive" "parsing" ];
          }
        ];
        devDependencies = [
          {
            name = "syn";
            packageId = "syn 1.0.109";
            features = [ "full" "extra-traits" ];
          }
        ];

      };
      "derive_arbitrary" = rec {
        crateName = "derive_arbitrary";
        version = "1.3.2";
        edition = "2021";
        sha256 = "04bnd985frl81r5sgixgpvncnnj1bfpfnd7qvdx1aahnqi9pbrv7";
        procMacro = true;
        authors = [
          "The Rust-Fuzz Project Developers"
          "Nick Fitzgerald <fitzgen@gmail.com>"
          "Manish Goregaokar <manishsmail@gmail.com>"
          "Andre Bogus <bogusandre@gmail.com>"
          "Corey Farwell <coreyf@rwell.org>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.86";
          }
          {
            name = "quote";
            packageId = "quote 1.0.37";
          }
          {
            name = "syn";
            packageId = "syn 2.0.77";
            features = [ "derive" "parsing" ];
          }
        ];

      };
      "derive_more" = rec {
        crateName = "derive_more";
        version = "0.99.18";
        edition = "2018";
        sha256 = "1kmz7bsjn9jh04nplqdr6bjyi90qkqjlxb8lm5zzvnp46y0qfcsz";
        procMacro = true;
        authors = [
          "Jelte Fennema <github-tech@jeltef.nl>"
        ];
        dependencies = [
          {
            name = "convert_case";
            packageId = "convert_case";
            optional = true;
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.86";
          }
          {
            name = "quote";
            packageId = "quote 1.0.37";
          }
          {
            name = "syn";
            packageId = "syn 2.0.77";
          }
        ];
        buildDependencies = [
          {
            name = "rustc_version";
            packageId = "rustc_version";
            optional = true;
          }
        ];
        features = {
          "convert_case" = [ "dep:convert_case" ];
          "default" = [ "add_assign" "add" "as_mut" "as_ref" "constructor" "deref" "deref_mut" "display" "error" "from" "from_str" "index" "index_mut" "into" "into_iterator" "iterator" "mul_assign" "mul" "not" "sum" "try_into" "is_variant" "unwrap" ];
          "display" = [ "syn/extra-traits" ];
          "error" = [ "syn/extra-traits" ];
          "from" = [ "syn/extra-traits" ];
          "generate-parsing-rs" = [ "peg" ];
          "into" = [ "syn/extra-traits" ];
          "is_variant" = [ "convert_case" ];
          "mul" = [ "syn/extra-traits" ];
          "mul_assign" = [ "syn/extra-traits" ];
          "not" = [ "syn/extra-traits" ];
          "peg" = [ "dep:peg" ];
          "rustc_version" = [ "dep:rustc_version" ];
          "testing-helpers" = [ "rustc_version" ];
          "try_into" = [ "syn/extra-traits" ];
          "unwrap" = [ "convert_case" "rustc_version" ];
        };
        resolvedDefaultFeatures = [ "add" "add_assign" "as_mut" "as_ref" "constructor" "convert_case" "default" "deref" "deref_mut" "display" "error" "from" "from_str" "index" "index_mut" "into" "into_iterator" "is_variant" "iterator" "mul" "mul_assign" "not" "rustc_version" "sum" "try_into" "unwrap" ];
      };
      "diesel" = rec {
        crateName = "diesel";
        version = "2.2.4";
        edition = "2021";
        sha256 = "0pjx0n6k8v084nsm7qnk609iayvjq0kk4kvybmhvv5c6wvifi3qm";
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.6.0";
            optional = true;
          }
          {
            name = "byteorder";
            packageId = "byteorder";
            optional = true;
          }
          {
            name = "chrono";
            packageId = "chrono";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "clock" "std" ];
          }
          {
            name = "diesel_derives";
            packageId = "diesel_derives";
          }
          {
            name = "itoa";
            packageId = "itoa";
            optional = true;
          }
          {
            name = "mysqlclient-sys";
            packageId = "mysqlclient-sys";
            optional = true;
          }
          {
            name = "percent-encoding";
            packageId = "percent-encoding";
            optional = true;
          }
          {
            name = "pq-sys";
            packageId = "pq-sys";
            optional = true;
          }
          {
            name = "r2d2";
            packageId = "r2d2";
            optional = true;
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            optional = true;
          }
          {
            name = "url";
            packageId = "url";
            optional = true;
          }
        ];
        features = {
          "128-column-tables" = [ "64-column-tables" "diesel_derives/128-column-tables" ];
          "32-column-tables" = [ "diesel_derives/32-column-tables" ];
          "64-column-tables" = [ "32-column-tables" "diesel_derives/64-column-tables" ];
          "__with_asan_tests" = [ "libsqlite3-sys?/bundled" "libsqlite3-sys?/with-asan" "pq-sys?/bundled" "pq-src?/with-asan" "mysqlclient-sys?/bundled" "mysqlclient-src?/with-asan" ];
          "chrono" = [ "diesel_derives/chrono" "dep:chrono" ];
          "default" = [ "with-deprecated" "32-column-tables" ];
          "extras" = [ "chrono" "time" "serde_json" "uuid" "network-address" "numeric" "r2d2" ];
          "huge-tables" = [ "64-column-tables" ];
          "ipnet-address" = [ "dep:ipnet" "dep:libc" ];
          "large-tables" = [ "32-column-tables" ];
          "mysql" = [ "dep:mysqlclient-sys" "dep:url" "dep:percent-encoding" "dep:bitflags" "mysql_backend" ];
          "mysql_backend" = [ "diesel_derives/mysql" "dep:byteorder" ];
          "mysqlclient-src" = [ "dep:mysqlclient-src" ];
          "network-address" = [ "dep:ipnetwork" "dep:libc" ];
          "numeric" = [ "dep:num-bigint" "dep:bigdecimal" "dep:num-traits" "dep:num-integer" ];
          "postgres" = [ "dep:pq-sys" "postgres_backend" ];
          "postgres_backend" = [ "diesel_derives/postgres" "dep:bitflags" "dep:byteorder" "dep:itoa" ];
          "pq-src" = [ "dep:pq-src" ];
          "quickcheck" = [ "dep:quickcheck" ];
          "r2d2" = [ "diesel_derives/r2d2" "dep:r2d2" ];
          "serde_json" = [ "dep:serde_json" ];
          "sqlite" = [ "dep:libsqlite3-sys" "diesel_derives/sqlite" "time?/formatting" "time?/parsing" ];
          "time" = [ "diesel_derives/time" "dep:time" ];
          "unstable" = [ "diesel_derives/nightly" ];
          "uuid" = [ "dep:uuid" ];
          "with-deprecated" = [ "diesel_derives/with-deprecated" ];
          "without-deprecated" = [ "diesel_derives/without-deprecated" ];
        };
        resolvedDefaultFeatures = [ "32-column-tables" "64-column-tables" "chrono" "default" "i-implement-a-third-party-backend-and-opt-into-breaking-changes" "mysql" "mysql_backend" "postgres" "postgres_backend" "r2d2" "serde_json" "with-deprecated" ];
      };
      "diesel_derives" = rec {
        crateName = "diesel_derives";
        version = "2.2.3";
        edition = "2021";
        sha256 = "191iw5ja7s1gjy9ymjvv91ghzbvs2fb5ca28lvr6pfp2a7gc7wp7";
        procMacro = true;
        dependencies = [
          {
            name = "diesel_table_macro_syntax";
            packageId = "diesel_table_macro_syntax";
          }
          {
            name = "dsl_auto_type";
            packageId = "dsl_auto_type";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.86";
          }
          {
            name = "quote";
            packageId = "quote 1.0.37";
          }
          {
            name = "syn";
            packageId = "syn 2.0.77";
            features = [ "derive" "fold" "full" ];
          }
        ];
        features = {
          "128-column-tables" = [ "64-column-tables" ];
          "64-column-tables" = [ "32-column-tables" ];
          "nightly" = [ "proc-macro2/nightly" ];
        };
        resolvedDefaultFeatures = [ "32-column-tables" "64-column-tables" "chrono" "default" "mysql" "postgres" "r2d2" "with-deprecated" ];
      };
      "diesel_migrations" = rec {
        crateName = "diesel_migrations";
        version = "2.2.0";
        edition = "2021";
        sha256 = "1xn12ny9m1ci74iqpvhcfyhapr6wj56k3wxz07q32hmd9dqcwwwa";
        dependencies = [
          {
            name = "diesel";
            packageId = "diesel";
            usesDefaultFeatures = false;
          }
          {
            name = "migrations_internals";
            packageId = "migrations_internals";
          }
          {
            name = "migrations_macros";
            packageId = "migrations_macros";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "diesel_table_macro_syntax" = rec {
        crateName = "diesel_table_macro_syntax";
        version = "0.2.0";
        edition = "2021";
        sha256 = "09gvkyljhchbxfkxlkkrdcqcmcxwsim9sfljqilbq4x485b77710";
        dependencies = [
          {
            name = "syn";
            packageId = "syn 2.0.77";
            features = [ "full" ];
          }
        ];

      };
      "diff" = rec {
        crateName = "diff";
        version = "0.1.13";
        edition = "2015";
        sha256 = "1j0nzjxci2zqx63hdcihkp0a4dkdmzxd7my4m7zk6cjyfy34j9an";
        authors = [
          "Utkarsh Kukreti <utkarshkukreti@gmail.com>"
        ];

      };
      "difference" = rec {
        crateName = "difference";
        version = "2.0.0";
        edition = "2015";
        crateBin = [];
        sha256 = "1621wx4k8h452p6xzmzzvm7mz87kxh4yqz0kzxfjj9xmjxlbyk2j";
        authors = [
          "Johann Hofmann <mail@johann-hofmann.com>"
        ];
        features = {
          "bin" = [ "getopts" ];
          "getopts" = [ "dep:getopts" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "difflib" = rec {
        crateName = "difflib";
        version = "0.4.0";
        edition = "2015";
        sha256 = "1s7byq4d7jgf2hcp2lcqxi2piqwl8xqlharfbi8kf90n8csy7131";
        authors = [
          "Dima Kudosh <dimakudosh@gmail.com>"
        ];

      };
      "diffy" = rec {
        crateName = "diffy";
        version = "0.3.0";
        edition = "2018";
        sha256 = "145p68n751bk2vmsdm4cymak71c7c986y5bh97l5f8n9an8ya5p6";
        authors = [
          "Brandon Williams <bwilliams.eng@gmail.com>"
        ];
        dependencies = [
          {
            name = "nu-ansi-term";
            packageId = "nu-ansi-term";
          }
        ];

      };
      "digest 0.10.7" = rec {
        crateName = "digest";
        version = "0.10.7";
        edition = "2018";
        sha256 = "14p2n6ih29x81akj097lvz7wi9b6b9hvls0lwrv7b6xwyy0s5ncy";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "block-buffer";
            packageId = "block-buffer 0.10.4";
            optional = true;
          }
          {
            name = "const-oid";
            packageId = "const-oid";
            optional = true;
          }
          {
            name = "crypto-common";
            packageId = "crypto-common";
          }
          {
            name = "subtle";
            packageId = "subtle";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "blobby" = [ "dep:blobby" ];
          "block-buffer" = [ "dep:block-buffer" ];
          "const-oid" = [ "dep:const-oid" ];
          "core-api" = [ "block-buffer" ];
          "default" = [ "core-api" ];
          "dev" = [ "blobby" ];
          "mac" = [ "subtle" ];
          "oid" = [ "const-oid" ];
          "rand_core" = [ "crypto-common/rand_core" ];
          "std" = [ "alloc" "crypto-common/std" ];
          "subtle" = [ "dep:subtle" ];
        };
        resolvedDefaultFeatures = [ "alloc" "block-buffer" "const-oid" "core-api" "default" "mac" "oid" "std" "subtle" ];
      };
      "digest 0.9.0" = rec {
        crateName = "digest";
        version = "0.9.0";
        edition = "2018";
        sha256 = "0rmhvk33rgvd6ll71z8sng91a52rw14p0drjn1da0mqa138n1pfk";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "generic-array";
            packageId = "generic-array";
          }
        ];
        features = {
          "blobby" = [ "dep:blobby" ];
          "dev" = [ "blobby" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "std" ];
      };
      "dirs 4.0.0" = rec {
        crateName = "dirs";
        version = "4.0.0";
        edition = "2015";
        sha256 = "0n8020zl4f0frfnzvgb9agvk4a14i1kjz4daqnxkgslndwmaffna";
        authors = [
          "Simon Ochsenreither <simon@ochsenreither.de>"
        ];
        dependencies = [
          {
            name = "dirs-sys";
            packageId = "dirs-sys 0.3.7";
          }
        ];

      };
      "dirs 5.0.1" = rec {
        crateName = "dirs";
        version = "5.0.1";
        edition = "2015";
        sha256 = "0992xk5vx75b2x91nw9ssb51mpl8x73j9rxmpi96cryn0ffmmi24";
        authors = [
          "Simon Ochsenreither <simon@ochsenreither.de>"
        ];
        dependencies = [
          {
            name = "dirs-sys";
            packageId = "dirs-sys 0.4.1";
          }
        ];

      };
      "dirs-next" = rec {
        crateName = "dirs-next";
        version = "2.0.0";
        edition = "2018";
        sha256 = "1q9kr151h9681wwp6is18750ssghz6j9j7qm7qi1ngcwy7mzi35r";
        libName = "dirs_next";
        authors = [
          "The @xdg-rs members"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "dirs-sys-next";
            packageId = "dirs-sys-next";
          }
        ];

      };
      "dirs-sys 0.3.7" = rec {
        crateName = "dirs-sys";
        version = "0.3.7";
        edition = "2015";
        sha256 = "19md1cnkazham8a6kh22v12d8hh3raqahfk6yb043vrjr68is78v";
        libName = "dirs_sys";
        authors = [
          "Simon Ochsenreither <simon@ochsenreither.de>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "redox_users";
            packageId = "redox_users";
            usesDefaultFeatures = false;
            target = { target, features }: ("redox" == target."os" or null);
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: (target."windows" or false);
            features = [ "knownfolders" "objbase" "shlobj" "winbase" "winerror" ];
          }
        ];

      };
      "dirs-sys 0.4.1" = rec {
        crateName = "dirs-sys";
        version = "0.4.1";
        edition = "2015";
        sha256 = "071jy0pvaad9lsa6mzawxrh7cmr7hsmsdxwzm7jzldfkrfjha3sj";
        libName = "dirs_sys";
        authors = [
          "Simon Ochsenreither <simon@ochsenreither.de>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "option-ext";
            packageId = "option-ext";
          }
          {
            name = "redox_users";
            packageId = "redox_users";
            usesDefaultFeatures = false;
            target = { target, features }: ("redox" == target."os" or null);
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.48.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_UI_Shell" "Win32_Foundation" "Win32_Globalization" "Win32_System_Com" ];
          }
        ];

      };
      "dirs-sys-next" = rec {
        crateName = "dirs-sys-next";
        version = "0.1.2";
        edition = "2018";
        sha256 = "0kavhavdxv4phzj4l0psvh55hszwnr0rcz8sxbvx20pyqi2a3gaf";
        libName = "dirs_sys_next";
        authors = [
          "The @xdg-rs members"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "redox_users";
            packageId = "redox_users";
            usesDefaultFeatures = false;
            target = { target, features }: ("redox" == target."os" or null);
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: (target."windows" or false);
            features = [ "knownfolders" "objbase" "shlobj" "winbase" "winerror" ];
          }
        ];

      };
      "displaydoc" = rec {
        crateName = "displaydoc";
        version = "0.2.5";
        edition = "2021";
        sha256 = "1q0alair462j21iiqwrr21iabkfnb13d6x5w95lkdg21q2xrqdlp";
        procMacro = true;
        authors = [
          "Jane Lusby <jlusby@yaah.dev>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.86";
          }
          {
            name = "quote";
            packageId = "quote 1.0.37";
          }
          {
            name = "syn";
            packageId = "syn 2.0.77";
          }
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "dissimilar" = rec {
        crateName = "dissimilar";
        version = "1.0.9";
        edition = "2018";
        sha256 = "0bcn4s99ghigd3yadpd7i3gljv5z2hkr07ijvvxvsxmz3yfygy2r";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];

      };
      "doc-comment" = rec {
        crateName = "doc-comment";
        version = "0.3.3";
        edition = "2015";
        sha256 = "043sprsf3wl926zmck1bm7gw0jq50mb76lkpk49vasfr6ax1p97y";
        libName = "doc_comment";
        authors = [
          "Guillaume Gomez <guillaume1.gomez@gmail.com>"
        ];
        features = {
        };
      };
      "docs-examples" = rec {
        crateName = "docs-examples";
        version = "0.5.0-alpha";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./docs/examples/rust; }
          else ./docs/examples/rust;
        libName = "docs_examples";
        authors = [
          "IOTA Stiftung"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "iota-keys";
            packageId = "iota-keys";
          }
          {
            name = "iota-move-build";
            packageId = "iota-move-build";
          }
          {
            name = "iota-sdk";
            packageId = "iota-sdk 0.5.0-alpha";
          }
          {
            name = "move-binary-format";
            packageId = "move-binary-format";
            features = [ "fuzzing" ];
          }
          {
            name = "shared-crypto";
            packageId = "shared-crypto";
          }
        ];
        devDependencies = [
          {
            name = "bcs";
            packageId = "bcs";
          }
          {
            name = "bip32";
            packageId = "bip32";
          }
          {
            name = "move-core-types";
            packageId = "move-core-types";
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            features = [ "preserve_order" ];
          }
          {
            name = "tokio";
            packageId = "tokio";
          }
        ];

      };
      "downcast" = rec {
        crateName = "downcast";
        version = "0.11.0";
        edition = "2018";
        sha256 = "1wa78ahlc57wmqyq2ncr80l7plrkgz57xsg7kfzgpcnqac8gld8l";
        authors = [
          "Felix Köpge <fkoep@mailbox.org>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "downcast-rs" = rec {
        crateName = "downcast-rs";
        version = "1.2.1";
        edition = "2015";
        sha256 = "1lmrq383d1yszp7mg5i7i56b17x2lnn3kb91jwsq0zykvg2jbcvm";
        libName = "downcast_rs";
        authors = [
          "Ashish Myles <marcianx@gmail.com>"
          "Runji Wang <wangrunji0408@163.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "dsl_auto_type" = rec {
        crateName = "dsl_auto_type";
        version = "0.1.2";
        edition = "2021";
        sha256 = "01xng43pn2dlc5k422is20dapq14w9x1p46qq968c0s167kapnf5";
        dependencies = [
          {
            name = "darling";
            packageId = "darling 0.20.10";
          }
          {
            name = "either";
            packageId = "either";
          }
          {
            name = "heck";
            packageId = "heck 0.5.0";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.86";
          }
          {
            name = "quote";
            packageId = "quote 1.0.37";
          }
          {
            name = "syn";
            packageId = "syn 2.0.77";
            features = [ "extra-traits" "full" "derive" "parsing" "visit" ];
          }
        ];

      };
      "dunce" = rec {
        crateName = "dunce";
        version = "1.0.5";
        edition = "2021";
        sha256 = "04y8wwv3vvcqaqmqzssi6k0ii9gs6fpz96j5w9nky2ccsl23axwj";
        authors = [
          "Kornel <kornel@geekhood.net>"
        ];

      };
      "duration-str" = rec {
        crateName = "duration-str";
        version = "0.5.1";
        edition = "2021";
        sha256 = "1wfz7sh7s6dv865n317svmfjzrp8671sjpzghwff4yfii323gw6r";
        libName = "duration_str";
        authors = [
          "baoyachi <liaoymxsdl@gmail.com>"
        ];
        dependencies = [
          {
            name = "chrono";
            packageId = "chrono";
            optional = true;
          }
          {
            name = "nom";
            packageId = "nom";
          }
          {
            name = "rust_decimal";
            packageId = "rust_decimal";
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            features = [ "derive" ];
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "time";
            packageId = "time";
            optional = true;
          }
        ];
        features = {
          "chrono" = [ "dep:chrono" ];
          "default" = [ "chrono" "serde" "time" ];
          "serde" = [ "dep:serde" ];
          "time" = [ "dep:time" ];
        };
        resolvedDefaultFeatures = [ "chrono" "default" "serde" "time" ];
      };
      "dyn-clone" = rec {
        crateName = "dyn-clone";
        version = "1.0.17";
        edition = "2018";
        sha256 = "09cig7dgg6jnqa10p4233nd8wllbjf4ffsw7wj0m4lwa5w3z0vhd";
        libName = "dyn_clone";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];

      };
      "ecdsa 0.14.8" = rec {
        crateName = "ecdsa";
        version = "0.14.8";
        edition = "2021";
        sha256 = "0p1wxap2s6jm06y2w3cal8dkz6p9223ir9wws70rgx8h929h2cs1";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "der";
            packageId = "der 0.6.1";
            optional = true;
          }
          {
            name = "elliptic-curve";
            packageId = "elliptic-curve 0.12.3";
            usesDefaultFeatures = false;
            features = [ "digest" "sec1" ];
          }
          {
            name = "rfc6979";
            packageId = "rfc6979 0.3.1";
            optional = true;
          }
          {
            name = "signature";
            packageId = "signature 1.6.4";
            usesDefaultFeatures = false;
            features = [ "hazmat-preview" "rand-preview" ];
          }
        ];
        devDependencies = [
          {
            name = "elliptic-curve";
            packageId = "elliptic-curve 0.12.3";
            usesDefaultFeatures = false;
            features = [ "dev" ];
          }
        ];
        features = {
          "arithmetic" = [ "elliptic-curve/arithmetic" ];
          "default" = [ "digest" ];
          "der" = [ "dep:der" ];
          "dev" = [ "arithmetic" "digest" "elliptic-curve/dev" "hazmat" ];
          "digest" = [ "signature/digest-preview" ];
          "pem" = [ "elliptic-curve/pem" "pkcs8" ];
          "pkcs8" = [ "elliptic-curve/pkcs8" "der" ];
          "rfc6979" = [ "dep:rfc6979" ];
          "serde" = [ "elliptic-curve/serde" "serdect" ];
          "serdect" = [ "dep:serdect" ];
          "sign" = [ "arithmetic" "digest" "hazmat" "rfc6979" ];
          "std" = [ "alloc" "elliptic-curve/std" "signature/std" ];
          "verify" = [ "arithmetic" "digest" "hazmat" ];
        };
        resolvedDefaultFeatures = [ "alloc" "arithmetic" "der" "digest" "hazmat" "pkcs8" "rfc6979" "sign" "std" "verify" ];
      };
      "ecdsa 0.16.9" = rec {
        crateName = "ecdsa";
        version = "0.16.9";
        edition = "2021";
        sha256 = "1jhb0bcbkaz4001sdmfyv8ajrv8a1cg7z7aa5myrd4jjbhmz69zf";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "der";
            packageId = "der 0.7.9";
            optional = true;
          }
          {
            name = "digest";
            packageId = "digest 0.10.7";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "oid" ];
          }
          {
            name = "elliptic-curve";
            packageId = "elliptic-curve 0.13.8";
            usesDefaultFeatures = false;
            features = [ "digest" "sec1" ];
          }
          {
            name = "rfc6979";
            packageId = "rfc6979 0.4.0";
            optional = true;
          }
          {
            name = "serdect";
            packageId = "serdect";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "signature";
            packageId = "signature 2.2.0";
            usesDefaultFeatures = false;
            features = [ "rand_core" ];
          }
          {
            name = "spki";
            packageId = "spki 0.7.3";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "elliptic-curve";
            packageId = "elliptic-curve 0.13.8";
            usesDefaultFeatures = false;
            features = [ "dev" ];
          }
        ];
        features = {
          "alloc" = [ "elliptic-curve/alloc" "signature/alloc" "spki/alloc" ];
          "arithmetic" = [ "elliptic-curve/arithmetic" ];
          "default" = [ "digest" ];
          "der" = [ "dep:der" ];
          "dev" = [ "arithmetic" "digest" "elliptic-curve/dev" "hazmat" ];
          "digest" = [ "dep:digest" "signature/digest" ];
          "pem" = [ "elliptic-curve/pem" "pkcs8" ];
          "pkcs8" = [ "digest" "elliptic-curve/pkcs8" "der" ];
          "rfc6979" = [ "dep:rfc6979" ];
          "serde" = [ "elliptic-curve/serde" "serdect" ];
          "serdect" = [ "dep:serdect" ];
          "sha2" = [ "dep:sha2" ];
          "signing" = [ "arithmetic" "digest" "hazmat" "rfc6979" ];
          "spki" = [ "dep:spki" ];
          "std" = [ "alloc" "elliptic-curve/std" "signature/std" ];
          "verifying" = [ "arithmetic" "digest" "hazmat" ];
        };
        resolvedDefaultFeatures = [ "alloc" "arithmetic" "default" "der" "digest" "hazmat" "pem" "pkcs8" "rfc6979" "serde" "serdect" "signing" "spki" "std" "verifying" ];
      };
      "ed25519 1.5.3" = rec {
        crateName = "ed25519";
        version = "1.5.3";
        edition = "2021";
        sha256 = "1rzydm5wd8szkddx3g55w4vm86y1ika8qp8qwckada5vf1fg7kwi";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "pkcs8";
            packageId = "pkcs8 0.9.0";
            optional = true;
          }
          {
            name = "signature";
            packageId = "signature 1.6.4";
            usesDefaultFeatures = false;
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "pkcs8/alloc" ];
          "default" = [ "std" ];
          "pem" = [ "pkcs8/pem" ];
          "pkcs8" = [ "dep:pkcs8" ];
          "serde" = [ "dep:serde" ];
          "serde_bytes" = [ "serde" "serde_bytes_crate" "std" ];
          "serde_bytes_crate" = [ "dep:serde_bytes_crate" ];
          "std" = [ "signature/std" ];
          "zeroize" = [ "dep:zeroize" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "pkcs8" "std" "zeroize" ];
      };
      "ed25519 2.2.3" = rec {
        crateName = "ed25519";
        version = "2.2.3";
        edition = "2021";
        sha256 = "0lydzdf26zbn82g7xfczcac9d7mzm3qgx934ijjrd5hjpjx32m8i";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "pkcs8";
            packageId = "pkcs8 0.10.2";
            optional = true;
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "signature";
            packageId = "signature 2.2.0";
            usesDefaultFeatures = false;
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "pkcs8?/alloc" ];
          "default" = [ "std" ];
          "pem" = [ "alloc" "pkcs8/pem" ];
          "pkcs8" = [ "dep:pkcs8" ];
          "serde" = [ "dep:serde" ];
          "serde_bytes" = [ "serde" "dep:serde_bytes" ];
          "std" = [ "pkcs8?/std" "signature/std" ];
          "zeroize" = [ "dep:zeroize" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "pkcs8" "serde" "std" "zeroize" ];
      };
      "ed25519-consensus" = rec {
        crateName = "ed25519-consensus";
        version = "2.1.0";
        edition = "2018";
        sha256 = "12wrrwg5hafpm3ashyi6vginwrqnkc0imll1xbzkcx7fr3nnb11w";
        libName = "ed25519_consensus";
        authors = [
          "Henry de Valence <hdevalence@hdevalence.ca>"
        ];
        dependencies = [
          {
            name = "curve25519-dalek-ng";
            packageId = "curve25519-dalek-ng";
            rename = "curve25519-dalek";
            usesDefaultFeatures = false;
            features = [ "u64_backend" "alloc" ];
          }
          {
            name = "hex";
            packageId = "hex";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            features = [ "derive" ];
          }
          {
            name = "sha2";
            packageId = "sha2 0.9.9";
            usesDefaultFeatures = false;
          }
          {
            name = "thiserror";
            packageId = "thiserror";
            optional = true;
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "serde" "std" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "thiserror" ];
          "thiserror" = [ "dep:thiserror" ];
        };
        resolvedDefaultFeatures = [ "default" "serde" "std" "thiserror" ];
      };
      "ed25519-dalek" = rec {
        crateName = "ed25519-dalek";
        version = "2.1.1";
        edition = "2021";
        sha256 = "0w88cafwglg9hjizldbmlza0ns3hls81zk1bcih3m5m3h67algaa";
        libName = "ed25519_dalek";
        authors = [
          "isis lovecruft <isis@patternsinthevoid.net>"
          "Tony Arcieri <bascule@gmail.com>"
          "Michael Rosenberg <michael@mrosenberg.pub>"
        ];
        dependencies = [
          {
            name = "curve25519-dalek";
            packageId = "curve25519-dalek";
            usesDefaultFeatures = false;
            features = [ "digest" ];
          }
          {
            name = "ed25519";
            packageId = "ed25519 2.2.3";
            usesDefaultFeatures = false;
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "sha2";
            packageId = "sha2 0.10.8";
            usesDefaultFeatures = false;
          }
          {
            name = "subtle";
            packageId = "subtle";
            usesDefaultFeatures = false;
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "curve25519-dalek";
            packageId = "curve25519-dalek";
            usesDefaultFeatures = false;
            features = [ "digest" "rand_core" ];
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
        ];
        features = {
          "alloc" = [ "curve25519-dalek/alloc" "ed25519/alloc" "serde?/alloc" "zeroize/alloc" ];
          "asm" = [ "sha2/asm" ];
          "batch" = [ "alloc" "merlin" "rand_core" ];
          "default" = [ "fast" "std" "zeroize" ];
          "digest" = [ "signature/digest" ];
          "fast" = [ "curve25519-dalek/precomputed-tables" ];
          "legacy_compatibility" = [ "curve25519-dalek/legacy_compatibility" ];
          "merlin" = [ "dep:merlin" ];
          "pem" = [ "alloc" "ed25519/pem" "pkcs8" ];
          "pkcs8" = [ "ed25519/pkcs8" ];
          "rand_core" = [ "dep:rand_core" ];
          "serde" = [ "dep:serde" "ed25519/serde" ];
          "signature" = [ "dep:signature" ];
          "std" = [ "alloc" "ed25519/std" "serde?/std" "sha2/std" ];
          "zeroize" = [ "dep:zeroize" "curve25519-dalek/zeroize" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "fast" "pkcs8" "rand_core" "std" "zeroize" ];
      };
      "ed25519-zebra" = rec {
        crateName = "ed25519-zebra";
        version = "4.0.3";
        edition = "2018";
        sha256 = "1ab55w7w6hh7hyyjg507ki7hrz0w9nygyifdjrc43m559n3yd73x";
        libName = "ed25519_zebra";
        authors = [
          "Henry de Valence <hdevalence@hdevalence.ca>"
          "Zcash Foundation <zebra@zfnd.org>"
        ];
        dependencies = [
          {
            name = "curve25519-dalek";
            packageId = "curve25519-dalek";
            usesDefaultFeatures = false;
            features = [ "alloc" "digest" "zeroize" "precomputed-tables" ];
          }
          {
            name = "ed25519";
            packageId = "ed25519 2.2.3";
            usesDefaultFeatures = false;
          }
          {
            name = "hashbrown";
            packageId = "hashbrown 0.14.5";
          }
          {
            name = "hex";
            packageId = "hex";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "sha2";
            packageId = "sha2 0.10.8";
            usesDefaultFeatures = false;
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            features = [ "zeroize_derive" ];
          }
        ];
        features = {
          "default" = [ "serde" "std" ];
          "der" = [ "dep:der" ];
          "pem" = [ "der" "ed25519/pem" ];
          "pkcs8" = [ "dep:pkcs8" ];
          "serde" = [ "dep:serde" "ed25519/serde" ];
          "std" = [ "ed25519/std" ];
        };
        resolvedDefaultFeatures = [ "serde" ];
      };
      "either" = rec {
        crateName = "either";
        version = "1.13.0";
        edition = "2018";
        sha256 = "1w2c1mybrd7vljyxk77y9f4w9dyjrmp3yp82mk7bcm8848fazcb0";
        authors = [
          "bluss"
        ];
        features = {
          "default" = [ "use_std" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "default" "use_std" ];
      };
      "elliptic-curve 0.12.3" = rec {
        crateName = "elliptic-curve";
        version = "0.12.3";
        edition = "2021";
        sha256 = "1lwi108mh6drw5nzqzlz7ighdba5qxdg5vmwwnw1j2ihnn58ifz7";
        libName = "elliptic_curve";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "base16ct";
            packageId = "base16ct 0.1.1";
          }
          {
            name = "crypto-bigint";
            packageId = "crypto-bigint 0.4.9";
            usesDefaultFeatures = false;
            features = [ "rand_core" "generic-array" "zeroize" ];
          }
          {
            name = "der";
            packageId = "der 0.6.1";
            usesDefaultFeatures = false;
            features = [ "oid" ];
          }
          {
            name = "digest";
            packageId = "digest 0.10.7";
            optional = true;
          }
          {
            name = "ff";
            packageId = "ff 0.12.1";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "generic-array";
            packageId = "generic-array";
            usesDefaultFeatures = false;
          }
          {
            name = "group";
            packageId = "group 0.12.1";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "pkcs8";
            packageId = "pkcs8 0.9.0";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
            usesDefaultFeatures = false;
          }
          {
            name = "sec1";
            packageId = "sec1 0.3.0";
            optional = true;
            features = [ "subtle" "zeroize" ];
          }
          {
            name = "subtle";
            packageId = "subtle";
            usesDefaultFeatures = false;
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "base16ct/alloc" "der/alloc" "sec1/alloc" "zeroize/alloc" ];
          "arithmetic" = [ "ff" "group" ];
          "base64ct" = [ "dep:base64ct" ];
          "bits" = [ "arithmetic" "ff/bits" ];
          "default" = [ "arithmetic" ];
          "dev" = [ "arithmetic" "hex-literal" "pem" "pkcs8" ];
          "digest" = [ "dep:digest" ];
          "ecdh" = [ "arithmetic" "digest" "hkdf" ];
          "ff" = [ "dep:ff" ];
          "group" = [ "dep:group" ];
          "hash2curve" = [ "arithmetic" "digest" ];
          "hex-literal" = [ "dep:hex-literal" ];
          "hkdf" = [ "dep:hkdf" ];
          "jwk" = [ "alloc" "base64ct/alloc" "serde" "serde_json" "zeroize/alloc" ];
          "pem" = [ "alloc" "arithmetic" "der/pem" "pem-rfc7468/alloc" "pkcs8" "sec1/pem" ];
          "pem-rfc7468" = [ "dep:pem-rfc7468" ];
          "pkcs8" = [ "dep:pkcs8" ];
          "sec1" = [ "dep:sec1" ];
          "serde" = [ "alloc" "pkcs8" "sec1/serde" "serdect" ];
          "serde_json" = [ "dep:serde_json" ];
          "serdect" = [ "dep:serdect" ];
          "std" = [ "alloc" "rand_core/std" ];
          "voprf" = [ "digest" ];
        };
        resolvedDefaultFeatures = [ "alloc" "arithmetic" "digest" "ff" "group" "hazmat" "pkcs8" "sec1" "std" ];
      };
      "elliptic-curve 0.13.8" = rec {
        crateName = "elliptic-curve";
        version = "0.13.8";
        edition = "2021";
        sha256 = "0ixx4brgnzi61z29r3g1606nh2za88hzyz8c5r3p6ydzhqq09rmm";
        libName = "elliptic_curve";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "base16ct";
            packageId = "base16ct 0.2.0";
          }
          {
            name = "base64ct";
            packageId = "base64ct";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "crypto-bigint";
            packageId = "crypto-bigint 0.5.5";
            usesDefaultFeatures = false;
            features = [ "rand_core" "generic-array" "zeroize" ];
          }
          {
            name = "digest";
            packageId = "digest 0.10.7";
            optional = true;
          }
          {
            name = "ff";
            packageId = "ff 0.13.0";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "generic-array";
            packageId = "generic-array";
            usesDefaultFeatures = false;
            features = [ "zeroize" ];
          }
          {
            name = "group";
            packageId = "group 0.13.0";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "hkdf";
            packageId = "hkdf";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "pem-rfc7468";
            packageId = "pem-rfc7468 0.7.0";
            optional = true;
            features = [ "alloc" ];
          }
          {
            name = "pkcs8";
            packageId = "pkcs8 0.10.2";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
            usesDefaultFeatures = false;
          }
          {
            name = "sec1";
            packageId = "sec1 0.7.3";
            optional = true;
            features = [ "subtle" "zeroize" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "serdect";
            packageId = "serdect";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "subtle";
            packageId = "subtle";
            usesDefaultFeatures = false;
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "base16ct/alloc" "ff?/alloc" "group?/alloc" "pkcs8?/alloc" "sec1?/alloc" "zeroize/alloc" ];
          "arithmetic" = [ "group" ];
          "bits" = [ "arithmetic" "ff/bits" "dep:tap" ];
          "default" = [ "arithmetic" ];
          "dev" = [ "arithmetic" "dep:hex-literal" "pem" "pkcs8" ];
          "digest" = [ "dep:digest" ];
          "ecdh" = [ "arithmetic" "digest" "dep:hkdf" ];
          "ff" = [ "dep:ff" ];
          "group" = [ "dep:group" "ff" ];
          "hash2curve" = [ "arithmetic" "digest" ];
          "jwk" = [ "dep:base64ct" "dep:serde_json" "alloc" "serde" "zeroize/alloc" ];
          "pem" = [ "dep:pem-rfc7468" "alloc" "arithmetic" "pkcs8" "sec1/pem" ];
          "pkcs8" = [ "dep:pkcs8" "sec1" ];
          "sec1" = [ "dep:sec1" ];
          "serde" = [ "dep:serdect" "alloc" "pkcs8" "sec1/serde" ];
          "std" = [ "alloc" "rand_core/std" "pkcs8?/std" "sec1?/std" ];
          "voprf" = [ "digest" ];
        };
        resolvedDefaultFeatures = [ "alloc" "arithmetic" "default" "digest" "ecdh" "ff" "group" "hash2curve" "hazmat" "jwk" "pem" "pkcs8" "sec1" "serde" "std" ];
      };
      "ena" = rec {
        crateName = "ena";
        version = "0.14.3";
        edition = "2015";
        sha256 = "1m9a5hqk6qn5sqnrc40b55yr97drkfdzd0jj863ksqff8gfqn91x";
        authors = [
          "Niko Matsakis <niko@alum.mit.edu>"
        ];
        dependencies = [
          {
            name = "log";
            packageId = "log";
          }
        ];
        features = {
          "dogged" = [ "dep:dogged" ];
          "persistent" = [ "dogged" ];
        };
      };
      "encode_unicode 0.3.6" = rec {
        crateName = "encode_unicode";
        version = "0.3.6";
        edition = "2015";
        sha256 = "07w3vzrhxh9lpjgsg2y5bwzfar2aq35mdznvcp3zjl0ssj7d4mx3";
        authors = [
          "Torbjørn Birch Moltu <t.b.moltu@lyse.net>"
        ];
        features = {
          "ascii" = [ "dep:ascii" ];
          "clippy" = [ "dep:clippy" ];
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "encode_unicode 1.0.0" = rec {
        crateName = "encode_unicode";
        version = "1.0.0";
        edition = "2021";
        sha256 = "1h5j7j7byi289by63s3w4a8b3g6l5ccdrws7a67nn07vdxj77ail";
        authors = [
          "Torbjørn Birch Moltu <t.b.moltu@lyse.net>"
        ];
        features = {
          "ascii" = [ "dep:ascii" ];
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "encoding_rs" = rec {
        crateName = "encoding_rs";
        version = "0.8.34";
        edition = "2018";
        sha256 = "0nagpi1rjqdpvakymwmnlxzq908ncg868lml5b70n08bm82fjpdl";
        authors = [
          "Henri Sivonen <hsivonen@hsivonen.fi>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
        ];
        features = {
          "any_all_workaround" = [ "dep:any_all_workaround" ];
          "default" = [ "alloc" ];
          "fast-legacy-encode" = [ "fast-hangul-encode" "fast-hanja-encode" "fast-kanji-encode" "fast-gb-hanzi-encode" "fast-big5-hanzi-encode" ];
          "serde" = [ "dep:serde" ];
          "simd-accel" = [ "any_all_workaround" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" ];
      };
      "endian-type" = rec {
        crateName = "endian-type";
        version = "0.1.2";
        edition = "2015";
        sha256 = "0bbh88zaig1jfqrm7w3gx0pz81kw2jakk3055vbgapw3dmk08ky3";
        libName = "endian_type";
        authors = [
          "Lolirofle <lolipopple@hotmail.com>"
        ];

      };
      "enr" = rec {
        crateName = "enr";
        version = "0.10.0";
        edition = "2018";
        sha256 = "1r7p8zb4y95n5d0nfky3dws77i2jqmr9fj7br3559y82dv2qsg9a";
        authors = [
          "Age Manning <Age@AgeManning.com>"
        ];
        dependencies = [
          {
            name = "base64";
            packageId = "base64 0.21.7";
          }
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "hex";
            packageId = "hex";
          }
          {
            name = "k256";
            packageId = "k256";
            optional = true;
            features = [ "ecdsa" ];
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "rlp";
            packageId = "rlp";
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            features = [ "derive" ];
          }
          {
            name = "sha3";
            packageId = "sha3 0.10.8";
          }
          {
            name = "zeroize";
            packageId = "zeroize";
          }
        ];
        features = {
          "default" = [ "serde" "k256" ];
          "ed25519" = [ "ed25519-dalek" ];
          "ed25519-dalek" = [ "dep:ed25519-dalek" ];
          "k256" = [ "dep:k256" ];
          "rust-secp256k1" = [ "secp256k1" ];
          "secp256k1" = [ "dep:secp256k1" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "k256" "serde" ];
      };
      "enum-as-inner" = rec {
        crateName = "enum-as-inner";
        version = "0.6.1";
        edition = "2018";
        sha256 = "1g3cywc65d9w974l2xy86ij13njss3qjc7b0kfbzbws9qrjs5rm1";
        procMacro = true;
        libName = "enum_as_inner";
        authors = [
          "Benjamin Fry <benjaminfry@me.com>"
        ];
        dependencies = [
          {
            name = "heck";
            packageId = "heck 0.5.0";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.86";
          }
          {
            name = "quote";
            packageId = "quote 1.0.37";
          }
          {
            name = "syn";
            packageId = "syn 2.0.77";
          }
        ];

      };
      "enum-compat-util" = rec {
        crateName = "enum-compat-util";
        version = "0.1.0";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./external-crates/move/crates/enum-compat-util; }
          else ./external-crates/move/crates/enum-compat-util;
        libName = "enum_compat_util";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "serde_yaml";
            packageId = "serde_yaml";
          }
        ];

      };
      "enum_dispatch" = rec {
        crateName = "enum_dispatch";
        version = "0.3.13";
        edition = "2018";
        sha256 = "1kby2jz173ggg7wk41vjsskmkdyx7749ll8lhqhv6mb5qqmww65a";
        procMacro = true;
        authors = [
          "Anton Lazarev <https://antonok.com>"
        ];
        dependencies = [
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.86";
          }
          {
            name = "quote";
            packageId = "quote 1.0.37";
          }
          {
            name = "syn";
            packageId = "syn 2.0.77";
            features = [ "full" ];
          }
        ];

      };
      "equivalent" = rec {
        crateName = "equivalent";
        version = "1.0.1";
        edition = "2015";
        sha256 = "1malmx5f4lkfvqasz319lq6gb3ddg19yzf9s8cykfsgzdmyq0hsl";

      };
      "erasable" = rec {
        crateName = "erasable";
        version = "1.2.1";
        edition = "2018";
        sha256 = "0z8b6k8aan6h80vp4mm327lvmrx0mdn4psyiwmj7mm41w468j4az";
        authors = [
          "Christopher Durham (cad97) <cad97@cad97.com>"
        ];
        dependencies = [
          {
            name = "scopeguard";
            packageId = "scopeguard";
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
          "default" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" ];
      };
      "errno" = rec {
        crateName = "errno";
        version = "0.3.9";
        edition = "2018";
        sha256 = "1fi0m0493maq1jygcf1bya9cymz2pc1mqxj26bdv7yjd37v5qk2k";
        authors = [
          "Chris Wong <lambda.fairy@gmail.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: ("hermit" == target."os" or null);
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: ("wasi" == target."os" or null);
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.52.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_Foundation" "Win32_System_Diagnostics_Debug" ];
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "libc/std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "error-code" = rec {
        crateName = "error-code";
        version = "3.3.1";
        edition = "2018";
        sha256 = "0bx9hw3pahzqym8jvb0ln4qsabnysgn98mikyh2afhk9rif31nd5";
        libName = "error_code";
        authors = [
          "Douman <douman@gmx.se>"
        ];
        features = {
        };
      };
      "eth-keystore" = rec {
        crateName = "eth-keystore";
        version = "0.5.0";
        edition = "2018";
        sha256 = "1asqf4280mg0y85x5hdjnafgv8i53ikf05q74sjisi5y4gqkpnhz";
        libName = "eth_keystore";
        authors = [
          "Rohit Narurkar <rohit.narurkar@protonmail.com>"
        ];
        dependencies = [
          {
            name = "aes";
            packageId = "aes";
          }
          {
            name = "ctr";
            packageId = "ctr";
          }
          {
            name = "digest";
            packageId = "digest 0.10.7";
          }
          {
            name = "hex";
            packageId = "hex";
          }
          {
            name = "hmac";
            packageId = "hmac";
          }
          {
            name = "pbkdf2";
            packageId = "pbkdf2 0.11.0";
            usesDefaultFeatures = false;
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "scrypt";
            packageId = "scrypt 0.10.0";
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "sha2";
            packageId = "sha2 0.10.8";
          }
          {
            name = "sha3";
            packageId = "sha3 0.10.8";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
            usesDefaultFeatures = false;
          }
          {
            name = "uuid";
            packageId = "uuid 0.8.2";
            features = [ "serde" "v4" ];
          }
        ];
        features = {
          "ethereum-types" = [ "dep:ethereum-types" ];
          "geth-compat" = [ "ethereum-types" "k256" "k256/ecdsa" ];
          "k256" = [ "dep:k256" ];
        };
      };
      "ethabi" = rec {
        crateName = "ethabi";
        version = "18.0.0";
        edition = "2021";
        sha256 = "1668rcninb2lrvg2z1khs95k7syb6slnb2ba70vyl0y99kvwa4vl";
        authors = [
          "Parity Technologies <admin@parity.io>"
          "Artem Vorotnikov <artem@vorotnikov.me>"
          "Nicholas Rodrigues Lordello <nlordell@gmail.com>"
        ];
        dependencies = [
          {
            name = "ethereum-types";
            packageId = "ethereum-types";
            usesDefaultFeatures = false;
          }
          {
            name = "hex";
            packageId = "hex";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "once_cell";
            packageId = "once_cell";
            optional = true;
          }
          {
            name = "regex";
            packageId = "regex";
            optional = true;
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            optional = true;
          }
          {
            name = "sha3";
            packageId = "sha3 0.10.8";
            usesDefaultFeatures = false;
          }
          {
            name = "thiserror";
            packageId = "thiserror";
            optional = true;
          }
          {
            name = "uint";
            packageId = "uint";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "serde_json";
            packageId = "serde_json";
          }
        ];
        features = {
          "default" = [ "std" "full-serde" "rlp" ];
          "full-serde" = [ "std" "serde" "serde_json" "regex" "once_cell" ];
          "once_cell" = [ "dep:once_cell" ];
          "parity-codec" = [ "ethereum-types/codec" ];
          "regex" = [ "dep:regex" ];
          "rlp" = [ "ethereum-types/rlp" ];
          "serde" = [ "dep:serde" "ethereum-types/serialize" "uint" ];
          "serde_json" = [ "dep:serde_json" ];
          "std" = [ "hex/std" "sha3/std" "ethereum-types/std" "thiserror" "uint?/std" "serde?/std" ];
          "thiserror" = [ "dep:thiserror" ];
          "uint" = [ "dep:uint" ];
        };
        resolvedDefaultFeatures = [ "full-serde" "once_cell" "regex" "rlp" "serde" "serde_json" "std" "thiserror" "uint" ];
      };
      "ethbloom" = rec {
        crateName = "ethbloom";
        version = "0.13.0";
        edition = "2021";
        sha256 = "0q0g286d1gb3ghs8fssf8fg77grjsaw9ycmrx3jjzamnhmc4nbf2";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "crunchy";
            packageId = "crunchy";
            usesDefaultFeatures = false;
            features = [ "limit_256" ];
          }
          {
            name = "fixed-hash";
            packageId = "fixed-hash 0.8.0";
            usesDefaultFeatures = false;
          }
          {
            name = "impl-codec";
            packageId = "impl-codec 0.6.0";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "impl-rlp";
            packageId = "impl-rlp";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "impl-serde";
            packageId = "impl-serde 0.4.0";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "scale-info";
            packageId = "scale-info";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "tiny-keccak";
            packageId = "tiny-keccak";
            features = [ "keccak" ];
          }
        ];
        features = {
          "arbitrary" = [ "fixed-hash/arbitrary" ];
          "codec" = [ "impl-codec" "scale-info" ];
          "default" = [ "std" "rlp" "serialize" "rustc-hex" ];
          "impl-codec" = [ "dep:impl-codec" ];
          "impl-rlp" = [ "dep:impl-rlp" ];
          "impl-serde" = [ "dep:impl-serde" ];
          "rlp" = [ "impl-rlp" ];
          "rustc-hex" = [ "fixed-hash/rustc-hex" ];
          "scale-info" = [ "dep:scale-info" ];
          "serialize" = [ "impl-serde" ];
          "std" = [ "fixed-hash/std" "crunchy/std" ];
        };
        resolvedDefaultFeatures = [ "codec" "impl-codec" "impl-rlp" "impl-serde" "rlp" "scale-info" "serialize" "std" ];
      };
      "ethereum-types" = rec {
        crateName = "ethereum-types";
        version = "0.14.1";
        edition = "2021";
        sha256 = "1vnqxmrz1l7wg4mh284f4q09vaw0zrr878wrpvy2wma0y35iblh2";
        libName = "ethereum_types";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "ethbloom";
            packageId = "ethbloom";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "fixed-hash";
            packageId = "fixed-hash 0.8.0";
            usesDefaultFeatures = false;
            features = [ "byteorder" "rustc-hex" ];
          }
          {
            name = "impl-codec";
            packageId = "impl-codec 0.6.0";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "impl-rlp";
            packageId = "impl-rlp";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "impl-serde";
            packageId = "impl-serde 0.4.0";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "primitive-types";
            packageId = "primitive-types 0.12.2";
            usesDefaultFeatures = false;
            features = [ "byteorder" "rustc-hex" ];
          }
          {
            name = "scale-info";
            packageId = "scale-info";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "uint";
            packageId = "uint";
            rename = "uint-crate";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "arbitrary" = [ "ethbloom/arbitrary" "fixed-hash/arbitrary" "uint-crate/arbitrary" ];
          "codec" = [ "impl-codec" "ethbloom/codec" "scale-info" "primitive-types/scale-info" ];
          "default" = [ "std" "ethbloom" "rlp" "serialize" ];
          "ethbloom" = [ "dep:ethbloom" ];
          "impl-codec" = [ "dep:impl-codec" ];
          "impl-rlp" = [ "dep:impl-rlp" ];
          "impl-serde" = [ "dep:impl-serde" ];
          "num-traits" = [ "primitive-types/num-traits" ];
          "rlp" = [ "impl-rlp" "ethbloom/rlp" "primitive-types/rlp" ];
          "scale-info" = [ "dep:scale-info" ];
          "serialize" = [ "impl-serde" "primitive-types/serde_no_std" "ethbloom/serialize" ];
          "std" = [ "uint-crate/std" "fixed-hash/std" "ethbloom?/std" "primitive-types/std" ];
        };
        resolvedDefaultFeatures = [ "codec" "default" "ethbloom" "impl-codec" "impl-rlp" "impl-serde" "rlp" "scale-info" "serialize" "std" ];
      };
      "ethers" = rec {
        crateName = "ethers";
        version = "2.0.14";
        edition = "2021";
        sha256 = "1h6yp36vx680lfiiwjj2andb2cq0dcxg475gb7j6j34zk3m42s41";
        authors = [
          "Georgios Konstantopoulos <me@gakonst.com>"
        ];
        dependencies = [
          {
            name = "ethers-addressbook";
            packageId = "ethers-addressbook";
            usesDefaultFeatures = false;
          }
          {
            name = "ethers-contract";
            packageId = "ethers-contract";
            usesDefaultFeatures = false;
            features = [ "providers" ];
          }
          {
            name = "ethers-core";
            packageId = "ethers-core";
            usesDefaultFeatures = false;
          }
          {
            name = "ethers-etherscan";
            packageId = "ethers-etherscan";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "ethers-middleware";
            packageId = "ethers-middleware";
            usesDefaultFeatures = false;
          }
          {
            name = "ethers-providers";
            packageId = "ethers-providers";
            usesDefaultFeatures = false;
          }
          {
            name = "ethers-signers";
            packageId = "ethers-signers";
            usesDefaultFeatures = false;
          }
          {
            name = "ethers-solc";
            packageId = "ethers-solc";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "abigen" = [ "ethers-contract/abigen" ];
          "abigen-offline" = [ "abigen" ];
          "abigen-online" = [ "ethers-contract/abigen-online" ];
          "aws" = [ "ethers-signers/aws" ];
          "celo" = [ "ethers-contract/celo" "ethers-core/celo" "ethers-middleware/celo" "ethers-providers/celo" "ethers-signers/celo" "legacy" ];
          "default" = [ "abigen" "rustls" "etherscan" ];
          "dev-rpc" = [ "ethers-providers/dev-rpc" ];
          "ethers-solc" = [ "solc" ];
          "etherscan" = [ "dep:ethers-etherscan" "ethers-middleware/etherscan" ];
          "ipc" = [ "ethers-providers/ipc" ];
          "ledger" = [ "ethers-signers/ledger" ];
          "legacy" = [ "ethers-core/legacy" "ethers-contract/legacy" ];
          "legacy-ws" = [ "ethers-providers/legacy-ws" ];
          "openssl" = [ "ethers-contract/openssl" "ethers-etherscan?/openssl" "ethers-middleware/openssl" "ethers-providers/openssl" "ethers-solc?/openssl" ];
          "optimism" = [ "ethers-core/optimism" "ethers-providers/optimism" "ethers-signers/optimism" "ethers-middleware/optimism" "ethers-contract/optimism" ];
          "rustls" = [ "ethers-contract/rustls" "ethers-etherscan?/rustls" "ethers-middleware/rustls" "ethers-providers/rustls" "ethers-solc?/rustls" ];
          "solc" = [ "dep:ethers-solc" "ethers-etherscan?/ethers-solc" ];
          "solc-full" = [ "ethers-solc?/full" ];
          "solc-tests" = [ "ethers-solc?/tests" ];
          "trezor" = [ "ethers-signers/trezor" ];
          "ws" = [ "ethers-providers/ws" ];
          "yubi" = [ "ethers-signers/yubi" ];
        };
        resolvedDefaultFeatures = [ "abigen" "default" "etherscan" "rustls" "ws" ];
      };
      "ethers-addressbook" = rec {
        crateName = "ethers-addressbook";
        version = "2.0.14";
        edition = "2021";
        sha256 = "0n8p08xmr5qs0mvj60jm2wyfb0s9ifwj27xs7dn5bajgdg8sz5al";
        libName = "ethers_addressbook";
        authors = [
          "Rohit Narurkar <rohit.narurkar@protonmail.com>"
        ];
        dependencies = [
          {
            name = "ethers-core";
            packageId = "ethers-core";
            usesDefaultFeatures = false;
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
        ];

      };
      "ethers-contract" = rec {
        crateName = "ethers-contract";
        version = "2.0.14";
        edition = "2021";
        sha256 = "1ansxjw68984vmg8m9x09lmzjhdhryx7my2ahzmnx0wcayiszkkg";
        libName = "ethers_contract";
        authors = [
          "Georgios Konstantopoulos <me@gakonst.com>"
        ];
        dependencies = [
          {
            name = "const-hex";
            packageId = "const-hex";
            rename = "hex";
            features = [ "hex" ];
          }
          {
            name = "ethers-contract-abigen";
            packageId = "ethers-contract-abigen";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "ethers-contract-derive";
            packageId = "ethers-contract-derive";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "ethers-core";
            packageId = "ethers-core";
            usesDefaultFeatures = false;
          }
          {
            name = "ethers-providers";
            packageId = "ethers-providers";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "futures-util";
            packageId = "futures-util";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "pin-project";
            packageId = "pin-project";
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
        ];
        devDependencies = [
          {
            name = "ethers-providers";
            packageId = "ethers-providers";
            usesDefaultFeatures = false;
            features = [ "ws" ];
          }
        ];
        features = {
          "abigen" = [ "ethers-contract-abigen" "ethers-contract-derive" ];
          "abigen-offline" = [ "abigen" ];
          "abigen-online" = [ "abigen" "ethers-contract-abigen/online" ];
          "celo" = [ "legacy" "ethers-core/celo" "ethers-providers/celo" ];
          "default" = [ "abigen" "providers" ];
          "ethers-contract-abigen" = [ "dep:ethers-contract-abigen" ];
          "ethers-contract-derive" = [ "dep:ethers-contract-derive" ];
          "ethers-providers" = [ "dep:ethers-providers" ];
          "openssl" = [ "ethers-contract-abigen/openssl" ];
          "optimism" = [ "ethers-core/optimism" "ethers-providers/optimism" ];
          "providers" = [ "ethers-providers" "ethers-contract-abigen/providers" "ethers-contract-derive/providers" ];
          "rustls" = [ "ethers-contract-abigen/rustls" ];
        };
        resolvedDefaultFeatures = [ "abigen" "ethers-contract-abigen" "ethers-contract-derive" "ethers-providers" "providers" "rustls" ];
      };
      "ethers-contract-abigen" = rec {
        crateName = "ethers-contract-abigen";
        version = "2.0.14";
        edition = "2021";
        sha256 = "16vkb85sjy222kdrzvwh8bqq2rqnf2jx95gb5723h6ikqbxh3fh4";
        libName = "ethers_contract_abigen";
        authors = [
          "Nicholas Rodrigues Lordello <nlordell@gmail.com>"
          "Georgios Konstantopoulos <me@gakonst.com>"
        ];
        dependencies = [
          {
            name = "Inflector";
            packageId = "Inflector";
          }
          {
            name = "const-hex";
            packageId = "const-hex";
            rename = "hex";
            features = [ "hex" ];
          }
          {
            name = "dunce";
            packageId = "dunce";
          }
          {
            name = "ethers-core";
            packageId = "ethers-core";
            usesDefaultFeatures = false;
            features = [ "macros" ];
          }
          {
            name = "ethers-etherscan";
            packageId = "ethers-etherscan";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "eyre";
            packageId = "eyre";
          }
          {
            name = "prettyplease";
            packageId = "prettyplease";
            features = [ "verbatim" ];
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.86";
          }
          {
            name = "quote";
            packageId = "quote 1.0.37";
          }
          {
            name = "regex";
            packageId = "regex";
          }
          {
            name = "reqwest";
            packageId = "reqwest 0.11.27";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: (!("wasm32" == target."arch" or null));
            features = [ "blocking" ];
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "syn";
            packageId = "syn 2.0.77";
            features = [ "extra-traits" "full" ];
          }
          {
            name = "toml";
            packageId = "toml 0.8.19";
          }
          {
            name = "walkdir";
            packageId = "walkdir";
          }
        ];
        features = {
          "default" = [ "providers" ];
          "ethers-etherscan" = [ "dep:ethers-etherscan" ];
          "online" = [ "reqwest" "ethers-etherscan" "url" "tokio" ];
          "openssl" = [ "reqwest?/native-tls" "ethers-etherscan?/openssl" ];
          "reqwest" = [ "dep:reqwest" ];
          "rustls" = [ "reqwest?/rustls-tls" "ethers-etherscan?/rustls" ];
          "tokio" = [ "dep:tokio" ];
          "url" = [ "dep:url" ];
        };
        resolvedDefaultFeatures = [ "providers" "rustls" ];
      };
      "ethers-contract-derive" = rec {
        crateName = "ethers-contract-derive";
        version = "2.0.14";
        edition = "2021";
        sha256 = "13qnk9k8rzdkbmbi8p0jyrjks2g9z6cf5bda1khwsl80pk59ss47";
        procMacro = true;
        libName = "ethers_contract_derive";
        authors = [
          "Nicholas Rodrigues Lordello <nlordell@gmail.com>"
          "Georgios Konstantopoulos <me@gakonst.com>"
        ];
        dependencies = [
          {
            name = "Inflector";
            packageId = "Inflector";
          }
          {
            name = "const-hex";
            packageId = "const-hex";
            rename = "hex";
            features = [ "hex" ];
          }
          {
            name = "ethers-contract-abigen";
            packageId = "ethers-contract-abigen";
            usesDefaultFeatures = false;
          }
          {
            name = "ethers-core";
            packageId = "ethers-core";
            usesDefaultFeatures = false;
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.86";
          }
          {
            name = "quote";
            packageId = "quote 1.0.37";
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "syn";
            packageId = "syn 2.0.77";
            features = [ "extra-traits" ];
          }
        ];
        features = {
          "default" = [ "providers" ];
          "providers" = [ "ethers-contract-abigen/providers" ];
        };
        resolvedDefaultFeatures = [ "providers" ];
      };
      "ethers-core" = rec {
        crateName = "ethers-core";
        version = "2.0.14";
        edition = "2021";
        sha256 = "07zv33picj1japynmh1zcal2hzxk6fpj6rbqmd44mc9hmp30rn42";
        libName = "ethers_core";
        authors = [
          "Georgios Konstantopoulos <me@gakonst.com>"
        ];
        dependencies = [
          {
            name = "arrayvec";
            packageId = "arrayvec";
            usesDefaultFeatures = false;
          }
          {
            name = "bytes";
            packageId = "bytes";
            features = [ "serde" ];
          }
          {
            name = "cargo_metadata";
            packageId = "cargo_metadata 0.18.1";
            optional = true;
          }
          {
            name = "chrono";
            packageId = "chrono";
            usesDefaultFeatures = false;
          }
          {
            name = "const-hex";
            packageId = "const-hex";
            rename = "hex";
            features = [ "hex" ];
          }
          {
            name = "elliptic-curve";
            packageId = "elliptic-curve 0.13.8";
            usesDefaultFeatures = false;
          }
          {
            name = "ethabi";
            packageId = "ethabi";
            usesDefaultFeatures = false;
            features = [ "full-serde" "rlp" ];
          }
          {
            name = "generic-array";
            packageId = "generic-array";
            usesDefaultFeatures = false;
          }
          {
            name = "k256";
            packageId = "k256";
            usesDefaultFeatures = false;
            features = [ "ecdsa" "std" "ecdsa" "std" ];
          }
          {
            name = "num_enum";
            packageId = "num_enum";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
            optional = true;
          }
          {
            name = "open-fastrlp";
            packageId = "open-fastrlp";
            features = [ "std" "derive" "ethereum-types" ];
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "rlp";
            packageId = "rlp";
            features = [ "derive" ];
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "strum";
            packageId = "strum 0.26.3";
            features = [ "derive" ];
          }
          {
            name = "syn";
            packageId = "syn 2.0.77";
            optional = true;
            features = [ "extra-traits" ];
          }
          {
            name = "tempfile";
            packageId = "tempfile";
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "tiny-keccak";
            packageId = "tiny-keccak";
            usesDefaultFeatures = false;
          }
          {
            name = "unicode-xid";
            packageId = "unicode-xid 0.2.6";
          }
        ];
        devDependencies = [
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
        ];
        features = {
          "cargo_metadata" = [ "dep:cargo_metadata" ];
          "celo" = [ "legacy" ];
          "macros" = [ "syn" "cargo_metadata" "once_cell" ];
          "once_cell" = [ "dep:once_cell" ];
          "syn" = [ "dep:syn" ];
        };
        resolvedDefaultFeatures = [ "cargo_metadata" "macros" "once_cell" "syn" ];
      };
      "ethers-etherscan" = rec {
        crateName = "ethers-etherscan";
        version = "2.0.14";
        edition = "2021";
        sha256 = "0jcnbca48wdlf5k2i4riwnmqqchl4drvs82mwl6ayjvdq9rmk7p7";
        libName = "ethers_etherscan";
        authors = [
          "Matthias Seitz <matthias.seitz@outlook.de>"
          "Georgios Konstantopoulos <me@gakonst.com>"
        ];
        dependencies = [
          {
            name = "chrono";
            packageId = "chrono";
            usesDefaultFeatures = false;
          }
          {
            name = "ethers-core";
            packageId = "ethers-core";
            usesDefaultFeatures = false;
          }
          {
            name = "reqwest";
            packageId = "reqwest 0.11.27";
            usesDefaultFeatures = false;
            features = [ "json" ];
          }
          {
            name = "semver";
            packageId = "semver";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
        ];
        features = {
          "default" = [ "rustls" ];
          "ethers-solc" = [ "dep:ethers-solc" ];
          "openssl" = [ "reqwest/native-tls" ];
          "rustls" = [ "reqwest/rustls-tls" ];
          "solc-full" = [ "ethers-solc?/full" ];
          "solc-tests" = [ "ethers-solc?/tests" ];
        };
        resolvedDefaultFeatures = [ "rustls" ];
      };
      "ethers-middleware" = rec {
        crateName = "ethers-middleware";
        version = "2.0.14";
        edition = "2021";
        sha256 = "1pj3mazjh79c2yj0nl72s0dvxygasl41kn89k44pqrpckbqgvya8";
        libName = "ethers_middleware";
        authors = [
          "Georgios Konstantopoulos <me@gakonst.com>"
        ];
        dependencies = [
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "auto_impl";
            packageId = "auto_impl";
          }
          {
            name = "ethers-contract";
            packageId = "ethers-contract";
            usesDefaultFeatures = false;
            features = [ "abigen" "providers" ];
          }
          {
            name = "ethers-core";
            packageId = "ethers-core";
            usesDefaultFeatures = false;
          }
          {
            name = "ethers-etherscan";
            packageId = "ethers-etherscan";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "ethers-providers";
            packageId = "ethers-providers";
            usesDefaultFeatures = false;
          }
          {
            name = "ethers-signers";
            packageId = "ethers-signers";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-channel";
            packageId = "futures-channel";
          }
          {
            name = "futures-locks";
            packageId = "futures-locks";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-util";
            packageId = "futures-util";
          }
          {
            name = "instant";
            packageId = "instant";
          }
          {
            name = "reqwest";
            packageId = "reqwest 0.11.27";
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "tokio";
            packageId = "tokio";
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "tracing-futures";
            packageId = "tracing-futures";
          }
          {
            name = "url";
            packageId = "url";
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "ethers-providers";
            packageId = "ethers-providers";
            usesDefaultFeatures = false;
            features = [ "ws" "rustls" ];
          }
          {
            name = "reqwest";
            packageId = "reqwest 0.11.27";
            usesDefaultFeatures = false;
            features = [ "json" "rustls" ];
          }
          {
            name = "tokio";
            packageId = "tokio";
            target = {target, features}: (!("wasm32" == target."arch" or null));
            features = [ "rt-multi-thread" "macros" "time" ];
          }
        ];
        features = {
          "celo" = [ "ethers-core/celo" "ethers-providers/celo" "ethers-signers/celo" "ethers-contract/celo" ];
          "default" = [ "rustls" "etherscan" ];
          "etherscan" = [ "dep:ethers-etherscan" ];
          "openssl" = [ "reqwest/native-tls" ];
          "optimism" = [ "ethers-core/optimism" "ethers-providers/optimism" "ethers-contract/optimism" ];
          "rustls" = [ "reqwest/rustls-tls" ];
        };
        resolvedDefaultFeatures = [ "etherscan" "rustls" ];
      };
      "ethers-providers" = rec {
        crateName = "ethers-providers";
        version = "2.0.14";
        edition = "2021";
        sha256 = "1cisx1phls11capjjjzc1xdgmckdcq92wivmkkyfzwci72iwjd34";
        libName = "ethers_providers";
        authors = [
          "Georgios Konstantopoulos <me@gakonst.com>"
        ];
        dependencies = [
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "auto_impl";
            packageId = "auto_impl";
          }
          {
            name = "base64";
            packageId = "base64 0.21.7";
          }
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "const-hex";
            packageId = "const-hex";
            rename = "hex";
            features = [ "hex" ];
          }
          {
            name = "enr";
            packageId = "enr";
            usesDefaultFeatures = false;
            features = [ "k256" "serde" ];
          }
          {
            name = "ethers-core";
            packageId = "ethers-core";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-channel";
            packageId = "futures-channel";
            optional = true;
          }
          {
            name = "futures-core";
            packageId = "futures-core";
          }
          {
            name = "futures-timer";
            packageId = "futures-timer";
            usesDefaultFeatures = false;
            features = [ "wasm-bindgen" ];
          }
          {
            name = "futures-util";
            packageId = "futures-util";
          }
          {
            name = "hashers";
            packageId = "hashers";
          }
          {
            name = "http";
            packageId = "http 0.2.12";
          }
          {
            name = "instant";
            packageId = "instant";
          }
          {
            name = "jsonwebtoken";
            packageId = "jsonwebtoken 8.3.0";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "pin-project";
            packageId = "pin-project";
          }
          {
            name = "reqwest";
            packageId = "reqwest 0.11.27";
            usesDefaultFeatures = false;
            features = [ "json" ];
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            features = [ "raw_value" ];
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "tokio";
            packageId = "tokio";
            target = { target, features }: (!("wasm32" == target."arch" or null));
            features = [ "time" ];
          }
          {
            name = "tokio-tungstenite";
            packageId = "tokio-tungstenite 0.20.1";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: (!("wasm32" == target."arch" or null));
            features = [ "connect" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
            features = [ "attributes" ];
          }
          {
            name = "tracing-futures";
            packageId = "tracing-futures";
            features = [ "std-future" ];
          }
          {
            name = "url";
            packageId = "url";
            usesDefaultFeatures = false;
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
          {
            name = "wasm-bindgen-futures";
            packageId = "wasm-bindgen-futures";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
          {
            name = "web-sys";
            packageId = "web-sys";
            target = { target, features }: ("wasm32" == target."arch" or null);
            features = [ "console" ];
          }
          {
            name = "ws_stream_wasm";
            packageId = "ws_stream_wasm";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            target = {target, features}: (!("wasm32" == target."arch" or null));
            features = [ "rt-multi-thread" "macros" "time" ];
          }
        ];
        features = {
          "celo" = [ "ethers-core/celo" ];
          "default" = [ "ws" "rustls" ];
          "futures-channel" = [ "dep:futures-channel" ];
          "ipc" = [ "tokio/io-util" "futures-channel" "winapi" ];
          "legacy-ws" = [ "ws" ];
          "openssl" = [ "tokio-tungstenite/native-tls" "reqwest/native-tls" ];
          "optimism" = [ "ethers-core/optimism" ];
          "rustls" = [ "tokio-tungstenite/rustls-tls-webpki-roots" "reqwest/rustls-tls" ];
          "tokio-tungstenite" = [ "dep:tokio-tungstenite" ];
          "winapi" = [ "dep:winapi" ];
          "ws" = [ "tokio-tungstenite" "futures-channel" ];
        };
        resolvedDefaultFeatures = [ "futures-channel" "rustls" "tokio-tungstenite" "ws" ];
      };
      "ethers-signers" = rec {
        crateName = "ethers-signers";
        version = "2.0.14";
        edition = "2021";
        sha256 = "1hk6cz94sr2kb0mc6fqxaylcsqmcxkc2sr9vfx8xhakq3i4pb212";
        libName = "ethers_signers";
        authors = [
          "Georgios Konstantopoulos <me@gakonst.com>"
        ];
        dependencies = [
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "coins-bip32";
            packageId = "coins-bip32";
          }
          {
            name = "coins-bip39";
            packageId = "coins-bip39";
          }
          {
            name = "const-hex";
            packageId = "const-hex";
            rename = "hex";
            features = [ "hex" ];
          }
          {
            name = "elliptic-curve";
            packageId = "elliptic-curve 0.13.8";
            usesDefaultFeatures = false;
          }
          {
            name = "eth-keystore";
            packageId = "eth-keystore";
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "ethers-core";
            packageId = "ethers-core";
            usesDefaultFeatures = false;
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "sha2";
            packageId = "sha2 0.10.8";
            usesDefaultFeatures = false;
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
        ];
        features = {
          "aws" = [ "rusoto_core/rustls" "rusoto_kms/rustls" "spki" ];
          "celo" = [ "ethers-core/celo" ];
          "coins-ledger" = [ "dep:coins-ledger" ];
          "futures" = [ "futures-util" "futures-executor" ];
          "futures-executor" = [ "dep:futures-executor" ];
          "futures-util" = [ "dep:futures-util" ];
          "home" = [ "dep:home" ];
          "ledger" = [ "coins-ledger" "futures" "semver" ];
          "optimism" = [ "ethers-core/optimism" ];
          "rusoto_core" = [ "dep:rusoto_core" ];
          "rusoto_kms" = [ "dep:rusoto_kms" ];
          "semver" = [ "dep:semver" ];
          "spki" = [ "dep:spki" ];
          "trezor" = [ "trezor-client" "futures" "semver" "home" ];
          "trezor-client" = [ "dep:trezor-client" ];
          "yubi" = [ "yubihsm" ];
          "yubihsm" = [ "dep:yubihsm" ];
        };
      };
      "ethers-solc" = rec {
        crateName = "ethers-solc";
        version = "2.0.14";
        edition = "2021";
        sha256 = "1p8yn64n1b3qwr28cjdn8r0xlkfadq7gxvyv8qk2hqwi3mvll936";
        libName = "ethers_solc";
        authors = [
          "Matthias Seitz <matthias.seitz@outlook.de>"
          "Georgios Konstantopoulos <me@gakonst.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "const-hex";
            packageId = "const-hex";
            rename = "hex";
            features = [ "hex" ];
          }
          {
            name = "dirs";
            packageId = "dirs 5.0.1";
          }
          {
            name = "dunce";
            packageId = "dunce";
          }
          {
            name = "ethers-core";
            packageId = "ethers-core";
            usesDefaultFeatures = false;
          }
          {
            name = "glob";
            packageId = "glob";
          }
          {
            name = "home";
            packageId = "home";
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "md-5";
            packageId = "md-5";
          }
          {
            name = "num_cpus";
            packageId = "num_cpus";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "path-slash";
            packageId = "path-slash";
          }
          {
            name = "rayon";
            packageId = "rayon";
          }
          {
            name = "regex";
            packageId = "regex";
          }
          {
            name = "semver";
            packageId = "semver";
            features = [ "serde" ];
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" "rc" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "solang-parser";
            packageId = "solang-parser";
            usesDefaultFeatures = false;
          }
          {
            name = "svm-rs";
            packageId = "svm-rs";
            rename = "svm";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: (!("wasm32" == target."arch" or null));
            features = [ "blocking" ];
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "tiny-keccak";
            packageId = "tiny-keccak";
            usesDefaultFeatures = false;
          }
          {
            name = "tokio";
            packageId = "tokio";
            target = { target, features }: (!("wasm32" == target."arch" or null));
            features = [ "rt-multi-thread" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "walkdir";
            packageId = "walkdir";
          }
          {
            name = "yansi";
            packageId = "yansi 0.5.1";
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "rt-multi-thread" "macros" ];
          }
        ];
        features = {
          "async" = [ "tokio/process" "tokio/io-util" "tokio/fs" "tokio/time" "futures-util" ];
          "default" = [ "rustls" ];
          "fs_extra" = [ "dep:fs_extra" ];
          "full" = [ "async" "svm-solc" ];
          "futures-util" = [ "dep:futures-util" ];
          "openssl" = [ "svm?/openssl" ];
          "project-util" = [ "tempfile" "fs_extra" "rand" ];
          "rand" = [ "dep:rand" ];
          "rustls" = [ "svm?/rustls" ];
          "sha2" = [ "dep:sha2" ];
          "svm" = [ "dep:svm" ];
          "svm-builds" = [ "dep:svm-builds" ];
          "svm-solc" = [ "svm" "svm-builds" "sha2" ];
          "tempfile" = [ "dep:tempfile" ];
        };
        resolvedDefaultFeatures = [ "rustls" ];
      };
      "ethnum" = rec {
        crateName = "ethnum";
        version = "1.5.0";
        edition = "2021";
        sha256 = "0b68ngvisb0d40vc6h30zlhghbb3mc8wlxjbf8gnmavk1dca435r";
        authors = [
          "Nicholas Rodrigues Lordello <nlordell@gmail.com>"
        ];
        features = {
          "ethnum-intrinsics" = [ "dep:ethnum-intrinsics" ];
          "llvm-intrinsics" = [ "ethnum-intrinsics" ];
          "serde" = [ "dep:serde" ];
        };
      };
      "expect-test" = rec {
        crateName = "expect-test";
        version = "1.5.0";
        edition = "2018";
        sha256 = "1q55nrkgzg345905aqbsdrwlq4sk0gjn4z5bdph1an1kc6jy02wy";
        libName = "expect_test";
        authors = [
          "rust-analyzer developers"
        ];
        dependencies = [
          {
            name = "dissimilar";
            packageId = "dissimilar";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
        ];

      };
      "eyre" = rec {
        crateName = "eyre";
        version = "0.6.12";
        edition = "2018";
        sha256 = "1v1a3vb9gs5zkwp4jzkcfnpg0gvyp4ifydzx37f4qy14kzcibnbw";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
          "Jane Lusby <jlusby42@gmail.com>"
        ];
        dependencies = [
          {
            name = "indenter";
            packageId = "indenter";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
        ];
        features = {
          "default" = [ "auto-install" "track-caller" ];
          "pyo3" = [ "dep:pyo3" ];
        };
        resolvedDefaultFeatures = [ "auto-install" "default" "track-caller" ];
      };
      "fail" = rec {
        crateName = "fail";
        version = "0.4.0";
        edition = "2018";
        sha256 = "19l1s48d9ial0rbbwn3h0n0cw8iicbl1x8rypifizjgxb4fcdqrv";
        authors = [
          "The TiKV Project Developers"
        ];
        dependencies = [
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "log";
            packageId = "log";
            features = [ "std" ];
          }
          {
            name = "rand";
            packageId = "rand 0.7.3";
          }
        ];
        features = {
        };
      };
      "fast_chemail" = rec {
        crateName = "fast_chemail";
        version = "0.9.6";
        edition = "2015";
        sha256 = "1r79x2i7bhk8y4nv7q245dlifxryszmby4k3psm2qk321p9kjnj9";
        authors = [
          "Jonas Me (https://gitlab.com/vulkano)"
        ];
        dependencies = [
          {
            name = "ascii_utils";
            packageId = "ascii_utils";
          }
        ];

      };
      "fastcrypto" = rec {
        crateName = "fastcrypto";
        version = "0.1.8";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/MystenLabs/fastcrypto";
          rev = "5f2c63266a065996d53f98156f0412782b468597";
          sha256 = "1dakf88892yv8vxz4wzf6w69gaikin4dkqpiyj2qmm0lzcii364m";
        };
        authors = [
          "Mysten Labs <build@mystenlabs.com>"
        ];
        dependencies = [
          {
            name = "aes";
            packageId = "aes";
            optional = true;
          }
          {
            name = "aes-gcm";
            packageId = "aes-gcm";
            optional = true;
          }
          {
            name = "ark-ec";
            packageId = "ark-ec";
          }
          {
            name = "ark-ff";
            packageId = "ark-ff";
          }
          {
            name = "ark-secp256r1";
            packageId = "ark-secp256r1";
          }
          {
            name = "ark-serialize";
            packageId = "ark-serialize";
          }
          {
            name = "auto_ops";
            packageId = "auto_ops";
          }
          {
            name = "base64ct";
            packageId = "base64ct";
            features = [ "alloc" ];
          }
          {
            name = "bech32";
            packageId = "bech32";
          }
          {
            name = "bincode";
            packageId = "bincode";
          }
          {
            name = "blake2";
            packageId = "blake2";
          }
          {
            name = "blst";
            packageId = "blst";
            features = [ "no-threads" ];
          }
          {
            name = "bs58";
            packageId = "bs58 0.4.0";
          }
          {
            name = "cbc";
            packageId = "cbc";
            optional = true;
            features = [ "std" ];
          }
          {
            name = "ctr";
            packageId = "ctr";
            optional = true;
          }
          {
            name = "curve25519-dalek-ng";
            packageId = "curve25519-dalek-ng";
          }
          {
            name = "derive_more";
            packageId = "derive_more";
          }
          {
            name = "digest";
            packageId = "digest 0.10.7";
          }
          {
            name = "ecdsa";
            packageId = "ecdsa 0.16.9";
            features = [ "rfc6979" "verifying" ];
          }
          {
            name = "ed25519-consensus";
            packageId = "ed25519-consensus";
            features = [ "serde" ];
          }
          {
            name = "elliptic-curve";
            packageId = "elliptic-curve 0.13.8";
            features = [ "hash2curve" ];
          }
          {
            name = "fastcrypto-derive";
            packageId = "fastcrypto-derive";
          }
          {
            name = "generic-array";
            packageId = "generic-array";
            features = [ "serde" ];
          }
          {
            name = "hex";
            packageId = "hex";
          }
          {
            name = "hex-literal";
            packageId = "hex-literal 0.4.1";
          }
          {
            name = "hkdf";
            packageId = "hkdf";
            features = [ "std" ];
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "num-bigint";
            packageId = "num-bigint 0.4.6";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "p256";
            packageId = "p256 0.13.2";
            features = [ "ecdsa" ];
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
            features = [ "std" ];
          }
          {
            name = "readonly";
            packageId = "readonly";
          }
          {
            name = "rfc6979";
            packageId = "rfc6979 0.4.0";
          }
          {
            name = "rsa";
            packageId = "rsa 0.8.2";
            features = [ "sha2" ];
          }
          {
            name = "schemars";
            packageId = "schemars";
          }
          {
            name = "secp256k1";
            packageId = "secp256k1";
            rename = "rust_secp256k1";
            features = [ "recovery" "rand-std" "bitcoin_hashes" "global-context" ];
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "serde_with";
            packageId = "serde_with";
            usesDefaultFeatures = false;
            features = [ "alloc" "macros" ];
          }
          {
            name = "sha2";
            packageId = "sha2 0.10.8";
          }
          {
            name = "sha3";
            packageId = "sha3 0.10.8";
          }
          {
            name = "signature";
            packageId = "signature 2.2.0";
          }
          {
            name = "static_assertions";
            packageId = "static_assertions";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "sync" "rt" "macros" ];
          }
          {
            name = "typenum";
            packageId = "typenum";
          }
          {
            name = "zeroize";
            packageId = "zeroize";
          }
        ];
        features = {
          "aes" = [ "dep:aes" "dep:cbc" "dep:aes-gcm" "dep:ctr" ];
          "experimental" = [ "dep:bulletproofs" "dep:merlin" ];
          "unsecure_schemes" = [ "dep:twox-hash" "dep:serde-big-array" ];
        };
        resolvedDefaultFeatures = [ "aes" "copy_key" "default" ];
      };
      "fastcrypto-derive" = rec {
        crateName = "fastcrypto-derive";
        version = "0.1.3";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/MystenLabs/fastcrypto";
          rev = "5f2c63266a065996d53f98156f0412782b468597";
          sha256 = "1dakf88892yv8vxz4wzf6w69gaikin4dkqpiyj2qmm0lzcii364m";
        };
        procMacro = true;
        libName = "fastcrypto_derive";
        authors = [
          "Mysten Labs <build@mystenlabs.com>"
        ];
        dependencies = [
          {
            name = "quote";
            packageId = "quote 1.0.37";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            features = [ "derive" ];
          }
        ];

      };
      "fastcrypto-tbls" = rec {
        crateName = "fastcrypto-tbls";
        version = "0.1.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/MystenLabs/fastcrypto";
          rev = "5f2c63266a065996d53f98156f0412782b468597";
          sha256 = "1dakf88892yv8vxz4wzf6w69gaikin4dkqpiyj2qmm0lzcii364m";
        };
        libName = "fastcrypto_tbls";
        authors = [
          "Mysten Labs <build@mystenlabs.com>"
        ];
        dependencies = [
          {
            name = "bcs";
            packageId = "bcs";
          }
          {
            name = "digest";
            packageId = "digest 0.10.7";
          }
          {
            name = "fastcrypto";
            packageId = "fastcrypto";
            features = [ "aes" ];
          }
          {
            name = "hex";
            packageId = "hex";
          }
          {
            name = "itertools";
            packageId = "itertools 0.10.5";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
            features = [ "std" ];
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "sha3";
            packageId = "sha3 0.10.8";
          }
          {
            name = "tap";
            packageId = "tap";
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "typenum";
            packageId = "typenum";
          }
          {
            name = "zeroize";
            packageId = "zeroize";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "fastcrypto-vdf" = rec {
        crateName = "fastcrypto-vdf";
        version = "0.1.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/MystenLabs/fastcrypto";
          rev = "5f2c63266a065996d53f98156f0412782b468597";
          sha256 = "1dakf88892yv8vxz4wzf6w69gaikin4dkqpiyj2qmm0lzcii364m";
        };
        libName = "fastcrypto_vdf";
        authors = [
          "Mysten Labs <build@mystenlabs.com>"
        ];
        dependencies = [
          {
            name = "bcs";
            packageId = "bcs";
          }
          {
            name = "fastcrypto";
            packageId = "fastcrypto";
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "num-bigint";
            packageId = "num-bigint 0.4.6";
          }
          {
            name = "num-integer";
            packageId = "num-integer";
          }
          {
            name = "num-prime";
            packageId = "num-prime";
            features = [ "big-int" ];
          }
          {
            name = "num-traits";
            packageId = "num-traits";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "rand_chacha";
            packageId = "rand_chacha 0.3.1";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
        ];
        devDependencies = [
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "experimental" ];
      };
      "fastcrypto-zkp" = rec {
        crateName = "fastcrypto-zkp";
        version = "0.1.3";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/MystenLabs/fastcrypto";
          rev = "5f2c63266a065996d53f98156f0412782b468597";
          sha256 = "1dakf88892yv8vxz4wzf6w69gaikin4dkqpiyj2qmm0lzcii364m";
        };
        libName = "fastcrypto_zkp";
        authors = [
          "Mysten Labs <build@mystenlabs.com>"
        ];
        dependencies = [
          {
            name = "ark-bls12-381";
            packageId = "ark-bls12-381";
          }
          {
            name = "ark-bn254";
            packageId = "ark-bn254";
          }
          {
            name = "ark-ec";
            packageId = "ark-ec";
          }
          {
            name = "ark-ff";
            packageId = "ark-ff";
            features = [ "asm" ];
          }
          {
            name = "ark-groth16";
            packageId = "ark-groth16";
            usesDefaultFeatures = false;
          }
          {
            name = "ark-relations";
            packageId = "ark-relations";
          }
          {
            name = "ark-serialize";
            packageId = "ark-serialize";
          }
          {
            name = "ark-snark";
            packageId = "ark-snark";
          }
          {
            name = "blst";
            packageId = "blst";
          }
          {
            name = "byte-slice-cast";
            packageId = "byte-slice-cast";
          }
          {
            name = "derive_more";
            packageId = "derive_more";
          }
          {
            name = "fastcrypto";
            packageId = "fastcrypto";
          }
          {
            name = "ff";
            packageId = "ff 0.13.0";
            features = [ "derive" ];
          }
          {
            name = "im";
            packageId = "im";
          }
          {
            name = "itertools";
            packageId = "itertools 0.12.1";
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "neptune";
            packageId = "neptune";
            usesDefaultFeatures = false;
          }
          {
            name = "num-bigint";
            packageId = "num-bigint 0.4.6";
            usesDefaultFeatures = false;
            features = [ "rand" ];
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "regex";
            packageId = "regex";
          }
          {
            name = "reqwest";
            packageId = "reqwest 0.12.7";
            usesDefaultFeatures = false;
            features = [ "blocking" "json" "rustls-tls" ];
          }
          {
            name = "schemars";
            packageId = "schemars";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "typenum";
            packageId = "typenum";
          }
        ];
        devDependencies = [
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
        ];
        features = {
        };
      };
      "fastrand" = rec {
        crateName = "fastrand";
        version = "2.1.1";
        edition = "2018";
        sha256 = "19nyzdq3ha4g173364y2wijmd6jlyms8qx40daqkxsnl458jmh78";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
          "getrandom" = [ "dep:getrandom" ];
          "js" = [ "std" "getrandom" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "fd-lock" = rec {
        crateName = "fd-lock";
        version = "4.0.2";
        edition = "2021";
        sha256 = "0ixrsd19k2cpl773p9hd0yk3hac684d9aphbxy0jq9q64bd6hmvy";
        libName = "fd_lock";
        authors = [
          "Yoshua Wuyts <yoshuawuyts@gmail.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "rustix";
            packageId = "rustix";
            target = { target, features }: (target."unix" or false);
            features = [ "fs" ];
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.52.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_Foundation" "Win32_Storage_FileSystem" "Win32_System_IO" ];
          }
        ];

      };
      "fdlimit" = rec {
        crateName = "fdlimit";
        version = "0.2.1";
        edition = "2015";
        sha256 = "06rzmk7f60ifwc549hq6d3dzj7q3k1mx4rsvrbj3nnizci1rwk1c";
        authors = [
          "Parity Technologies<admin@parity.io>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
        ];

      };
      "ff 0.12.1" = rec {
        crateName = "ff";
        version = "0.12.1";
        edition = "2021";
        sha256 = "0q3imz4m3dj2cy182i20wa8kbclgj13ddfngqb2miicc6cjzq4yh";
        authors = [
          "Sean Bowe <ewillbefull@gmail.com>"
          "Jack Grigg <thestr4d@gmail.com>"
        ];
        dependencies = [
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
            usesDefaultFeatures = false;
          }
          {
            name = "subtle";
            packageId = "subtle";
            usesDefaultFeatures = false;
            features = [ "i128" ];
          }
        ];
        features = {
          "bits" = [ "bitvec" ];
          "bitvec" = [ "dep:bitvec" ];
          "byteorder" = [ "dep:byteorder" ];
          "default" = [ "bits" "std" ];
          "derive" = [ "byteorder" "ff_derive" ];
          "derive_bits" = [ "bits" "ff_derive/bits" ];
          "ff_derive" = [ "dep:ff_derive" ];
          "std" = [ "alloc" ];
        };
      };
      "ff 0.13.0" = rec {
        crateName = "ff";
        version = "0.13.0";
        edition = "2021";
        sha256 = "0jcl8yhcs5kbfxfpnrhpkkvnk7s666vly6sgawg3nri9nx215m6y";
        authors = [
          "Sean Bowe <ewillbefull@gmail.com>"
          "Jack Grigg <thestr4d@gmail.com>"
        ];
        dependencies = [
          {
            name = "bitvec";
            packageId = "bitvec 1.0.1";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "byteorder";
            packageId = "byteorder";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "ff_derive";
            packageId = "ff_derive";
            optional = true;
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
            usesDefaultFeatures = false;
          }
          {
            name = "subtle";
            packageId = "subtle";
            usesDefaultFeatures = false;
            features = [ "i128" ];
          }
        ];
        features = {
          "bits" = [ "bitvec" ];
          "bitvec" = [ "dep:bitvec" ];
          "byteorder" = [ "dep:byteorder" ];
          "default" = [ "bits" "std" ];
          "derive" = [ "byteorder" "ff_derive" ];
          "derive_bits" = [ "bits" "ff_derive/bits" ];
          "ff_derive" = [ "dep:ff_derive" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "bits" "bitvec" "byteorder" "default" "derive" "ff_derive" "std" ];
      };
      "ff_derive" = rec {
        crateName = "ff_derive";
        version = "0.13.0";
        edition = "2021";
        sha256 = "0jnq13qqmnvgh1xmjzdgynwgbbkf64qibqf5a5hjiva5pq24gxg9";
        procMacro = true;
        authors = [
          "Sean Bowe <ewillbefull@gmail.com>"
          "Jack Grigg <thestr4d@gmail.com>"
        ];
        dependencies = [
          {
            name = "addchain";
            packageId = "addchain";
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "num-bigint";
            packageId = "num-bigint 0.3.3";
          }
          {
            name = "num-integer";
            packageId = "num-integer";
          }
          {
            name = "num-traits";
            packageId = "num-traits";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.86";
          }
          {
            name = "quote";
            packageId = "quote 1.0.37";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            features = [ "full" ];
          }
        ];
        features = {
        };
      };
      "fiat-crypto" = rec {
        crateName = "fiat-crypto";
        version = "0.2.9";
        edition = "2018";
        sha256 = "07c1vknddv3ak7w89n85ik0g34nzzpms6yb845vrjnv9m4csbpi8";
        libName = "fiat_crypto";
        authors = [
          "Fiat Crypto library authors <jgross@mit.edu>"
        ];
        features = {
          "default" = [ "std" ];
        };
      };
      "filetime" = rec {
        crateName = "filetime";
        version = "0.2.25";
        edition = "2018";
        sha256 = "11l5zr86n5sr6g6k6sqldswk0jzklm0q95rzikxcns0yk0p55h1m";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "libredox";
            packageId = "libredox";
            target = { target, features }: ("redox" == target."os" or null);
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.59.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_Foundation" "Win32_Storage_FileSystem" ];
          }
        ];

      };
      "findshlibs" = rec {
        crateName = "findshlibs";
        version = "0.10.2";
        edition = "2018";
        sha256 = "0r3zy2r12rxzwqgz53830bk38r6b7rl8kq2br9n81q7ps2ffbfa0";
        dependencies = [
          {
            name = "lazy_static";
            packageId = "lazy_static";
            target = { target, features }: (("macos" == target."os" or null) || ("ios" == target."os" or null));
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: ("windows" == target."os" or null);
            features = [ "psapi" "memoryapi" "libloaderapi" "processthreadsapi" ];
          }
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
          }
        ];

      };
      "fixed-hash 0.7.0" = rec {
        crateName = "fixed-hash";
        version = "0.7.0";
        edition = "2018";
        sha256 = "0g29r0zwf09kg70nprn0s444bn6nfsglmiafhl1pm8ajzvbhxkyg";
        libName = "fixed_hash";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "byteorder";
            packageId = "byteorder";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "rustc-hex";
            packageId = "rustc-hex";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "static_assertions";
            packageId = "static_assertions";
          }
        ];
        devDependencies = [
          {
            name = "rand";
            packageId = "rand 0.8.5";
            usesDefaultFeatures = false;
            features = [ "std_rng" ];
          }
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "byteorder" = [ "dep:byteorder" ];
          "default" = [ "std" "rand" "rustc-hex" "byteorder" ];
          "quickcheck" = [ "dep:quickcheck" ];
          "rand" = [ "dep:rand" ];
          "rustc-hex" = [ "dep:rustc-hex" ];
          "std" = [ "rustc-hex/std" "rand/std" "byteorder/std" ];
        };
        resolvedDefaultFeatures = [ "byteorder" "rand" "rustc-hex" "std" ];
      };
      "fixed-hash 0.8.0" = rec {
        crateName = "fixed-hash";
        version = "0.8.0";
        edition = "2021";
        sha256 = "0d25wr8vrvr7kwmjya6894wp461f2wic0wgxdz7im360n0n0ap43";
        libName = "fixed_hash";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "byteorder";
            packageId = "byteorder";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "rustc-hex";
            packageId = "rustc-hex";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "static_assertions";
            packageId = "static_assertions";
          }
        ];
        devDependencies = [
          {
            name = "rand";
            packageId = "rand 0.8.5";
            usesDefaultFeatures = false;
            features = [ "std_rng" ];
          }
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "byteorder" = [ "dep:byteorder" ];
          "default" = [ "std" "rand" "rustc-hex" "byteorder" ];
          "quickcheck" = [ "dep:quickcheck" ];
          "rand" = [ "dep:rand" ];
          "rustc-hex" = [ "dep:rustc-hex" ];
          "std" = [ "rustc-hex/std" "rand/std" "byteorder/std" ];
        };
        resolvedDefaultFeatures = [ "byteorder" "rand" "rustc-hex" "std" ];
      };
      "fixedbitset 0.2.0" = rec {
        crateName = "fixedbitset";
        version = "0.2.0";
        edition = "2015";
        sha256 = "0kg03p777wc0dajd9pvlcnsyrwa8dhqwf0sd9r4dw0p82rs39arp";
        authors = [
          "bluss"
        ];
        features = {
          "default" = [ "std" ];
        };
      };
      "fixedbitset 0.4.2" = rec {
        crateName = "fixedbitset";
        version = "0.4.2";
        edition = "2015";
        sha256 = "101v41amgv5n9h4hcghvrbfk5vrncx1jwm35rn5szv4rk55i7rqc";
        authors = [
          "bluss"
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
        };
      };
      "flatbuffers" = rec {
        crateName = "flatbuffers";
        version = "24.3.25";
        edition = "2018";
        sha256 = "0py38wagfkj2h90mas07k3v8829pn6s712klpj1zlkrdzypkgpca";
        authors = [
          "Robert Winslow <hello@rwinslow.com>"
          "FlatBuffers Maintainers"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 1.3.2";
          }
        ];
        buildDependencies = [
          {
            name = "rustc_version";
            packageId = "rustc_version";
          }
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
          "serialize" = [ "serde" ];
        };
      };
      "flate2" = rec {
        crateName = "flate2";
        version = "1.0.33";
        edition = "2018";
        sha256 = "0lzj9cmr1pcwrgr4nnxjihnksqhxmygcqqdqcjnhbvslh3k1njij";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
          "Josh Triplett <josh@joshtriplett.org>"
        ];
        dependencies = [
          {
            name = "crc32fast";
            packageId = "crc32fast";
          }
          {
            name = "miniz_oxide";
            packageId = "miniz_oxide 0.8.0";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "with-alloc" ];
          }
          {
            name = "miniz_oxide";
            packageId = "miniz_oxide 0.8.0";
            usesDefaultFeatures = false;
            target = { target, features }: (("wasm32" == target."arch" or null) && (!("emscripten" == target."os" or null)));
            features = [ "with-alloc" ];
          }
        ];
        features = {
          "any_zlib" = [ "any_impl" ];
          "cloudflare-zlib-sys" = [ "dep:cloudflare-zlib-sys" ];
          "cloudflare_zlib" = [ "any_zlib" "cloudflare-zlib-sys" ];
          "default" = [ "rust_backend" ];
          "libz-ng-sys" = [ "dep:libz-ng-sys" ];
          "libz-rs-sys" = [ "dep:libz-rs-sys" ];
          "libz-sys" = [ "dep:libz-sys" ];
          "miniz-sys" = [ "rust_backend" ];
          "miniz_oxide" = [ "dep:miniz_oxide" ];
          "rust_backend" = [ "miniz_oxide" "any_impl" ];
          "zlib" = [ "any_zlib" "libz-sys" ];
          "zlib-default" = [ "any_zlib" "libz-sys/default" ];
          "zlib-ng" = [ "any_zlib" "libz-ng-sys" ];
          "zlib-ng-compat" = [ "zlib" "libz-sys/zlib-ng" ];
          "zlib-rs" = [ "any_zlib" "libz-rs-sys" ];
        };
        resolvedDefaultFeatures = [ "any_impl" "default" "miniz_oxide" "rust_backend" ];
      };
      "float-cmp" = rec {
        crateName = "float-cmp";
        version = "0.9.0";
        edition = "2018";
        sha256 = "1i799ksbq7fj9rm9m82g1yqgm6xi3jnrmylddmqknmksajylpplq";
        libName = "float_cmp";
        authors = [
          "Mike Dilger <mike@mikedilger.com>"
        ];
        dependencies = [
          {
            name = "num-traits";
            packageId = "num-traits";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "ratio" ];
          "num-traits" = [ "dep:num-traits" ];
          "ratio" = [ "num-traits" ];
        };
        resolvedDefaultFeatures = [ "default" "num-traits" "ratio" ];
      };
      "fnv" = rec {
        crateName = "fnv";
        version = "1.0.7";
        edition = "2015";
        sha256 = "1hc2mcqha06aibcaza94vbi81j6pr9a1bbxrxjfhc91zin8yr7iz";
        libPath = "lib.rs";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "form_urlencoded" = rec {
        crateName = "form_urlencoded";
        version = "1.2.1";
        edition = "2018";
        sha256 = "0milh8x7nl4f450s3ddhg57a3flcv6yq8hlkyk6fyr3mcb128dp1";
        authors = [
          "The rust-url developers"
        ];
        dependencies = [
          {
            name = "percent-encoding";
            packageId = "percent-encoding";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "percent-encoding/alloc" ];
          "default" = [ "std" ];
          "std" = [ "alloc" "percent-encoding/std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "fragile" = rec {
        crateName = "fragile";
        version = "2.0.0";
        edition = "2018";
        sha256 = "1ajfdnwdn921bhjlzyvsqvdgci8ab40ln6w9ly422lf8svb428bc";
        authors = [
          "Armin Ronacher <armin.ronacher@active-4.com>"
        ];
        features = {
          "slab" = [ "dep:slab" ];
        };
      };
      "fs2" = rec {
        crateName = "fs2";
        version = "0.4.3";
        edition = "2015";
        sha256 = "04v2hwk7035c088f19mfl5b1lz84gnvv2hv6m935n0hmirszqr4m";
        authors = [
          "Dan Burkert <dan@danburkert.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: (target."windows" or false);
            features = [ "handleapi" "processthreadsapi" "winerror" "fileapi" "winbase" "std" ];
          }
        ];

      };
      "fs_extra" = rec {
        crateName = "fs_extra";
        version = "1.3.0";
        edition = "2018";
        sha256 = "075i25z70j2mz9r7i9p9r521y8xdj81q7skslyb7zhqnnw33fw22";
        authors = [
          "Denis Kurilenko <webdesus@gmail.com>"
        ];

      };
      "fsevent-sys" = rec {
        crateName = "fsevent-sys";
        version = "4.1.0";
        edition = "2018";
        sha256 = "1liz67v8b0gcs8r31vxkvm2jzgl9p14i78yfqx81c8sdv817mvkn";
        libName = "fsevent_sys";
        authors = [
          "Pierre Baillet <pierre@baillet.name>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
        ];

      };
      "funty 1.1.0" = rec {
        crateName = "funty";
        version = "1.1.0";
        edition = "2018";
        sha256 = "19wx3p3jmv863y0mjb56sr4qf1kvqhl3fsyslkd92zli0p8lrlzy";
        authors = [
          "myrrlyn <self@myrrlyn.dev>"
        ];
        features = {
          "default" = [ "std" ];
        };
      };
      "funty 2.0.0" = rec {
        crateName = "funty";
        version = "2.0.0";
        edition = "2018";
        sha256 = "177w048bm0046qlzvp33ag3ghqkqw4ncpzcm5lq36gxf2lla7mg6";
        authors = [
          "myrrlyn <self@myrrlyn.dev>"
        ];
        features = {
          "default" = [ "std" ];
        };
      };
      "futures" = rec {
        crateName = "futures";
        version = "0.3.30";
        edition = "2018";
        sha256 = "1c04g14bccmprwsvx2j9m2blhwrynq7vhl151lsvcv4gi0b6jp34";
        dependencies = [
          {
            name = "futures-channel";
            packageId = "futures-channel";
            usesDefaultFeatures = false;
            features = [ "sink" ];
          }
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-executor";
            packageId = "futures-executor";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "futures-io";
            packageId = "futures-io";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-sink";
            packageId = "futures-sink";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-task";
            packageId = "futures-task";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
            features = [ "sink" ];
          }
        ];
        features = {
          "alloc" = [ "futures-core/alloc" "futures-task/alloc" "futures-sink/alloc" "futures-channel/alloc" "futures-util/alloc" ];
          "async-await" = [ "futures-util/async-await" "futures-util/async-await-macro" ];
          "bilock" = [ "futures-util/bilock" ];
          "compat" = [ "std" "futures-util/compat" ];
          "default" = [ "std" "async-await" "executor" ];
          "executor" = [ "std" "futures-executor/std" ];
          "futures-executor" = [ "dep:futures-executor" ];
          "io-compat" = [ "compat" "futures-util/io-compat" ];
          "std" = [ "alloc" "futures-core/std" "futures-task/std" "futures-io/std" "futures-sink/std" "futures-util/std" "futures-util/io" "futures-util/channel" ];
          "thread-pool" = [ "executor" "futures-executor/thread-pool" ];
          "unstable" = [ "futures-core/unstable" "futures-task/unstable" "futures-channel/unstable" "futures-io/unstable" "futures-util/unstable" ];
          "write-all-vectored" = [ "futures-util/write-all-vectored" ];
        };
        resolvedDefaultFeatures = [ "alloc" "async-await" "bilock" "default" "executor" "futures-executor" "std" "thread-pool" "unstable" ];
      };
      "futures-channel" = rec {
        crateName = "futures-channel";
        version = "0.3.31";
        edition = "2018";
        sha256 = "040vpqpqlbk099razq8lyn74m0f161zd0rp36hciqrwcg2zibzrd";
        libName = "futures_channel";
        dependencies = [
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-sink";
            packageId = "futures-sink";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "futures-core/alloc" ];
          "default" = [ "std" ];
          "futures-sink" = [ "dep:futures-sink" ];
          "sink" = [ "futures-sink" ];
          "std" = [ "alloc" "futures-core/std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "futures-sink" "sink" "std" "unstable" ];
      };
      "futures-core" = rec {
        crateName = "futures-core";
        version = "0.3.31";
        edition = "2018";
        sha256 = "0gk6yrxgi5ihfanm2y431jadrll00n5ifhnpx090c2f2q1cr1wh5";
        libName = "futures_core";
        features = {
          "default" = [ "std" ];
          "portable-atomic" = [ "dep:portable-atomic" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" "unstable" ];
      };
      "futures-executor" = rec {
        crateName = "futures-executor";
        version = "0.3.30";
        edition = "2018";
        sha256 = "07dh08gs9vfll2h36kq32q9xd86xm6lyl9xikmmwlkqnmrrgqxm5";
        libName = "futures_executor";
        dependencies = [
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-task";
            packageId = "futures-task";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
          }
          {
            name = "num_cpus";
            packageId = "num_cpus";
            optional = true;
          }
        ];
        features = {
          "default" = [ "std" ];
          "num_cpus" = [ "dep:num_cpus" ];
          "std" = [ "futures-core/std" "futures-task/std" "futures-util/std" ];
          "thread-pool" = [ "std" "num_cpus" ];
        };
        resolvedDefaultFeatures = [ "default" "num_cpus" "std" "thread-pool" ];
      };
      "futures-io" = rec {
        crateName = "futures-io";
        version = "0.3.31";
        edition = "2018";
        sha256 = "1ikmw1yfbgvsychmsihdkwa8a1knank2d9a8dk01mbjar9w1np4y";
        libName = "futures_io";
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" "unstable" ];
      };
      "futures-locks" = rec {
        crateName = "futures-locks";
        version = "0.7.1";
        edition = "2018";
        sha256 = "01jdx6w1flwwli7drgl65z2ycd2fsjww0djmgkk6gyasczinzv25";
        libName = "futures_locks";
        authors = [
          "Alan Somers <asomers@gmail.com>"
        ];
        dependencies = [
          {
            name = "futures-channel";
            packageId = "futures-channel";
          }
          {
            name = "futures-task";
            packageId = "futures-task";
          }
        ];
        features = {
          "default" = [ "tokio" ];
          "tokio" = [ "dep:tokio" ];
        };
      };
      "futures-macro" = rec {
        crateName = "futures-macro";
        version = "0.3.31";
        edition = "2018";
        sha256 = "0l1n7kqzwwmgiznn0ywdc5i24z72zvh9q1dwps54mimppi7f6bhn";
        procMacro = true;
        libName = "futures_macro";
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.86";
          }
          {
            name = "quote";
            packageId = "quote 1.0.37";
          }
          {
            name = "syn";
            packageId = "syn 2.0.77";
            features = [ "full" ];
          }
        ];

      };
      "futures-sink" = rec {
        crateName = "futures-sink";
        version = "0.3.31";
        edition = "2018";
        sha256 = "1xyly6naq6aqm52d5rh236snm08kw8zadydwqz8bip70s6vzlxg5";
        libName = "futures_sink";
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "futures-task" = rec {
        crateName = "futures-task";
        version = "0.3.31";
        edition = "2018";
        sha256 = "124rv4n90f5xwfsm9qw6y99755y021cmi5dhzh253s920z77s3zr";
        libName = "futures_task";
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" "unstable" ];
      };
      "futures-timer" = rec {
        crateName = "futures-timer";
        version = "3.0.3";
        edition = "2018";
        sha256 = "094vw8k37djpbwv74bwf2qb7n6v6ghif4myss6smd6hgyajb127j";
        libName = "futures_timer";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "gloo-timers";
            packageId = "gloo-timers 0.2.6";
            optional = true;
            features = [ "futures" ];
          }
          {
            name = "send_wrapper";
            packageId = "send_wrapper 0.4.0";
            optional = true;
          }
        ];
        features = {
          "gloo-timers" = [ "dep:gloo-timers" ];
          "send_wrapper" = [ "dep:send_wrapper" ];
          "wasm-bindgen" = [ "gloo-timers" "send_wrapper" ];
        };
        resolvedDefaultFeatures = [ "gloo-timers" "send_wrapper" "wasm-bindgen" ];
      };
      "futures-util" = rec {
        crateName = "futures-util";
        version = "0.3.31";
        edition = "2018";
        sha256 = "10aa1ar8bgkgbr4wzxlidkqkcxf77gffyj8j7768h831pcaq784z";
        libName = "futures_util";
        dependencies = [
          {
            name = "futures-channel";
            packageId = "futures-channel";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-io";
            packageId = "futures-io";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "futures-macro";
            packageId = "futures-macro";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "futures-sink";
            packageId = "futures-sink";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "futures-task";
            packageId = "futures-task";
            usesDefaultFeatures = false;
          }
          {
            name = "memchr";
            packageId = "memchr";
            optional = true;
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "pin-utils";
            packageId = "pin-utils";
          }
          {
            name = "slab";
            packageId = "slab";
            optional = true;
          }
        ];
        features = {
          "alloc" = [ "futures-core/alloc" "futures-task/alloc" ];
          "async-await-macro" = [ "async-await" "futures-macro" ];
          "channel" = [ "std" "futures-channel" ];
          "compat" = [ "std" "futures_01" ];
          "default" = [ "std" "async-await" "async-await-macro" ];
          "futures-channel" = [ "dep:futures-channel" ];
          "futures-io" = [ "dep:futures-io" ];
          "futures-macro" = [ "dep:futures-macro" ];
          "futures-sink" = [ "dep:futures-sink" ];
          "futures_01" = [ "dep:futures_01" ];
          "io" = [ "std" "futures-io" "memchr" ];
          "io-compat" = [ "io" "compat" "tokio-io" ];
          "memchr" = [ "dep:memchr" ];
          "portable-atomic" = [ "futures-core/portable-atomic" ];
          "sink" = [ "futures-sink" ];
          "slab" = [ "dep:slab" ];
          "std" = [ "alloc" "futures-core/std" "futures-task/std" "slab" ];
          "tokio-io" = [ "dep:tokio-io" ];
          "unstable" = [ "futures-core/unstable" "futures-task/unstable" ];
          "write-all-vectored" = [ "io" ];
        };
        resolvedDefaultFeatures = [ "alloc" "async-await" "async-await-macro" "bilock" "channel" "default" "futures-channel" "futures-io" "futures-macro" "futures-sink" "io" "memchr" "sink" "slab" "std" "unstable" ];
      };
      "fxhash" = rec {
        crateName = "fxhash";
        version = "0.2.1";
        edition = "2015";
        sha256 = "037mb9ichariqi45xm6mz0b11pa92gj38ba0409z3iz239sns6y3";
        libPath = "lib.rs";
        authors = [
          "cbreeden <github@u.breeden.cc>"
        ];
        dependencies = [
          {
            name = "byteorder";
            packageId = "byteorder";
          }
        ];

      };
      "gcp-bigquery-client" = rec {
        crateName = "gcp-bigquery-client";
        version = "0.18.0";
        edition = "2018";
        sha256 = "0kx734n7618bppw28vjp83z75n3b5xzvrwillwhla2navb5nzkmh";
        libName = "gcp_bigquery_client";
        authors = [
          "Laurent Querel <laurent.querel@gmail.com>"
        ];
        dependencies = [
          {
            name = "async-stream";
            packageId = "async-stream";
          }
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "dyn-clone";
            packageId = "dyn-clone";
          }
          {
            name = "hyper";
            packageId = "hyper 0.14.30";
            features = [ "http1" ];
          }
          {
            name = "hyper-rustls";
            packageId = "hyper-rustls 0.24.2";
            features = [ "native-tokio" ];
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "reqwest";
            packageId = "reqwest 0.11.27";
            usesDefaultFeatures = false;
            features = [ "json" ];
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "time";
            packageId = "time";
            features = [ "local-offset" "serde" "serde-well-known" ];
          }
          {
            name = "tokio";
            packageId = "tokio";
            usesDefaultFeatures = false;
            features = [ "rt-multi-thread" "net" "sync" "macros" ];
          }
          {
            name = "tokio-stream";
            packageId = "tokio-stream";
          }
          {
            name = "url";
            packageId = "url";
          }
          {
            name = "yup-oauth2";
            packageId = "yup-oauth2";
          }
        ];
        features = {
          "bq_load_job" = [ "cloud-storage" ];
          "cloud-storage" = [ "dep:cloud-storage" ];
          "default" = [ "rust-tls" ];
          "native-tls" = [ "reqwest/native-tls" ];
          "rust-tls" = [ "reqwest/rustls-tls" ];
        };
        resolvedDefaultFeatures = [ "default" "rust-tls" ];
      };
      "generic-array" = rec {
        crateName = "generic-array";
        version = "0.14.7";
        edition = "2015";
        sha256 = "16lyyrzrljfq424c3n8kfwkqihlimmsg5nhshbbp48np3yjrqr45";
        libName = "generic_array";
        authors = [
          "Bartłomiej Kamiński <fizyk20@gmail.com>"
          "Aaron Trent <novacrazy@gmail.com>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "typenum";
            packageId = "typenum";
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "version_check";
            packageId = "version_check";
          }
        ];
        features = {
          "serde" = [ "dep:serde" ];
          "zeroize" = [ "dep:zeroize" ];
        };
        resolvedDefaultFeatures = [ "more_lengths" "serde" "zeroize" ];
      };
      "getrandom 0.1.16" = rec {
        crateName = "getrandom";
        version = "0.1.16";
        edition = "2018";
        sha256 = "1kjzmz60qx9mn615ks1akjbf36n3lkv27zfwbcam0fzmj56wphwg";
        authors = [
          "The Rand Project Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "wasi";
            packageId = "wasi 0.9.0+wasi-snapshot-preview1";
            target = { target, features }: ("wasi" == target."os" or null);
          }
        ];
        features = {
          "bindgen" = [ "dep:bindgen" ];
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "js-sys" = [ "dep:js-sys" ];
          "log" = [ "dep:log" ];
          "rustc-dep-of-std" = [ "compiler_builtins" "core" ];
          "stdweb" = [ "dep:stdweb" ];
          "test-in-browser" = [ "wasm-bindgen" ];
          "wasm-bindgen" = [ "bindgen" "js-sys" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "getrandom 0.2.15" = rec {
        crateName = "getrandom";
        version = "0.2.15";
        edition = "2018";
        sha256 = "1mzlnrb3dgyd1fb84gvw10pyr8wdqdl4ry4sr64i1s8an66pqmn4";
        authors = [
          "The Rand Project Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "js-sys";
            packageId = "js-sys";
            optional = true;
            target = { target, features }: ((("wasm32" == target."arch" or null) || ("wasm64" == target."arch" or null)) && ("unknown" == target."os" or null));
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "wasi";
            packageId = "wasi 0.11.0+wasi-snapshot-preview1";
            usesDefaultFeatures = false;
            target = { target, features }: ("wasi" == target."os" or null);
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: ((("wasm32" == target."arch" or null) || ("wasm64" == target."arch" or null)) && ("unknown" == target."os" or null));
          }
        ];
        features = {
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "js" = [ "wasm-bindgen" "js-sys" ];
          "js-sys" = [ "dep:js-sys" ];
          "rustc-dep-of-std" = [ "compiler_builtins" "core" "libc/rustc-dep-of-std" "wasi/rustc-dep-of-std" ];
          "wasm-bindgen" = [ "dep:wasm-bindgen" ];
        };
        resolvedDefaultFeatures = [ "js" "js-sys" "std" "wasm-bindgen" ];
      };
      "getset" = rec {
        crateName = "getset";
        version = "0.1.3";
        edition = "2018";
        sha256 = "0g2ixn6zhrpba58hcv4kiygpc6nydixw4byr5v9sh81ifidn0dpn";
        procMacro = true;
        authors = [
          "Ana Hobden <ana@hoverbear.org>"
          "John Baublitz <john.m.baublitz@gmail.com"
        ];
        dependencies = [
          {
            name = "proc-macro-error2";
            packageId = "proc-macro-error2";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.86";
            usesDefaultFeatures = false;
          }
          {
            name = "quote";
            packageId = "quote 1.0.37";
          }
          {
            name = "syn";
            packageId = "syn 2.0.77";
          }
        ];

      };
      "ghash" = rec {
        crateName = "ghash";
        version = "0.5.1";
        edition = "2021";
        sha256 = "1wbg4vdgzwhkpkclz1g6bs4r5x984w5gnlsj4q5wnafb5hva9n7h";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "opaque-debug";
            packageId = "opaque-debug";
          }
          {
            name = "polyval";
            packageId = "polyval";
          }
        ];
        features = {
          "std" = [ "polyval/std" ];
          "zeroize" = [ "dep:zeroize" ];
        };
      };
      "gimli" = rec {
        crateName = "gimli";
        version = "0.28.1";
        edition = "2018";
        sha256 = "0lv23wc8rxvmjia3mcxc6hj9vkqnv1bqq0h8nzjcgf71mrxx6wa2";
        features = {
          "default" = [ "read-all" "write" ];
          "endian-reader" = [ "read" "dep:stable_deref_trait" ];
          "fallible-iterator" = [ "dep:fallible-iterator" ];
          "read" = [ "read-core" ];
          "read-all" = [ "read" "std" "fallible-iterator" "endian-reader" ];
          "rustc-dep-of-std" = [ "dep:core" "dep:alloc" "dep:compiler_builtins" ];
          "std" = [ "fallible-iterator?/std" "stable_deref_trait?/std" ];
          "write" = [ "dep:indexmap" ];
        };
        resolvedDefaultFeatures = [ "read" "read-core" ];
      };
      "git+ssh://git@github.com/iotaledger/tokio-madsim-fork.git?branch=main#tokio-macros@2.4.0" = rec {
        crateName = "tokio-macros";
        version = "2.4.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "ssh://git@github.com/iotaledger/tokio-madsim-fork.git";
          rev = "e34a35287024b341db16139a402508aaea8ec955";
          sha256 = "0p0djsx0r02hlhsws3hjmsg2p5xhk31166kc4mginaynvv8b6rp5";
        };
        procMacro = true;
        libName = "tokio_macros";
        authors = [
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.86";
          }
          {
            name = "quote";
            packageId = "quote 1.0.37";
          }
          {
            name = "syn";
            packageId = "syn 2.0.77";
            features = [ "full" ];
          }
        ];

      };
      "git-version" = rec {
        crateName = "git-version";
        version = "0.3.9";
        edition = "2021";
        sha256 = "06ddi3px6l2ip0srn8512bsh8wrx4rzi65piya0vrz5h7nm6im8s";
        libName = "git_version";
        authors = [
          "Mara Bos <m-ou.se@m-ou.se>"
          "Maarten de Vries <maarten@de-vri.es>"
          "David Roundy <daveroundy@gmail.com>"
        ];
        dependencies = [
          {
            name = "git-version-macro";
            packageId = "git-version-macro";
          }
        ];

      };
      "git-version-macro" = rec {
        crateName = "git-version-macro";
        version = "0.3.9";
        edition = "2021";
        sha256 = "1h1s08fgh9bkwnc2hmjxcldv69hlxpq7a09cqdxsd5hb235hq0ak";
        procMacro = true;
        libName = "git_version_macro";
        authors = [
          "David Roundy <daveroundy@gmail.com>"
          "Maarten de Vries <maarten@de-vri.es>"
          "Mara Bos <m-ou.se@m-ou.se>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.86";
          }
          {
            name = "quote";
            packageId = "quote 1.0.37";
          }
          {
            name = "syn";
            packageId = "syn 2.0.77";
          }
        ];
        features = {
        };
      };
      "glob" = rec {
        crateName = "glob";
        version = "0.3.1";
        edition = "2015";
        sha256 = "16zca52nglanv23q5qrwd5jinw3d3as5ylya6y1pbx47vkxvrynj";
        authors = [
          "The Rust Project Developers"
        ];

      };
      "gloo-net" = rec {
        crateName = "gloo-net";
        version = "0.6.0";
        edition = "2021";
        sha256 = "1005q761m8kbifc01pvjyjfpj0qs3szh8qaxni13vjjq39xn4vy0";
        libName = "gloo_net";
        authors = [
          "Rust and WebAssembly Working Group"
          "Elina <imelina@elina.website>"
        ];
        dependencies = [
          {
            name = "futures-channel";
            packageId = "futures-channel";
            optional = true;
          }
          {
            name = "futures-core";
            packageId = "futures-core";
            optional = true;
          }
          {
            name = "futures-sink";
            packageId = "futures-sink";
            optional = true;
          }
          {
            name = "gloo-utils";
            packageId = "gloo-utils";
            usesDefaultFeatures = false;
          }
          {
            name = "http";
            packageId = "http 1.1.0";
          }
          {
            name = "js-sys";
            packageId = "js-sys";
          }
          {
            name = "pin-project";
            packageId = "pin-project";
            optional = true;
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            optional = true;
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
          }
          {
            name = "wasm-bindgen-futures";
            packageId = "wasm-bindgen-futures";
          }
          {
            name = "web-sys";
            packageId = "web-sys";
          }
        ];
        devDependencies = [
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
        ];
        features = {
          "default" = [ "json" "websocket" "http" "eventsource" ];
          "eventsource" = [ "futures-channel" "futures-core" "pin-project" "web-sys/Event" "web-sys/EventTarget" "web-sys/EventSource" "web-sys/MessageEvent" ];
          "futures-channel" = [ "dep:futures-channel" ];
          "futures-core" = [ "dep:futures-core" ];
          "futures-io" = [ "dep:futures-io" ];
          "futures-sink" = [ "dep:futures-sink" ];
          "http" = [ "web-sys/Headers" "web-sys/UrlSearchParams" "web-sys/Url" "web-sys/Request" "web-sys/RequestInit" "web-sys/RequestMode" "web-sys/Response" "web-sys/ResponseInit" "web-sys/ResponseType" "web-sys/RequestCache" "web-sys/RequestCredentials" "web-sys/ObserverCallback" "web-sys/RequestRedirect" "web-sys/ReferrerPolicy" "web-sys/AbortSignal" "web-sys/ReadableStream" "web-sys/Blob" "web-sys/FormData" ];
          "io-util" = [ "futures-io" ];
          "json" = [ "serde" "serde_json" "gloo-utils/serde" ];
          "pin-project" = [ "dep:pin-project" ];
          "serde" = [ "dep:serde" ];
          "serde_json" = [ "dep:serde_json" ];
          "websocket" = [ "web-sys/WebSocket" "web-sys/AddEventListenerOptions" "web-sys/ErrorEvent" "web-sys/FileReader" "web-sys/MessageEvent" "web-sys/ProgressEvent" "web-sys/CloseEvent" "web-sys/CloseEventInit" "web-sys/BinaryType" "web-sys/Blob" "futures-channel" "futures-core" "futures-sink" "pin-project" ];
        };
        resolvedDefaultFeatures = [ "futures-channel" "futures-core" "futures-sink" "json" "pin-project" "serde" "serde_json" "websocket" ];
      };
      "gloo-timers 0.2.6" = rec {
        crateName = "gloo-timers";
        version = "0.2.6";
        edition = "2018";
        sha256 = "0p2yqcxw0q9kclhwpgshq1r4ijns07nmmagll3lvrgl7pdk5m6cv";
        libName = "gloo_timers";
        authors = [
          "Rust and WebAssembly Working Group"
        ];
        dependencies = [
          {
            name = "futures-channel";
            packageId = "futures-channel";
            optional = true;
          }
          {
            name = "futures-core";
            packageId = "futures-core";
            optional = true;
          }
          {
            name = "js-sys";
            packageId = "js-sys";
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
          }
        ];
        features = {
          "futures" = [ "futures-core" "futures-channel" ];
          "futures-channel" = [ "dep:futures-channel" ];
          "futures-core" = [ "dep:futures-core" ];
        };
        resolvedDefaultFeatures = [ "default" "futures" "futures-channel" "futures-core" ];
      };
      "gloo-timers 0.3.0" = rec {
        crateName = "gloo-timers";
        version = "0.3.0";
        edition = "2021";
        sha256 = "1519157n7xppkk6pdw5w52vy1llzn5iljkqd7q1h5609jv7l7cdv";
        libName = "gloo_timers";
        authors = [
          "Rust and WebAssembly Working Group"
        ];
        dependencies = [
          {
            name = "futures-channel";
            packageId = "futures-channel";
            optional = true;
          }
          {
            name = "futures-core";
            packageId = "futures-core";
            optional = true;
          }
          {
            name = "js-sys";
            packageId = "js-sys";
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
          }
        ];
        features = {
          "futures" = [ "futures-core" "futures-channel" ];
          "futures-channel" = [ "dep:futures-channel" ];
          "futures-core" = [ "dep:futures-core" ];
        };
        resolvedDefaultFeatures = [ "futures" "futures-channel" "futures-core" ];
      };
      "gloo-utils" = rec {
        crateName = "gloo-utils";
        version = "0.2.0";
        edition = "2021";
        sha256 = "1am31cd6889shb7158bg9zzsjcpvyzxrhfhxgia8rc8k84smam8b";
        libName = "gloo_utils";
        authors = [
          "Rust and WebAssembly Working Group"
        ];
        dependencies = [
          {
            name = "js-sys";
            packageId = "js-sys";
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            optional = true;
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
          }
          {
            name = "web-sys";
            packageId = "web-sys";
            features = [ "Document" "History" "HtmlElement" "Location" "Window" "HtmlHeadElement" "Element" ];
          }
        ];
        features = {
          "default" = [ "serde" ];
          "serde" = [ "dep:serde" "dep:serde_json" ];
        };
        resolvedDefaultFeatures = [ "serde" ];
      };
      "governor" = rec {
        crateName = "governor";
        version = "0.6.3";
        edition = "2018";
        sha256 = "0yw66yb1rfc7np23n9af9sb8kbhv3jnhvg3an1rsydbbxr1gb9v8";
        authors = [
          "Andreas Fuchs <asf@boinkor.net>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "dashmap";
            packageId = "dashmap";
            optional = true;
          }
          {
            name = "futures";
            packageId = "futures";
            optional = true;
          }
          {
            name = "futures-timer";
            packageId = "futures-timer";
            optional = true;
          }
          {
            name = "no-std-compat";
            packageId = "no-std-compat";
            features = [ "alloc" ];
          }
          {
            name = "nonzero_ext";
            packageId = "nonzero_ext";
            usesDefaultFeatures = false;
          }
          {
            name = "parking_lot";
            packageId = "parking_lot 0.12.3";
            optional = true;
          }
          {
            name = "portable-atomic";
            packageId = "portable-atomic";
            features = [ "require-cas" ];
          }
          {
            name = "quanta";
            packageId = "quanta";
            optional = true;
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
            optional = true;
          }
          {
            name = "smallvec";
            packageId = "smallvec";
          }
          {
            name = "spinning_top";
            packageId = "spinning_top";
          }
        ];
        devDependencies = [
          {
            name = "futures";
            packageId = "futures";
          }
        ];
        features = {
          "dashmap" = [ "dep:dashmap" ];
          "default" = [ "std" "dashmap" "jitter" "quanta" ];
          "futures" = [ "dep:futures" ];
          "futures-timer" = [ "dep:futures-timer" ];
          "jitter" = [ "rand" ];
          "no_std" = [ "no-std-compat/compat_hash" ];
          "quanta" = [ "dep:quanta" ];
          "rand" = [ "dep:rand" ];
          "std" = [ "no-std-compat/std" "nonzero_ext/std" "futures-timer" "futures" "dep:parking_lot" ];
        };
        resolvedDefaultFeatures = [ "dashmap" "default" "futures" "futures-timer" "jitter" "quanta" "rand" "std" ];
      };
      "group 0.12.1" = rec {
        crateName = "group";
        version = "0.12.1";
        edition = "2021";
        sha256 = "1ixspxqdpq0hxg0hd9s6rngrp6rll21v4jjnr7ar1lzvdhxgpysx";
        authors = [
          "Sean Bowe <ewillbefull@gmail.com>"
          "Jack Grigg <jack@z.cash>"
        ];
        dependencies = [
          {
            name = "ff";
            packageId = "ff 0.12.1";
            usesDefaultFeatures = false;
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
            usesDefaultFeatures = false;
          }
          {
            name = "subtle";
            packageId = "subtle";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "alloc" ];
          "memuse" = [ "dep:memuse" ];
          "rand" = [ "dep:rand" ];
          "rand_xorshift" = [ "dep:rand_xorshift" ];
          "tests" = [ "alloc" "rand" "rand_xorshift" ];
          "wnaf-memuse" = [ "alloc" "memuse" ];
        };
      };
      "group 0.13.0" = rec {
        crateName = "group";
        version = "0.13.0";
        edition = "2021";
        sha256 = "0qqs2p5vqnv3zvq9mfjkmw3qlvgqb0c3cm6p33srkh7pc9sfzygh";
        authors = [
          "Sean Bowe <ewillbefull@gmail.com>"
          "Jack Grigg <jack@z.cash>"
        ];
        dependencies = [
          {
            name = "ff";
            packageId = "ff 0.13.0";
            usesDefaultFeatures = false;
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
            usesDefaultFeatures = false;
          }
          {
            name = "rand_xorshift";
            packageId = "rand_xorshift";
            optional = true;
          }
          {
            name = "subtle";
            packageId = "subtle";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "alloc" ];
          "memuse" = [ "dep:memuse" ];
          "rand" = [ "dep:rand" ];
          "rand_xorshift" = [ "dep:rand_xorshift" ];
          "tests" = [ "alloc" "rand" "rand_xorshift" ];
          "wnaf-memuse" = [ "alloc" "memuse" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "rand" "rand_xorshift" "tests" ];
      };
      "h2 0.3.26" = rec {
        crateName = "h2";
        version = "0.3.26";
        edition = "2018";
        sha256 = "1s7msnfv7xprzs6xzfj5sg6p8bjcdpcqcmjjbkd345cyi1x55zl1";
        authors = [
          "Carl Lerche <me@carllerche.com>"
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "fnv";
            packageId = "fnv";
          }
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-sink";
            packageId = "futures-sink";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
          }
          {
            name = "http";
            packageId = "http 0.2.12";
          }
          {
            name = "indexmap";
            packageId = "indexmap 2.5.0";
            features = [ "std" ];
          }
          {
            name = "slab";
            packageId = "slab";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "io-util" ];
          }
          {
            name = "tokio-util";
            packageId = "tokio-util 0.7.12";
            features = [ "codec" "io" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "rt-multi-thread" "macros" "sync" "net" ];
          }
        ];
        features = {
        };
      };
      "h2 0.4.6" = rec {
        crateName = "h2";
        version = "0.4.6";
        edition = "2021";
        sha256 = "01cjblya9zxyadvxcmgcv2bk9r9pyc8l8bbchjdg88clk738lkjj";
        authors = [
          "Carl Lerche <me@carllerche.com>"
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "atomic-waker";
            packageId = "atomic-waker";
          }
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "fnv";
            packageId = "fnv";
          }
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-sink";
            packageId = "futures-sink";
            usesDefaultFeatures = false;
          }
          {
            name = "http";
            packageId = "http 1.1.0";
          }
          {
            name = "indexmap";
            packageId = "indexmap 2.5.0";
            features = [ "std" ];
          }
          {
            name = "slab";
            packageId = "slab";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "io-util" ];
          }
          {
            name = "tokio-util";
            packageId = "tokio-util 0.7.12";
            features = [ "codec" "io" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "rt-multi-thread" "macros" "sync" "net" ];
          }
        ];
        features = {
        };
      };
      "half" = rec {
        crateName = "half";
        version = "2.4.1";
        edition = "2021";
        sha256 = "123q4zzw1x4309961i69igzd1wb7pj04aaii3kwasrz3599qrl3d";
        authors = [
          "Kathryn Long <squeeself@gmail.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "crunchy";
            packageId = "crunchy";
            target = { target, features }: ("spirv" == target."arch" or null);
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "libm" ];
          }
        ];
        devDependencies = [
          {
            name = "crunchy";
            packageId = "crunchy";
          }
        ];
        features = {
          "bytemuck" = [ "dep:bytemuck" ];
          "default" = [ "std" ];
          "num-traits" = [ "dep:num-traits" ];
          "rand_distr" = [ "dep:rand" "dep:rand_distr" ];
          "rkyv" = [ "dep:rkyv" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "alloc" ];
          "zerocopy" = [ "dep:zerocopy" ];
        };
        resolvedDefaultFeatures = [ "num-traits" ];
      };
      "handlebars" = rec {
        crateName = "handlebars";
        version = "4.5.0";
        edition = "2021";
        crateBin = [];
        sha256 = "09dj4rk6r9ngy1ki34mppcqq4pcnlhjd02yhnf724qpkkympp9ps";
        authors = [
          "Ning Sun <sunng@pm.me>"
        ];
        dependencies = [
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "pest";
            packageId = "pest";
          }
          {
            name = "pest_derive";
            packageId = "pest_derive";
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
        ];
        features = {
          "dir_source" = [ "walkdir" ];
          "heck" = [ "dep:heck" ];
          "rhai" = [ "dep:rhai" ];
          "rust-embed" = [ "dep:rust-embed" ];
          "script_helper" = [ "rhai" ];
          "string_helpers" = [ "heck" ];
          "walkdir" = [ "dep:walkdir" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "hashbrown 0.12.3" = rec {
        crateName = "hashbrown";
        version = "0.12.3";
        edition = "2021";
        sha256 = "1268ka4750pyg2pbgsr43f0289l5zah4arir2k4igx5a8c6fg7la";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "ahash";
            packageId = "ahash 0.7.8";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "ahash" = [ "dep:ahash" ];
          "ahash-compile-time-rng" = [ "ahash/compile-time-rng" ];
          "alloc" = [ "dep:alloc" ];
          "bumpalo" = [ "dep:bumpalo" ];
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "default" = [ "ahash" "inline-more" ];
          "rayon" = [ "dep:rayon" ];
          "rustc-dep-of-std" = [ "nightly" "core" "compiler_builtins" "alloc" "rustc-internal-api" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "ahash" "default" "inline-more" "raw" ];
      };
      "hashbrown 0.13.2" = rec {
        crateName = "hashbrown";
        version = "0.13.2";
        edition = "2021";
        sha256 = "03ji3n19j4b6mf2wlla81vsixcmlivglp6hgk79d1pcxfcrw38s3";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "ahash";
            packageId = "ahash 0.8.11";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "ahash" = [ "dep:ahash" ];
          "alloc" = [ "dep:alloc" ];
          "bumpalo" = [ "dep:bumpalo" ];
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "default" = [ "ahash" "inline-more" ];
          "rayon" = [ "dep:rayon" ];
          "rustc-dep-of-std" = [ "nightly" "core" "compiler_builtins" "alloc" "rustc-internal-api" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "ahash" "default" "inline-more" "raw" ];
      };
      "hashbrown 0.14.5" = rec {
        crateName = "hashbrown";
        version = "0.14.5";
        edition = "2021";
        sha256 = "1wa1vy1xs3mp11bn3z9dv0jricgr6a2j0zkf1g19yz3vw4il89z5";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "ahash";
            packageId = "ahash 0.8.11";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "allocator-api2";
            packageId = "allocator-api2";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "ahash" = [ "dep:ahash" ];
          "alloc" = [ "dep:alloc" ];
          "allocator-api2" = [ "dep:allocator-api2" ];
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "default" = [ "ahash" "inline-more" "allocator-api2" ];
          "equivalent" = [ "dep:equivalent" ];
          "nightly" = [ "allocator-api2?/nightly" "bumpalo/allocator_api" ];
          "rayon" = [ "dep:rayon" ];
          "rkyv" = [ "dep:rkyv" ];
          "rustc-dep-of-std" = [ "nightly" "core" "compiler_builtins" "alloc" "rustc-internal-api" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "ahash" "allocator-api2" "default" "inline-more" "raw" "serde" ];
      };
      "hashers" = rec {
        crateName = "hashers";
        version = "1.0.1";
        edition = "2015";
        sha256 = "0c1w7sanj02r4sgdz0xpx9jn2g77f5zmhmhf49pp8npa2lxskg5j";
        authors = [
          "Tommy M. McGuire <mcguire@crsr.net>"
        ];
        dependencies = [
          {
            name = "fxhash";
            packageId = "fxhash";
          }
        ];

      };
      "hdrhistogram" = rec {
        crateName = "hdrhistogram";
        version = "7.5.4";
        edition = "2018";
        sha256 = "07ai0r66l1n53f2757gv07za1l5g1bprb7zz4v75kpbky6c92p3n";
        authors = [
          "Jon Gjengset <jon@thesquareplanet.com>"
          "Marshall Pierce <marshall@mpierce.org>"
        ];
        dependencies = [
          {
            name = "base64";
            packageId = "base64 0.21.7";
            optional = true;
          }
          {
            name = "byteorder";
            packageId = "byteorder";
          }
          {
            name = "crossbeam-channel";
            packageId = "crossbeam-channel";
            optional = true;
          }
          {
            name = "flate2";
            packageId = "flate2";
            optional = true;
          }
          {
            name = "nom";
            packageId = "nom";
            optional = true;
          }
          {
            name = "num-traits";
            packageId = "num-traits";
          }
        ];
        features = {
          "base64" = [ "dep:base64" ];
          "crossbeam-channel" = [ "dep:crossbeam-channel" ];
          "default" = [ "serialization" "sync" ];
          "flate2" = [ "dep:flate2" ];
          "nom" = [ "dep:nom" ];
          "serialization" = [ "flate2" "nom" "base64" ];
          "sync" = [ "crossbeam-channel" ];
        };
        resolvedDefaultFeatures = [ "base64" "crossbeam-channel" "default" "flate2" "nom" "serialization" "sync" ];
      };
      "headers" = rec {
        crateName = "headers";
        version = "0.4.0";
        edition = "2015";
        sha256 = "1abari69kjl2yv2dg06g2x17qgd1a20xp7aqmmg2vfhcppk0c89j";
        authors = [
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "base64";
            packageId = "base64 0.21.7";
          }
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "headers-core";
            packageId = "headers-core";
          }
          {
            name = "http";
            packageId = "http 1.1.0";
          }
          {
            name = "httpdate";
            packageId = "httpdate";
          }
          {
            name = "mime";
            packageId = "mime";
          }
          {
            name = "sha1";
            packageId = "sha1";
          }
        ];
        features = {
        };
      };
      "headers-core" = rec {
        crateName = "headers-core";
        version = "0.3.0";
        edition = "2015";
        sha256 = "1r1w80i2bhmyh8s5mjr2dz6baqlrm6cak6yvzm4jq96lacjs5d2l";
        libName = "headers_core";
        authors = [
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "http";
            packageId = "http 1.1.0";
          }
        ];

      };
      "heck 0.4.1" = rec {
        crateName = "heck";
        version = "0.4.1";
        edition = "2018";
        sha256 = "1a7mqsnycv5z4z5vnv1k34548jzmc0ajic7c1j8jsaspnhw5ql4m";
        authors = [
          "Without Boats <woboats@gmail.com>"
        ];
        features = {
          "unicode" = [ "unicode-segmentation" ];
          "unicode-segmentation" = [ "dep:unicode-segmentation" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "heck 0.5.0" = rec {
        crateName = "heck";
        version = "0.5.0";
        edition = "2021";
        sha256 = "1sjmpsdl8czyh9ywl3qcsfsq9a307dg4ni2vnlwgnzzqhc4y0113";

      };
      "hermit-abi 0.3.9" = rec {
        crateName = "hermit-abi";
        version = "0.3.9";
        edition = "2021";
        sha256 = "092hxjbjnq5fmz66grd9plxd0sh6ssg5fhgwwwqbrzgzkjwdycfj";
        libName = "hermit_abi";
        authors = [
          "Stefan Lankes"
        ];
        features = {
          "alloc" = [ "dep:alloc" ];
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "rustc-dep-of-std" = [ "core" "alloc" "compiler_builtins/rustc-dep-of-std" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "hermit-abi 0.4.0" = rec {
        crateName = "hermit-abi";
        version = "0.4.0";
        edition = "2021";
        sha256 = "1k1zwllx6nfq417hy38x4akw1ivlv68ymvnzyxs76ffgsqcskxpv";
        libName = "hermit_abi";
        authors = [
          "Stefan Lankes"
        ];
        features = {
          "alloc" = [ "dep:alloc" ];
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "rustc-dep-of-std" = [ "core" "alloc" "compiler_builtins/rustc-dep-of-std" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "hex" = rec {
        crateName = "hex";
        version = "0.4.3";
        edition = "2018";
        sha256 = "0w1a4davm1lgzpamwnba907aysmlrnygbqmfis2mqjx5m552a93z";
        authors = [
          "KokaKiwi <kokakiwi@kokakiwi.net>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "serde" "std" ];
      };
      "hex-literal 0.3.4" = rec {
        crateName = "hex-literal";
        version = "0.3.4";
        edition = "2018";
        sha256 = "1q54yvyy0zls9bdrx15hk6yj304npndy9v4crn1h1vd95sfv5gby";
        procMacro = true;
        libName = "hex_literal";
        authors = [
          "RustCrypto Developers"
        ];

      };
      "hex-literal 0.4.1" = rec {
        crateName = "hex-literal";
        version = "0.4.1";
        edition = "2021";
        sha256 = "0iny5inkixsdr41pm2vkqh3fl66752z5j5c0cdxw16yl9ryjdqkg";
        libName = "hex_literal";
        authors = [
          "RustCrypto Developers"
        ];

      };
      "hkdf" = rec {
        crateName = "hkdf";
        version = "0.12.4";
        edition = "2018";
        sha256 = "1xxxzcarz151p1b858yn5skmhyrvn8fs4ivx5km3i1kjmnr8wpvv";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "hmac";
            packageId = "hmac";
          }
        ];
        features = {
          "std" = [ "hmac/std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "hmac" = rec {
        crateName = "hmac";
        version = "0.12.1";
        edition = "2018";
        sha256 = "0pmbr069sfg76z7wsssfk5ddcqd9ncp79fyz6zcm6yn115yc6jbc";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "digest";
            packageId = "digest 0.10.7";
            features = [ "mac" ];
          }
        ];
        devDependencies = [
          {
            name = "digest";
            packageId = "digest 0.10.7";
            features = [ "dev" ];
          }
        ];
        features = {
          "std" = [ "digest/std" ];
        };
        resolvedDefaultFeatures = [ "reset" "std" ];
      };
      "hmac-sha512" = rec {
        crateName = "hmac-sha512";
        version = "0.1.9";
        edition = "2018";
        sha256 = "10skv9isvx54wkd70pq9vkl3cyw42v43042lk6hx0qz6gikhds3p";
        libName = "hmac_sha512";
        authors = [
          "Frank Denis <github@pureftpd.org>"
        ];
        features = {
          "default" = [ "sha384" ];
          "digest" = [ "dep:digest" ];
          "traits" = [ "digest" ];
        };
        resolvedDefaultFeatures = [ "default" "sha384" ];
      };
      "home" = rec {
        crateName = "home";
        version = "0.5.9";
        edition = "2021";
        sha256 = "19grxyg35rqfd802pcc9ys1q3lafzlcjcv2pl2s5q8xpyr5kblg3";
        authors = [
          "Brian Anderson <andersrb@gmail.com>"
        ];
        dependencies = [
          {
            name = "windows-sys";
            packageId = "windows-sys 0.52.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_Foundation" "Win32_UI_Shell" "Win32_System_Com" ];
          }
        ];

      };
      "http 0.2.12" = rec {
        crateName = "http";
        version = "0.2.12";
        edition = "2018";
        sha256 = "1w81s4bcbmcj9bjp7mllm8jlz6b31wzvirz8bgpzbqkpwmbvn730";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
          "Carl Lerche <me@carllerche.com>"
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "fnv";
            packageId = "fnv";
          }
          {
            name = "itoa";
            packageId = "itoa";
          }
        ];

      };
      "http 1.1.0" = rec {
        crateName = "http";
        version = "1.1.0";
        edition = "2018";
        sha256 = "0n426lmcxas6h75c2cp25m933pswlrfjz10v91vc62vib2sdvf91";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
          "Carl Lerche <me@carllerche.com>"
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "fnv";
            packageId = "fnv";
          }
          {
            name = "itoa";
            packageId = "itoa";
          }
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "http-body 0.4.6" = rec {
        crateName = "http-body";
        version = "0.4.6";
        edition = "2018";
        sha256 = "1lmyjfk6bqk6k9gkn1dxq770sb78pqbqshga241hr5p995bb5skw";
        libName = "http_body";
        authors = [
          "Carl Lerche <me@carllerche.com>"
          "Lucio Franco <luciofranco14@gmail.com>"
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "http";
            packageId = "http 0.2.12";
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
        ];

      };
      "http-body 1.0.1" = rec {
        crateName = "http-body";
        version = "1.0.1";
        edition = "2018";
        sha256 = "111ir5k2b9ihz5nr9cz7cwm7fnydca7dx4hc7vr16scfzghxrzhy";
        libName = "http_body";
        authors = [
          "Carl Lerche <me@carllerche.com>"
          "Lucio Franco <luciofranco14@gmail.com>"
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "http";
            packageId = "http 1.1.0";
          }
        ];

      };
      "http-body-util" = rec {
        crateName = "http-body-util";
        version = "0.1.2";
        edition = "2018";
        sha256 = "0kslwazg4400qnc2azkrgqqci0fppv12waicnsy5d8hncvbjjd3r";
        libName = "http_body_util";
        authors = [
          "Carl Lerche <me@carllerche.com>"
          "Lucio Franco <luciofranco14@gmail.com>"
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
          }
          {
            name = "http";
            packageId = "http 1.1.0";
          }
          {
            name = "http-body";
            packageId = "http-body 1.0.1";
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
        ];

      };
      "http-range-header" = rec {
        crateName = "http-range-header";
        version = "0.4.1";
        edition = "2018";
        sha256 = "12hnsmb8kq3hk4z95ysc61gswnp91d4bxb8ic8ykwa7ckz29g8q8";
        libName = "http_range_header";

      };
      "httparse" = rec {
        crateName = "httparse";
        version = "1.9.4";
        edition = "2018";
        sha256 = "1nc2s1pziq5ncl39xm7ybdhpnw5xsm505smqirr0py2v2550pk0g";
        authors = [
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "httpdate" = rec {
        crateName = "httpdate";
        version = "1.0.3";
        edition = "2021";
        sha256 = "1aa9rd2sac0zhjqh24c9xvir96g188zldkx0hr6dnnlx5904cfyz";
        authors = [
          "Pyfisch <pyfisch@posteo.org>"
        ];

      };
      "humantime" = rec {
        crateName = "humantime";
        version = "2.1.0";
        edition = "2018";
        sha256 = "1r55pfkkf5v0ji1x6izrjwdq9v6sc7bv99xj6srywcar37xmnfls";
        authors = [
          "Paul Colomiets <paul@colomiets.name>"
        ];

      };
      "hyper 0.14.30" = rec {
        crateName = "hyper";
        version = "0.14.30";
        edition = "2018";
        sha256 = "1jayxag79yln1nzyzx652kcy1bikgwssn6c4zrrp5v7s3pbdslm1";
        authors = [
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "futures-channel";
            packageId = "futures-channel";
          }
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
          }
          {
            name = "h2";
            packageId = "h2 0.3.26";
            optional = true;
          }
          {
            name = "http";
            packageId = "http 0.2.12";
          }
          {
            name = "http-body";
            packageId = "http-body 0.4.6";
          }
          {
            name = "httparse";
            packageId = "httparse";
          }
          {
            name = "httpdate";
            packageId = "httpdate";
          }
          {
            name = "itoa";
            packageId = "itoa";
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "socket2";
            packageId = "socket2";
            optional = true;
            features = [ "all" ];
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "sync" ];
          }
          {
            name = "tower-service";
            packageId = "tower-service";
          }
          {
            name = "tracing";
            packageId = "tracing";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "want";
            packageId = "want";
          }
        ];
        devDependencies = [
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "fs" "macros" "io-std" "io-util" "rt" "rt-multi-thread" "sync" "time" "test-util" ];
          }
        ];
        features = {
          "ffi" = [ "libc" ];
          "full" = [ "client" "http1" "http2" "server" "stream" "runtime" ];
          "h2" = [ "dep:h2" ];
          "http2" = [ "h2" ];
          "libc" = [ "dep:libc" ];
          "runtime" = [ "tcp" "tokio/rt" "tokio/time" ];
          "socket2" = [ "dep:socket2" ];
          "tcp" = [ "socket2" "tokio/net" "tokio/rt" "tokio/time" ];
        };
        resolvedDefaultFeatures = [ "client" "default" "h2" "http1" "http2" "runtime" "server" "socket2" "stream" "tcp" ];
      };
      "hyper 1.4.1" = rec {
        crateName = "hyper";
        version = "1.4.1";
        edition = "2021";
        sha256 = "01ds8i3q6hw5kw56mavy544m11gkr87zi999siigdl3n1qpd5psh";
        authors = [
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "futures-channel";
            packageId = "futures-channel";
            optional = true;
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "h2";
            packageId = "h2 0.4.6";
            optional = true;
          }
          {
            name = "http";
            packageId = "http 1.1.0";
          }
          {
            name = "http-body";
            packageId = "http-body 1.0.1";
          }
          {
            name = "httparse";
            packageId = "httparse";
            optional = true;
          }
          {
            name = "httpdate";
            packageId = "httpdate";
            optional = true;
          }
          {
            name = "itoa";
            packageId = "itoa";
            optional = true;
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
            optional = true;
          }
          {
            name = "smallvec";
            packageId = "smallvec";
            optional = true;
            features = [ "const_generics" "const_new" ];
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "sync" ];
          }
          {
            name = "want";
            packageId = "want";
            optional = true;
          }
        ];
        devDependencies = [
          {
            name = "futures-channel";
            packageId = "futures-channel";
            features = [ "sink" ];
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
            features = [ "alloc" "sink" ];
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "fs" "macros" "net" "io-std" "io-util" "rt" "rt-multi-thread" "sync" "time" "test-util" ];
          }
        ];
        features = {
          "client" = [ "dep:want" "dep:pin-project-lite" "dep:smallvec" ];
          "ffi" = [ "dep:libc" "dep:http-body-util" "futures-util?/alloc" ];
          "full" = [ "client" "http1" "http2" "server" ];
          "http1" = [ "dep:futures-channel" "dep:futures-util" "dep:httparse" "dep:itoa" ];
          "http2" = [ "dep:futures-channel" "dep:futures-util" "dep:h2" ];
          "server" = [ "dep:httpdate" "dep:pin-project-lite" "dep:smallvec" ];
          "tracing" = [ "dep:tracing" ];
        };
        resolvedDefaultFeatures = [ "client" "default" "http1" "http2" "server" ];
      };
      "hyper-rustls 0.24.2" = rec {
        crateName = "hyper-rustls";
        version = "0.24.2";
        edition = "2021";
        sha256 = "1475j4a2nczz4aajzzsq3hpwg1zacmzbqg393a14j80ff8izsgpc";
        libName = "hyper_rustls";
        dependencies = [
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
          }
          {
            name = "http";
            packageId = "http 0.2.12";
          }
          {
            name = "hyper";
            packageId = "hyper 0.14.30";
            usesDefaultFeatures = false;
            features = [ "client" ];
          }
          {
            name = "log";
            packageId = "log";
            optional = true;
          }
          {
            name = "rustls";
            packageId = "rustls 0.21.12";
            usesDefaultFeatures = false;
          }
          {
            name = "rustls-native-certs";
            packageId = "rustls-native-certs 0.6.3";
            optional = true;
          }
          {
            name = "tokio";
            packageId = "tokio";
          }
          {
            name = "tokio-rustls";
            packageId = "tokio-rustls 0.24.1";
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "hyper";
            packageId = "hyper 0.14.30";
            features = [ "full" ];
          }
          {
            name = "rustls";
            packageId = "rustls 0.21.12";
            usesDefaultFeatures = false;
            features = [ "tls12" ];
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "io-std" "macros" "net" "rt-multi-thread" ];
          }
        ];
        features = {
          "acceptor" = [ "hyper/server" "tokio-runtime" ];
          "default" = [ "native-tokio" "http1" "tls12" "logging" "acceptor" ];
          "http1" = [ "hyper/http1" ];
          "http2" = [ "hyper/http2" ];
          "log" = [ "dep:log" ];
          "logging" = [ "log" "tokio-rustls/logging" "rustls/logging" ];
          "native-tokio" = [ "tokio-runtime" "rustls-native-certs" ];
          "rustls-native-certs" = [ "dep:rustls-native-certs" ];
          "tls12" = [ "tokio-rustls/tls12" "rustls/tls12" ];
          "tokio-runtime" = [ "hyper/runtime" ];
          "webpki-roots" = [ "dep:webpki-roots" ];
          "webpki-tokio" = [ "tokio-runtime" "webpki-roots" ];
        };
        resolvedDefaultFeatures = [ "acceptor" "default" "http1" "http2" "log" "logging" "native-tokio" "rustls-native-certs" "tls12" "tokio-runtime" ];
      };
      "hyper-rustls 0.27.3" = rec {
        crateName = "hyper-rustls";
        version = "0.27.3";
        edition = "2021";
        sha256 = "0cxkph8hsmbz693a8ih2ciy7h0xbac844rpm981y6c0iqfsxpbq8";
        libName = "hyper_rustls";
        dependencies = [
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
          }
          {
            name = "http";
            packageId = "http 1.1.0";
          }
          {
            name = "hyper";
            packageId = "hyper 1.4.1";
            usesDefaultFeatures = false;
          }
          {
            name = "hyper-util";
            packageId = "hyper-util";
            usesDefaultFeatures = false;
            features = [ "client-legacy" "tokio" ];
          }
          {
            name = "log";
            packageId = "log";
            optional = true;
          }
          {
            name = "rustls";
            packageId = "rustls 0.23.13";
            usesDefaultFeatures = false;
          }
          {
            name = "rustls-native-certs";
            packageId = "rustls-native-certs 0.8.0";
            optional = true;
          }
          {
            name = "rustls-pki-types";
            packageId = "rustls-pki-types";
            rename = "pki-types";
          }
          {
            name = "tokio";
            packageId = "tokio";
          }
          {
            name = "tokio-rustls";
            packageId = "tokio-rustls 0.26.0";
            usesDefaultFeatures = false;
          }
          {
            name = "tower-service";
            packageId = "tower-service";
          }
          {
            name = "webpki-roots";
            packageId = "webpki-roots 0.26.6";
            optional = true;
          }
        ];
        devDependencies = [
          {
            name = "hyper-util";
            packageId = "hyper-util";
            usesDefaultFeatures = false;
            features = [ "server-auto" ];
          }
          {
            name = "rustls";
            packageId = "rustls 0.23.13";
            usesDefaultFeatures = false;
            features = [ "tls12" ];
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "io-std" "macros" "net" "rt-multi-thread" ];
          }
        ];
        features = {
          "aws-lc-rs" = [ "rustls/aws_lc_rs" ];
          "default" = [ "native-tokio" "http1" "tls12" "logging" "aws-lc-rs" ];
          "fips" = [ "aws-lc-rs" "rustls/fips" ];
          "http1" = [ "hyper-util/http1" ];
          "http2" = [ "hyper-util/http2" ];
          "log" = [ "dep:log" ];
          "logging" = [ "log" "tokio-rustls/logging" "rustls/logging" ];
          "native-tokio" = [ "rustls-native-certs" ];
          "ring" = [ "rustls/ring" ];
          "rustls-native-certs" = [ "dep:rustls-native-certs" ];
          "rustls-platform-verifier" = [ "dep:rustls-platform-verifier" ];
          "tls12" = [ "tokio-rustls/tls12" "rustls/tls12" ];
          "webpki-roots" = [ "dep:webpki-roots" ];
          "webpki-tokio" = [ "webpki-roots" ];
        };
        resolvedDefaultFeatures = [ "http1" "http2" "log" "logging" "native-tokio" "ring" "rustls-native-certs" "tls12" "webpki-roots" "webpki-tokio" ];
      };
      "hyper-timeout" = rec {
        crateName = "hyper-timeout";
        version = "0.5.1";
        edition = "2018";
        sha256 = "14rpyv9zz0ncadn9qgmnjz0hiqk3nav7hglkk1a6yfy8wmhsj0rj";
        libName = "hyper_timeout";
        authors = [
          "Herman J. Radtke III <herman@hermanradtke.com>"
        ];
        dependencies = [
          {
            name = "hyper";
            packageId = "hyper 1.4.1";
          }
          {
            name = "hyper-util";
            packageId = "hyper-util";
            features = [ "client-legacy" "http1" ];
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "tokio";
            packageId = "tokio";
          }
          {
            name = "tower-service";
            packageId = "tower-service";
          }
        ];
        devDependencies = [
          {
            name = "hyper";
            packageId = "hyper 1.4.1";
            features = [ "http1" ];
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "io-std" "io-util" "macros" ];
          }
        ];

      };
      "hyper-util" = rec {
        crateName = "hyper-util";
        version = "0.1.9";
        edition = "2021";
        sha256 = "12yhradh0bpwa9jjyyq6shrrcx9fxbdkrq06xj7ccfhqkyq6waa1";
        libName = "hyper_util";
        authors = [
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "futures-channel";
            packageId = "futures-channel";
            optional = true;
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
          }
          {
            name = "http";
            packageId = "http 1.1.0";
          }
          {
            name = "http-body";
            packageId = "http-body 1.0.1";
          }
          {
            name = "hyper";
            packageId = "hyper 1.4.1";
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "socket2";
            packageId = "socket2";
            optional = true;
            features = [ "all" ];
          }
          {
            name = "tokio";
            packageId = "tokio";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "tower-service";
            packageId = "tower-service";
            optional = true;
          }
          {
            name = "tracing";
            packageId = "tracing";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
        ];
        devDependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "hyper";
            packageId = "hyper 1.4.1";
            features = [ "full" ];
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "macros" "test-util" "signal" ];
          }
        ];
        features = {
          "client" = [ "hyper/client" "dep:tracing" "dep:futures-channel" "dep:tower-service" ];
          "client-legacy" = [ "client" "dep:socket2" "tokio/sync" ];
          "full" = [ "client" "client-legacy" "server" "server-auto" "server-graceful" "service" "http1" "http2" "tokio" ];
          "http1" = [ "hyper/http1" ];
          "http2" = [ "hyper/http2" ];
          "server" = [ "hyper/server" ];
          "server-auto" = [ "server" "http1" "http2" ];
          "server-graceful" = [ "server" "tokio/sync" "futures-util/alloc" ];
          "service" = [ "dep:tower-service" ];
          "tokio" = [ "dep:tokio" "tokio/net" "tokio/rt" "tokio/time" ];
        };
        resolvedDefaultFeatures = [ "client" "client-legacy" "default" "http1" "http2" "server" "server-auto" "service" "tokio" ];
      };
      "iana-time-zone" = rec {
        crateName = "iana-time-zone";
        version = "0.1.61";
        edition = "2018";
        sha256 = "085jjsls330yj1fnwykfzmb2f10zp6l7w4fhq81ng81574ghhpi3";
        libName = "iana_time_zone";
        authors = [
          "Andrew Straw <strawman@astraw.com>"
          "René Kijewski <rene.kijewski@fu-berlin.de>"
          "Ryan Lopopolo <rjl@hyperbo.la>"
        ];
        dependencies = [
          {
            name = "android_system_properties";
            packageId = "android_system_properties";
            target = { target, features }: ("android" == target."os" or null);
          }
          {
            name = "core-foundation-sys";
            packageId = "core-foundation-sys";
            target = { target, features }: (("macos" == target."os" or null) || ("ios" == target."os" or null));
          }
          {
            name = "iana-time-zone-haiku";
            packageId = "iana-time-zone-haiku";
            target = { target, features }: ("haiku" == target."os" or null);
          }
          {
            name = "js-sys";
            packageId = "js-sys";
            target = { target, features }: (("wasm32" == target."arch" or null) && ("unknown" == target."os" or null));
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            target = { target, features }: (("wasm32" == target."arch" or null) && ("unknown" == target."os" or null));
          }
          {
            name = "windows-core";
            packageId = "windows-core 0.52.0";
            target = { target, features }: ("windows" == target."os" or null);
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "fallback" ];
      };
      "iana-time-zone-haiku" = rec {
        crateName = "iana-time-zone-haiku";
        version = "0.1.2";
        edition = "2018";
        sha256 = "17r6jmj31chn7xs9698r122mapq85mfnv98bb4pg6spm0si2f67k";
        libName = "iana_time_zone_haiku";
        authors = [
          "René Kijewski <crates.io@k6i.de>"
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
          }
        ];

      };
      "ident_case" = rec {
        crateName = "ident_case";
        version = "1.0.1";
        edition = "2015";
        sha256 = "0fac21q6pwns8gh1hz3nbq15j8fi441ncl6w4vlnd1cmc55kiq5r";
        authors = [
          "Ted Driggs <ted.driggs@outlook.com>"
        ];

      };
      "idna" = rec {
        crateName = "idna";
        version = "0.5.0";
        edition = "2018";
        sha256 = "1xhjrcjqq0l5bpzvdgylvpkgk94panxgsirzhjnnqfdgc4a9nkb3";
        authors = [
          "The rust-url developers"
        ];
        dependencies = [
          {
            name = "unicode-bidi";
            packageId = "unicode-bidi";
            usesDefaultFeatures = false;
            features = [ "hardcoded-data" ];
          }
          {
            name = "unicode-normalization";
            packageId = "unicode-normalization";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" "unicode-bidi/std" "unicode-normalization/std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "if_chain" = rec {
        crateName = "if_chain";
        version = "1.0.2";
        edition = "2015";
        sha256 = "1vdrylnqw8vd99j20jgalh1vp1vh7dwnkdzsmlx4yjsvfsmf2mnb";
        authors = [
          "Chris Wong <lambda.fairy@gmail.com>"
        ];

      };
      "im" = rec {
        crateName = "im";
        version = "15.1.0";
        edition = "2018";
        sha256 = "1sg0jy9y0l3lqjpjyclj6kspi027mx177dgrmacgjni8y0zx7b6h";
        authors = [
          "Bodil Stokke <bodil@bodil.org>"
        ];
        dependencies = [
          {
            name = "bitmaps";
            packageId = "bitmaps";
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
          }
          {
            name = "rand_xoshiro";
            packageId = "rand_xoshiro";
          }
          {
            name = "sized-chunks";
            packageId = "sized-chunks";
          }
          {
            name = "typenum";
            packageId = "typenum";
          }
        ];
        buildDependencies = [
          {
            name = "version_check";
            packageId = "version_check";
          }
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "proptest" = [ "dep:proptest" ];
          "quickcheck" = [ "dep:quickcheck" ];
          "rayon" = [ "dep:rayon" ];
          "refpool" = [ "dep:refpool" ];
          "serde" = [ "dep:serde" ];
        };
      };
      "impl-codec 0.5.1" = rec {
        crateName = "impl-codec";
        version = "0.5.1";
        edition = "2018";
        sha256 = "0hy4svffnw9idy9ipp0hkmbzk97fl583akqwyqmvbqy8qgzbs7hn";
        libName = "impl_codec";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec 2.3.1";
            usesDefaultFeatures = false;
            features = [ "max-encoded-len" ];
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "parity-scale-codec/std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "impl-codec 0.6.0" = rec {
        crateName = "impl-codec";
        version = "0.6.0";
        edition = "2021";
        sha256 = "0bvzlxap996zrai9shwcnzris117r1gx2dizgxhiark27402fsms";
        libName = "impl_codec";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec 3.6.12";
            usesDefaultFeatures = false;
            features = [ "max-encoded-len" ];
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "parity-scale-codec/std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "impl-rlp" = rec {
        crateName = "impl-rlp";
        version = "0.3.0";
        edition = "2018";
        sha256 = "021869d5s47ili9kmhm9y80qpsbf0wwdap14qzfpb84pjbw210pj";
        libName = "impl_rlp";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "rlp";
            packageId = "rlp";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "rlp/std" ];
        };
      };
      "impl-serde 0.3.2" = rec {
        crateName = "impl-serde";
        version = "0.3.2";
        edition = "2018";
        sha256 = "0p2zy8ikdxd28s3vb22nwqgnwjn8gx920sr2svdn93j3yd1g0la5";
        libName = "impl_serde";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "serde/std" ];
        };
      };
      "impl-serde 0.4.0" = rec {
        crateName = "impl-serde";
        version = "0.4.0";
        edition = "2021";
        sha256 = "1k9mr5wfypgz95azk0k9bgsdb66kd5ia7fjkr2q3vbi8f338zj7b";
        libName = "impl_serde";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "serde/std" ];
        };
      };
      "impl-trait-for-tuples" = rec {
        crateName = "impl-trait-for-tuples";
        version = "0.2.2";
        edition = "2021";
        sha256 = "1swmfdzfcfhnyvpm8irr5pvq8vpf8wfbdj91g6jzww8b6gvakmqi";
        procMacro = true;
        libName = "impl_trait_for_tuples";
        authors = [
          "Bastian Köcher <git@kchr.de>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.86";
          }
          {
            name = "quote";
            packageId = "quote 1.0.37";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            features = [ "full" "visit" "fold" "extra-traits" ];
          }
        ];

      };
      "indenter" = rec {
        crateName = "indenter";
        version = "0.3.3";
        edition = "2018";
        sha256 = "10y6i6y4ls7xsfsc1r3p5j2hhbxhaqnk5zzk8aj52b14v05ba8yf";
        authors = [
          "Jane Lusby <jlusby@yaah.dev>"
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "indexmap 1.9.3" = rec {
        crateName = "indexmap";
        version = "1.9.3";
        edition = "2021";
        sha256 = "16dxmy7yvk51wvnih3a3im6fp5lmx0wx76i03n06wyak6cwhw1xx";
        dependencies = [
          {
            name = "hashbrown";
            packageId = "hashbrown 0.12.3";
            usesDefaultFeatures = false;
            features = [ "raw" ];
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "quickcheck" = [ "dep:quickcheck" ];
          "rayon" = [ "dep:rayon" ];
          "rustc-rayon" = [ "dep:rustc-rayon" ];
          "serde" = [ "dep:serde" ];
          "serde-1" = [ "serde" ];
        };
        resolvedDefaultFeatures = [ "serde" "serde-1" "std" ];
      };
      "indexmap 2.5.0" = rec {
        crateName = "indexmap";
        version = "2.5.0";
        edition = "2021";
        sha256 = "1r87dlvyg04fa9m4m6pkvwsdx54rx471fas66qff40bk5ym01fb8";
        dependencies = [
          {
            name = "equivalent";
            packageId = "equivalent";
            usesDefaultFeatures = false;
          }
          {
            name = "hashbrown";
            packageId = "hashbrown 0.14.5";
            usesDefaultFeatures = false;
            features = [ "raw" ];
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "borsh" = [ "dep:borsh" ];
          "default" = [ "std" ];
          "quickcheck" = [ "dep:quickcheck" ];
          "rayon" = [ "dep:rayon" ];
          "rustc-rayon" = [ "dep:rustc-rayon" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "default" "serde" "std" ];
      };
      "indicatif" = rec {
        crateName = "indicatif";
        version = "0.17.8";
        edition = "2021";
        sha256 = "18xyqxw9i5x4sbpzckhfz3nm984iq9r7nbi2lk76nz888n7mlfkn";
        dependencies = [
          {
            name = "console";
            packageId = "console";
            usesDefaultFeatures = false;
            features = [ "ansi-parsing" ];
          }
          {
            name = "instant";
            packageId = "instant";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
          {
            name = "number_prefix";
            packageId = "number_prefix";
          }
          {
            name = "portable-atomic";
            packageId = "portable-atomic";
          }
          {
            name = "unicode-width";
            packageId = "unicode-width";
            optional = true;
          }
        ];
        features = {
          "default" = [ "unicode-width" "console/unicode-width" ];
          "futures" = [ "dep:futures-core" ];
          "improved_unicode" = [ "unicode-segmentation" "unicode-width" "console/unicode-width" ];
          "in_memory" = [ "vt100" ];
          "rayon" = [ "dep:rayon" ];
          "tokio" = [ "dep:tokio" ];
          "unicode-segmentation" = [ "dep:unicode-segmentation" ];
          "unicode-width" = [ "dep:unicode-width" ];
          "vt100" = [ "dep:vt100" ];
        };
        resolvedDefaultFeatures = [ "default" "unicode-width" ];
      };
      "inotify" = rec {
        crateName = "inotify";
        version = "0.9.6";
        edition = "2018";
        sha256 = "1zxb04c4qccp8wnr3v04l503qpxzxzzzph61amlqbsslq4z9s1pq";
        authors = [
          "Hanno Braun <mail@hannobraun.de>"
          "Félix Saparelli <me@passcod.name>"
          "Cristian Kubis <cristian.kubis@tsunix.de>"
          "Frank Denis <github@pureftpd.org>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 1.3.2";
          }
          {
            name = "inotify-sys";
            packageId = "inotify-sys";
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        features = {
          "default" = [ "stream" ];
          "futures-core" = [ "dep:futures-core" ];
          "stream" = [ "futures-core" "tokio" ];
          "tokio" = [ "dep:tokio" ];
        };
      };
      "inotify-sys" = rec {
        crateName = "inotify-sys";
        version = "0.1.5";
        edition = "2015";
        sha256 = "1syhjgvkram88my04kv03s0zwa66mdwa5v7ddja3pzwvx2sh4p70";
        libName = "inotify_sys";
        authors = [
          "Hanno Braun <hb@hannobraun.de>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
        ];

      };
      "inout" = rec {
        crateName = "inout";
        version = "0.1.3";
        edition = "2021";
        sha256 = "1xf9gf09nc7y1a261xlfqsf66yn6mb81ahlzzyyd1934sr9hbhd0";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "block-padding";
            packageId = "block-padding 0.3.3";
            optional = true;
          }
          {
            name = "generic-array";
            packageId = "generic-array";
          }
        ];
        features = {
          "block-padding" = [ "dep:block-padding" ];
          "std" = [ "block-padding/std" ];
        };
        resolvedDefaultFeatures = [ "block-padding" "std" ];
      };
      "inquire" = rec {
        crateName = "inquire";
        version = "0.6.2";
        edition = "2018";
        sha256 = "0fw0cm81pncfp0qi12bcdlmvasczwbc2jq7gpyy9lp5ivqfpqgn3";
        authors = [
          "Mikael Mello <git@mikaelmello.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 1.3.2";
          }
          {
            name = "crossterm";
            packageId = "crossterm 0.25.0";
            optional = true;
          }
          {
            name = "dyn-clone";
            packageId = "dyn-clone";
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "newline-converter";
            packageId = "newline-converter";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "unicode-segmentation";
            packageId = "unicode-segmentation";
          }
          {
            name = "unicode-width";
            packageId = "unicode-width";
          }
        ];
        features = {
          "chrono" = [ "dep:chrono" ];
          "console" = [ "dep:console" ];
          "crossterm" = [ "dep:crossterm" ];
          "date" = [ "chrono" ];
          "default" = [ "macros" "crossterm" ];
          "editor" = [ "tempfile" ];
          "tempfile" = [ "dep:tempfile" ];
          "termion" = [ "dep:termion" ];
        };
        resolvedDefaultFeatures = [ "crossterm" "default" "macros" ];
      };
      "insta" = rec {
        crateName = "insta";
        version = "1.40.0";
        edition = "2021";
        sha256 = "0q5b0ssw8ilj0ni6s2swpd1spv78q5yxp594fxl1i13kg8fa94v5";
        authors = [
          "Armin Ronacher <armin.ronacher@active-4.com>"
        ];
        dependencies = [
          {
            name = "console";
            packageId = "console";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "linked-hash-map";
            packageId = "linked-hash-map";
          }
          {
            name = "pest";
            packageId = "pest";
            optional = true;
          }
          {
            name = "pest_derive";
            packageId = "pest_derive";
            optional = true;
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
          {
            name = "similar";
            packageId = "similar";
            features = [ "inline" ];
          }
        ];
        devDependencies = [
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
        ];
        features = {
          "_cargo_insta_internal" = [ "clap" ];
          "clap" = [ "dep:clap" ];
          "colors" = [ "console" ];
          "console" = [ "dep:console" ];
          "csv" = [ "dep:csv" "serde" ];
          "default" = [ "colors" ];
          "filters" = [ "regex" ];
          "glob" = [ "walkdir" "globset" ];
          "globset" = [ "dep:globset" ];
          "json" = [ "serde" ];
          "pest" = [ "dep:pest" ];
          "pest_derive" = [ "dep:pest_derive" ];
          "redactions" = [ "pest" "pest_derive" "serde" ];
          "regex" = [ "dep:regex" ];
          "ron" = [ "dep:ron" "serde" ];
          "serde" = [ "dep:serde" ];
          "toml" = [ "dep:toml" "serde" ];
          "walkdir" = [ "dep:walkdir" ];
          "yaml" = [ "serde" ];
        };
        resolvedDefaultFeatures = [ "colors" "console" "default" "json" "pest" "pest_derive" "redactions" "serde" "yaml" ];
      };
      "instant" = rec {
        crateName = "instant";
        version = "0.1.13";
        edition = "2018";
        sha256 = "08h27kzvb5jw74mh0ajv0nv9ggwvgqm8ynjsn2sa9jsks4cjh970";
        authors = [
          "sebcrozet <developer@crozet.re>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "js-sys";
            packageId = "js-sys";
            optional = true;
            target = { target, features }: (pkgs.rust.lib.toRustTarget stdenv.hostPlatform == "asmjs-unknown-emscripten");
          }
          {
            name = "js-sys";
            packageId = "js-sys";
            optional = true;
            target = { target, features }: (pkgs.rust.lib.toRustTarget stdenv.hostPlatform == "wasm32-unknown-emscripten");
          }
          {
            name = "js-sys";
            packageId = "js-sys";
            optional = true;
            target = { target, features }: (pkgs.rust.lib.toRustTarget stdenv.hostPlatform == "wasm32-unknown-unknown");
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            rename = "wasm-bindgen_rs";
            optional = true;
            target = { target, features }: (pkgs.rust.lib.toRustTarget stdenv.hostPlatform == "asmjs-unknown-emscripten");
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            rename = "wasm-bindgen_rs";
            optional = true;
            target = { target, features }: (pkgs.rust.lib.toRustTarget stdenv.hostPlatform == "wasm32-unknown-emscripten");
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            rename = "wasm-bindgen_rs";
            optional = true;
            target = { target, features }: (pkgs.rust.lib.toRustTarget stdenv.hostPlatform == "wasm32-unknown-unknown");
          }
          {
            name = "web-sys";
            packageId = "web-sys";
            optional = true;
            target = { target, features }: (pkgs.rust.lib.toRustTarget stdenv.hostPlatform == "asmjs-unknown-emscripten");
            features = [ "Window" "Performance" "PerformanceTiming" ];
          }
          {
            name = "web-sys";
            packageId = "web-sys";
            optional = true;
            target = { target, features }: (pkgs.rust.lib.toRustTarget stdenv.hostPlatform == "wasm32-unknown-emscripten");
            features = [ "Window" "Performance" "PerformanceTiming" ];
          }
          {
            name = "web-sys";
            packageId = "web-sys";
            optional = true;
            target = { target, features }: (pkgs.rust.lib.toRustTarget stdenv.hostPlatform == "wasm32-unknown-unknown");
            features = [ "Window" "Performance" "PerformanceTiming" ];
          }
        ];
        features = {
          "js-sys" = [ "dep:js-sys" ];
          "stdweb" = [ "dep:stdweb" ];
          "wasm-bindgen" = [ "js-sys" "wasm-bindgen_rs" "web-sys" ];
          "wasm-bindgen_rs" = [ "dep:wasm-bindgen_rs" ];
          "web-sys" = [ "dep:web-sys" ];
        };
        resolvedDefaultFeatures = [ "js-sys" "wasm-bindgen" "wasm-bindgen_rs" "web-sys" ];
      };
      "integer-encoding" = rec {
        crateName = "integer-encoding";
        version = "3.0.4";
        edition = "2018";
        sha256 = "00ng7jmv6pqwqc8w1297f768bn0spwwicdr7hb40baax00r3gc4b";
        libName = "integer_encoding";
        authors = [
          "Lewin Bormann <lbo@spheniscida.de>"
        ];
        features = {
          "async-trait" = [ "dep:async-trait" ];
          "futures-util" = [ "dep:futures-util" ];
          "futures_async" = [ "futures-util" "async-trait" ];
          "tokio" = [ "dep:tokio" ];
          "tokio_async" = [ "tokio" "async-trait" ];
        };
      };
      "iota" = rec {
        crateName = "iota";
        version = "0.5.0-alpha";
        edition = "2021";
        crateBin = [
          {
            name = "iota";
            path = "src/main.rs";
            requiredFeatures = [ ];
          }
        ];
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/iota; }
          else ./crates/iota;
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "anemo";
            packageId = "anemo";
          }
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "async-recursion";
            packageId = "async-recursion";
          }
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "aws-config";
            packageId = "aws-config";
          }
          {
            name = "aws-sdk-kms";
            packageId = "aws-sdk-kms";
          }
          {
            name = "axum";
            packageId = "axum";
            usesDefaultFeatures = false;
            features = [ "tokio" "http1" "http2" "json" "matched-path" "original-uri" "form" "query" "ws" ];
          }
          {
            name = "bcs";
            packageId = "bcs";
          }
          {
            name = "bin-version";
            packageId = "bin-version";
          }
          {
            name = "bip32";
            packageId = "bip32";
          }
          {
            name = "camino";
            packageId = "camino";
          }
          {
            name = "clap";
            packageId = "clap";
            features = [ "derive" "wrap_help" ];
          }
          {
            name = "colored";
            packageId = "colored";
          }
          {
            name = "csv";
            packageId = "csv";
          }
          {
            name = "diesel";
            packageId = "diesel";
            optional = true;
            features = [ "chrono" "r2d2" "serde_json" "64-column-tables" "i-implement-a-third-party-backend-and-opt-into-breaking-changes" ];
          }
          {
            name = "fastcrypto";
            packageId = "fastcrypto";
          }
          {
            name = "fastcrypto-zkp";
            packageId = "fastcrypto-zkp";
            rename = "fastcrypto-zkp";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "http";
            packageId = "http 1.1.0";
          }
          {
            name = "im";
            packageId = "im";
          }
          {
            name = "inquire";
            packageId = "inquire";
          }
          {
            name = "iota-bridge";
            packageId = "iota-bridge";
          }
          {
            name = "iota-config";
            packageId = "iota-config";
          }
          {
            name = "iota-execution";
            packageId = "iota-execution";
          }
          {
            name = "iota-faucet";
            packageId = "iota-faucet";
          }
          {
            name = "iota-genesis-builder";
            packageId = "iota-genesis-builder";
          }
          {
            name = "iota-graphql-rpc";
            packageId = "iota-graphql-rpc";
            optional = true;
          }
          {
            name = "iota-indexer";
            packageId = "iota-indexer";
            optional = true;
          }
          {
            name = "iota-json";
            packageId = "iota-json";
          }
          {
            name = "iota-json-rpc-types";
            packageId = "iota-json-rpc-types";
          }
          {
            name = "iota-keys";
            packageId = "iota-keys";
          }
          {
            name = "iota-move";
            packageId = "iota-move";
            features = [ "all" ];
          }
          {
            name = "iota-move-build";
            packageId = "iota-move-build";
          }
          {
            name = "iota-package-management";
            packageId = "iota-package-management";
          }
          {
            name = "iota-protocol-config";
            packageId = "iota-protocol-config";
          }
          {
            name = "iota-replay";
            packageId = "iota-replay";
          }
          {
            name = "iota-sdk";
            packageId = "iota-sdk 0.5.0-alpha";
          }
          {
            name = "iota-source-validation";
            packageId = "iota-source-validation";
          }
          {
            name = "iota-swarm";
            packageId = "iota-swarm";
          }
          {
            name = "iota-swarm-config";
            packageId = "iota-swarm-config";
          }
          {
            name = "iota-transaction-builder";
            packageId = "iota-transaction-builder";
          }
          {
            name = "iota-types";
            packageId = "iota-types";
          }
          {
            name = "json_to_table";
            packageId = "json_to_table";
          }
          {
            name = "miette";
            packageId = "miette";
            features = [ "fancy" ];
          }
          {
            name = "move-analyzer";
            packageId = "move-analyzer";
          }
          {
            name = "move-binary-format";
            packageId = "move-binary-format";
          }
          {
            name = "move-bytecode-verifier-meter";
            packageId = "move-bytecode-verifier-meter";
          }
          {
            name = "move-command-line-common";
            packageId = "move-command-line-common";
          }
          {
            name = "move-core-types";
            packageId = "move-core-types";
          }
          {
            name = "move-package";
            packageId = "move-package";
          }
          {
            name = "move-vm-config";
            packageId = "move-vm-config";
          }
          {
            name = "move-vm-profiler";
            packageId = "move-vm-profiler";
          }
          {
            name = "msim";
            packageId = "msim";
            rename = "msim";
            target = { target, features }: (target."msim" or false);
          }
          {
            name = "num-bigint";
            packageId = "num-bigint 0.4.6";
          }
          {
            name = "prometheus";
            packageId = "prometheus";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "regex";
            packageId = "regex";
          }
          {
            name = "reqwest";
            packageId = "reqwest 0.12.7";
            usesDefaultFeatures = false;
            features = [ "http2" "json" "rustls-tls" ];
          }
          {
            name = "rustyline";
            packageId = "rustyline";
          }
          {
            name = "rustyline-derive";
            packageId = "rustyline-derive";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" "rc" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            features = [ "preserve_order" ];
          }
          {
            name = "serde_yaml";
            packageId = "serde_yaml";
          }
          {
            name = "shared-crypto";
            packageId = "shared-crypto";
          }
          {
            name = "shell-words";
            packageId = "shell-words";
          }
          {
            name = "signature";
            packageId = "signature 1.6.4";
          }
          {
            name = "tabled";
            packageId = "tabled";
          }
          {
            name = "tap";
            packageId = "tap";
          }
          {
            name = "telemetry-subscribers";
            packageId = "telemetry-subscribers";
          }
          {
            name = "tempfile";
            packageId = "tempfile";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "full" ];
          }
          {
            name = "tower";
            packageId = "tower 0.4.13";
            features = [ "full" "util" "timeout" "load-shed" "limit" ];
          }
          {
            name = "tower-http";
            packageId = "tower-http";
            features = [ "cors" "full" "trace" "set-header" "propagate-header" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "unescape";
            packageId = "unescape";
          }
          {
            name = "url";
            packageId = "url";
          }
          {
            name = "uuid";
            packageId = "uuid 1.10.0";
            features = [ "v4" "fast-rng" ];
          }
        ];
        devDependencies = [
          {
            name = "assert_cmd";
            packageId = "assert_cmd";
          }
          {
            name = "datatest-stable";
            packageId = "datatest-stable";
            target = {target, features}: (!(target."msim" or false));
          }
          {
            name = "expect-test";
            packageId = "expect-test";
          }
          {
            name = "fs_extra";
            packageId = "fs_extra";
          }
          {
            name = "insta";
            packageId = "insta";
            features = [ "redactions" "yaml" "json" ];
          }
          {
            name = "iota-macros";
            packageId = "iota-macros";
          }
          {
            name = "iota-metrics";
            packageId = "iota-metrics";
          }
          {
            name = "iota-simulator";
            packageId = "iota-simulator";
          }
          {
            name = "iota-test-transaction-builder";
            packageId = "iota-test-transaction-builder";
          }
          {
            name = "move-cli";
            packageId = "move-cli";
          }
          {
            name = "prometheus";
            packageId = "prometheus";
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            features = [ "preserve_order" ];
          }
          {
            name = "shlex";
            packageId = "shlex";
          }
          {
            name = "test-cluster";
            packageId = "test-cluster";
          }
        ];
        features = {
          "gas-profiler" = [ "iota-types/gas-profiler" "iota-execution/gas-profiler" ];
          "indexer" = [ "dep:diesel" "dep:iota-indexer" "dep:iota-graphql-rpc" ];
        };
        resolvedDefaultFeatures = [ "gas-profiler" "indexer" ];
      };
      "iota-adapter-latest" = rec {
        crateName = "iota-adapter-latest";
        version = "0.1.0";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./iota-execution/latest/iota-adapter; }
          else ./iota-execution/latest/iota-adapter;
        libName = "iota_adapter_latest";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
            features = [ "backtrace" ];
          }
          {
            name = "bcs";
            packageId = "bcs";
          }
          {
            name = "iota-macros";
            packageId = "iota-macros";
          }
          {
            name = "iota-metrics";
            packageId = "iota-metrics";
          }
          {
            name = "iota-move-natives-latest";
            packageId = "iota-move-natives-latest";
            rename = "iota-move-natives";
          }
          {
            name = "iota-protocol-config";
            packageId = "iota-protocol-config";
          }
          {
            name = "iota-types";
            packageId = "iota-types";
          }
          {
            name = "iota-verifier-latest";
            packageId = "iota-verifier-latest";
            rename = "iota-verifier";
          }
          {
            name = "leb128";
            packageId = "leb128";
          }
          {
            name = "move-binary-format";
            packageId = "move-binary-format";
          }
          {
            name = "move-bytecode-utils";
            packageId = "move-bytecode-utils";
          }
          {
            name = "move-bytecode-verifier";
            packageId = "move-bytecode-verifier";
          }
          {
            name = "move-bytecode-verifier-meter";
            packageId = "move-bytecode-verifier-meter";
          }
          {
            name = "move-core-types";
            packageId = "move-core-types";
          }
          {
            name = "move-vm-config";
            packageId = "move-vm-config";
          }
          {
            name = "move-vm-profiler";
            packageId = "move-vm-profiler";
          }
          {
            name = "move-vm-runtime";
            packageId = "move-vm-runtime";
          }
          {
            name = "move-vm-types";
            packageId = "move-vm-types";
          }
          {
            name = "parking_lot";
            packageId = "parking_lot 0.12.3";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" "rc" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
        ];
        features = {
          "gas-profiler" = [ "iota-types/gas-profiler" "move-vm-config/gas-profiler" "move-vm-profiler/gas-profiler" "move-vm-runtime/gas-profiler" "move-vm-types/gas-profiler" ];
        };
        resolvedDefaultFeatures = [ "gas-profiler" ];
      };
      "iota-adapter-transactional-tests" = rec {
        crateName = "iota-adapter-transactional-tests";
        version = "0.5.0-alpha";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/iota-adapter-transactional-tests; }
          else ./crates/iota-adapter-transactional-tests;
        libName = "iota_adapter_transactional_tests";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        devDependencies = [
          {
            name = "datatest-stable";
            packageId = "datatest-stable";
          }
          {
            name = "iota-transactional-test-runner";
            packageId = "iota-transactional-test-runner";
          }
        ];

      };
      "iota-adapter-v0" = rec {
        crateName = "iota-adapter-v0";
        version = "0.1.0";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./iota-execution/v0/iota-adapter; }
          else ./iota-execution/v0/iota-adapter;
        libName = "iota_adapter_v0";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
            features = [ "backtrace" ];
          }
          {
            name = "bcs";
            packageId = "bcs";
          }
          {
            name = "iota-macros";
            packageId = "iota-macros";
          }
          {
            name = "iota-metrics";
            packageId = "iota-metrics";
          }
          {
            name = "iota-move-natives-v0";
            packageId = "iota-move-natives-v0";
            rename = "iota-move-natives";
          }
          {
            name = "iota-protocol-config";
            packageId = "iota-protocol-config";
          }
          {
            name = "iota-types";
            packageId = "iota-types";
          }
          {
            name = "iota-verifier-v0";
            packageId = "iota-verifier-v0";
            rename = "iota-verifier";
          }
          {
            name = "leb128";
            packageId = "leb128";
          }
          {
            name = "move-binary-format";
            packageId = "move-binary-format";
          }
          {
            name = "move-bytecode-utils";
            packageId = "move-bytecode-utils";
          }
          {
            name = "move-bytecode-verifier-meter";
            packageId = "move-bytecode-verifier-meter";
          }
          {
            name = "move-bytecode-verifier-v0";
            packageId = "move-bytecode-verifier-v0";
            rename = "move-bytecode-verifier";
          }
          {
            name = "move-core-types";
            packageId = "move-core-types";
          }
          {
            name = "move-vm-config";
            packageId = "move-vm-config";
          }
          {
            name = "move-vm-profiler";
            packageId = "move-vm-profiler";
          }
          {
            name = "move-vm-runtime-v0";
            packageId = "move-vm-runtime-v0";
            rename = "move-vm-runtime";
          }
          {
            name = "move-vm-types";
            packageId = "move-vm-types";
          }
          {
            name = "parking_lot";
            packageId = "parking_lot 0.12.3";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" "rc" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
        ];
        features = {
          "gas-profiler" = [ "iota-types/gas-profiler" "move-vm-config/gas-profiler" "move-vm-profiler/gas-profiler" "move-vm-runtime/gas-profiler" "move-vm-types/gas-profiler" ];
        };
        resolvedDefaultFeatures = [ "gas-profiler" ];
      };
      "iota-analytics-indexer" = rec {
        crateName = "iota-analytics-indexer";
        version = "0.5.0-alpha";
        edition = "2021";
        crateBin = [
          {
            name = "iota-analytics-indexer";
            path = "src/main.rs";
            requiredFeatures = [ ];
          }
        ];
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/iota-analytics-indexer; }
          else ./crates/iota-analytics-indexer;
        libName = "iota_analytics_indexer";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "arrow";
            packageId = "arrow";
          }
          {
            name = "arrow-array";
            packageId = "arrow-array";
          }
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "axum";
            packageId = "axum";
            usesDefaultFeatures = false;
            features = [ "tokio" "http1" "http2" "json" "matched-path" "original-uri" "form" "query" "ws" ];
          }
          {
            name = "bcs";
            packageId = "bcs";
          }
          {
            name = "byteorder";
            packageId = "byteorder";
          }
          {
            name = "bytes";
            packageId = "bytes";
            features = [ "serde" ];
          }
          {
            name = "chrono";
            packageId = "chrono";
            features = [ "clock" "serde" ];
          }
          {
            name = "clap";
            packageId = "clap";
            features = [ "derive" "wrap_help" ];
          }
          {
            name = "csv";
            packageId = "csv";
          }
          {
            name = "eyre";
            packageId = "eyre";
          }
          {
            name = "fastcrypto";
            packageId = "fastcrypto";
            features = [ "copy_key" ];
          }
          {
            name = "gcp-bigquery-client";
            packageId = "gcp-bigquery-client";
          }
          {
            name = "iota-analytics-indexer-derive";
            packageId = "iota-analytics-indexer-derive";
          }
          {
            name = "iota-config";
            packageId = "iota-config";
          }
          {
            name = "iota-data-ingestion-core";
            packageId = "iota-data-ingestion-core";
          }
          {
            name = "iota-indexer";
            packageId = "iota-indexer";
          }
          {
            name = "iota-json-rpc-types";
            packageId = "iota-json-rpc-types";
          }
          {
            name = "iota-metrics";
            packageId = "iota-metrics";
          }
          {
            name = "iota-package-resolver";
            packageId = "iota-package-resolver";
          }
          {
            name = "iota-rest-api";
            packageId = "iota-rest-api";
          }
          {
            name = "iota-storage";
            packageId = "iota-storage";
          }
          {
            name = "iota-types";
            packageId = "iota-types";
          }
          {
            name = "move-binary-format";
            packageId = "move-binary-format";
          }
          {
            name = "move-bytecode-utils";
            packageId = "move-bytecode-utils";
          }
          {
            name = "move-core-types";
            packageId = "move-core-types";
          }
          {
            name = "num_enum";
            packageId = "num_enum";
          }
          {
            name = "object_store";
            packageId = "object_store 0.10.2";
            features = [ "aws" "gcp" "azure" "http" ];
          }
          {
            name = "parquet";
            packageId = "parquet";
          }
          {
            name = "prometheus";
            packageId = "prometheus";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" "rc" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            features = [ "preserve_order" ];
          }
          {
            name = "snowflake-api";
            packageId = "snowflake-api";
          }
          {
            name = "strum";
            packageId = "strum 0.26.3";
            features = [ "derive" ];
          }
          {
            name = "tap";
            packageId = "tap";
          }
          {
            name = "telemetry-subscribers";
            packageId = "telemetry-subscribers";
          }
          {
            name = "tempfile";
            packageId = "tempfile";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "full" ];
          }
          {
            name = "tokio-stream";
            packageId = "tokio-stream";
            features = [ "sync" "net" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "typed-store";
            packageId = "typed-store";
          }
          {
            name = "url";
            packageId = "url";
          }
        ];
        devDependencies = [
          {
            name = "simulacrum";
            packageId = "simulacrum";
          }
        ];

      };
      "iota-analytics-indexer-derive" = rec {
        crateName = "iota-analytics-indexer-derive";
        version = "0.5.0-alpha";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/iota-analytics-indexer-derive; }
          else ./crates/iota-analytics-indexer-derive;
        procMacro = true;
        libName = "iota_analytics_indexer_derive";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.86";
          }
          {
            name = "quote";
            packageId = "quote 1.0.37";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            features = [ "full" "derive" "extra-traits" ];
          }
        ];

      };
      "iota-archival" = rec {
        crateName = "iota-archival";
        version = "0.5.0-alpha";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/iota-archival; }
          else ./crates/iota-archival;
        libName = "iota_archival";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "byteorder";
            packageId = "byteorder";
          }
          {
            name = "bytes";
            packageId = "bytes";
            features = [ "serde" ];
          }
          {
            name = "fastcrypto";
            packageId = "fastcrypto";
            features = [ "copy_key" ];
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "indicatif";
            packageId = "indicatif";
          }
          {
            name = "iota-config";
            packageId = "iota-config";
          }
          {
            name = "iota-simulator";
            packageId = "iota-simulator";
            target = { target, features }: (target."msim" or false);
          }
          {
            name = "iota-storage";
            packageId = "iota-storage";
          }
          {
            name = "iota-types";
            packageId = "iota-types";
            features = [ "test-utils" ];
          }
          {
            name = "num_enum";
            packageId = "num_enum";
          }
          {
            name = "object_store";
            packageId = "object_store 0.10.2";
            features = [ "aws" "gcp" "azure" "http" ];
          }
          {
            name = "prometheus";
            packageId = "prometheus";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" "rc" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "full" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
        ];
        devDependencies = [
          {
            name = "ed25519-consensus";
            packageId = "ed25519-consensus";
            features = [ "serde" ];
          }
          {
            name = "fastcrypto";
            packageId = "fastcrypto";
          }
          {
            name = "iota-macros";
            packageId = "iota-macros";
          }
          {
            name = "iota-swarm-config";
            packageId = "iota-swarm-config";
          }
          {
            name = "more-asserts";
            packageId = "more-asserts";
          }
          {
            name = "move-binary-format";
            packageId = "move-binary-format";
          }
          {
            name = "move-core-types";
            packageId = "move-core-types";
          }
          {
            name = "move-package";
            packageId = "move-package";
          }
          {
            name = "tempfile";
            packageId = "tempfile";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "test-util" ];
          }
        ];

      };
      "iota-authority-aggregation" = rec {
        crateName = "iota-authority-aggregation";
        version = "0.5.0-alpha";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/iota-authority-aggregation; }
          else ./crates/iota-authority-aggregation;
        libName = "iota_authority_aggregation";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "iota-metrics";
            packageId = "iota-metrics";
          }
          {
            name = "iota-types";
            packageId = "iota-types";
          }
          {
            name = "tokio";
            packageId = "tokio";
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
        ];

      };
      "iota-aws-orchestrator" = rec {
        crateName = "iota-aws-orchestrator";
        version = "0.5.0-alpha";
        edition = "2021";
        crateBin = [
          {
            name = "iota-aws-orchestrator";
            path = "src/main.rs";
            requiredFeatures = [ ];
          }
        ];
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/iota-aws-orchestrator; }
          else ./crates/iota-aws-orchestrator;
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "aws-config";
            packageId = "aws-config";
          }
          {
            name = "aws-runtime";
            packageId = "aws-runtime";
          }
          {
            name = "aws-sdk-ec2";
            packageId = "aws-sdk-ec2";
          }
          {
            name = "aws-smithy-http";
            packageId = "aws-smithy-http";
          }
          {
            name = "aws-smithy-runtime-api";
            packageId = "aws-smithy-runtime-api";
          }
          {
            name = "clap";
            packageId = "clap";
            features = [ "derive" "wrap_help" ];
          }
          {
            name = "color-eyre";
            packageId = "color-eyre";
          }
          {
            name = "crossterm";
            packageId = "crossterm 0.25.0";
          }
          {
            name = "eyre";
            packageId = "eyre";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "iota-config";
            packageId = "iota-config";
          }
          {
            name = "iota-metrics";
            packageId = "iota-metrics";
          }
          {
            name = "iota-swarm-config";
            packageId = "iota-swarm-config";
          }
          {
            name = "iota-types";
            packageId = "iota-types";
          }
          {
            name = "prettytable-rs";
            packageId = "prettytable-rs";
          }
          {
            name = "prometheus-parse";
            packageId = "prometheus-parse";
          }
          {
            name = "reqwest";
            packageId = "reqwest 0.12.7";
            usesDefaultFeatures = false;
            features = [ "http2" "json" "rustls-tls" ];
          }
          {
            name = "russh";
            packageId = "russh";
          }
          {
            name = "russh-keys";
            packageId = "russh-keys";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" "rc" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            features = [ "preserve_order" ];
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "full" ];
          }
        ];
        devDependencies = [
          {
            name = "tempfile";
            packageId = "tempfile";
          }
        ];

      };
      "iota-benchmark" = rec {
        crateName = "iota-benchmark";
        version = "0.5.0-alpha";
        edition = "2021";
        crateBin = [
          {
            name = "stress";
            path = "src/bin/stress.rs";
            requiredFeatures = [ ];
          }
        ];
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/iota-benchmark; }
          else ./crates/iota-benchmark;
        libName = "iota_benchmark";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
            features = [ "backtrace" ];
          }
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "bcs";
            packageId = "bcs";
          }
          {
            name = "clap";
            packageId = "clap";
            features = [ "derive" "wrap_help" ];
          }
          {
            name = "comfy-table";
            packageId = "comfy-table";
          }
          {
            name = "duration-str";
            packageId = "duration-str";
          }
          {
            name = "fastcrypto-zkp";
            packageId = "fastcrypto-zkp";
            rename = "fastcrypto-zkp";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "hdrhistogram";
            packageId = "hdrhistogram";
          }
          {
            name = "indicatif";
            packageId = "indicatif";
          }
          {
            name = "iota-config";
            packageId = "iota-config";
          }
          {
            name = "iota-core";
            packageId = "iota-core";
          }
          {
            name = "iota-framework";
            packageId = "iota-framework";
            target = { target, features }: (target."msim" or false);
          }
          {
            name = "iota-framework-snapshot";
            packageId = "iota-framework-snapshot";
            target = { target, features }: (target."msim" or false);
          }
          {
            name = "iota-json-rpc-types";
            packageId = "iota-json-rpc-types";
          }
          {
            name = "iota-keys";
            packageId = "iota-keys";
          }
          {
            name = "iota-macros";
            packageId = "iota-macros";
            target = { target, features }: (target."msim" or false);
          }
          {
            name = "iota-metrics";
            packageId = "iota-metrics";
          }
          {
            name = "iota-network";
            packageId = "iota-network";
          }
          {
            name = "iota-protocol-config";
            packageId = "iota-protocol-config";
          }
          {
            name = "iota-sdk";
            packageId = "iota-sdk 0.5.0-alpha";
          }
          {
            name = "iota-simulator";
            packageId = "iota-simulator";
            target = { target, features }: (target."msim" or false);
          }
          {
            name = "iota-storage";
            packageId = "iota-storage";
          }
          {
            name = "iota-surfer";
            packageId = "iota-surfer";
            target = { target, features }: (target."msim" or false);
          }
          {
            name = "iota-swarm-config";
            packageId = "iota-swarm-config";
          }
          {
            name = "iota-test-transaction-builder";
            packageId = "iota-test-transaction-builder";
          }
          {
            name = "iota-types";
            packageId = "iota-types";
          }
          {
            name = "itertools";
            packageId = "itertools 0.13.0";
          }
          {
            name = "move-core-types";
            packageId = "move-core-types";
          }
          {
            name = "prometheus";
            packageId = "prometheus";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "regex";
            packageId = "regex";
          }
          {
            name = "roaring";
            packageId = "roaring";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" "rc" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            features = [ "preserve_order" ];
          }
          {
            name = "strum";
            packageId = "strum 0.26.3";
            features = [ "derive" ];
          }
          {
            name = "strum_macros";
            packageId = "strum_macros 0.26.4";
          }
          {
            name = "sysinfo";
            packageId = "sysinfo";
          }
          {
            name = "telemetry-subscribers";
            packageId = "telemetry-subscribers";
          }
          {
            name = "test-cluster";
            packageId = "test-cluster";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "full" ];
          }
          {
            name = "tokio-util";
            packageId = "tokio-util 0.7.12";
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "typed-store";
            packageId = "typed-store";
            target = { target, features }: (target."msim" or false);
          }
        ];

      };
      "iota-bridge" = rec {
        crateName = "iota-bridge";
        version = "0.5.0-alpha";
        edition = "2021";
        crateBin = [
          {
            name = "iota-bridge";
            path = "src/main.rs";
            requiredFeatures = [ ];
          }
        ];
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/iota-bridge; }
          else ./crates/iota-bridge;
        libName = "iota_bridge";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "arc-swap";
            packageId = "arc-swap";
            features = [ "serde" ];
          }
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "axum";
            packageId = "axum";
            usesDefaultFeatures = false;
            features = [ "tokio" "http1" "http2" "json" "matched-path" "original-uri" "form" "query" "ws" ];
          }
          {
            name = "backoff";
            packageId = "backoff";
            features = [ "futures" "futures-core" "pin-project-lite" "tokio" "tokio_1" ];
          }
          {
            name = "bcs";
            packageId = "bcs";
          }
          {
            name = "bin-version";
            packageId = "bin-version";
          }
          {
            name = "clap";
            packageId = "clap";
            features = [ "derive" "wrap_help" ];
          }
          {
            name = "enum_dispatch";
            packageId = "enum_dispatch";
          }
          {
            name = "ethers";
            packageId = "ethers";
          }
          {
            name = "eyre";
            packageId = "eyre";
          }
          {
            name = "fastcrypto";
            packageId = "fastcrypto";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "iota-authority-aggregation";
            packageId = "iota-authority-aggregation";
          }
          {
            name = "iota-config";
            packageId = "iota-config";
          }
          {
            name = "iota-json-rpc-api";
            packageId = "iota-json-rpc-api";
          }
          {
            name = "iota-json-rpc-types";
            packageId = "iota-json-rpc-types";
          }
          {
            name = "iota-keys";
            packageId = "iota-keys";
          }
          {
            name = "iota-metrics";
            packageId = "iota-metrics";
          }
          {
            name = "iota-sdk";
            packageId = "iota-sdk 0.5.0-alpha";
          }
          {
            name = "iota-test-transaction-builder";
            packageId = "iota-test-transaction-builder";
          }
          {
            name = "iota-types";
            packageId = "iota-types";
          }
          {
            name = "lru";
            packageId = "lru 0.12.4";
          }
          {
            name = "move-core-types";
            packageId = "move-core-types";
          }
          {
            name = "num_enum";
            packageId = "num_enum";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "prometheus";
            packageId = "prometheus";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "reqwest";
            packageId = "reqwest 0.12.7";
            usesDefaultFeatures = false;
            features = [ "http2" "json" "rustls-tls" ];
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" "rc" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            features = [ "preserve_order" ];
          }
          {
            name = "serde_with";
            packageId = "serde_with";
          }
          {
            name = "shared-crypto";
            packageId = "shared-crypto";
          }
          {
            name = "tap";
            packageId = "tap";
          }
          {
            name = "telemetry-subscribers";
            packageId = "telemetry-subscribers";
          }
          {
            name = "tempfile";
            packageId = "tempfile";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "full" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "typed-store";
            packageId = "typed-store";
          }
          {
            name = "url";
            packageId = "url";
          }
        ];
        devDependencies = [
          {
            name = "hex-literal";
            packageId = "hex-literal 0.3.4";
          }
          {
            name = "iota-config";
            packageId = "iota-config";
          }
          {
            name = "iota-json-rpc-types";
            packageId = "iota-json-rpc-types";
            features = [ "test-utils" ];
          }
          {
            name = "iota-test-transaction-builder";
            packageId = "iota-test-transaction-builder";
          }
          {
            name = "iota-types";
            packageId = "iota-types";
            features = [ "test-utils" ];
          }
          {
            name = "maplit";
            packageId = "maplit";
          }
          {
            name = "test-cluster";
            packageId = "test-cluster";
          }
        ];

      };
      "iota-bridge-cli" = rec {
        crateName = "iota-bridge-cli";
        version = "0.5.0-alpha";
        edition = "2021";
        crateBin = [
          {
            name = "iota-bridge-cli";
            path = "src/main.rs";
            requiredFeatures = [ ];
          }
        ];
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/iota-bridge-cli; }
          else ./crates/iota-bridge-cli;
        libName = "iota_bridge_cli";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "clap";
            packageId = "clap";
            features = [ "derive" "wrap_help" ];
          }
          {
            name = "ethers";
            packageId = "ethers";
          }
          {
            name = "fastcrypto";
            packageId = "fastcrypto";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "iota-bridge";
            packageId = "iota-bridge";
          }
          {
            name = "iota-config";
            packageId = "iota-config";
          }
          {
            name = "iota-json-rpc-types";
            packageId = "iota-json-rpc-types";
          }
          {
            name = "iota-keys";
            packageId = "iota-keys";
          }
          {
            name = "iota-sdk";
            packageId = "iota-sdk 0.5.0-alpha";
          }
          {
            name = "iota-types";
            packageId = "iota-types";
          }
          {
            name = "move-core-types";
            packageId = "move-core-types";
          }
          {
            name = "reqwest";
            packageId = "reqwest 0.12.7";
            usesDefaultFeatures = false;
            features = [ "http2" "json" "rustls-tls" ];
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" "rc" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            features = [ "preserve_order" ];
          }
          {
            name = "serde_with";
            packageId = "serde_with";
          }
          {
            name = "shared-crypto";
            packageId = "shared-crypto";
          }
          {
            name = "telemetry-subscribers";
            packageId = "telemetry-subscribers";
          }
          {
            name = "tokio";
            packageId = "tokio";
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
        ];

      };
      "iota-bridge-indexer" = rec {
        crateName = "iota-bridge-indexer";
        version = "0.5.0-alpha";
        edition = "2021";
        crateBin = [
          {
            name = "bridge-indexer";
            path = "src/main.rs";
            requiredFeatures = [ ];
          }
        ];
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/iota-bridge-indexer; }
          else ./crates/iota-bridge-indexer;
        libName = "iota_bridge_indexer";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "backoff";
            packageId = "backoff";
            features = [ "futures" "futures-core" "pin-project-lite" "tokio" "tokio_1" ];
          }
          {
            name = "bcs";
            packageId = "bcs";
          }
          {
            name = "clap";
            packageId = "clap";
            features = [ "derive" "wrap_help" ];
          }
          {
            name = "diesel";
            packageId = "diesel";
            features = [ "chrono" "r2d2" "serde_json" "64-column-tables" "i-implement-a-third-party-backend-and-opt-into-breaking-changes" "postgres" "r2d2" "serde_json" ];
          }
          {
            name = "ethers";
            packageId = "ethers";
            features = [ "rustls" "ws" ];
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "iota-bridge";
            packageId = "iota-bridge";
          }
          {
            name = "iota-config";
            packageId = "iota-config";
          }
          {
            name = "iota-data-ingestion-core";
            packageId = "iota-data-ingestion-core";
          }
          {
            name = "iota-indexer-builder";
            packageId = "iota-indexer-builder";
          }
          {
            name = "iota-json-rpc-types";
            packageId = "iota-json-rpc-types";
          }
          {
            name = "iota-metrics";
            packageId = "iota-metrics";
          }
          {
            name = "iota-sdk";
            packageId = "iota-sdk 0.5.0-alpha";
          }
          {
            name = "iota-types";
            packageId = "iota-types";
          }
          {
            name = "prometheus";
            packageId = "prometheus";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" "rc" ];
          }
          {
            name = "serde_yaml";
            packageId = "serde_yaml";
          }
          {
            name = "tap";
            packageId = "tap";
          }
          {
            name = "telemetry-subscribers";
            packageId = "telemetry-subscribers";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "full" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
        ];
        devDependencies = [
          {
            name = "iota-test-transaction-builder";
            packageId = "iota-test-transaction-builder";
          }
          {
            name = "iota-types";
            packageId = "iota-types";
            features = [ "test-utils" ];
          }
        ];

      };
      "iota-cluster-test" = rec {
        crateName = "iota-cluster-test";
        version = "0.5.0-alpha";
        edition = "2021";
        crateBin = [
          {
            name = "iota-cluster-test";
            path = "src/main.rs";
            requiredFeatures = [ ];
          }
        ];
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/iota-cluster-test; }
          else ./crates/iota-cluster-test;
        libName = "iota_cluster_test";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
            features = [ "backtrace" ];
          }
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "clap";
            packageId = "clap";
            features = [ "derive" "wrap_help" ];
          }
          {
            name = "derivative";
            packageId = "derivative";
          }
          {
            name = "diesel";
            packageId = "diesel";
            features = [ "chrono" "r2d2" "serde_json" "64-column-tables" "i-implement-a-third-party-backend-and-opt-into-breaking-changes" ];
          }
          {
            name = "fastcrypto";
            packageId = "fastcrypto";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "iota-config";
            packageId = "iota-config";
          }
          {
            name = "iota-core";
            packageId = "iota-core";
          }
          {
            name = "iota-faucet";
            packageId = "iota-faucet";
          }
          {
            name = "iota-genesis-builder";
            packageId = "iota-genesis-builder";
          }
          {
            name = "iota-graphql-rpc";
            packageId = "iota-graphql-rpc";
          }
          {
            name = "iota-indexer";
            packageId = "iota-indexer";
          }
          {
            name = "iota-json";
            packageId = "iota-json";
          }
          {
            name = "iota-json-rpc-types";
            packageId = "iota-json-rpc-types";
          }
          {
            name = "iota-keys";
            packageId = "iota-keys";
          }
          {
            name = "iota-sdk";
            packageId = "iota-sdk 0.5.0-alpha";
          }
          {
            name = "iota-swarm";
            packageId = "iota-swarm";
          }
          {
            name = "iota-swarm-config";
            packageId = "iota-swarm-config";
          }
          {
            name = "iota-test-transaction-builder";
            packageId = "iota-test-transaction-builder";
          }
          {
            name = "iota-types";
            packageId = "iota-types";
          }
          {
            name = "jsonrpsee";
            packageId = "jsonrpsee";
            features = [ "server" "macros" "client" "ws-client" "http-client" ];
          }
          {
            name = "move-core-types";
            packageId = "move-core-types";
          }
          {
            name = "prometheus";
            packageId = "prometheus";
          }
          {
            name = "regex";
            packageId = "regex";
          }
          {
            name = "reqwest";
            packageId = "reqwest 0.12.7";
            usesDefaultFeatures = false;
            features = [ "http2" "json" "rustls-tls" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            features = [ "preserve_order" ];
          }
          {
            name = "shared-crypto";
            packageId = "shared-crypto";
          }
          {
            name = "telemetry-subscribers";
            packageId = "telemetry-subscribers";
          }
          {
            name = "tempfile";
            packageId = "tempfile";
          }
          {
            name = "test-cluster";
            packageId = "test-cluster";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "full" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "uuid";
            packageId = "uuid 1.10.0";
            features = [ "v4" "fast-rng" ];
          }
        ];
        features = {
          "default" = [ "postgres-feature" ];
          "postgres-feature" = [ "diesel/postgres" "diesel/postgres_backend" ];
        };
        resolvedDefaultFeatures = [ "default" "pg_integration" "postgres-feature" ];
      };
      "iota-common" = rec {
        crateName = "iota-common";
        version = "0.5.0-alpha";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/iota-common; }
          else ./crates/iota-common;
        libName = "iota_common";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "parking_lot";
            packageId = "parking_lot 0.12.3";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "sync" ];
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "test-util" "macros" ];
          }
        ];

      };
      "iota-config" = rec {
        crateName = "iota-config";
        version = "0.5.0-alpha";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/iota-config; }
          else ./crates/iota-config;
        libName = "iota_config";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "anemo";
            packageId = "anemo";
          }
          {
            name = "anyhow";
            packageId = "anyhow";
            features = [ "backtrace" ];
          }
          {
            name = "bcs";
            packageId = "bcs";
          }
          {
            name = "clap";
            packageId = "clap";
            features = [ "derive" "wrap_help" ];
          }
          {
            name = "consensus-config";
            packageId = "consensus-config";
          }
          {
            name = "csv";
            packageId = "csv";
          }
          {
            name = "dirs";
            packageId = "dirs 5.0.1";
          }
          {
            name = "fastcrypto";
            packageId = "fastcrypto";
          }
          {
            name = "iota-genesis-common";
            packageId = "iota-genesis-common";
          }
          {
            name = "iota-keys";
            packageId = "iota-keys";
          }
          {
            name = "iota-protocol-config";
            packageId = "iota-protocol-config";
          }
          {
            name = "iota-types";
            packageId = "iota-types";
          }
          {
            name = "object_store";
            packageId = "object_store 0.10.2";
            features = [ "aws" "gcp" "azure" "http" ];
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "prometheus";
            packageId = "prometheus";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "reqwest";
            packageId = "reqwest 0.12.7";
            usesDefaultFeatures = false;
            features = [ "http2" "json" "rustls-tls" ];
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" "rc" "derive" "rc" ];
          }
          {
            name = "serde_with";
            packageId = "serde_with";
          }
          {
            name = "serde_yaml";
            packageId = "serde_yaml";
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
        ];
        devDependencies = [
          {
            name = "iota-types";
            packageId = "iota-types";
            features = [ "test-utils" ];
          }
        ];

      };
      "iota-core" = rec {
        crateName = "iota-core";
        version = "0.5.0-alpha";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/iota-core; }
          else ./crates/iota-core;
        libName = "iota_core";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "anemo";
            packageId = "anemo";
          }
          {
            name = "anyhow";
            packageId = "anyhow";
            features = [ "backtrace" ];
          }
          {
            name = "arc-swap";
            packageId = "arc-swap";
            features = [ "serde" ];
          }
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "axum";
            packageId = "axum";
            usesDefaultFeatures = false;
            features = [ "tokio" "http1" "http2" "json" "matched-path" "original-uri" "form" "query" "ws" ];
          }
          {
            name = "bcs";
            packageId = "bcs";
          }
          {
            name = "bytes";
            packageId = "bytes";
            features = [ "serde" ];
          }
          {
            name = "chrono";
            packageId = "chrono";
            features = [ "clock" "serde" ];
          }
          {
            name = "consensus-config";
            packageId = "consensus-config";
          }
          {
            name = "consensus-core";
            packageId = "consensus-core";
          }
          {
            name = "count-min-sketch";
            packageId = "count-min-sketch";
          }
          {
            name = "dashmap";
            packageId = "dashmap";
          }
          {
            name = "diffy";
            packageId = "diffy";
            usesDefaultFeatures = false;
          }
          {
            name = "either";
            packageId = "either";
          }
          {
            name = "enum_dispatch";
            packageId = "enum_dispatch";
          }
          {
            name = "eyre";
            packageId = "eyre";
          }
          {
            name = "fastcrypto";
            packageId = "fastcrypto";
          }
          {
            name = "fastcrypto-tbls";
            packageId = "fastcrypto-tbls";
          }
          {
            name = "fastcrypto-zkp";
            packageId = "fastcrypto-zkp";
            rename = "fastcrypto-zkp";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "im";
            packageId = "im";
          }
          {
            name = "indexmap";
            packageId = "indexmap 2.5.0";
            features = [ "serde" ];
          }
          {
            name = "iota-archival";
            packageId = "iota-archival";
          }
          {
            name = "iota-authority-aggregation";
            packageId = "iota-authority-aggregation";
          }
          {
            name = "iota-common";
            packageId = "iota-common";
          }
          {
            name = "iota-config";
            packageId = "iota-config";
          }
          {
            name = "iota-execution";
            packageId = "iota-execution";
          }
          {
            name = "iota-framework";
            packageId = "iota-framework";
          }
          {
            name = "iota-genesis-builder";
            packageId = "iota-genesis-builder";
          }
          {
            name = "iota-json-rpc-types";
            packageId = "iota-json-rpc-types";
          }
          {
            name = "iota-macros";
            packageId = "iota-macros";
          }
          {
            name = "iota-metrics";
            packageId = "iota-metrics";
          }
          {
            name = "iota-move-build";
            packageId = "iota-move-build";
          }
          {
            name = "iota-network";
            packageId = "iota-network";
          }
          {
            name = "iota-network-stack";
            packageId = "iota-network-stack";
          }
          {
            name = "iota-protocol-config";
            packageId = "iota-protocol-config";
          }
          {
            name = "iota-simulator";
            packageId = "iota-simulator";
          }
          {
            name = "iota-storage";
            packageId = "iota-storage";
          }
          {
            name = "iota-swarm-config";
            packageId = "iota-swarm-config";
          }
          {
            name = "iota-transaction-checks";
            packageId = "iota-transaction-checks";
          }
          {
            name = "iota-types";
            packageId = "iota-types";
          }
          {
            name = "itertools";
            packageId = "itertools 0.13.0";
          }
          {
            name = "jsonrpsee";
            packageId = "jsonrpsee";
            features = [ "server" "macros" "client" "ws-client" "http-client" ];
          }
          {
            name = "lru";
            packageId = "lru 0.12.4";
          }
          {
            name = "mockall";
            packageId = "mockall";
          }
          {
            name = "moka";
            packageId = "moka";
            usesDefaultFeatures = false;
            target = { target, features }: (target."msim" or false);
            features = [ "sync" "atomic64" ];
          }
          {
            name = "moka";
            packageId = "moka";
            target = { target, features }: (!(target."msim" or false));
            features = [ "sync" ];
          }
          {
            name = "move-binary-format";
            packageId = "move-binary-format";
          }
          {
            name = "move-bytecode-utils";
            packageId = "move-bytecode-utils";
          }
          {
            name = "move-core-types";
            packageId = "move-core-types";
          }
          {
            name = "move-package";
            packageId = "move-package";
          }
          {
            name = "move-symbol-pool";
            packageId = "move-symbol-pool";
          }
          {
            name = "nonempty";
            packageId = "nonempty";
          }
          {
            name = "num_cpus";
            packageId = "num_cpus";
          }
          {
            name = "object_store";
            packageId = "object_store 0.10.2";
            features = [ "aws" "gcp" "azure" "http" ];
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "parking_lot";
            packageId = "parking_lot 0.12.3";
          }
          {
            name = "prometheus";
            packageId = "prometheus";
          }
          {
            name = "quinn-proto";
            packageId = "quinn-proto";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "rayon";
            packageId = "rayon";
          }
          {
            name = "reqwest";
            packageId = "reqwest 0.12.7";
            usesDefaultFeatures = false;
            features = [ "http2" "json" "rustls-tls" ];
          }
          {
            name = "roaring";
            packageId = "roaring";
          }
          {
            name = "scopeguard";
            packageId = "scopeguard";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" "rc" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            features = [ "preserve_order" ];
          }
          {
            name = "serde_with";
            packageId = "serde_with";
          }
          {
            name = "shared-crypto";
            packageId = "shared-crypto";
          }
          {
            name = "signature";
            packageId = "signature 1.6.4";
          }
          {
            name = "static_assertions";
            packageId = "static_assertions";
          }
          {
            name = "tap";
            packageId = "tap";
          }
          {
            name = "telemetry-subscribers";
            packageId = "telemetry-subscribers";
          }
          {
            name = "tempfile";
            packageId = "tempfile";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "full" "tracing" "test-util" ];
          }
          {
            name = "tokio-stream";
            packageId = "tokio-stream";
            features = [ "sync" "net" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "twox-hash";
            packageId = "twox-hash";
          }
          {
            name = "typed-store";
            packageId = "typed-store";
          }
          {
            name = "typed-store-derive";
            packageId = "typed-store-derive";
          }
          {
            name = "zeroize";
            packageId = "zeroize";
          }
        ];
        devDependencies = [
          {
            name = "clap";
            packageId = "clap";
            features = [ "derive" "wrap_help" ];
          }
          {
            name = "criterion";
            packageId = "criterion";
            features = [ "async" "async_tokio" "html_reports" ];
          }
          {
            name = "expect-test";
            packageId = "expect-test";
          }
          {
            name = "fs_extra";
            packageId = "fs_extra";
          }
          {
            name = "iota-macros";
            packageId = "iota-macros";
            target = {target, features}: (!("msvc" == target."env" or null));
          }
          {
            name = "iota-move";
            packageId = "iota-move";
          }
          {
            name = "iota-protocol-config";
            packageId = "iota-protocol-config";
            target = {target, features}: (!("msvc" == target."env" or null));
          }
          {
            name = "iota-test-transaction-builder";
            packageId = "iota-test-transaction-builder";
          }
          {
            name = "iota-types";
            packageId = "iota-types";
            features = [ "test-utils" ];
          }
          {
            name = "more-asserts";
            packageId = "more-asserts";
          }
          {
            name = "move-symbol-pool";
            packageId = "move-symbol-pool";
          }
          {
            name = "num-bigint";
            packageId = "num-bigint 0.4.6";
          }
          {
            name = "pprof";
            packageId = "pprof";
            target = {target, features}: (!("msvc" == target."env" or null));
            features = [ "cpp" "frame-pointer" ];
          }
          {
            name = "pretty_assertions";
            packageId = "pretty_assertions";
          }
          {
            name = "rstest";
            packageId = "rstest";
          }
          {
            name = "serde-reflection";
            packageId = "serde-reflection";
          }
          {
            name = "serde_yaml";
            packageId = "serde_yaml";
          }
          {
            name = "test-cluster";
            packageId = "test-cluster";
            target = {target, features}: (target."msim" or false);
          }
          {
            name = "test-fuzz";
            packageId = "test-fuzz";
            target = {target, features}: (!("msvc" == target."env" or null));
          }
          {
            name = "tower";
            packageId = "tower 0.4.13";
            features = [ "full" "util" "timeout" "load-shed" "limit" ];
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "test-utils" ];
      };
      "iota-cost" = rec {
        crateName = "iota-cost";
        version = "0.5.0-alpha";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/iota-cost; }
          else ./crates/iota-cost;
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        devDependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "bcs";
            packageId = "bcs";
          }
          {
            name = "insta";
            packageId = "insta";
            features = [ "redactions" "yaml" "json" ];
          }
          {
            name = "iota-config";
            packageId = "iota-config";
          }
          {
            name = "iota-json-rpc-types";
            packageId = "iota-json-rpc-types";
          }
          {
            name = "iota-move-build";
            packageId = "iota-move-build";
          }
          {
            name = "iota-swarm-config";
            packageId = "iota-swarm-config";
          }
          {
            name = "iota-test-transaction-builder";
            packageId = "iota-test-transaction-builder";
          }
          {
            name = "iota-types";
            packageId = "iota-types";
          }
          {
            name = "move-disassembler";
            packageId = "move-disassembler";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" "rc" ];
          }
          {
            name = "strum";
            packageId = "strum 0.26.3";
            features = [ "derive" ];
          }
          {
            name = "test-cluster";
            packageId = "test-cluster";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "full" ];
          }
        ];

      };
      "iota-crypto" = rec {
        crateName = "iota-crypto";
        version = "0.23.2";
        edition = "2021";
        sha256 = "0nq6vg366mq5q65bl6q9rdlnnhggya1w0wz14n4df4698jw8v8wq";
        libName = "crypto";
        authors = [
          "IOTA Stiftung"
        ];
        dependencies = [
          {
            name = "aead";
            packageId = "aead";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "aes";
            packageId = "aes";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "aes-gcm";
            packageId = "aes-gcm";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "aes" ];
          }
          {
            name = "base64";
            packageId = "base64 0.21.7";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "blake2";
            packageId = "blake2";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "chacha20poly1305";
            packageId = "chacha20poly1305";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "cipher";
            packageId = "cipher";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "block-padding" ];
          }
          {
            name = "curve25519-dalek";
            packageId = "curve25519-dalek";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "digest";
            packageId = "digest 0.10.7";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "ed25519-zebra";
            packageId = "ed25519-zebra";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "generic-array";
            packageId = "generic-array";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "getrandom";
            packageId = "getrandom 0.2.15";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "js" ];
          }
          {
            name = "hkdf";
            packageId = "hkdf";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "hmac";
            packageId = "hmac";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "iterator-sorted";
            packageId = "iterator-sorted 0.1.0";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "k256";
            packageId = "k256";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "ecdsa" ];
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "pbkdf2";
            packageId = "pbkdf2 0.12.2";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "scrypt";
            packageId = "scrypt 0.11.0";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "derive" "alloc" ];
          }
          {
            name = "sha2";
            packageId = "sha2 0.10.8";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "tiny-keccak";
            packageId = "tiny-keccak";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "keccak" ];
          }
          {
            name = "unicode-normalization";
            packageId = "unicode-normalization";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "x25519-dalek";
            packageId = "x25519-dalek";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "static_secrets" "zeroize" ];
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "zeroize_derive" ];
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "rand";
            packageId = "rand 0.8.5";
            usesDefaultFeatures = false;
            features = [ "std" "std_rng" "min_const_gen" ];
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
        ];
        features = {
          "aead" = [ "dep:aead" ];
          "aes" = [ "aes-cbc" "aes-gcm" "aes-kw" ];
          "aes-cbc" = [ "dep:aes" "cipher" "dep:cbc" "hmac" "sha" "subtle" "zeroize" ];
          "aes-gcm" = [ "dep:aes-gcm" "cipher" ];
          "aes-kw" = [ "dep:aes" ];
          "age" = [ "aead" "base64" "chacha20poly1305" "dep:hkdf" "dep:hmac" "dep:scrypt" "dep:sha2" "zeroize" ];
          "base64" = [ "dep:base64" ];
          "bee-common-derive" = [ "dep:bee-common-derive" ];
          "bip39" = [ "dep:iterator-sorted" "dep:unicode-normalization" "pbkdf2" "sha" "zeroize" "zeroize/alloc" ];
          "bip39-en" = [ "bip39" ];
          "bip39-jp" = [ "bip39" ];
          "bip44" = [ "slip10" ];
          "blake2" = [ "dep:blake2" ];
          "blake2b" = [ "blake2" "digest" ];
          "byteorder" = [ "dep:byteorder" ];
          "chacha" = [ "chacha20poly1305" "cipher" ];
          "chacha20poly1305" = [ "dep:chacha20poly1305" ];
          "cipher" = [ "aead" "dep:cipher" "generic-array" ];
          "cpufeatures" = [ "dep:cpufeatures" ];
          "curl-p" = [ "ternary_hashes" "ternary_encoding" ];
          "curve25519-dalek" = [ "dep:curve25519-dalek" ];
          "digest" = [ "dep:digest" ];
          "ed25519" = [ "ed25519-zebra" "zeroize" ];
          "ed25519-zebra" = [ "dep:ed25519-zebra" ];
          "generic-array" = [ "dep:generic-array" ];
          "getrandom" = [ "dep:getrandom" ];
          "hmac" = [ "dep:hmac" ];
          "keccak" = [ "dep:tiny-keccak" ];
          "kerl_deprecated_do_not_use" = [ "ternary_hashes" "ternary_encoding" "byteorder" "lazy_static" "dep:tiny-keccak" ];
          "lazy_static" = [ "dep:lazy_static" ];
          "num-traits" = [ "dep:num-traits" ];
          "pbkdf2" = [ "dep:pbkdf2" "pbkdf2/hmac" "dep:sha2" ];
          "rand" = [ "dep:rand" ];
          "random" = [ "getrandom" "rand?/getrandom" ];
          "secp256k1" = [ "dep:k256" "k256?/ecdsa" "zeroize" ];
          "serde" = [ "dep:serde" "ed25519-zebra?/serde" "k256?/serde" "k256?/pem" ];
          "sha" = [ "dep:sha2" "digest" ];
          "sha3" = [ "dep:sha3" ];
          "slip10" = [ "hmac" "sha" "zeroize" ];
          "std" = [ "k256?/std" "serde?/std" ];
          "subtle" = [ "dep:subtle" ];
          "ternary_encoding" = [ "serde" "num-traits" ];
          "wots_deprecated_do_not_use" = [ "ternary_keys" "ternary_signatures" "ternary_encoding" "sha3" "zeroize" "dep:rand" "bee-common-derive" ];
          "x25519" = [ "x25519-dalek" "curve25519-dalek" "zeroize" ];
          "x25519-dalek" = [ "dep:x25519-dalek" ];
          "zeroize" = [ "dep:zeroize" ];
        };
        resolvedDefaultFeatures = [ "aead" "aes-gcm" "aes-kw" "age" "base64" "bip39" "bip39-en" "bip39-jp" "bip44" "blake2" "blake2b" "chacha" "chacha20poly1305" "cipher" "curl-p" "curve25519-dalek" "digest" "ed25519" "ed25519-zebra" "generic-array" "getrandom" "hmac" "keccak" "num-traits" "pbkdf2" "rand" "random" "secp256k1" "serde" "sha" "slip10" "std" "ternary_encoding" "ternary_hashes" "x25519" "x25519-dalek" "zeroize" ];
      };
      "iota-data-ingestion" = rec {
        crateName = "iota-data-ingestion";
        version = "0.5.0-alpha";
        edition = "2021";
        crateBin = [
          {
            name = "archival_ingestion";
            path = "src/bin/archival_ingestion.rs";
            requiredFeatures = [ ];
          }
          {
            name = "iota-data-ingestion";
            path = "src/main.rs";
            requiredFeatures = [ ];
          }
        ];
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/iota-data-ingestion; }
          else ./crates/iota-data-ingestion;
        libName = "iota_data_ingestion";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "aws-config";
            packageId = "aws-config";
          }
          {
            name = "aws-sdk-dynamodb";
            packageId = "aws-sdk-dynamodb";
          }
          {
            name = "aws-sdk-s3";
            packageId = "aws-sdk-s3";
          }
          {
            name = "backoff";
            packageId = "backoff";
            features = [ "futures" "futures-core" "pin-project-lite" "tokio" "tokio_1" ];
          }
          {
            name = "base64-url";
            packageId = "base64-url";
          }
          {
            name = "bcs";
            packageId = "bcs";
          }
          {
            name = "byteorder";
            packageId = "byteorder";
          }
          {
            name = "bytes";
            packageId = "bytes";
            features = [ "serde" ];
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "iota-archival";
            packageId = "iota-archival";
          }
          {
            name = "iota-data-ingestion-core";
            packageId = "iota-data-ingestion-core";
          }
          {
            name = "iota-metrics";
            packageId = "iota-metrics";
          }
          {
            name = "iota-storage";
            packageId = "iota-storage";
          }
          {
            name = "iota-types";
            packageId = "iota-types";
          }
          {
            name = "notify";
            packageId = "notify";
          }
          {
            name = "object_store";
            packageId = "object_store 0.10.2";
            features = [ "aws" "gcp" "azure" "http" ];
          }
          {
            name = "prometheus";
            packageId = "prometheus";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" "rc" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            features = [ "preserve_order" ];
          }
          {
            name = "serde_yaml";
            packageId = "serde_yaml";
          }
          {
            name = "telemetry-subscribers";
            packageId = "telemetry-subscribers";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "full" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "url";
            packageId = "url";
          }
        ];
        devDependencies = [
          {
            name = "iota-types";
            packageId = "iota-types";
            features = [ "test-utils" ];
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "tempfile";
            packageId = "tempfile";
          }
        ];

      };
      "iota-data-ingestion-core" = rec {
        crateName = "iota-data-ingestion-core";
        version = "0.5.0-alpha";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/iota-data-ingestion-core; }
          else ./crates/iota-data-ingestion-core;
        libName = "iota_data_ingestion_core";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "backoff";
            packageId = "backoff";
            features = [ "futures" "futures-core" "pin-project-lite" "tokio" "tokio_1" ];
          }
          {
            name = "bcs";
            packageId = "bcs";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "iota-metrics";
            packageId = "iota-metrics";
          }
          {
            name = "iota-protocol-config";
            packageId = "iota-protocol-config";
          }
          {
            name = "iota-rest-api";
            packageId = "iota-rest-api";
          }
          {
            name = "iota-storage";
            packageId = "iota-storage";
          }
          {
            name = "iota-types";
            packageId = "iota-types";
          }
          {
            name = "notify";
            packageId = "notify";
          }
          {
            name = "object_store";
            packageId = "object_store 0.10.2";
            features = [ "aws" "gcp" "azure" "http" ];
          }
          {
            name = "prometheus";
            packageId = "prometheus";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" "rc" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            features = [ "preserve_order" ];
          }
          {
            name = "tap";
            packageId = "tap";
          }
          {
            name = "tempfile";
            packageId = "tempfile";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "full" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "url";
            packageId = "url";
          }
        ];
        devDependencies = [
          {
            name = "iota-types";
            packageId = "iota-types";
            features = [ "test-utils" ];
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
        ];

      };
      "iota-e2e-tests" = rec {
        crateName = "iota-e2e-tests";
        version = "0.5.0-alpha";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/iota-e2e-tests; }
          else ./crates/iota-e2e-tests;
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        devDependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "bcs";
            packageId = "bcs";
          }
          {
            name = "bip32";
            packageId = "bip32";
          }
          {
            name = "clap";
            packageId = "clap";
            features = [ "derive" "wrap_help" ];
          }
          {
            name = "coset";
            packageId = "coset";
          }
          {
            name = "fastcrypto";
            packageId = "fastcrypto";
          }
          {
            name = "fastcrypto-zkp";
            packageId = "fastcrypto-zkp";
            rename = "fastcrypto-zkp";
          }
          {
            name = "fs_extra";
            packageId = "fs_extra";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "indexmap";
            packageId = "indexmap 2.5.0";
            features = [ "serde" ];
          }
          {
            name = "insta";
            packageId = "insta";
            features = [ "redactions" "yaml" "json" ];
          }
          {
            name = "iota";
            packageId = "iota";
          }
          {
            name = "iota-bridge";
            packageId = "iota-bridge";
          }
          {
            name = "iota-config";
            packageId = "iota-config";
          }
          {
            name = "iota-core";
            packageId = "iota-core";
          }
          {
            name = "iota-framework";
            packageId = "iota-framework";
          }
          {
            name = "iota-genesis-builder";
            packageId = "iota-genesis-builder";
          }
          {
            name = "iota-json-rpc";
            packageId = "iota-json-rpc";
          }
          {
            name = "iota-json-rpc-api";
            packageId = "iota-json-rpc-api";
          }
          {
            name = "iota-json-rpc-types";
            packageId = "iota-json-rpc-types";
          }
          {
            name = "iota-keys";
            packageId = "iota-keys";
          }
          {
            name = "iota-macros";
            packageId = "iota-macros";
          }
          {
            name = "iota-metrics";
            packageId = "iota-metrics";
          }
          {
            name = "iota-move-build";
            packageId = "iota-move-build";
          }
          {
            name = "iota-network";
            packageId = "iota-network";
          }
          {
            name = "iota-node";
            packageId = "iota-node";
          }
          {
            name = "iota-protocol-config";
            packageId = "iota-protocol-config";
          }
          {
            name = "iota-rest-api";
            packageId = "iota-rest-api";
          }
          {
            name = "iota-sdk";
            packageId = "iota-sdk 0.5.0-alpha";
          }
          {
            name = "iota-simulator";
            packageId = "iota-simulator";
          }
          {
            name = "iota-storage";
            packageId = "iota-storage";
          }
          {
            name = "iota-swarm";
            packageId = "iota-swarm";
          }
          {
            name = "iota-swarm-config";
            packageId = "iota-swarm-config";
          }
          {
            name = "iota-test-transaction-builder";
            packageId = "iota-test-transaction-builder";
          }
          {
            name = "iota-tool";
            packageId = "iota-tool";
          }
          {
            name = "iota-types";
            packageId = "iota-types";
          }
          {
            name = "jsonrpsee";
            packageId = "jsonrpsee";
            features = [ "server" "macros" "client" "ws-client" "http-client" ];
          }
          {
            name = "move-binary-format";
            packageId = "move-binary-format";
          }
          {
            name = "move-core-types";
            packageId = "move-core-types";
          }
          {
            name = "move-package";
            packageId = "move-package";
          }
          {
            name = "p256";
            packageId = "p256 0.13.2";
            features = [ "ecdsa" ];
          }
          {
            name = "passkey-authenticator";
            packageId = "passkey-authenticator";
          }
          {
            name = "passkey-client";
            packageId = "passkey-client";
          }
          {
            name = "passkey-types";
            packageId = "passkey-types";
          }
          {
            name = "prometheus";
            packageId = "prometheus";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" "rc" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            features = [ "preserve_order" ];
          }
          {
            name = "shared-crypto";
            packageId = "shared-crypto";
          }
          {
            name = "telemetry-subscribers";
            packageId = "telemetry-subscribers";
          }
          {
            name = "tempfile";
            packageId = "tempfile";
          }
          {
            name = "test-cluster";
            packageId = "test-cluster";
          }
          {
            name = "tokio";
            packageId = "tokio";
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "url";
            packageId = "url";
          }
        ];

      };
      "iota-enum-compat-util" = rec {
        crateName = "iota-enum-compat-util";
        version = "0.5.0-alpha";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/iota-enum-compat-util; }
          else ./crates/iota-enum-compat-util;
        libName = "iota_enum_compat_util";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "serde_yaml";
            packageId = "serde_yaml";
          }
        ];

      };
      "iota-execution" = rec {
        crateName = "iota-execution";
        version = "0.1.0";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./iota-execution; }
          else ./iota-execution;
        libName = "iota_execution";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "iota-adapter-latest";
            packageId = "iota-adapter-latest";
          }
          {
            name = "iota-adapter-v0";
            packageId = "iota-adapter-v0";
          }
          {
            name = "iota-move-natives-latest";
            packageId = "iota-move-natives-latest";
          }
          {
            name = "iota-move-natives-v0";
            packageId = "iota-move-natives-v0";
          }
          {
            name = "iota-protocol-config";
            packageId = "iota-protocol-config";
          }
          {
            name = "iota-types";
            packageId = "iota-types";
          }
          {
            name = "iota-verifier-latest";
            packageId = "iota-verifier-latest";
          }
          {
            name = "iota-verifier-v0";
            packageId = "iota-verifier-v0";
          }
          {
            name = "move-binary-format";
            packageId = "move-binary-format";
          }
          {
            name = "move-bytecode-verifier";
            packageId = "move-bytecode-verifier";
            rename = "move-bytecode-verifier-latest";
          }
          {
            name = "move-bytecode-verifier-meter";
            packageId = "move-bytecode-verifier-meter";
          }
          {
            name = "move-bytecode-verifier-v0";
            packageId = "move-bytecode-verifier-v0";
          }
          {
            name = "move-vm-config";
            packageId = "move-vm-config";
          }
          {
            name = "move-vm-runtime";
            packageId = "move-vm-runtime";
            rename = "move-vm-runtime-latest";
          }
          {
            name = "move-vm-runtime-v0";
            packageId = "move-vm-runtime-v0";
          }
        ];
        devDependencies = [
          {
            name = "cargo_metadata";
            packageId = "cargo_metadata 0.15.4";
          }
          {
            name = "petgraph";
            packageId = "petgraph 0.6.5";
          }
        ];
        features = {
          "gas-profiler" = [ "iota-adapter-latest/gas-profiler" "move-vm-config/gas-profiler" "move-vm-runtime-latest/gas-profiler" ];
        };
        resolvedDefaultFeatures = [ "default" "gas-profiler" ];
      };
      "iota-execution-cut" = rec {
        crateName = "iota-execution-cut";
        version = "0.1.0";
        edition = "2021";
        crateBin = [
          {
            name = "cut";
            path = "src/main.rs";
            requiredFeatures = [ ];
          }
        ];
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./iota-execution/cut; }
          else ./iota-execution/cut;
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "clap";
            packageId = "clap";
            features = [ "derive" "wrap_help" ];
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "toml";
            packageId = "toml 0.7.8";
            features = [ "preserve_order" ];
          }
          {
            name = "toml_edit";
            packageId = "toml_edit 0.22.22";
          }
        ];
        devDependencies = [
          {
            name = "expect-test";
            packageId = "expect-test";
          }
          {
            name = "tempfile";
            packageId = "tempfile";
          }
        ];

      };
      "iota-faucet" = rec {
        crateName = "iota-faucet";
        version = "0.5.0-alpha";
        edition = "2021";
        crateBin = [
          {
            name = "iota-faucet";
            path = "src/main.rs";
            requiredFeatures = [ ];
          }
          {
            name = "merge_coins";
            path = "src/bin/merge_coins.rs";
            requiredFeatures = [ ];
          }
        ];
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/iota-faucet; }
          else ./crates/iota-faucet;
        libName = "iota_faucet";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "async-recursion";
            packageId = "async-recursion";
          }
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "axum";
            packageId = "axum";
            usesDefaultFeatures = false;
            features = [ "tokio" "http1" "http2" "json" "matched-path" "original-uri" "form" "query" "ws" ];
          }
          {
            name = "clap";
            packageId = "clap";
            features = [ "derive" "wrap_help" ];
          }
          {
            name = "eyre";
            packageId = "eyre";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "http";
            packageId = "http 1.1.0";
          }
          {
            name = "iota-config";
            packageId = "iota-config";
          }
          {
            name = "iota-json-rpc-types";
            packageId = "iota-json-rpc-types";
          }
          {
            name = "iota-keys";
            packageId = "iota-keys";
          }
          {
            name = "iota-metrics";
            packageId = "iota-metrics";
          }
          {
            name = "iota-sdk";
            packageId = "iota-sdk 0.5.0-alpha";
          }
          {
            name = "iota-types";
            packageId = "iota-types";
          }
          {
            name = "parking_lot";
            packageId = "parking_lot 0.12.3";
          }
          {
            name = "prometheus";
            packageId = "prometheus";
          }
          {
            name = "rocksdb";
            packageId = "rocksdb";
            usesDefaultFeatures = false;
            features = [ "snappy" "lz4" "zstd" "zlib" "multi-threaded-cf" ];
          }
          {
            name = "scopeguard";
            packageId = "scopeguard";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" "rc" ];
          }
          {
            name = "shared-crypto";
            packageId = "shared-crypto";
          }
          {
            name = "tap";
            packageId = "tap";
          }
          {
            name = "telemetry-subscribers";
            packageId = "telemetry-subscribers";
          }
          {
            name = "tempfile";
            packageId = "tempfile";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "full" ];
          }
          {
            name = "tower";
            packageId = "tower 0.4.13";
            features = [ "full" "util" "timeout" "load-shed" "limit" ];
          }
          {
            name = "tower-http";
            packageId = "tower-http";
            features = [ "cors" "full" "trace" "set-header" "propagate-header" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "ttl_cache";
            packageId = "ttl_cache";
          }
          {
            name = "typed-store";
            packageId = "typed-store";
          }
          {
            name = "uuid";
            packageId = "uuid 1.10.0";
            features = [ "v4" "fast-rng" ];
          }
        ];
        devDependencies = [
          {
            name = "test-cluster";
            packageId = "test-cluster";
          }
        ];

      };
      "iota-framework" = rec {
        crateName = "iota-framework";
        version = "0.5.0-alpha";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/iota-framework; }
          else ./crates/iota-framework;
        libName = "iota_framework";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "bcs";
            packageId = "bcs";
          }
          {
            name = "iota-types";
            packageId = "iota-types";
          }
          {
            name = "move-binary-format";
            packageId = "move-binary-format";
          }
          {
            name = "move-core-types";
            packageId = "move-core-types";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" "rc" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
        ];
        devDependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "bcs";
            packageId = "bcs";
          }
          {
            name = "capitalize";
            packageId = "capitalize";
          }
          {
            name = "iota-move-build";
            packageId = "iota-move-build";
          }
          {
            name = "move-binary-format";
            packageId = "move-binary-format";
          }
          {
            name = "move-compiler";
            packageId = "move-compiler";
          }
          {
            name = "move-package";
            packageId = "move-package";
          }
          {
            name = "regex";
            packageId = "regex";
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            features = [ "preserve_order" ];
          }
          {
            name = "tempfile";
            packageId = "tempfile";
          }
        ];

      };
      "iota-framework-snapshot" = rec {
        crateName = "iota-framework-snapshot";
        version = "0.5.0-alpha";
        edition = "2021";
        crateBin = [
          {
            name = "iota-framework-snapshot";
            path = "src/main.rs";
            requiredFeatures = [ ];
          }
        ];
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/iota-framework-snapshot; }
          else ./crates/iota-framework-snapshot;
        libName = "iota_framework_snapshot";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "bcs";
            packageId = "bcs";
          }
          {
            name = "bin-version";
            packageId = "bin-version";
          }
          {
            name = "iota-framework";
            packageId = "iota-framework";
          }
          {
            name = "iota-protocol-config";
            packageId = "iota-protocol-config";
          }
          {
            name = "iota-types";
            packageId = "iota-types";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" "rc" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            features = [ "preserve_order" ];
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "full" ];
          }
        ];

      };
      "iota-framework-tests" = rec {
        crateName = "iota-framework-tests";
        version = "0.5.0-alpha";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/iota-framework-tests; }
          else ./crates/iota-framework-tests;
        libName = "iota_framework_tests";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        devDependencies = [
          {
            name = "datatest-stable";
            packageId = "datatest-stable";
          }
          {
            name = "iota-adapter-latest";
            packageId = "iota-adapter-latest";
            rename = "iota-adapter";
          }
          {
            name = "iota-framework";
            packageId = "iota-framework";
          }
          {
            name = "iota-move";
            packageId = "iota-move";
            features = [ "unit_test" ];
          }
          {
            name = "iota-move-build";
            packageId = "iota-move-build";
          }
          {
            name = "iota-protocol-config";
            packageId = "iota-protocol-config";
          }
          {
            name = "iota-types";
            packageId = "iota-types";
          }
          {
            name = "iota-verifier-latest";
            packageId = "iota-verifier-latest";
            rename = "iota-verifier";
          }
          {
            name = "move-bytecode-verifier";
            packageId = "move-bytecode-verifier";
          }
          {
            name = "move-bytecode-verifier-meter";
            packageId = "move-bytecode-verifier-meter";
          }
          {
            name = "move-cli";
            packageId = "move-cli";
          }
          {
            name = "move-package";
            packageId = "move-package";
          }
          {
            name = "move-unit-test";
            packageId = "move-unit-test";
          }
          {
            name = "prometheus";
            packageId = "prometheus";
          }
        ];

      };
      "iota-genesis-builder" = rec {
        crateName = "iota-genesis-builder";
        version = "0.5.0-alpha";
        edition = "2021";
        crateBin = [
          {
            name = "iota-genesis-builder";
            path = "src/main.rs";
            requiredFeatures = [ ];
          }
        ];
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/iota-genesis-builder; }
          else ./crates/iota-genesis-builder;
        libName = "iota_genesis_builder";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "bcs";
            packageId = "bcs";
          }
          {
            name = "bigdecimal";
            packageId = "bigdecimal";
          }
          {
            name = "camino";
            packageId = "camino";
          }
          {
            name = "clap";
            packageId = "clap";
            features = [ "derive" "wrap_help" ];
          }
          {
            name = "fastcrypto";
            packageId = "fastcrypto";
          }
          {
            name = "flate2";
            packageId = "flate2";
          }
          {
            name = "fs_extra";
            packageId = "fs_extra";
          }
          {
            name = "iota-adapter-v0";
            packageId = "iota-adapter-v0";
          }
          {
            name = "iota-config";
            packageId = "iota-config";
          }
          {
            name = "iota-execution";
            packageId = "iota-execution";
          }
          {
            name = "iota-framework";
            packageId = "iota-framework";
          }
          {
            name = "iota-framework-snapshot";
            packageId = "iota-framework-snapshot";
          }
          {
            name = "iota-genesis-common";
            packageId = "iota-genesis-common";
          }
          {
            name = "iota-move-build";
            packageId = "iota-move-build";
          }
          {
            name = "iota-move-natives-v0";
            packageId = "iota-move-natives-v0";
          }
          {
            name = "iota-protocol-config";
            packageId = "iota-protocol-config";
          }
          {
            name = "iota-sdk";
            packageId = "iota-sdk 1.1.5";
            usesDefaultFeatures = false;
            features = [ "irc_27" "irc_30" "std" ];
          }
          {
            name = "iota-simulator";
            packageId = "iota-simulator";
            target = { target, features }: (target."msim" or false);
          }
          {
            name = "iota-types";
            packageId = "iota-types";
          }
          {
            name = "itertools";
            packageId = "itertools 0.13.0";
          }
          {
            name = "move-binary-format";
            packageId = "move-binary-format";
          }
          {
            name = "move-compiler";
            packageId = "move-compiler";
          }
          {
            name = "move-core-types";
            packageId = "move-core-types";
          }
          {
            name = "move-package";
            packageId = "move-package";
          }
          {
            name = "move-vm-runtime-v0";
            packageId = "move-vm-runtime-v0";
          }
          {
            name = "packable";
            packageId = "packable";
            usesDefaultFeatures = false;
            features = [ "io" ];
          }
          {
            name = "prefix-hex";
            packageId = "prefix-hex";
          }
          {
            name = "prometheus";
            packageId = "prometheus";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
            features = [ "std_rng" ];
          }
          {
            name = "rand_pcg";
            packageId = "rand_pcg";
          }
          {
            name = "rand_seeder";
            packageId = "rand_seeder";
          }
          {
            name = "regex";
            packageId = "regex";
          }
          {
            name = "reqwest";
            packageId = "reqwest 0.12.7";
            usesDefaultFeatures = false;
            features = [ "http2" "json" "rustls-tls" ];
          }
          {
            name = "schemars";
            packageId = "schemars";
            features = [ "either" ];
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" "rc" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            features = [ "preserve_order" ];
          }
          {
            name = "serde_with";
            packageId = "serde_with";
          }
          {
            name = "serde_yaml";
            packageId = "serde_yaml";
          }
          {
            name = "shared-crypto";
            packageId = "shared-crypto";
          }
          {
            name = "tempfile";
            packageId = "tempfile";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "tokio";
            packageId = "tokio";
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "tracing-subscriber";
            packageId = "tracing-subscriber";
          }
        ];
        devDependencies = [
          {
            name = "iota-swarm-config";
            packageId = "iota-swarm-config";
          }
          {
            name = "iota-types";
            packageId = "iota-types";
            features = [ "test-utils" ];
          }
          {
            name = "tempfile";
            packageId = "tempfile";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "macros" ];
          }
        ];
        features = {
          "test-outputs" = [ "iota-sdk/client" ];
        };
        resolvedDefaultFeatures = [ "test-outputs" ];
      };
      "iota-genesis-common" = rec {
        crateName = "iota-genesis-common";
        version = "0.5.0-alpha";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/iota-genesis-common; }
          else ./crates/iota-genesis-common;
        libName = "iota_genesis_common";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "iota-execution";
            packageId = "iota-execution";
          }
          {
            name = "iota-protocol-config";
            packageId = "iota-protocol-config";
          }
          {
            name = "iota-types";
            packageId = "iota-types";
          }
          {
            name = "prometheus";
            packageId = "prometheus";
          }
        ];

      };
      "iota-graphql-config" = rec {
        crateName = "iota-graphql-config";
        version = "0.5.0-alpha";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/iota-graphql-config; }
          else ./crates/iota-graphql-config;
        procMacro = true;
        libName = "iota_graphql_config";
        authors = [
          "IOTA Foundation <build@iota.org"
        ];
        dependencies = [
          {
            name = "quote";
            packageId = "quote 1.0.37";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            features = [ "full" "derive" "extra-traits" ];
          }
        ];

      };
      "iota-graphql-e2e-tests" = rec {
        crateName = "iota-graphql-e2e-tests";
        version = "0.5.0-alpha";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/iota-graphql-e2e-tests; }
          else ./crates/iota-graphql-e2e-tests;
        libName = "iota_graphql_e2e_tests";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "msim";
            packageId = "msim";
            rename = "msim";
            target = { target, features }: (target."msim" or false);
          }
        ];
        devDependencies = [
          {
            name = "datatest-stable";
            packageId = "datatest-stable";
          }
          {
            name = "iota-graphql-rpc";
            packageId = "iota-graphql-rpc";
          }
          {
            name = "iota-transactional-test-runner";
            packageId = "iota-transactional-test-runner";
          }
          {
            name = "tokio";
            packageId = "tokio";
          }
        ];
        features = {
          "default" = [ "pg_backend" ];
        };
        resolvedDefaultFeatures = [ "default" "pg_backend" "pg_integration" ];
      };
      "iota-graphql-rpc" = rec {
        crateName = "iota-graphql-rpc";
        version = "0.5.0-alpha";
        edition = "2021";
        crateBin = [
          {
            name = "iota-graphql-rpc";
            path = "src/main.rs";
            requiredFeatures = [ ];
          }
        ];
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/iota-graphql-rpc; }
          else ./crates/iota-graphql-rpc;
        libName = "iota_graphql_rpc";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "async-graphql";
            packageId = "async-graphql";
            features = [ "dataloader" "apollo_tracing" "tracing" "opentelemetry" ];
          }
          {
            name = "async-graphql-axum";
            packageId = "async-graphql-axum";
          }
          {
            name = "async-graphql-value";
            packageId = "async-graphql-value";
          }
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "axum";
            packageId = "axum";
            usesDefaultFeatures = false;
            features = [ "tokio" "http1" "http2" "json" "matched-path" "original-uri" "form" "query" "ws" ];
          }
          {
            name = "axum-extra";
            packageId = "axum-extra";
            features = [ "typed-header" ];
          }
          {
            name = "bcs";
            packageId = "bcs";
          }
          {
            name = "bin-version";
            packageId = "bin-version";
          }
          {
            name = "chrono";
            packageId = "chrono";
            features = [ "clock" "serde" ];
          }
          {
            name = "clap";
            packageId = "clap";
            features = [ "derive" "wrap_help" ];
          }
          {
            name = "const-str";
            packageId = "const-str";
          }
          {
            name = "diesel";
            packageId = "diesel";
            features = [ "chrono" "r2d2" "serde_json" "64-column-tables" "i-implement-a-third-party-backend-and-opt-into-breaking-changes" ];
          }
          {
            name = "downcast";
            packageId = "downcast";
          }
          {
            name = "either";
            packageId = "either";
          }
          {
            name = "fastcrypto";
            packageId = "fastcrypto";
            features = [ "copy_key" ];
          }
          {
            name = "fastcrypto-zkp";
            packageId = "fastcrypto-zkp";
            rename = "fastcrypto-zkp";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "hex";
            packageId = "hex";
          }
          {
            name = "http";
            packageId = "http 1.1.0";
          }
          {
            name = "http-body-util";
            packageId = "http-body-util";
          }
          {
            name = "hyper";
            packageId = "hyper 1.4.1";
          }
          {
            name = "im";
            packageId = "im";
          }
          {
            name = "iota-graphql-config";
            packageId = "iota-graphql-config";
          }
          {
            name = "iota-graphql-rpc-client";
            packageId = "iota-graphql-rpc-client";
          }
          {
            name = "iota-graphql-rpc-headers";
            packageId = "iota-graphql-rpc-headers";
          }
          {
            name = "iota-indexer";
            packageId = "iota-indexer";
          }
          {
            name = "iota-json-rpc";
            packageId = "iota-json-rpc";
          }
          {
            name = "iota-json-rpc-types";
            packageId = "iota-json-rpc-types";
          }
          {
            name = "iota-metrics";
            packageId = "iota-metrics";
          }
          {
            name = "iota-network-stack";
            packageId = "iota-network-stack";
          }
          {
            name = "iota-package-resolver";
            packageId = "iota-package-resolver";
          }
          {
            name = "iota-protocol-config";
            packageId = "iota-protocol-config";
          }
          {
            name = "iota-rest-api";
            packageId = "iota-rest-api";
          }
          {
            name = "iota-sdk";
            packageId = "iota-sdk 0.5.0-alpha";
          }
          {
            name = "iota-swarm-config";
            packageId = "iota-swarm-config";
          }
          {
            name = "iota-types";
            packageId = "iota-types";
          }
          {
            name = "itertools";
            packageId = "itertools 0.13.0";
          }
          {
            name = "lru";
            packageId = "lru 0.12.4";
          }
          {
            name = "move-binary-format";
            packageId = "move-binary-format";
          }
          {
            name = "move-bytecode-utils";
            packageId = "move-bytecode-utils";
          }
          {
            name = "move-core-types";
            packageId = "move-core-types";
          }
          {
            name = "move-disassembler";
            packageId = "move-disassembler";
          }
          {
            name = "move-ir-types";
            packageId = "move-ir-types";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "prometheus";
            packageId = "prometheus";
          }
          {
            name = "regex";
            packageId = "regex";
          }
          {
            name = "reqwest";
            packageId = "reqwest 0.12.7";
            usesDefaultFeatures = false;
            features = [ "http2" "json" "rustls-tls" ];
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" "rc" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            features = [ "preserve_order" ];
          }
          {
            name = "serde_with";
            packageId = "serde_with";
          }
          {
            name = "serde_yaml";
            packageId = "serde_yaml";
          }
          {
            name = "shared-crypto";
            packageId = "shared-crypto";
          }
          {
            name = "similar";
            packageId = "similar";
          }
          {
            name = "tap";
            packageId = "tap";
          }
          {
            name = "telemetry-subscribers";
            packageId = "telemetry-subscribers";
          }
          {
            name = "tempfile";
            packageId = "tempfile";
          }
          {
            name = "test-cluster";
            packageId = "test-cluster";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "rt-multi-thread" ];
          }
          {
            name = "tokio-util";
            packageId = "tokio-util 0.7.12";
            features = [ "rt" ];
          }
          {
            name = "toml";
            packageId = "toml 0.7.8";
            features = [ "preserve_order" ];
          }
          {
            name = "tower";
            packageId = "tower 0.4.13";
            features = [ "full" "util" "timeout" "load-shed" "limit" ];
          }
          {
            name = "tower-http";
            packageId = "tower-http";
            features = [ "cors" "full" "trace" "set-header" "propagate-header" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "uuid";
            packageId = "uuid 1.10.0";
            features = [ "v4" "fast-rng" ];
          }
        ];
        devDependencies = [
          {
            name = "expect-test";
            packageId = "expect-test";
          }
          {
            name = "hyper";
            packageId = "hyper 1.4.1";
          }
          {
            name = "insta";
            packageId = "insta";
            features = [ "redactions" "yaml" "json" ];
          }
          {
            name = "iota-framework";
            packageId = "iota-framework";
          }
          {
            name = "iota-test-transaction-builder";
            packageId = "iota-test-transaction-builder";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            features = [ "preserve_order" ];
          }
          {
            name = "serial_test";
            packageId = "serial_test";
          }
          {
            name = "simulacrum";
            packageId = "simulacrum";
          }
          {
            name = "tower";
            packageId = "tower 0.4.13";
            features = [ "full" "util" "timeout" "load-shed" "limit" ];
          }
        ];
        features = {
          "default" = [ "pg_backend" "postgres-feature" ];
          "postgres-feature" = [ "diesel/postgres" "diesel/postgres_backend" ];
        };
        resolvedDefaultFeatures = [ "default" "pg_backend" "pg_integration" "postgres-feature" ];
      };
      "iota-graphql-rpc-client" = rec {
        crateName = "iota-graphql-rpc-client";
        version = "0.5.0-alpha";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/iota-graphql-rpc-client; }
          else ./crates/iota-graphql-rpc-client;
        libName = "iota_graphql_rpc_client";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "async-graphql";
            packageId = "async-graphql";
            features = [ "dataloader" "apollo_tracing" "tracing" "opentelemetry" ];
          }
          {
            name = "axum";
            packageId = "axum";
            usesDefaultFeatures = false;
            features = [ "tokio" "http1" "http2" "json" "matched-path" "original-uri" "form" "query" "ws" ];
          }
          {
            name = "hyper";
            packageId = "hyper 1.4.1";
          }
          {
            name = "iota-graphql-rpc-headers";
            packageId = "iota-graphql-rpc-headers";
          }
          {
            name = "reqwest";
            packageId = "reqwest 0.12.7";
            usesDefaultFeatures = false;
            features = [ "http2" "json" "rustls-tls" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            features = [ "preserve_order" ];
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
        ];

      };
      "iota-graphql-rpc-headers" = rec {
        crateName = "iota-graphql-rpc-headers";
        version = "0.5.0-alpha";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/iota-graphql-rpc-headers; }
          else ./crates/iota-graphql-rpc-headers;
        libName = "iota_graphql_rpc_headers";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "axum";
            packageId = "axum";
            usesDefaultFeatures = false;
            features = [ "tokio" "http1" "http2" "json" "matched-path" "original-uri" "form" "query" "ws" ];
          }
        ];

      };
      "iota-indexer" = rec {
        crateName = "iota-indexer";
        version = "0.5.0-alpha";
        edition = "2021";
        crateBin = [
          {
            name = "iota-indexer";
            path = "src/main.rs";
            requiredFeatures = [ ];
          }
        ];
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/iota-indexer; }
          else ./crates/iota-indexer;
        libName = "iota_indexer";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "axum";
            packageId = "axum";
            usesDefaultFeatures = false;
            features = [ "tokio" "http1" "http2" "json" "matched-path" "original-uri" "form" "query" "ws" ];
          }
          {
            name = "backoff";
            packageId = "backoff";
            features = [ "futures" "futures-core" "pin-project-lite" "tokio" "tokio_1" ];
          }
          {
            name = "bcs";
            packageId = "bcs";
          }
          {
            name = "cached";
            packageId = "cached";
          }
          {
            name = "chrono";
            packageId = "chrono";
            features = [ "clock" "serde" ];
          }
          {
            name = "clap";
            packageId = "clap";
            features = [ "derive" "wrap_help" ];
          }
          {
            name = "diesel";
            packageId = "diesel";
            optional = true;
            features = [ "chrono" "r2d2" "serde_json" "64-column-tables" "i-implement-a-third-party-backend-and-opt-into-breaking-changes" ];
          }
          {
            name = "diesel_migrations";
            packageId = "diesel_migrations";
          }
          {
            name = "downcast";
            packageId = "downcast";
          }
          {
            name = "fastcrypto";
            packageId = "fastcrypto";
            features = [ "copy_key" ];
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "iota-data-ingestion-core";
            packageId = "iota-data-ingestion-core";
          }
          {
            name = "iota-json";
            packageId = "iota-json";
          }
          {
            name = "iota-json-rpc";
            packageId = "iota-json-rpc";
          }
          {
            name = "iota-json-rpc-api";
            packageId = "iota-json-rpc-api";
          }
          {
            name = "iota-json-rpc-types";
            packageId = "iota-json-rpc-types";
          }
          {
            name = "iota-metrics";
            packageId = "iota-metrics";
          }
          {
            name = "iota-open-rpc";
            packageId = "iota-open-rpc";
          }
          {
            name = "iota-package-resolver";
            packageId = "iota-package-resolver";
          }
          {
            name = "iota-protocol-config";
            packageId = "iota-protocol-config";
          }
          {
            name = "iota-rest-api";
            packageId = "iota-rest-api";
          }
          {
            name = "iota-sdk";
            packageId = "iota-sdk 0.5.0-alpha";
          }
          {
            name = "iota-transaction-builder";
            packageId = "iota-transaction-builder";
          }
          {
            name = "iota-types";
            packageId = "iota-types";
          }
          {
            name = "itertools";
            packageId = "itertools 0.13.0";
          }
          {
            name = "jsonrpsee";
            packageId = "jsonrpsee";
            features = [ "server" "macros" "client" "ws-client" "http-client" ];
          }
          {
            name = "move-binary-format";
            packageId = "move-binary-format";
          }
          {
            name = "move-bytecode-utils";
            packageId = "move-bytecode-utils";
          }
          {
            name = "move-core-types";
            packageId = "move-core-types";
          }
          {
            name = "mysqlclient-sys";
            packageId = "mysqlclient-sys";
            optional = true;
          }
          {
            name = "prometheus";
            packageId = "prometheus";
          }
          {
            name = "rayon";
            packageId = "rayon";
          }
          {
            name = "regex";
            packageId = "regex";
          }
          {
            name = "secrecy";
            packageId = "secrecy";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" "rc" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            features = [ "preserve_order" ];
          }
          {
            name = "serde_with";
            packageId = "serde_with";
          }
          {
            name = "tap";
            packageId = "tap";
          }
          {
            name = "telemetry-subscribers";
            packageId = "telemetry-subscribers";
          }
          {
            name = "tempfile";
            packageId = "tempfile";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "full" ];
          }
          {
            name = "tokio-util";
            packageId = "tokio-util 0.7.12";
            features = [ "rt" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "url";
            packageId = "url";
          }
        ];
        devDependencies = [
          {
            name = "iota-config";
            packageId = "iota-config";
          }
          {
            name = "iota-genesis-builder";
            packageId = "iota-genesis-builder";
          }
          {
            name = "iota-keys";
            packageId = "iota-keys";
          }
          {
            name = "iota-move-build";
            packageId = "iota-move-build";
          }
          {
            name = "iota-swarm-config";
            packageId = "iota-swarm-config";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "simulacrum";
            packageId = "simulacrum";
          }
        ];
        features = {
          "bundled-mysql" = [ "mysqlclient-sys?/bundled" ];
          "default" = [ "postgres-feature" ];
          "diesel" = [ "dep:diesel" ];
          "mysql-feature" = [ "diesel/mysql" "diesel/mysql_backend" "dep:mysqlclient-sys" ];
          "postgres-feature" = [ "diesel/postgres" "diesel/postgres_backend" ];
        };
        resolvedDefaultFeatures = [ "bundled-mysql" "default" "diesel" "mysql-feature" "pg_integration" "postgres-feature" ];
      };
      "iota-indexer-builder" = rec {
        crateName = "iota-indexer-builder";
        version = "0.5.0-alpha";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/iota-indexer-builder; }
          else ./crates/iota-indexer-builder;
        libName = "iota_indexer_builder";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "iota-data-ingestion-core";
            packageId = "iota-data-ingestion-core";
          }
          {
            name = "iota-metrics";
            packageId = "iota-metrics";
          }
          {
            name = "iota-types";
            packageId = "iota-types";
          }
          {
            name = "prometheus";
            packageId = "prometheus";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "full" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
        ];
        devDependencies = [
          {
            name = "telemetry-subscribers";
            packageId = "telemetry-subscribers";
          }
        ];

      };
      "iota-json" = rec {
        crateName = "iota-json";
        version = "0.5.0-alpha";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/iota-json; }
          else ./crates/iota-json;
        libName = "iota_json";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "bcs";
            packageId = "bcs";
          }
          {
            name = "fastcrypto";
            packageId = "fastcrypto";
          }
          {
            name = "iota-types";
            packageId = "iota-types";
          }
          {
            name = "move-binary-format";
            packageId = "move-binary-format";
          }
          {
            name = "move-bytecode-utils";
            packageId = "move-bytecode-utils";
          }
          {
            name = "move-core-types";
            packageId = "move-core-types";
          }
          {
            name = "schemars";
            packageId = "schemars";
            features = [ "either" ];
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" "rc" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            features = [ "preserve_order" ];
          }
        ];
        devDependencies = [
          {
            name = "iota-framework";
            packageId = "iota-framework";
          }
          {
            name = "iota-move-build";
            packageId = "iota-move-build";
          }
          {
            name = "iota-types";
            packageId = "iota-types";
            features = [ "test-utils" ];
          }
          {
            name = "test-fuzz";
            packageId = "test-fuzz";
          }
        ];

      };
      "iota-json-rpc" = rec {
        crateName = "iota-json-rpc";
        version = "0.5.0-alpha";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/iota-json-rpc; }
          else ./crates/iota-json-rpc;
        libName = "iota_json_rpc";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "arc-swap";
            packageId = "arc-swap";
            features = [ "serde" ];
          }
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "axum";
            packageId = "axum";
            usesDefaultFeatures = false;
            features = [ "tokio" "http1" "http2" "json" "matched-path" "original-uri" "form" "query" "ws" ];
          }
          {
            name = "bcs";
            packageId = "bcs";
          }
          {
            name = "cached";
            packageId = "cached";
          }
          {
            name = "eyre";
            packageId = "eyre";
          }
          {
            name = "fastcrypto";
            packageId = "fastcrypto";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "http-body";
            packageId = "http-body 1.0.1";
          }
          {
            name = "hyper";
            packageId = "hyper 1.4.1";
          }
          {
            name = "indexmap";
            packageId = "indexmap 2.5.0";
            features = [ "serde" ];
          }
          {
            name = "iota-config";
            packageId = "iota-config";
          }
          {
            name = "iota-core";
            packageId = "iota-core";
          }
          {
            name = "iota-json";
            packageId = "iota-json";
          }
          {
            name = "iota-json-rpc-api";
            packageId = "iota-json-rpc-api";
          }
          {
            name = "iota-json-rpc-types";
            packageId = "iota-json-rpc-types";
          }
          {
            name = "iota-metrics";
            packageId = "iota-metrics";
          }
          {
            name = "iota-open-rpc";
            packageId = "iota-open-rpc";
          }
          {
            name = "iota-open-rpc-macros";
            packageId = "iota-open-rpc-macros";
          }
          {
            name = "iota-protocol-config";
            packageId = "iota-protocol-config";
          }
          {
            name = "iota-storage";
            packageId = "iota-storage";
          }
          {
            name = "iota-transaction-builder";
            packageId = "iota-transaction-builder";
          }
          {
            name = "iota-types";
            packageId = "iota-types";
          }
          {
            name = "itertools";
            packageId = "itertools 0.13.0";
          }
          {
            name = "jsonrpsee";
            packageId = "jsonrpsee";
            features = [ "server" "macros" "client" "ws-client" "http-client" ];
          }
          {
            name = "move-binary-format";
            packageId = "move-binary-format";
          }
          {
            name = "move-bytecode-utils";
            packageId = "move-bytecode-utils";
          }
          {
            name = "move-core-types";
            packageId = "move-core-types";
          }
          {
            name = "move-package";
            packageId = "move-package";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "prometheus";
            packageId = "prometheus";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" "rc" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            features = [ "preserve_order" ];
          }
          {
            name = "shared-crypto";
            packageId = "shared-crypto";
          }
          {
            name = "signature";
            packageId = "signature 1.6.4";
          }
          {
            name = "tap";
            packageId = "tap";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "full" ];
          }
          {
            name = "tokio-util";
            packageId = "tokio-util 0.7.12";
            features = [ "rt" ];
          }
          {
            name = "tower";
            packageId = "tower 0.4.13";
            features = [ "full" "util" "timeout" "load-shed" "limit" ];
          }
          {
            name = "tower-http";
            packageId = "tower-http";
            features = [ "cors" "full" "trace" "set-header" "propagate-header" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "typed-store-error";
            packageId = "typed-store-error";
          }
        ];
        devDependencies = [
          {
            name = "expect-test";
            packageId = "expect-test";
          }
          {
            name = "iota-types";
            packageId = "iota-types";
            features = [ "test-utils" ];
          }
          {
            name = "mockall";
            packageId = "mockall";
          }
          {
            name = "telemetry-subscribers";
            packageId = "telemetry-subscribers";
          }
        ];

      };
      "iota-json-rpc-api" = rec {
        crateName = "iota-json-rpc-api";
        version = "0.5.0-alpha";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/iota-json-rpc-api; }
          else ./crates/iota-json-rpc-api;
        libName = "iota_json_rpc_api";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "fastcrypto";
            packageId = "fastcrypto";
          }
          {
            name = "iota-json";
            packageId = "iota-json";
          }
          {
            name = "iota-json-rpc-types";
            packageId = "iota-json-rpc-types";
          }
          {
            name = "iota-metrics";
            packageId = "iota-metrics";
          }
          {
            name = "iota-open-rpc";
            packageId = "iota-open-rpc";
          }
          {
            name = "iota-open-rpc-macros";
            packageId = "iota-open-rpc-macros";
          }
          {
            name = "iota-types";
            packageId = "iota-types";
          }
          {
            name = "jsonrpsee";
            packageId = "jsonrpsee";
            features = [ "server" "macros" "client" "ws-client" "http-client" ];
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "prometheus";
            packageId = "prometheus";
          }
          {
            name = "tap";
            packageId = "tap";
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
        ];

      };
      "iota-json-rpc-tests" = rec {
        crateName = "iota-json-rpc-tests";
        version = "0.5.0-alpha";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/iota-json-rpc-tests; }
          else ./crates/iota-json-rpc-tests;
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        devDependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "bcs";
            packageId = "bcs";
          }
          {
            name = "hyper";
            packageId = "hyper 1.4.1";
          }
          {
            name = "iota-config";
            packageId = "iota-config";
          }
          {
            name = "iota-core";
            packageId = "iota-core";
          }
          {
            name = "iota-json";
            packageId = "iota-json";
          }
          {
            name = "iota-json-rpc";
            packageId = "iota-json-rpc";
          }
          {
            name = "iota-json-rpc-api";
            packageId = "iota-json-rpc-api";
          }
          {
            name = "iota-json-rpc-types";
            packageId = "iota-json-rpc-types";
          }
          {
            name = "iota-keys";
            packageId = "iota-keys";
          }
          {
            name = "iota-macros";
            packageId = "iota-macros";
          }
          {
            name = "iota-metrics";
            packageId = "iota-metrics";
          }
          {
            name = "iota-move-build";
            packageId = "iota-move-build";
          }
          {
            name = "iota-open-rpc";
            packageId = "iota-open-rpc";
          }
          {
            name = "iota-open-rpc-macros";
            packageId = "iota-open-rpc-macros";
          }
          {
            name = "iota-protocol-config";
            packageId = "iota-protocol-config";
          }
          {
            name = "iota-sdk";
            packageId = "iota-sdk 0.5.0-alpha";
          }
          {
            name = "iota-simulator";
            packageId = "iota-simulator";
          }
          {
            name = "iota-swarm-config";
            packageId = "iota-swarm-config";
          }
          {
            name = "iota-test-transaction-builder";
            packageId = "iota-test-transaction-builder";
          }
          {
            name = "iota-types";
            packageId = "iota-types";
          }
          {
            name = "jsonrpsee";
            packageId = "jsonrpsee";
            features = [ "server" "macros" "client" "ws-client" "http-client" ];
          }
          {
            name = "move-core-types";
            packageId = "move-core-types";
          }
          {
            name = "move-package";
            packageId = "move-package";
          }
          {
            name = "prometheus";
            packageId = "prometheus";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "reqwest";
            packageId = "reqwest 0.12.7";
            usesDefaultFeatures = false;
            features = [ "http2" "json" "rustls-tls" ];
          }
          {
            name = "telemetry-subscribers";
            packageId = "telemetry-subscribers";
          }
          {
            name = "test-cluster";
            packageId = "test-cluster";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "full" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
        ];

      };
      "iota-json-rpc-types" = rec {
        crateName = "iota-json-rpc-types";
        version = "0.5.0-alpha";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/iota-json-rpc-types; }
          else ./crates/iota-json-rpc-types;
        libName = "iota_json_rpc_types";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "bcs";
            packageId = "bcs";
          }
          {
            name = "colored";
            packageId = "colored";
          }
          {
            name = "enum_dispatch";
            packageId = "enum_dispatch";
          }
          {
            name = "fastcrypto";
            packageId = "fastcrypto";
          }
          {
            name = "iota-enum-compat-util";
            packageId = "iota-enum-compat-util";
          }
          {
            name = "iota-json";
            packageId = "iota-json";
          }
          {
            name = "iota-macros";
            packageId = "iota-macros";
          }
          {
            name = "iota-metrics";
            packageId = "iota-metrics";
          }
          {
            name = "iota-package-resolver";
            packageId = "iota-package-resolver";
          }
          {
            name = "iota-protocol-config";
            packageId = "iota-protocol-config";
          }
          {
            name = "iota-types";
            packageId = "iota-types";
          }
          {
            name = "itertools";
            packageId = "itertools 0.13.0";
          }
          {
            name = "json_to_table";
            packageId = "json_to_table";
          }
          {
            name = "move-binary-format";
            packageId = "move-binary-format";
          }
          {
            name = "move-bytecode-utils";
            packageId = "move-bytecode-utils";
          }
          {
            name = "move-core-types";
            packageId = "move-core-types";
          }
          {
            name = "schemars";
            packageId = "schemars";
            features = [ "either" ];
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" "rc" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            features = [ "preserve_order" ];
          }
          {
            name = "serde_with";
            packageId = "serde_with";
          }
          {
            name = "tabled";
            packageId = "tabled";
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
        ];
        devDependencies = [
          {
            name = "iota-types";
            packageId = "iota-types";
            features = [ "test-utils" ];
          }
        ];
        features = {
          "test-utils" = [ "iota-types/test-utils" ];
        };
        resolvedDefaultFeatures = [ "test-utils" ];
      };
      "iota-keys" = rec {
        crateName = "iota-keys";
        version = "0.5.0-alpha";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/iota-keys; }
          else ./crates/iota-keys;
        libName = "iota_keys";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "bip32";
            packageId = "bip32";
          }
          {
            name = "fastcrypto";
            packageId = "fastcrypto";
            features = [ "copy_key" ];
          }
          {
            name = "iota-types";
            packageId = "iota-types";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "regex";
            packageId = "regex";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" "rc" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            features = [ "preserve_order" ];
          }
          {
            name = "shared-crypto";
            packageId = "shared-crypto";
          }
          {
            name = "signature";
            packageId = "signature 1.6.4";
          }
          {
            name = "slip10_ed25519";
            packageId = "slip10_ed25519";
          }
          {
            name = "tiny-bip39";
            packageId = "tiny-bip39";
          }
        ];
        devDependencies = [
          {
            name = "tempfile";
            packageId = "tempfile";
          }
        ];

      };
      "iota-light-client" = rec {
        crateName = "iota-light-client";
        version = "0.5.0-alpha";
        edition = "2021";
        crateBin = [
          {
            name = "generate_chk_snapshots";
            path = "src/bin/generate_chk_snapshots.rs";
            requiredFeatures = [ ];
          }
          {
            name = "iota-light-client";
            path = "src/bin/light_client.rs";
            requiredFeatures = [ ];
          }
        ];
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/iota-light-client; }
          else ./crates/iota-light-client;
        libName = "iota_light_client";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "bcs";
            packageId = "bcs";
          }
          {
            name = "bytes";
            packageId = "bytes";
            features = [ "serde" ];
          }
          {
            name = "clap";
            packageId = "clap";
            features = [ "derive" "wrap_help" ];
          }
          {
            name = "iota-config";
            packageId = "iota-config";
          }
          {
            name = "iota-json";
            packageId = "iota-json";
          }
          {
            name = "iota-json-rpc-types";
            packageId = "iota-json-rpc-types";
          }
          {
            name = "iota-package-resolver";
            packageId = "iota-package-resolver";
          }
          {
            name = "iota-rest-api";
            packageId = "iota-rest-api";
          }
          {
            name = "iota-sdk";
            packageId = "iota-sdk 0.5.0-alpha";
          }
          {
            name = "iota-types";
            packageId = "iota-types";
          }
          {
            name = "move-binary-format";
            packageId = "move-binary-format";
          }
          {
            name = "move-core-types";
            packageId = "move-core-types";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" "rc" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            features = [ "preserve_order" ];
          }
          {
            name = "serde_yaml";
            packageId = "serde_yaml";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "full" ];
          }
        ];

      };
      "iota-macros" = rec {
        crateName = "iota-macros";
        version = "0.5.0-alpha";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/iota-macros; }
          else ./crates/iota-macros;
        libName = "iota_macros";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "iota-proc-macros";
            packageId = "iota-proc-macros";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
        ];

      };
      "iota-metric-checker" = rec {
        crateName = "iota-metric-checker";
        version = "0.5.0-alpha";
        edition = "2021";
        crateBin = [
          {
            name = "iota-metric-checker";
            path = "src/main.rs";
            requiredFeatures = [ ];
          }
        ];
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/iota-metric-checker; }
          else ./crates/iota-metric-checker;
        libName = "iota_metric_checker";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "backoff";
            packageId = "backoff";
            features = [ "futures" "futures-core" "pin-project-lite" "tokio" "tokio_1" ];
          }
          {
            name = "base64";
            packageId = "base64 0.21.7";
          }
          {
            name = "chrono";
            packageId = "chrono";
            features = [ "clock" "serde" ];
          }
          {
            name = "clap";
            packageId = "clap";
            features = [ "derive" "wrap_help" ];
          }
          {
            name = "humantime";
            packageId = "humantime";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "prometheus-http-query";
            packageId = "prometheus-http-query";
            usesDefaultFeatures = false;
            features = [ "rustls-tls" ];
          }
          {
            name = "reqwest";
            packageId = "reqwest 0.12.7";
            usesDefaultFeatures = false;
            features = [ "http2" "json" "rustls-tls" ];
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" "rc" ];
          }
          {
            name = "serde_yaml";
            packageId = "serde_yaml";
          }
          {
            name = "strum";
            packageId = "strum 0.26.3";
            features = [ "derive" ];
          }
          {
            name = "telemetry-subscribers";
            packageId = "telemetry-subscribers";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "full" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
        ];

      };
      "iota-metrics" = rec {
        crateName = "iota-metrics";
        version = "0.5.0-alpha";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/iota-metrics; }
          else ./crates/iota-metrics;
        libName = "iota_metrics";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "anemo";
            packageId = "anemo";
          }
          {
            name = "anemo-tower";
            packageId = "anemo-tower";
          }
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "axum";
            packageId = "axum";
            usesDefaultFeatures = false;
            features = [ "tokio" "http1" "http2" "json" "matched-path" "original-uri" "form" "query" "ws" ];
          }
          {
            name = "bytes";
            packageId = "bytes";
            features = [ "serde" ];
          }
          {
            name = "dashmap";
            packageId = "dashmap";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "parking_lot";
            packageId = "parking_lot 0.12.3";
          }
          {
            name = "prometheus";
            packageId = "prometheus";
          }
          {
            name = "prometheus-closure-metric";
            packageId = "prometheus-closure-metric";
          }
          {
            name = "scopeguard";
            packageId = "scopeguard";
          }
          {
            name = "simple-server-timing-header";
            packageId = "simple-server-timing-header";
          }
          {
            name = "tap";
            packageId = "tap";
          }
          {
            name = "tokio";
            packageId = "tokio";
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "uuid";
            packageId = "uuid 1.10.0";
            features = [ "v4" "fast-rng" ];
          }
        ];

      };
      "iota-move" = rec {
        crateName = "iota-move";
        version = "0.5.0-alpha";
        edition = "2021";
        crateBin = [
          {
            name = "iota-move";
            path = "src/main.rs";
            requiredFeatures = [ ];
          }
        ];
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/iota-move; }
          else ./crates/iota-move;
        libName = "iota_move";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "better_any";
            packageId = "better_any";
          }
          {
            name = "bin-version";
            packageId = "bin-version";
          }
          {
            name = "clap";
            packageId = "clap";
            features = [ "derive" "wrap_help" ];
          }
          {
            name = "colored";
            packageId = "colored";
          }
          {
            name = "const-str";
            packageId = "const-str";
          }
          {
            name = "git-version";
            packageId = "git-version";
          }
          {
            name = "iota-move-build";
            packageId = "iota-move-build";
          }
          {
            name = "iota-move-natives-latest";
            packageId = "iota-move-natives-latest";
            rename = "iota-move-natives";
            optional = true;
          }
          {
            name = "iota-protocol-config";
            packageId = "iota-protocol-config";
          }
          {
            name = "iota-types";
            packageId = "iota-types";
          }
          {
            name = "jemalloc-ctl";
            packageId = "jemalloc-ctl";
            target = { target, features }: (!("msvc" == target."env" or null));
          }
          {
            name = "move-binary-format";
            packageId = "move-binary-format";
          }
          {
            name = "move-cli";
            packageId = "move-cli";
          }
          {
            name = "move-compiler";
            packageId = "move-compiler";
          }
          {
            name = "move-disassembler";
            packageId = "move-disassembler";
          }
          {
            name = "move-ir-types";
            packageId = "move-ir-types";
          }
          {
            name = "move-package";
            packageId = "move-package";
          }
          {
            name = "move-unit-test";
            packageId = "move-unit-test";
          }
          {
            name = "move-vm-runtime";
            packageId = "move-vm-runtime";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
            optional = true;
          }
          {
            name = "prometheus";
            packageId = "prometheus";
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            features = [ "preserve_order" ];
          }
          {
            name = "serde_yaml";
            packageId = "serde_yaml";
          }
          {
            name = "telemetry-subscribers";
            packageId = "telemetry-subscribers";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "full" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
        ];
        devDependencies = [
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "iota-macros";
            packageId = "iota-macros";
          }
          {
            name = "iota-metrics";
            packageId = "iota-metrics";
          }
          {
            name = "move-package";
            packageId = "move-package";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "tempfile";
            packageId = "tempfile";
          }
        ];
        features = {
          "all" = [ "build" "coverage" "disassemble" "prove" "unit_test" "calibrate" ];
          "unit_test" = [ "build" "dep:once_cell" "dep:iota-move-natives" ];
        };
        resolvedDefaultFeatures = [ "all" "build" "calibrate" "coverage" "default" "disassemble" "prove" "unit_test" ];
      };
      "iota-move-build" = rec {
        crateName = "iota-move-build";
        version = "0.5.0-alpha";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/iota-move-build; }
          else ./crates/iota-move-build;
        libName = "iota_move_build";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "fastcrypto";
            packageId = "fastcrypto";
          }
          {
            name = "iota-package-management";
            packageId = "iota-package-management";
          }
          {
            name = "iota-protocol-config";
            packageId = "iota-protocol-config";
          }
          {
            name = "iota-types";
            packageId = "iota-types";
          }
          {
            name = "iota-verifier-latest";
            packageId = "iota-verifier-latest";
            rename = "iota-verifier";
          }
          {
            name = "move-binary-format";
            packageId = "move-binary-format";
          }
          {
            name = "move-bytecode-utils";
            packageId = "move-bytecode-utils";
          }
          {
            name = "move-bytecode-verifier";
            packageId = "move-bytecode-verifier";
          }
          {
            name = "move-command-line-common";
            packageId = "move-command-line-common";
          }
          {
            name = "move-compiler";
            packageId = "move-compiler";
          }
          {
            name = "move-core-types";
            packageId = "move-core-types";
          }
          {
            name = "move-ir-types";
            packageId = "move-ir-types";
          }
          {
            name = "move-package";
            packageId = "move-package";
          }
          {
            name = "move-symbol-pool";
            packageId = "move-symbol-pool";
          }
          {
            name = "serde-reflection";
            packageId = "serde-reflection";
          }
          {
            name = "tempfile";
            packageId = "tempfile";
          }
        ];

      };
      "iota-move-lsp" = rec {
        crateName = "iota-move-lsp";
        version = "0.5.0-alpha";
        edition = "2021";
        crateBin = [
          {
            name = "move-analyzer";
            path = "src/bin/move-analyzer.rs";
            requiredFeatures = [ ];
          }
        ];
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/iota-move-lsp; }
          else ./crates/iota-move-lsp;
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "bin-version";
            packageId = "bin-version";
          }
          {
            name = "clap";
            packageId = "clap";
            features = [ "derive" ];
          }
          {
            name = "move-analyzer";
            packageId = "move-analyzer";
          }
        ];

      };
      "iota-move-natives-latest" = rec {
        crateName = "iota-move-natives-latest";
        version = "0.1.0";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./iota-execution/latest/iota-move-natives; }
          else ./iota-execution/latest/iota-move-natives;
        libName = "iota_move_natives_latest";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "bcs";
            packageId = "bcs";
          }
          {
            name = "better_any";
            packageId = "better_any";
          }
          {
            name = "fastcrypto";
            packageId = "fastcrypto";
          }
          {
            name = "fastcrypto-vdf";
            packageId = "fastcrypto-vdf";
            features = [ "experimental" ];
          }
          {
            name = "fastcrypto-zkp";
            packageId = "fastcrypto-zkp";
            rename = "fastcrypto-zkp";
          }
          {
            name = "indexmap";
            packageId = "indexmap 2.5.0";
            features = [ "serde" ];
          }
          {
            name = "iota-protocol-config";
            packageId = "iota-protocol-config";
          }
          {
            name = "iota-types";
            packageId = "iota-types";
          }
          {
            name = "move-binary-format";
            packageId = "move-binary-format";
          }
          {
            name = "move-core-types";
            packageId = "move-core-types";
          }
          {
            name = "move-stdlib-natives";
            packageId = "move-stdlib-natives";
          }
          {
            name = "move-vm-runtime";
            packageId = "move-vm-runtime";
          }
          {
            name = "move-vm-types";
            packageId = "move-vm-types";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
            features = [ "small_rng" ];
          }
          {
            name = "smallvec";
            packageId = "smallvec";
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
        ];

      };
      "iota-move-natives-v0" = rec {
        crateName = "iota-move-natives-v0";
        version = "0.1.0";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./iota-execution/v0/iota-move-natives; }
          else ./iota-execution/v0/iota-move-natives;
        libName = "iota_move_natives_v0";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "bcs";
            packageId = "bcs";
          }
          {
            name = "better_any";
            packageId = "better_any";
          }
          {
            name = "fastcrypto";
            packageId = "fastcrypto";
          }
          {
            name = "fastcrypto-vdf";
            packageId = "fastcrypto-vdf";
            features = [ "experimental" ];
          }
          {
            name = "fastcrypto-zkp";
            packageId = "fastcrypto-zkp";
            rename = "fastcrypto-zkp";
          }
          {
            name = "indexmap";
            packageId = "indexmap 2.5.0";
            features = [ "serde" ];
          }
          {
            name = "iota-protocol-config";
            packageId = "iota-protocol-config";
          }
          {
            name = "iota-types";
            packageId = "iota-types";
          }
          {
            name = "move-binary-format";
            packageId = "move-binary-format";
          }
          {
            name = "move-core-types";
            packageId = "move-core-types";
          }
          {
            name = "move-stdlib-natives-v0";
            packageId = "move-stdlib-natives-v0";
            rename = "move-stdlib-natives";
          }
          {
            name = "move-vm-runtime-v0";
            packageId = "move-vm-runtime-v0";
            rename = "move-vm-runtime";
          }
          {
            name = "move-vm-types";
            packageId = "move-vm-types";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
            features = [ "small_rng" ];
          }
          {
            name = "smallvec";
            packageId = "smallvec";
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
        ];

      };
      "iota-network" = rec {
        crateName = "iota-network";
        version = "0.5.0-alpha";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/iota-network; }
          else ./crates/iota-network;
        libName = "iota_network";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "anemo";
            packageId = "anemo";
          }
          {
            name = "anemo-tower";
            packageId = "anemo-tower";
          }
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "arc-swap";
            packageId = "arc-swap";
            features = [ "serde" ];
          }
          {
            name = "bcs";
            packageId = "bcs";
          }
          {
            name = "bytes";
            packageId = "bytes";
            features = [ "serde" ];
          }
          {
            name = "dashmap";
            packageId = "dashmap";
          }
          {
            name = "fastcrypto";
            packageId = "fastcrypto";
          }
          {
            name = "fastcrypto-tbls";
            packageId = "fastcrypto-tbls";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "governor";
            packageId = "governor";
          }
          {
            name = "iota-archival";
            packageId = "iota-archival";
          }
          {
            name = "iota-config";
            packageId = "iota-config";
          }
          {
            name = "iota-macros";
            packageId = "iota-macros";
          }
          {
            name = "iota-metrics";
            packageId = "iota-metrics";
          }
          {
            name = "iota-network-stack";
            packageId = "iota-network-stack";
          }
          {
            name = "iota-storage";
            packageId = "iota-storage";
          }
          {
            name = "iota-types";
            packageId = "iota-types";
          }
          {
            name = "prometheus";
            packageId = "prometheus";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" "rc" ];
          }
          {
            name = "tap";
            packageId = "tap";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "full" ];
          }
          {
            name = "tonic";
            packageId = "tonic";
            features = [ "transport" ];
          }
          {
            name = "tower";
            packageId = "tower 0.4.13";
            features = [ "full" "util" "timeout" "load-shed" "limit" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
        ];
        buildDependencies = [
          {
            name = "anemo-build";
            packageId = "anemo-build";
          }
          {
            name = "tonic-build";
            packageId = "tonic-build";
            features = [ "prost" "transport" ];
          }
        ];
        devDependencies = [
          {
            name = "ed25519-consensus";
            packageId = "ed25519-consensus";
            features = [ "serde" ];
          }
          {
            name = "iota-macros";
            packageId = "iota-macros";
          }
          {
            name = "iota-swarm-config";
            packageId = "iota-swarm-config";
          }
          {
            name = "telemetry-subscribers";
            packageId = "telemetry-subscribers";
          }
          {
            name = "tempfile";
            packageId = "tempfile";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "test-util" ];
          }
        ];

      };
      "iota-network-stack" = rec {
        crateName = "iota-network-stack";
        version = "0.5.0-alpha";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/iota-network-stack; }
          else ./crates/iota-network-stack;
        libName = "iota_network_stack";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "anemo";
            packageId = "anemo";
          }
          {
            name = "bcs";
            packageId = "bcs";
          }
          {
            name = "bytes";
            packageId = "bytes";
            features = [ "serde" ];
          }
          {
            name = "eyre";
            packageId = "eyre";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "http";
            packageId = "http 1.1.0";
          }
          {
            name = "multiaddr";
            packageId = "multiaddr";
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" "rc" ];
          }
          {
            name = "snap";
            packageId = "snap";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "sync" "rt" "macros" ];
          }
          {
            name = "tokio-stream";
            packageId = "tokio-stream";
            features = [ "sync" "net" ];
          }
          {
            name = "tonic";
            packageId = "tonic";
            features = [ "transport" ];
          }
          {
            name = "tonic-health";
            packageId = "tonic-health";
          }
          {
            name = "tower";
            packageId = "tower 0.4.13";
            features = [ "full" "util" "timeout" "load-shed" "limit" ];
          }
          {
            name = "tower-http";
            packageId = "tower-http";
            features = [ "cors" "full" "trace" "set-header" "propagate-header" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
        ];

      };
      "iota-node" = rec {
        crateName = "iota-node";
        version = "0.5.0-alpha";
        edition = "2021";
        crateBin = [
          {
            name = "iota-node";
            path = "src/main.rs";
            requiredFeatures = [ ];
          }
        ];
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/iota-node; }
          else ./crates/iota-node;
        libName = "iota_node";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "anemo";
            packageId = "anemo";
          }
          {
            name = "anemo-tower";
            packageId = "anemo-tower";
          }
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "arc-swap";
            packageId = "arc-swap";
            features = [ "serde" ];
          }
          {
            name = "axum";
            packageId = "axum";
            usesDefaultFeatures = false;
            features = [ "tokio" "http1" "http2" "json" "matched-path" "original-uri" "form" "query" "ws" ];
          }
          {
            name = "base64";
            packageId = "base64 0.21.7";
          }
          {
            name = "bcs";
            packageId = "bcs";
          }
          {
            name = "bin-version";
            packageId = "bin-version";
          }
          {
            name = "clap";
            packageId = "clap";
            features = [ "derive" "wrap_help" ];
          }
          {
            name = "const-str";
            packageId = "const-str";
          }
          {
            name = "fastcrypto";
            packageId = "fastcrypto";
          }
          {
            name = "fastcrypto-zkp";
            packageId = "fastcrypto-zkp";
            rename = "fastcrypto-zkp";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "git-version";
            packageId = "git-version";
          }
          {
            name = "humantime";
            packageId = "humantime";
          }
          {
            name = "iota-archival";
            packageId = "iota-archival";
          }
          {
            name = "iota-common";
            packageId = "iota-common";
          }
          {
            name = "iota-config";
            packageId = "iota-config";
          }
          {
            name = "iota-core";
            packageId = "iota-core";
          }
          {
            name = "iota-json-rpc";
            packageId = "iota-json-rpc";
          }
          {
            name = "iota-json-rpc-api";
            packageId = "iota-json-rpc-api";
          }
          {
            name = "iota-macros";
            packageId = "iota-macros";
          }
          {
            name = "iota-metrics";
            packageId = "iota-metrics";
          }
          {
            name = "iota-network";
            packageId = "iota-network";
          }
          {
            name = "iota-network-stack";
            packageId = "iota-network-stack";
          }
          {
            name = "iota-protocol-config";
            packageId = "iota-protocol-config";
          }
          {
            name = "iota-rest-api";
            packageId = "iota-rest-api";
          }
          {
            name = "iota-simulator";
            packageId = "iota-simulator";
            target = { target, features }: (target."msim" or false);
          }
          {
            name = "iota-snapshot";
            packageId = "iota-snapshot";
          }
          {
            name = "iota-storage";
            packageId = "iota-storage";
          }
          {
            name = "iota-tls";
            packageId = "iota-tls";
          }
          {
            name = "iota-types";
            packageId = "iota-types";
          }
          {
            name = "move-vm-profiler";
            packageId = "move-vm-profiler";
          }
          {
            name = "prometheus";
            packageId = "prometheus";
          }
          {
            name = "reqwest";
            packageId = "reqwest 0.12.7";
            usesDefaultFeatures = false;
            features = [ "http2" "json" "rustls-tls" ];
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" "rc" ];
          }
          {
            name = "snap";
            packageId = "snap";
          }
          {
            name = "tap";
            packageId = "tap";
          }
          {
            name = "telemetry-subscribers";
            packageId = "telemetry-subscribers";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "full" ];
          }
          {
            name = "tower";
            packageId = "tower 0.4.13";
            features = [ "full" "util" "timeout" "load-shed" "limit" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "typed-store";
            packageId = "typed-store";
          }
          {
            name = "url";
            packageId = "url";
          }
        ];

      };
      "iota-open-rpc" = rec {
        crateName = "iota-open-rpc";
        version = "0.5.0-alpha";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/iota-open-rpc; }
          else ./crates/iota-open-rpc;
        libName = "iota_open_rpc";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "schemars";
            packageId = "schemars";
            features = [ "either" ];
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" "rc" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            features = [ "preserve_order" ];
          }
          {
            name = "versions";
            packageId = "versions";
          }
        ];
        devDependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "bcs";
            packageId = "bcs";
          }
          {
            name = "clap";
            packageId = "clap";
            features = [ "derive" "wrap_help" ];
          }
          {
            name = "fastcrypto";
            packageId = "fastcrypto";
          }
          {
            name = "iota-json";
            packageId = "iota-json";
          }
          {
            name = "iota-json-rpc";
            packageId = "iota-json-rpc";
          }
          {
            name = "iota-json-rpc-api";
            packageId = "iota-json-rpc-api";
          }
          {
            name = "iota-json-rpc-types";
            packageId = "iota-json-rpc-types";
          }
          {
            name = "iota-protocol-config";
            packageId = "iota-protocol-config";
          }
          {
            name = "iota-types";
            packageId = "iota-types";
            features = [ "test-utils" ];
          }
          {
            name = "move-core-types";
            packageId = "move-core-types";
          }
          {
            name = "pretty_assertions";
            packageId = "pretty_assertions";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "full" ];
          }
        ];

      };
      "iota-open-rpc-macros" = rec {
        crateName = "iota-open-rpc-macros";
        version = "0.5.0-alpha";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/iota-open-rpc-macros; }
          else ./crates/iota-open-rpc-macros;
        procMacro = true;
        libName = "iota_open_rpc_macros";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "derive-syn-parse";
            packageId = "derive-syn-parse";
          }
          {
            name = "itertools";
            packageId = "itertools 0.13.0";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.86";
          }
          {
            name = "quote";
            packageId = "quote 1.0.37";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            features = [ "full" "derive" "extra-traits" ];
          }
          {
            name = "unescape";
            packageId = "unescape";
          }
        ];

      };
      "iota-package-dump" = rec {
        crateName = "iota-package-dump";
        version = "0.5.0-alpha";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/iota-package-dump; }
          else ./crates/iota-package-dump;
        libName = "iota_package_dump";
        authors = [
          "IOTA Foundation <build@iota.org"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "bcs";
            packageId = "bcs";
          }
          {
            name = "cynic";
            packageId = "cynic";
            features = [ "http-reqwest" ];
          }
          {
            name = "fastcrypto";
            packageId = "fastcrypto";
          }
          {
            name = "iota-types";
            packageId = "iota-types";
          }
          {
            name = "move-core-types";
            packageId = "move-core-types";
          }
          {
            name = "reqwest";
            packageId = "reqwest 0.12.7";
            usesDefaultFeatures = false;
            features = [ "http2" "json" "rustls-tls" ];
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" "rc" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            features = [ "preserve_order" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
        ];
        buildDependencies = [
          {
            name = "cynic-codegen";
            packageId = "cynic-codegen";
          }
        ];

      };
      "iota-package-management" = rec {
        crateName = "iota-package-management";
        version = "0.5.0-alpha";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/iota-package-management; }
          else ./crates/iota-package-management;
        libName = "iota_package_management";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "iota-json-rpc-types";
            packageId = "iota-json-rpc-types";
          }
          {
            name = "iota-sdk";
            packageId = "iota-sdk 0.5.0-alpha";
          }
          {
            name = "iota-types";
            packageId = "iota-types";
          }
          {
            name = "move-core-types";
            packageId = "move-core-types";
          }
          {
            name = "move-package";
            packageId = "move-package";
          }
          {
            name = "move-symbol-pool";
            packageId = "move-symbol-pool";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
        ];

      };
      "iota-package-resolver" = rec {
        crateName = "iota-package-resolver";
        version = "0.5.0-alpha";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/iota-package-resolver; }
          else ./crates/iota-package-resolver;
        libName = "iota_package_resolver";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "bcs";
            packageId = "bcs";
          }
          {
            name = "eyre";
            packageId = "eyre";
          }
          {
            name = "iota-types";
            packageId = "iota-types";
          }
          {
            name = "lru";
            packageId = "lru 0.12.4";
          }
          {
            name = "move-binary-format";
            packageId = "move-binary-format";
          }
          {
            name = "move-command-line-common";
            packageId = "move-command-line-common";
          }
          {
            name = "move-core-types";
            packageId = "move-core-types";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" "rc" ];
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "tokio";
            packageId = "tokio";
          }
        ];
        devDependencies = [
          {
            name = "hyper";
            packageId = "hyper 1.4.1";
          }
          {
            name = "insta";
            packageId = "insta";
            features = [ "redactions" "yaml" "json" ];
          }
          {
            name = "iota-move-build";
            packageId = "iota-move-build";
          }
          {
            name = "move-compiler";
            packageId = "move-compiler";
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            features = [ "preserve_order" ];
          }
          {
            name = "tower";
            packageId = "tower 0.4.13";
            features = [ "full" "util" "timeout" "load-shed" "limit" ];
          }
        ];

      };
      "iota-proc-macros" = rec {
        crateName = "iota-proc-macros";
        version = "0.5.0-alpha";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/iota-proc-macros; }
          else ./crates/iota-proc-macros;
        procMacro = true;
        libName = "iota_proc_macros";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "msim-macros";
            packageId = "msim-macros";
            rename = "msim-macros";
            target = { target, features }: (target."msim" or false);
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.86";
          }
          {
            name = "quote";
            packageId = "quote 1.0.37";
          }
          {
            name = "syn";
            packageId = "syn 2.0.77";
            features = [ "full" "fold" "extra-traits" ];
          }
        ];

      };
      "iota-protocol-config" = rec {
        crateName = "iota-protocol-config";
        version = "0.5.0-alpha";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/iota-protocol-config; }
          else ./crates/iota-protocol-config;
        libName = "iota_protocol_config";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "clap";
            packageId = "clap";
            features = [ "derive" "wrap_help" ];
          }
          {
            name = "iota-protocol-config-macros";
            packageId = "iota-protocol-config-macros";
          }
          {
            name = "move-vm-config";
            packageId = "move-vm-config";
          }
          {
            name = "schemars";
            packageId = "schemars";
            features = [ "either" ];
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" "rc" ];
          }
          {
            name = "serde_with";
            packageId = "serde_with";
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
        ];
        devDependencies = [
          {
            name = "insta";
            packageId = "insta";
            target = {target, features}: (!(target."msim" or false));
            features = [ "redactions" "yaml" "json" ];
          }
        ];

      };
      "iota-protocol-config-macros" = rec {
        crateName = "iota-protocol-config-macros";
        version = "0.5.0-alpha";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/iota-protocol-config-macros; }
          else ./crates/iota-protocol-config-macros;
        procMacro = true;
        libName = "iota_protocol_config_macros";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.86";
          }
          {
            name = "quote";
            packageId = "quote 1.0.37";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            features = [ "full" "derive" "extra-traits" ];
          }
        ];

      };
      "iota-replay" = rec {
        crateName = "iota-replay";
        version = "0.5.0-alpha";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/iota-replay; }
          else ./crates/iota-replay;
        libName = "iota_replay";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "async-recursion";
            packageId = "async-recursion";
          }
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "bcs";
            packageId = "bcs";
          }
          {
            name = "clap";
            packageId = "clap";
            features = [ "derive" ];
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "http";
            packageId = "http 1.1.0";
          }
          {
            name = "iota-config";
            packageId = "iota-config";
          }
          {
            name = "iota-core";
            packageId = "iota-core";
          }
          {
            name = "iota-execution";
            packageId = "iota-execution";
          }
          {
            name = "iota-framework";
            packageId = "iota-framework";
          }
          {
            name = "iota-json-rpc-api";
            packageId = "iota-json-rpc-api";
          }
          {
            name = "iota-json-rpc-types";
            packageId = "iota-json-rpc-types";
          }
          {
            name = "iota-protocol-config";
            packageId = "iota-protocol-config";
          }
          {
            name = "iota-sdk";
            packageId = "iota-sdk 0.5.0-alpha";
          }
          {
            name = "iota-storage";
            packageId = "iota-storage";
          }
          {
            name = "iota-transaction-checks";
            packageId = "iota-transaction-checks";
          }
          {
            name = "iota-types";
            packageId = "iota-types";
          }
          {
            name = "jsonrpsee";
            packageId = "jsonrpsee";
            features = [ "server" "macros" "client" "ws-client" "http-client" ];
          }
          {
            name = "lru";
            packageId = "lru 0.12.4";
          }
          {
            name = "move-binary-format";
            packageId = "move-binary-format";
          }
          {
            name = "move-bytecode-utils";
            packageId = "move-bytecode-utils";
          }
          {
            name = "move-core-types";
            packageId = "move-core-types";
          }
          {
            name = "move-vm-config";
            packageId = "move-vm-config";
          }
          {
            name = "parking_lot";
            packageId = "parking_lot 0.12.3";
          }
          {
            name = "prometheus";
            packageId = "prometheus";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "regex";
            packageId = "regex";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" "rc" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            features = [ "preserve_order" ];
          }
          {
            name = "serde_with";
            packageId = "serde_with";
          }
          {
            name = "serde_yaml";
            packageId = "serde_yaml";
          }
          {
            name = "shared-crypto";
            packageId = "shared-crypto";
          }
          {
            name = "shellexpand";
            packageId = "shellexpand";
          }
          {
            name = "similar";
            packageId = "similar";
          }
          {
            name = "tabled";
            packageId = "tabled";
          }
          {
            name = "tempfile";
            packageId = "tempfile";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "tokio";
            packageId = "tokio";
          }
          {
            name = "tokio-util";
            packageId = "tokio-util 0.7.12";
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
        ];

      };
      "iota-rest-api" = rec {
        crateName = "iota-rest-api";
        version = "0.5.0-alpha";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/iota-rest-api; }
          else ./crates/iota-rest-api;
        libName = "iota_rest_api";
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "axum";
            packageId = "axum";
            usesDefaultFeatures = false;
            features = [ "tokio" "http1" "http2" "json" "matched-path" "original-uri" "form" "query" "ws" "matched-path" ];
          }
          {
            name = "bcs";
            packageId = "bcs";
          }
          {
            name = "fastcrypto";
            packageId = "fastcrypto";
          }
          {
            name = "iota-network-stack";
            packageId = "iota-network-stack";
          }
          {
            name = "iota-protocol-config";
            packageId = "iota-protocol-config";
          }
          {
            name = "iota-rust-sdk";
            packageId = "iota-rust-sdk";
            rename = "iota-sdk2";
            features = [ "hash" "serde" "schemars" ];
          }
          {
            name = "iota-types";
            packageId = "iota-types";
          }
          {
            name = "itertools";
            packageId = "itertools 0.13.0";
          }
          {
            name = "mime";
            packageId = "mime";
          }
          {
            name = "openapiv3";
            packageId = "openapiv3";
          }
          {
            name = "prometheus";
            packageId = "prometheus";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "reqwest";
            packageId = "reqwest 0.12.7";
            usesDefaultFeatures = false;
            features = [ "http2" "json" "rustls-tls" ];
          }
          {
            name = "schemars";
            packageId = "schemars";
            features = [ "either" ];
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" "rc" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            features = [ "preserve_order" ];
          }
          {
            name = "serde_with";
            packageId = "serde_with";
          }
          {
            name = "serde_yaml";
            packageId = "serde_yaml";
          }
          {
            name = "tap";
            packageId = "tap";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "tokio";
            packageId = "tokio";
          }
          {
            name = "url";
            packageId = "url";
          }
        ];
        devDependencies = [
          {
            name = "diffy";
            packageId = "diffy";
          }
        ];

      };
      "iota-rosetta" = rec {
        crateName = "iota-rosetta";
        version = "0.5.0-alpha";
        edition = "2021";
        crateBin = [
          {
            name = "iota-rosetta";
            path = "src/main.rs";
            requiredFeatures = [ ];
          }
        ];
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/iota-rosetta; }
          else ./crates/iota-rosetta;
        libName = "iota_rosetta";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "axum";
            packageId = "axum";
            usesDefaultFeatures = false;
            features = [ "tokio" "http1" "http2" "json" "matched-path" "original-uri" "form" "query" "ws" ];
          }
          {
            name = "axum-extra";
            packageId = "axum-extra";
            features = [ "typed-header" ];
          }
          {
            name = "bcs";
            packageId = "bcs";
          }
          {
            name = "clap";
            packageId = "clap";
            features = [ "derive" "wrap_help" ];
          }
          {
            name = "eyre";
            packageId = "eyre";
          }
          {
            name = "fastcrypto";
            packageId = "fastcrypto";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "hyper";
            packageId = "hyper 1.4.1";
          }
          {
            name = "iota-config";
            packageId = "iota-config";
          }
          {
            name = "iota-json-rpc-types";
            packageId = "iota-json-rpc-types";
          }
          {
            name = "iota-keys";
            packageId = "iota-keys";
          }
          {
            name = "iota-metrics";
            packageId = "iota-metrics";
          }
          {
            name = "iota-node";
            packageId = "iota-node";
          }
          {
            name = "iota-sdk";
            packageId = "iota-sdk 0.5.0-alpha";
          }
          {
            name = "iota-swarm-config";
            packageId = "iota-swarm-config";
          }
          {
            name = "iota-types";
            packageId = "iota-types";
          }
          {
            name = "move-core-types";
            packageId = "move-core-types";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" "rc" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            features = [ "preserve_order" ];
          }
          {
            name = "shared-crypto";
            packageId = "shared-crypto";
          }
          {
            name = "signature";
            packageId = "signature 1.6.4";
          }
          {
            name = "strum";
            packageId = "strum 0.26.3";
            features = [ "derive" ];
          }
          {
            name = "strum_macros";
            packageId = "strum_macros 0.26.4";
          }
          {
            name = "telemetry-subscribers";
            packageId = "telemetry-subscribers";
          }
          {
            name = "tempfile";
            packageId = "tempfile";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "tokio";
            packageId = "tokio";
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "typed-store";
            packageId = "typed-store";
          }
        ];
        devDependencies = [
          {
            name = "iota-move-build";
            packageId = "iota-move-build";
          }
          {
            name = "iota-sdk";
            packageId = "iota-sdk 0.5.0-alpha";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "reqwest";
            packageId = "reqwest 0.12.7";
            usesDefaultFeatures = false;
            features = [ "http2" "json" "rustls-tls" ];
          }
          {
            name = "signature";
            packageId = "signature 1.6.4";
            features = [ "rand-preview" ];
          }
          {
            name = "tempfile";
            packageId = "tempfile";
          }
          {
            name = "test-cluster";
            packageId = "test-cluster";
          }
        ];

      };
      "iota-rpc-loadgen" = rec {
        crateName = "iota-rpc-loadgen";
        version = "0.5.0-alpha";
        edition = "2021";
        crateBin = [
          {
            name = "iota-rpc-loadgen";
            path = "src/main.rs";
            requiredFeatures = [ ];
          }
        ];
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/iota-rpc-loadgen; }
          else ./crates/iota-rpc-loadgen;
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "clap";
            packageId = "clap";
            features = [ "derive" "wrap_help" ];
          }
          {
            name = "dashmap";
            packageId = "dashmap";
          }
          {
            name = "dirs";
            packageId = "dirs 5.0.1";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "iota-json-rpc-types";
            packageId = "iota-json-rpc-types";
          }
          {
            name = "iota-keys";
            packageId = "iota-keys";
          }
          {
            name = "iota-sdk";
            packageId = "iota-sdk 0.5.0-alpha";
          }
          {
            name = "iota-types";
            packageId = "iota-types";
            features = [ "test-utils" ];
          }
          {
            name = "itertools";
            packageId = "itertools 0.13.0";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" "rc" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            features = [ "preserve_order" ];
          }
          {
            name = "shared-crypto";
            packageId = "shared-crypto";
          }
          {
            name = "shellexpand";
            packageId = "shellexpand";
          }
          {
            name = "strum";
            packageId = "strum 0.26.3";
            features = [ "derive" ];
          }
          {
            name = "telemetry-subscribers";
            packageId = "telemetry-subscribers";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "full" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
        ];

      };
      "iota-rust-sdk" = rec {
        crateName = "iota-rust-sdk";
        version = "0.0.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "ssh://git@github.com/iotaledger/iota-rust-sdk.git";
          rev = "dd7b331a5ec62fd5e810051d19f31dff90ea7e3f";
          sha256 = "14p6z42n640v5jgrl76ww3d8b297hdf1bfixabi9728px324zaxh";
        };
        libName = "iota_rust_sdk";
        authors = [
          "IOTA Foundation <contact@iota.org>"
        ];
        dependencies = [
          {
            name = "base64ct";
            packageId = "base64ct";
            features = [ "alloc" ];
          }
          {
            name = "bcs";
            packageId = "bcs";
            optional = true;
          }
          {
            name = "blake2";
            packageId = "blake2";
            optional = true;
          }
          {
            name = "bnum";
            packageId = "bnum";
          }
          {
            name = "bs58";
            packageId = "bs58 0.5.1";
          }
          {
            name = "hex";
            packageId = "hex";
          }
          {
            name = "roaring";
            packageId = "roaring";
            usesDefaultFeatures = false;
          }
          {
            name = "schemars";
            packageId = "schemars";
            optional = true;
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
            optional = true;
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            optional = true;
          }
          {
            name = "serde_with";
            packageId = "serde_with";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "winnow";
            packageId = "winnow 0.6.20";
          }
        ];
        devDependencies = [
          {
            name = "bcs";
            packageId = "bcs";
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
        ];
        features = {
          "hash" = [ "dep:blake2" ];
          "rand" = [ "dep:rand_core" ];
          "schemars" = [ "serde" "dep:schemars" "dep:serde_json" ];
          "serde" = [ "dep:serde" "dep:serde_derive" "dep:serde_with" "dep:bcs" "dep:serde_json" "roaring/std" ];
        };
        resolvedDefaultFeatures = [ "default" "hash" "schemars" "serde" ];
      };
      "iota-sdk 0.5.0-alpha" = rec {
        crateName = "iota-sdk";
        version = "0.5.0-alpha";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/iota-sdk; }
          else ./crates/iota-sdk;
        libName = "iota_sdk";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "base64";
            packageId = "base64 0.21.7";
          }
          {
            name = "bcs";
            packageId = "bcs";
          }
          {
            name = "clap";
            packageId = "clap";
            features = [ "derive" "wrap_help" ];
          }
          {
            name = "colored";
            packageId = "colored";
          }
          {
            name = "fastcrypto";
            packageId = "fastcrypto";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "futures-core";
            packageId = "futures-core";
          }
          {
            name = "iota-config";
            packageId = "iota-config";
          }
          {
            name = "iota-json";
            packageId = "iota-json";
          }
          {
            name = "iota-json-rpc-api";
            packageId = "iota-json-rpc-api";
          }
          {
            name = "iota-json-rpc-types";
            packageId = "iota-json-rpc-types";
          }
          {
            name = "iota-keys";
            packageId = "iota-keys";
          }
          {
            name = "iota-transaction-builder";
            packageId = "iota-transaction-builder";
          }
          {
            name = "iota-types";
            packageId = "iota-types";
          }
          {
            name = "jsonrpsee";
            packageId = "jsonrpsee";
            features = [ "server" "macros" "client" "ws-client" "http-client" ];
          }
          {
            name = "move-core-types";
            packageId = "move-core-types";
          }
          {
            name = "reqwest";
            packageId = "reqwest 0.12.7";
            usesDefaultFeatures = false;
            features = [ "http2" "json" "rustls-tls" ];
          }
          {
            name = "rustls";
            packageId = "rustls 0.23.13";
            usesDefaultFeatures = false;
            features = [ "std" "tls12" "ring" ];
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" "rc" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            features = [ "preserve_order" ];
          }
          {
            name = "serde_with";
            packageId = "serde_with";
          }
          {
            name = "shared-crypto";
            packageId = "shared-crypto";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "tokio";
            packageId = "tokio";
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
        ];
        devDependencies = [
          {
            name = "dirs";
            packageId = "dirs 5.0.1";
          }
          {
            name = "iota-move-build";
            packageId = "iota-move-build";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "tempfile";
            packageId = "tempfile";
          }
        ];

      };
      "iota-sdk 1.1.5" = rec {
        crateName = "iota-sdk";
        version = "1.1.5";
        edition = "2021";
        sha256 = "0zh3fvrbkcqwl378s0ns3r1mflk7psw01jknclcdifn5wp5b1py1";
        libName = "iota_sdk";
        authors = [
          "IOTA Stiftung"
        ];
        dependencies = [
          {
            name = "async-trait";
            packageId = "async-trait";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "bech32";
            packageId = "bech32";
            usesDefaultFeatures = false;
          }
          {
            name = "bitflags";
            packageId = "bitflags 2.6.0";
            usesDefaultFeatures = false;
          }
          {
            name = "bytemuck";
            packageId = "bytemuck";
            usesDefaultFeatures = false;
          }
          {
            name = "derive_more";
            packageId = "derive_more";
            usesDefaultFeatures = false;
            features = [ "from" "as_ref" "deref" "deref_mut" "display" ];
          }
          {
            name = "futures";
            packageId = "futures";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "thread-pool" ];
          }
          {
            name = "getset";
            packageId = "getset";
            usesDefaultFeatures = false;
          }
          {
            name = "gloo-timers";
            packageId = "gloo-timers 0.3.0";
            usesDefaultFeatures = false;
            target = { target, features }: (builtins.elem "wasm" target."family");
            features = [ "futures" ];
          }
          {
            name = "hashbrown";
            packageId = "hashbrown 0.14.5";
            usesDefaultFeatures = false;
            features = [ "ahash" "inline-more" ];
          }
          {
            name = "hex";
            packageId = "hex";
            usesDefaultFeatures = false;
          }
          {
            name = "instant";
            packageId = "instant";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "instant";
            packageId = "instant";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: (builtins.elem "wasm" target."family");
            features = [ "wasm-bindgen" ];
          }
          {
            name = "iota-crypto";
            packageId = "iota-crypto";
            usesDefaultFeatures = false;
            features = [ "blake2b" "ed25519" "secp256k1" "ternary_encoding" ];
          }
          {
            name = "iota_stronghold";
            packageId = "iota_stronghold";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "iterator-sorted";
            packageId = "iterator-sorted 0.2.0";
            usesDefaultFeatures = false;
          }
          {
            name = "itertools";
            packageId = "itertools 0.12.1";
            usesDefaultFeatures = false;
            features = [ "use_alloc" ];
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
            usesDefaultFeatures = false;
            target = { target, features }: (builtins.elem "wasm" target."family");
          }
          {
            name = "log";
            packageId = "log";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "num_cpus";
            packageId = "num_cpus";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "once_cell";
            packageId = "once_cell";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "packable";
            packageId = "packable";
            usesDefaultFeatures = false;
            features = [ "primitive-types" ];
          }
          {
            name = "prefix-hex";
            packageId = "prefix-hex";
            usesDefaultFeatures = false;
            features = [ "primitive-types" ];
          }
          {
            name = "primitive-types";
            packageId = "primitive-types 0.12.2";
            usesDefaultFeatures = false;
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "min_const_gen" ];
          }
          {
            name = "regex";
            packageId = "regex";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "unicode-perl" ];
          }
          {
            name = "reqwest";
            packageId = "reqwest 0.11.27";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "json" ];
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "serde_repr";
            packageId = "serde_repr";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "thiserror";
            packageId = "thiserror";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "tokio";
            packageId = "tokio";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: (!(builtins.elem "wasm" target."family"));
            features = [ "macros" "rt-multi-thread" "time" "sync" ];
          }
          {
            name = "tokio";
            packageId = "tokio";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: (builtins.elem "wasm" target."family");
            features = [ "macros" "rt" "time" "sync" ];
          }
          {
            name = "url";
            packageId = "url";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "serde" ];
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "zeroize_derive" ];
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            usesDefaultFeatures = false;
            features = [ "macros" "rt" "rt-multi-thread" "time" "sync" "fs" ];
          }
        ];
        features = {
          "async-trait" = [ "dep:async-trait" ];
          "bs58" = [ "dep:bs58" ];
          "client" = [ "pow" "tokio" "zeroize" "url" "reqwest" "async-trait" "log" "thiserror" "futures" "serde" "instant" "iota-crypto/bip39" "iota-crypto/bip39-en" "iota-crypto/slip10" "iota-crypto/keccak" "iota-crypto/bip44" "iota-crypto/random" ];
          "default" = [ "client" "wallet" "tls" ];
          "fern-logger" = [ "dep:fern-logger" ];
          "futures" = [ "dep:futures" ];
          "gloo-storage" = [ "dep:gloo-storage" ];
          "instant" = [ "dep:instant" ];
          "iota-ledger-nano" = [ "dep:iota-ledger-nano" ];
          "iota_stronghold" = [ "dep:iota_stronghold" ];
          "irc_27" = [ "url" "serde" ];
          "irc_30" = [ "url" "serde" ];
          "ledger_nano" = [ "iota-ledger-nano" ];
          "log" = [ "dep:log" ];
          "mqtt" = [ "std" "tls" "regex" "rumqttc" "dep:once_cell" ];
          "num_cpus" = [ "dep:num_cpus" ];
          "participation" = [ "storage" ];
          "pow" = [ "std" "num_cpus" "iota-crypto/curl-p" ];
          "private_key_secret_manager" = [ "bs58" ];
          "rand" = [ "dep:rand" ];
          "regex" = [ "dep:regex" ];
          "reqwest" = [ "dep:reqwest" ];
          "rocksdb" = [ "storage" "dep:rocksdb" ];
          "rumqttc" = [ "dep:rumqttc" ];
          "serde" = [ "serde_repr" "hashbrown/serde" "packable/serde" "primitive-types/serde_no_std" "zeroize?/serde" ];
          "serde_repr" = [ "dep:serde_repr" ];
          "std" = [ "packable/std" "prefix-hex/std" "primitive-types/std" "bech32/std" "bitflags/std" "rand?/std_rng" "regex?/std" "iota_stronghold?/std" "iota-crypto/std" "once_cell?/std" "itertools/use_std" ];
          "storage" = [ "iota-crypto/chacha" "dep:time" "dep:anymap" "dep:once_cell" "dep:heck" ];
          "stronghold" = [ "iota_stronghold" "iota-crypto/chacha" "dep:time" "dep:anymap" "dep:once_cell" "dep:heck" ];
          "thiserror" = [ "dep:thiserror" ];
          "tls" = [ "reqwest?/rustls-tls" "rumqttc?/use-rustls" ];
          "tokio" = [ "dep:tokio" ];
          "url" = [ "dep:url" ];
          "wallet" = [ "client" ];
          "wasm-bindgen-futures" = [ "dep:wasm-bindgen-futures" ];
          "zeroize" = [ "dep:zeroize" ];
        };
        resolvedDefaultFeatures = [ "async-trait" "client" "futures" "instant" "irc_27" "irc_30" "log" "num_cpus" "pow" "reqwest" "serde" "serde_repr" "std" "thiserror" "tokio" "url" "zeroize" ];
      };
      "iota-simulator" = rec {
        crateName = "iota-simulator";
        version = "0.5.0-alpha";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/iota-simulator; }
          else ./crates/iota-simulator;
        libName = "iota_simulator";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "anemo";
            packageId = "anemo";
          }
          {
            name = "anemo-tower";
            packageId = "anemo-tower";
          }
          {
            name = "bcs";
            packageId = "bcs";
          }
          {
            name = "fastcrypto";
            packageId = "fastcrypto";
            features = [ "copy_key" ];
          }
          {
            name = "iota-framework";
            packageId = "iota-framework";
          }
          {
            name = "iota-move-build";
            packageId = "iota-move-build";
          }
          {
            name = "iota-types";
            packageId = "iota-types";
          }
          {
            name = "lru";
            packageId = "lru 0.12.4";
          }
          {
            name = "move-package";
            packageId = "move-package";
          }
          {
            name = "msim";
            packageId = "msim";
            rename = "msim";
            target = { target, features }: (target."msim" or false);
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" "rc" ];
          }
          {
            name = "telemetry-subscribers";
            packageId = "telemetry-subscribers";
          }
          {
            name = "tempfile";
            packageId = "tempfile";
          }
          {
            name = "tower";
            packageId = "tower 0.4.13";
            features = [ "full" "util" "timeout" "load-shed" "limit" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
        ];

      };
      "iota-single-node-benchmark" = rec {
        crateName = "iota-single-node-benchmark";
        version = "0.5.0-alpha";
        edition = "2021";
        crateBin = [
          {
            name = "iota-single-node-benchmark";
            path = "src/main.rs";
            requiredFeatures = [ ];
          }
        ];
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/iota-single-node-benchmark; }
          else ./crates/iota-single-node-benchmark;
        libName = "iota_single_node_benchmark";
        dependencies = [
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "bcs";
            packageId = "bcs";
          }
          {
            name = "clap";
            packageId = "clap";
            features = [ "derive" "wrap_help" ];
          }
          {
            name = "fs_extra";
            packageId = "fs_extra";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "iota-config";
            packageId = "iota-config";
          }
          {
            name = "iota-core";
            packageId = "iota-core";
            features = [ "test-utils" ];
          }
          {
            name = "iota-move-build";
            packageId = "iota-move-build";
          }
          {
            name = "iota-storage";
            packageId = "iota-storage";
          }
          {
            name = "iota-test-transaction-builder";
            packageId = "iota-test-transaction-builder";
          }
          {
            name = "iota-transaction-checks";
            packageId = "iota-transaction-checks";
          }
          {
            name = "iota-types";
            packageId = "iota-types";
            features = [ "test-utils" ];
          }
          {
            name = "move-binary-format";
            packageId = "move-binary-format";
          }
          {
            name = "move-bytecode-utils";
            packageId = "move-bytecode-utils";
          }
          {
            name = "move-core-types";
            packageId = "move-core-types";
          }
          {
            name = "move-package";
            packageId = "move-package";
          }
          {
            name = "move-symbol-pool";
            packageId = "move-symbol-pool";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "prometheus";
            packageId = "prometheus";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" "rc" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            features = [ "preserve_order" ];
          }
          {
            name = "strum";
            packageId = "strum 0.26.3";
            features = [ "derive" ];
          }
          {
            name = "telemetry-subscribers";
            packageId = "telemetry-subscribers";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "full" "tracing" "test-util" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
        ];
        devDependencies = [
          {
            name = "iota-macros";
            packageId = "iota-macros";
          }
          {
            name = "iota-metrics";
            packageId = "iota-metrics";
          }
          {
            name = "iota-protocol-config";
            packageId = "iota-protocol-config";
          }
          {
            name = "iota-simulator";
            packageId = "iota-simulator";
          }
        ];

      };
      "iota-snapshot" = rec {
        crateName = "iota-snapshot";
        version = "0.5.0-alpha";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/iota-snapshot; }
          else ./crates/iota-snapshot;
        libName = "iota_snapshot";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "bcs";
            packageId = "bcs";
          }
          {
            name = "byteorder";
            packageId = "byteorder";
          }
          {
            name = "bytes";
            packageId = "bytes";
            features = [ "serde" ];
          }
          {
            name = "fastcrypto";
            packageId = "fastcrypto";
            features = [ "copy_key" ];
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "indicatif";
            packageId = "indicatif";
          }
          {
            name = "integer-encoding";
            packageId = "integer-encoding";
          }
          {
            name = "iota-config";
            packageId = "iota-config";
          }
          {
            name = "iota-core";
            packageId = "iota-core";
          }
          {
            name = "iota-protocol-config";
            packageId = "iota-protocol-config";
          }
          {
            name = "iota-storage";
            packageId = "iota-storage";
          }
          {
            name = "iota-types";
            packageId = "iota-types";
          }
          {
            name = "num_enum";
            packageId = "num_enum";
          }
          {
            name = "object_store";
            packageId = "object_store 0.10.2";
            features = [ "aws" "gcp" "azure" "http" ];
          }
          {
            name = "prometheus";
            packageId = "prometheus";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" "rc" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            features = [ "preserve_order" ];
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "full" ];
          }
          {
            name = "tokio-stream";
            packageId = "tokio-stream";
            features = [ "sync" "net" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
        ];
        devDependencies = [
          {
            name = "tempfile";
            packageId = "tempfile";
          }
        ];

      };
      "iota-source-validation" = rec {
        crateName = "iota-source-validation";
        version = "0.5.0-alpha";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/iota-source-validation; }
          else ./crates/iota-source-validation;
        libName = "iota_source_validation";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "colored";
            packageId = "colored";
          }
          {
            name = "flate2";
            packageId = "flate2";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "iota-json-rpc-types";
            packageId = "iota-json-rpc-types";
          }
          {
            name = "iota-move-build";
            packageId = "iota-move-build";
          }
          {
            name = "iota-package-management";
            packageId = "iota-package-management";
          }
          {
            name = "iota-sdk";
            packageId = "iota-sdk 0.5.0-alpha";
          }
          {
            name = "iota-types";
            packageId = "iota-types";
          }
          {
            name = "move-binary-format";
            packageId = "move-binary-format";
          }
          {
            name = "move-bytecode-source-map";
            packageId = "move-bytecode-source-map";
          }
          {
            name = "move-command-line-common";
            packageId = "move-command-line-common";
          }
          {
            name = "move-compiler";
            packageId = "move-compiler";
          }
          {
            name = "move-core-types";
            packageId = "move-core-types";
          }
          {
            name = "move-package";
            packageId = "move-package";
          }
          {
            name = "move-symbol-pool";
            packageId = "move-symbol-pool";
          }
          {
            name = "tar";
            packageId = "tar";
          }
          {
            name = "tempfile";
            packageId = "tempfile";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "ureq";
            packageId = "ureq";
          }
        ];
        devDependencies = [
          {
            name = "expect-test";
            packageId = "expect-test";
          }
          {
            name = "iota-test-transaction-builder";
            packageId = "iota-test-transaction-builder";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "tempfile";
            packageId = "tempfile";
          }
          {
            name = "test-cluster";
            packageId = "test-cluster";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "macros" "test-util" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
        ];

      };
      "iota-source-validation-service" = rec {
        crateName = "iota-source-validation-service";
        version = "0.5.0-alpha";
        edition = "2021";
        crateBin = [
          {
            name = "iota-source-validation-service";
            path = "src/main.rs";
            requiredFeatures = [ ];
          }
        ];
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/iota-source-validation-service; }
          else ./crates/iota-source-validation-service;
        libName = "iota_source_validation_service";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
            features = [ "backtrace" ];
          }
          {
            name = "axum";
            packageId = "axum";
            usesDefaultFeatures = false;
            features = [ "tokio" "http1" "http2" "json" "matched-path" "original-uri" "form" "query" "ws" ];
          }
          {
            name = "bin-version";
            packageId = "bin-version";
          }
          {
            name = "clap";
            packageId = "clap";
            features = [ "derive" "wrap_help" ];
          }
          {
            name = "const-str";
            packageId = "const-str";
          }
          {
            name = "git-version";
            packageId = "git-version";
          }
          {
            name = "hyper";
            packageId = "hyper 1.4.1";
          }
          {
            name = "iota-metrics";
            packageId = "iota-metrics";
          }
          {
            name = "iota-move";
            packageId = "iota-move";
          }
          {
            name = "iota-move-build";
            packageId = "iota-move-build";
          }
          {
            name = "iota-sdk";
            packageId = "iota-sdk 0.5.0-alpha";
          }
          {
            name = "iota-source-validation";
            packageId = "iota-source-validation";
          }
          {
            name = "jsonrpsee";
            packageId = "jsonrpsee";
            features = [ "server" "macros" "client" "ws-client" "http-client" ];
          }
          {
            name = "move-compiler";
            packageId = "move-compiler";
          }
          {
            name = "move-core-types";
            packageId = "move-core-types";
          }
          {
            name = "move-package";
            packageId = "move-package";
          }
          {
            name = "move-symbol-pool";
            packageId = "move-symbol-pool";
          }
          {
            name = "prometheus";
            packageId = "prometheus";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "telemetry-subscribers";
            packageId = "telemetry-subscribers";
          }
          {
            name = "tempfile";
            packageId = "tempfile";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "macros" "rt-multi-thread" ];
          }
          {
            name = "toml";
            packageId = "toml 0.7.8";
            features = [ "preserve_order" ];
          }
          {
            name = "tower";
            packageId = "tower 0.4.13";
            features = [ "full" "util" "timeout" "load-shed" "limit" ];
          }
          {
            name = "tower-http";
            packageId = "tower-http";
            features = [ "cors" "full" "trace" "set-header" "propagate-header" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "url";
            packageId = "url";
          }
        ];
        devDependencies = [
          {
            name = "expect-test";
            packageId = "expect-test";
          }
          {
            name = "fs_extra";
            packageId = "fs_extra";
          }
          {
            name = "iota";
            packageId = "iota";
          }
          {
            name = "iota-json-rpc-types";
            packageId = "iota-json-rpc-types";
          }
          {
            name = "iota-move";
            packageId = "iota-move";
            features = [ "all" ];
          }
          {
            name = "reqwest";
            packageId = "reqwest 0.12.7";
            usesDefaultFeatures = false;
            features = [ "http2" "json" "rustls-tls" ];
          }
          {
            name = "test-cluster";
            packageId = "test-cluster";
          }
        ];

      };
      "iota-storage" = rec {
        crateName = "iota-storage";
        version = "0.5.0-alpha";
        edition = "2021";
        crateBin = [
          {
            name = "http_kv_tool";
            path = "src/bin/http_kv_tool.rs";
            requiredFeatures = [ ];
          }
        ];
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/iota-storage; }
          else ./crates/iota-storage;
        libName = "iota_storage";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "axum";
            packageId = "axum";
            usesDefaultFeatures = false;
            target = { target, features }: (target."msim" or false);
            features = [ "tokio" "http1" "http2" "json" "matched-path" "original-uri" "form" "query" "ws" ];
          }
          {
            name = "backoff";
            packageId = "backoff";
            features = [ "futures" "futures-core" "pin-project-lite" "tokio" "tokio_1" ];
          }
          {
            name = "base64-url";
            packageId = "base64-url";
          }
          {
            name = "bcs";
            packageId = "bcs";
          }
          {
            name = "byteorder";
            packageId = "byteorder";
          }
          {
            name = "bytes";
            packageId = "bytes";
            features = [ "serde" ];
          }
          {
            name = "chrono";
            packageId = "chrono";
            features = [ "clock" "serde" ];
          }
          {
            name = "clap";
            packageId = "clap";
          }
          {
            name = "eyre";
            packageId = "eyre";
          }
          {
            name = "fastcrypto";
            packageId = "fastcrypto";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "hyper";
            packageId = "hyper 1.4.1";
          }
          {
            name = "hyper-rustls";
            packageId = "hyper-rustls 0.27.3";
            usesDefaultFeatures = false;
            features = [ "webpki-roots" "http2" "ring" "tls12" ];
          }
          {
            name = "indicatif";
            packageId = "indicatif";
          }
          {
            name = "integer-encoding";
            packageId = "integer-encoding";
          }
          {
            name = "iota-config";
            packageId = "iota-config";
          }
          {
            name = "iota-json-rpc-types";
            packageId = "iota-json-rpc-types";
          }
          {
            name = "iota-metrics";
            packageId = "iota-metrics";
          }
          {
            name = "iota-protocol-config";
            packageId = "iota-protocol-config";
          }
          {
            name = "iota-simulator";
            packageId = "iota-simulator";
            target = { target, features }: (target."msim" or false);
          }
          {
            name = "iota-types";
            packageId = "iota-types";
          }
          {
            name = "itertools";
            packageId = "itertools 0.13.0";
          }
          {
            name = "lru";
            packageId = "lru 0.12.4";
          }
          {
            name = "move-binary-format";
            packageId = "move-binary-format";
          }
          {
            name = "move-bytecode-utils";
            packageId = "move-bytecode-utils";
          }
          {
            name = "move-core-types";
            packageId = "move-core-types";
          }
          {
            name = "num_enum";
            packageId = "num_enum";
          }
          {
            name = "object_store";
            packageId = "object_store 0.10.2";
            features = [ "aws" "gcp" "azure" "http" ];
          }
          {
            name = "parking_lot";
            packageId = "parking_lot 0.12.3";
          }
          {
            name = "percent-encoding";
            packageId = "percent-encoding";
          }
          {
            name = "prometheus";
            packageId = "prometheus";
          }
          {
            name = "reqwest";
            packageId = "reqwest 0.12.7";
            usesDefaultFeatures = false;
            features = [ "http2" "json" "rustls-tls" ];
          }
          {
            name = "rustls";
            packageId = "rustls 0.23.13";
            target = { target, features }: (target."msim" or false);
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" "rc" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            features = [ "preserve_order" ];
          }
          {
            name = "tap";
            packageId = "tap";
          }
          {
            name = "telemetry-subscribers";
            packageId = "telemetry-subscribers";
          }
          {
            name = "tempfile";
            packageId = "tempfile";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "full" "tracing" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "typed-store";
            packageId = "typed-store";
          }
          {
            name = "url";
            packageId = "url";
          }
          {
            name = "zstd";
            packageId = "zstd 0.13.2";
          }
        ];
        devDependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "iota-macros";
            packageId = "iota-macros";
          }
          {
            name = "iota-test-transaction-builder";
            packageId = "iota-test-transaction-builder";
          }
          {
            name = "iota-types";
            packageId = "iota-types";
            features = [ "test-utils" ];
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "tempfile";
            packageId = "tempfile";
          }
        ];

      };
      "iota-surfer" = rec {
        crateName = "iota-surfer";
        version = "0.5.0-alpha";
        edition = "2021";
        crateBin = [
          {
            name = "iota-surfer";
            path = "src/main.rs";
            requiredFeatures = [ ];
          }
        ];
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/iota-surfer; }
          else ./crates/iota-surfer;
        libName = "iota_surfer";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "bcs";
            packageId = "bcs";
          }
          {
            name = "clap";
            packageId = "clap";
            features = [ "derive" "wrap_help" ];
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "indexmap";
            packageId = "indexmap 2.5.0";
            features = [ "serde" ];
          }
          {
            name = "iota-core";
            packageId = "iota-core";
          }
          {
            name = "iota-json-rpc-types";
            packageId = "iota-json-rpc-types";
          }
          {
            name = "iota-move-build";
            packageId = "iota-move-build";
          }
          {
            name = "iota-protocol-config";
            packageId = "iota-protocol-config";
          }
          {
            name = "iota-swarm-config";
            packageId = "iota-swarm-config";
          }
          {
            name = "iota-types";
            packageId = "iota-types";
          }
          {
            name = "move-binary-format";
            packageId = "move-binary-format";
          }
          {
            name = "move-core-types";
            packageId = "move-core-types";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "telemetry-subscribers";
            packageId = "telemetry-subscribers";
          }
          {
            name = "test-cluster";
            packageId = "test-cluster";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "full" "tracing" "test-util" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
        ];
        devDependencies = [
          {
            name = "iota-macros";
            packageId = "iota-macros";
          }
          {
            name = "iota-metrics";
            packageId = "iota-metrics";
          }
          {
            name = "iota-simulator";
            packageId = "iota-simulator";
          }
          {
            name = "move-package";
            packageId = "move-package";
          }
          {
            name = "prometheus";
            packageId = "prometheus";
          }
        ];

      };
      "iota-swarm" = rec {
        crateName = "iota-swarm";
        version = "0.5.0-alpha";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/iota-swarm; }
          else ./crates/iota-swarm;
        libName = "iota_swarm";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "iota-config";
            packageId = "iota-config";
          }
          {
            name = "iota-macros";
            packageId = "iota-macros";
          }
          {
            name = "iota-metrics";
            packageId = "iota-metrics";
          }
          {
            name = "iota-network-stack";
            packageId = "iota-network-stack";
          }
          {
            name = "iota-node";
            packageId = "iota-node";
          }
          {
            name = "iota-protocol-config";
            packageId = "iota-protocol-config";
          }
          {
            name = "iota-simulator";
            packageId = "iota-simulator";
            target = { target, features }: (target."msim" or false);
          }
          {
            name = "iota-swarm-config";
            packageId = "iota-swarm-config";
          }
          {
            name = "iota-types";
            packageId = "iota-types";
          }
          {
            name = "prometheus";
            packageId = "prometheus";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "tap";
            packageId = "tap";
          }
          {
            name = "telemetry-subscribers";
            packageId = "telemetry-subscribers";
          }
          {
            name = "tempfile";
            packageId = "tempfile";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "full" ];
          }
          {
            name = "tonic-health";
            packageId = "tonic-health";
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
        ];

      };
      "iota-swarm-config" = rec {
        crateName = "iota-swarm-config";
        version = "0.5.0-alpha";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/iota-swarm-config; }
          else ./crates/iota-swarm-config;
        libName = "iota_swarm_config";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "anemo";
            packageId = "anemo";
          }
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "bcs";
            packageId = "bcs";
          }
          {
            name = "fastcrypto";
            packageId = "fastcrypto";
          }
          {
            name = "iota-config";
            packageId = "iota-config";
          }
          {
            name = "iota-genesis-builder";
            packageId = "iota-genesis-builder";
          }
          {
            name = "iota-macros";
            packageId = "iota-macros";
          }
          {
            name = "iota-protocol-config";
            packageId = "iota-protocol-config";
          }
          {
            name = "iota-simulator";
            packageId = "iota-simulator";
            target = { target, features }: (target."msim" or false);
          }
          {
            name = "iota-types";
            packageId = "iota-types";
          }
          {
            name = "move-bytecode-utils";
            packageId = "move-bytecode-utils";
          }
          {
            name = "prometheus";
            packageId = "prometheus";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" "rc" ];
          }
          {
            name = "serde_with";
            packageId = "serde_with";
          }
          {
            name = "serde_yaml";
            packageId = "serde_yaml";
          }
          {
            name = "shared-crypto";
            packageId = "shared-crypto";
          }
          {
            name = "tempfile";
            packageId = "tempfile";
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
        ];
        devDependencies = [
          {
            name = "insta";
            packageId = "insta";
            features = [ "redactions" "yaml" "json" ];
          }
          {
            name = "iota-execution";
            packageId = "iota-execution";
          }
          {
            name = "tempfile";
            packageId = "tempfile";
          }
        ];

      };
      "iota-test-transaction-builder" = rec {
        crateName = "iota-test-transaction-builder";
        version = "0.5.0-alpha";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/iota-test-transaction-builder; }
          else ./crates/iota-test-transaction-builder;
        libName = "iota_test_transaction_builder";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "bcs";
            packageId = "bcs";
          }
          {
            name = "iota-genesis-builder";
            packageId = "iota-genesis-builder";
          }
          {
            name = "iota-move-build";
            packageId = "iota-move-build";
          }
          {
            name = "iota-sdk";
            packageId = "iota-sdk 0.5.0-alpha";
          }
          {
            name = "iota-types";
            packageId = "iota-types";
          }
          {
            name = "move-core-types";
            packageId = "move-core-types";
          }
          {
            name = "shared-crypto";
            packageId = "shared-crypto";
          }
        ];

      };
      "iota-tls" = rec {
        crateName = "iota-tls";
        version = "0.5.0-alpha";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/iota-tls; }
          else ./crates/iota-tls;
        libName = "iota_tls";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "axum";
            packageId = "axum";
            usesDefaultFeatures = false;
            features = [ "tokio" "http1" "http2" "json" "matched-path" "original-uri" "form" "query" "ws" ];
          }
          {
            name = "axum-server";
            packageId = "axum-server";
            usesDefaultFeatures = false;
            features = [ "tls-rustls" ];
          }
          {
            name = "ed25519";
            packageId = "ed25519 2.2.3";
            features = [ "pkcs8" "alloc" "zeroize" ];
          }
          {
            name = "fastcrypto";
            packageId = "fastcrypto";
          }
          {
            name = "pkcs8";
            packageId = "pkcs8 0.10.2";
            features = [ "std" ];
          }
          {
            name = "rcgen";
            packageId = "rcgen";
          }
          {
            name = "reqwest";
            packageId = "reqwest 0.12.7";
            usesDefaultFeatures = false;
            features = [ "http2" "json" "rustls-tls" ];
          }
          {
            name = "rustls";
            packageId = "rustls 0.23.13";
            usesDefaultFeatures = false;
            features = [ "std" "tls12" "ring" ];
          }
          {
            name = "rustls-webpki";
            packageId = "rustls-webpki 0.102.8";
            rename = "webpki";
            features = [ "alloc" "std" ];
          }
          {
            name = "tokio";
            packageId = "tokio";
          }
          {
            name = "tokio-rustls";
            packageId = "tokio-rustls 0.26.0";
            usesDefaultFeatures = false;
            features = [ "tls12" "ring" ];
          }
          {
            name = "tower-layer";
            packageId = "tower-layer";
          }
          {
            name = "x509-parser";
            packageId = "x509-parser";
          }
        ];
        devDependencies = [
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
        ];

      };
      "iota-tool" = rec {
        crateName = "iota-tool";
        version = "0.5.0-alpha";
        edition = "2021";
        crateBin = [
          {
            name = "iota-tool";
            path = "src/main.rs";
            requiredFeatures = [ ];
          }
        ];
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/iota-tool; }
          else ./crates/iota-tool;
        libName = "iota_tool";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "anemo";
            packageId = "anemo";
          }
          {
            name = "anemo-cli";
            packageId = "anemo-cli";
          }
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "bcs";
            packageId = "bcs";
          }
          {
            name = "bin-version";
            packageId = "bin-version";
          }
          {
            name = "clap";
            packageId = "clap";
            features = [ "derive" "wrap_help" ];
          }
          {
            name = "colored";
            packageId = "colored";
          }
          {
            name = "comfy-table";
            packageId = "comfy-table";
          }
          {
            name = "eyre";
            packageId = "eyre";
          }
          {
            name = "fastcrypto";
            packageId = "fastcrypto";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "hex";
            packageId = "hex";
          }
          {
            name = "indicatif";
            packageId = "indicatif";
          }
          {
            name = "iota-archival";
            packageId = "iota-archival";
          }
          {
            name = "iota-config";
            packageId = "iota-config";
          }
          {
            name = "iota-core";
            packageId = "iota-core";
          }
          {
            name = "iota-network";
            packageId = "iota-network";
          }
          {
            name = "iota-package-dump";
            packageId = "iota-package-dump";
          }
          {
            name = "iota-protocol-config";
            packageId = "iota-protocol-config";
          }
          {
            name = "iota-replay";
            packageId = "iota-replay";
          }
          {
            name = "iota-sdk";
            packageId = "iota-sdk 0.5.0-alpha";
          }
          {
            name = "iota-snapshot";
            packageId = "iota-snapshot";
          }
          {
            name = "iota-storage";
            packageId = "iota-storage";
          }
          {
            name = "iota-types";
            packageId = "iota-types";
          }
          {
            name = "itertools";
            packageId = "itertools 0.13.0";
          }
          {
            name = "move-core-types";
            packageId = "move-core-types";
          }
          {
            name = "num_cpus";
            packageId = "num_cpus";
          }
          {
            name = "object_store";
            packageId = "object_store 0.10.2";
            features = [ "aws" "gcp" "azure" "http" ];
          }
          {
            name = "prometheus";
            packageId = "prometheus";
          }
          {
            name = "ron";
            packageId = "ron";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" "rc" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            features = [ "preserve_order" ];
          }
          {
            name = "strum";
            packageId = "strum 0.26.3";
            features = [ "derive" ];
          }
          {
            name = "strum_macros";
            packageId = "strum_macros 0.26.4";
          }
          {
            name = "telemetry-subscribers";
            packageId = "telemetry-subscribers";
          }
          {
            name = "tempfile";
            packageId = "tempfile";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "full" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "typed-store";
            packageId = "typed-store";
          }
        ];

      };
      "iota-transaction-builder" = rec {
        crateName = "iota-transaction-builder";
        version = "0.5.0-alpha";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/iota-transaction-builder; }
          else ./crates/iota-transaction-builder;
        libName = "iota_transaction_builder";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "bcs";
            packageId = "bcs";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "iota-json";
            packageId = "iota-json";
          }
          {
            name = "iota-json-rpc-types";
            packageId = "iota-json-rpc-types";
          }
          {
            name = "iota-protocol-config";
            packageId = "iota-protocol-config";
          }
          {
            name = "iota-types";
            packageId = "iota-types";
          }
          {
            name = "move-binary-format";
            packageId = "move-binary-format";
          }
          {
            name = "move-core-types";
            packageId = "move-core-types";
          }
        ];

      };
      "iota-transaction-checks" = rec {
        crateName = "iota-transaction-checks";
        version = "0.5.0-alpha";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/iota-transaction-checks; }
          else ./crates/iota-transaction-checks;
        libName = "iota_transaction_checks";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "fastcrypto-zkp";
            packageId = "fastcrypto-zkp";
            rename = "fastcrypto-zkp";
          }
          {
            name = "iota-config";
            packageId = "iota-config";
          }
          {
            name = "iota-execution";
            packageId = "iota-execution";
          }
          {
            name = "iota-macros";
            packageId = "iota-macros";
          }
          {
            name = "iota-protocol-config";
            packageId = "iota-protocol-config";
          }
          {
            name = "iota-types";
            packageId = "iota-types";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
        ];

      };
      "iota-transactional-test-runner" = rec {
        crateName = "iota-transactional-test-runner";
        version = "0.5.0-alpha";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/iota-transactional-test-runner; }
          else ./crates/iota-transactional-test-runner;
        libName = "iota_transactional_test_runner";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "bcs";
            packageId = "bcs";
          }
          {
            name = "bimap";
            packageId = "bimap";
          }
          {
            name = "clap";
            packageId = "clap";
            features = [ "derive" "wrap_help" ];
          }
          {
            name = "criterion";
            packageId = "criterion";
            features = [ "async" "async_tokio" "html_reports" ];
          }
          {
            name = "eyre";
            packageId = "eyre";
          }
          {
            name = "fastcrypto";
            packageId = "fastcrypto";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "iota-config";
            packageId = "iota-config";
          }
          {
            name = "iota-core";
            packageId = "iota-core";
            features = [ "test-utils" ];
          }
          {
            name = "iota-framework";
            packageId = "iota-framework";
          }
          {
            name = "iota-framework-snapshot";
            packageId = "iota-framework-snapshot";
          }
          {
            name = "iota-graphql-rpc";
            packageId = "iota-graphql-rpc";
          }
          {
            name = "iota-json-rpc";
            packageId = "iota-json-rpc";
          }
          {
            name = "iota-json-rpc-api";
            packageId = "iota-json-rpc-api";
          }
          {
            name = "iota-json-rpc-types";
            packageId = "iota-json-rpc-types";
          }
          {
            name = "iota-protocol-config";
            packageId = "iota-protocol-config";
          }
          {
            name = "iota-rest-api";
            packageId = "iota-rest-api";
          }
          {
            name = "iota-storage";
            packageId = "iota-storage";
          }
          {
            name = "iota-swarm-config";
            packageId = "iota-swarm-config";
          }
          {
            name = "iota-types";
            packageId = "iota-types";
            features = [ "test-utils" ];
          }
          {
            name = "move-binary-format";
            packageId = "move-binary-format";
          }
          {
            name = "move-bytecode-utils";
            packageId = "move-bytecode-utils";
          }
          {
            name = "move-command-line-common";
            packageId = "move-command-line-common";
          }
          {
            name = "move-compiler";
            packageId = "move-compiler";
          }
          {
            name = "move-core-types";
            packageId = "move-core-types";
          }
          {
            name = "move-stdlib";
            packageId = "move-stdlib";
          }
          {
            name = "move-symbol-pool";
            packageId = "move-symbol-pool";
          }
          {
            name = "move-transactional-test-runner";
            packageId = "move-transactional-test-runner";
          }
          {
            name = "move-vm-runtime";
            packageId = "move-vm-runtime";
          }
          {
            name = "msim";
            packageId = "msim";
            rename = "msim";
            target = { target, features }: (target."msim" or false);
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "regex";
            packageId = "regex";
          }
          {
            name = "rocksdb";
            packageId = "rocksdb";
            usesDefaultFeatures = false;
            features = [ "snappy" "lz4" "zstd" "zlib" "multi-threaded-cf" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            features = [ "preserve_order" ];
          }
          {
            name = "simulacrum";
            packageId = "simulacrum";
          }
          {
            name = "telemetry-subscribers";
            packageId = "telemetry-subscribers";
          }
          {
            name = "tempfile";
            packageId = "tempfile";
          }
          {
            name = "tokio";
            packageId = "tokio";
          }
          {
            name = "typed-store";
            packageId = "typed-store";
          }
          {
            name = "typed-store-derive";
            packageId = "typed-store-derive";
          }
        ];

      };
      "iota-types" = rec {
        crateName = "iota-types";
        version = "0.5.0-alpha";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/iota-types; }
          else ./crates/iota-types;
        libName = "iota_types";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "anemo";
            packageId = "anemo";
          }
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "bcs";
            packageId = "bcs";
          }
          {
            name = "better_any";
            packageId = "better_any";
          }
          {
            name = "bincode";
            packageId = "bincode";
          }
          {
            name = "byteorder";
            packageId = "byteorder";
          }
          {
            name = "chrono";
            packageId = "chrono";
            features = [ "clock" "serde" ];
          }
          {
            name = "consensus-config";
            packageId = "consensus-config";
          }
          {
            name = "derivative";
            packageId = "derivative";
          }
          {
            name = "derive_more";
            packageId = "derive_more";
          }
          {
            name = "enum_dispatch";
            packageId = "enum_dispatch";
          }
          {
            name = "eyre";
            packageId = "eyre";
          }
          {
            name = "fastcrypto";
            packageId = "fastcrypto";
            features = [ "copy_key" ];
          }
          {
            name = "fastcrypto-tbls";
            packageId = "fastcrypto-tbls";
          }
          {
            name = "fastcrypto-zkp";
            packageId = "fastcrypto-zkp";
            rename = "fastcrypto-zkp";
          }
          {
            name = "hex";
            packageId = "hex";
          }
          {
            name = "im";
            packageId = "im";
          }
          {
            name = "indexmap";
            packageId = "indexmap 2.5.0";
            features = [ "serde" ];
          }
          {
            name = "iota-enum-compat-util";
            packageId = "iota-enum-compat-util";
          }
          {
            name = "iota-macros";
            packageId = "iota-macros";
          }
          {
            name = "iota-metrics";
            packageId = "iota-metrics";
          }
          {
            name = "iota-network-stack";
            packageId = "iota-network-stack";
          }
          {
            name = "iota-protocol-config";
            packageId = "iota-protocol-config";
          }
          {
            name = "iota-rust-sdk";
            packageId = "iota-rust-sdk";
            rename = "iota-sdk2";
            features = [ "hash" "serde" "schemars" ];
          }
          {
            name = "iota-sdk";
            packageId = "iota-sdk 1.1.5";
            rename = "iota-stardust-sdk";
            usesDefaultFeatures = false;
            features = [ "irc_27" "irc_30" "std" ];
          }
          {
            name = "itertools";
            packageId = "itertools 0.13.0";
          }
          {
            name = "lru";
            packageId = "lru 0.12.4";
          }
          {
            name = "move-binary-format";
            packageId = "move-binary-format";
          }
          {
            name = "move-bytecode-utils";
            packageId = "move-bytecode-utils";
          }
          {
            name = "move-command-line-common";
            packageId = "move-command-line-common";
          }
          {
            name = "move-core-types";
            packageId = "move-core-types";
          }
          {
            name = "move-disassembler";
            packageId = "move-disassembler";
          }
          {
            name = "move-ir-types";
            packageId = "move-ir-types";
          }
          {
            name = "move-vm-profiler";
            packageId = "move-vm-profiler";
          }
          {
            name = "move-vm-test-utils";
            packageId = "move-vm-test-utils";
            features = [ "tiered-gas" ];
          }
          {
            name = "move-vm-types";
            packageId = "move-vm-types";
          }
          {
            name = "nonempty";
            packageId = "nonempty";
          }
          {
            name = "num-bigint";
            packageId = "num-bigint 0.4.6";
            usesDefaultFeatures = false;
            features = [ "rand" ];
          }
          {
            name = "num-rational";
            packageId = "num-rational";
          }
          {
            name = "num-traits";
            packageId = "num-traits";
          }
          {
            name = "num_enum";
            packageId = "num_enum";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "packable";
            packageId = "packable";
            usesDefaultFeatures = false;
            features = [ "io" ];
          }
          {
            name = "parking_lot";
            packageId = "parking_lot 0.12.3";
          }
          {
            name = "passkey-types";
            packageId = "passkey-types";
          }
          {
            name = "prometheus";
            packageId = "prometheus";
          }
          {
            name = "proptest";
            packageId = "proptest";
            optional = true;
          }
          {
            name = "proptest-derive";
            packageId = "proptest-derive";
            optional = true;
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "roaring";
            packageId = "roaring";
          }
          {
            name = "schemars";
            packageId = "schemars";
            features = [ "either" ];
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" "rc" ];
          }
          {
            name = "serde-name";
            packageId = "serde-name";
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            features = [ "preserve_order" ];
          }
          {
            name = "serde_with";
            packageId = "serde_with";
          }
          {
            name = "shared-crypto";
            packageId = "shared-crypto";
          }
          {
            name = "signature";
            packageId = "signature 1.6.4";
          }
          {
            name = "static_assertions";
            packageId = "static_assertions";
          }
          {
            name = "strum";
            packageId = "strum 0.26.3";
            features = [ "derive" ];
          }
          {
            name = "strum_macros";
            packageId = "strum_macros 0.26.4";
          }
          {
            name = "tap";
            packageId = "tap";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "tonic";
            packageId = "tonic";
            features = [ "transport" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "typed-store-error";
            packageId = "typed-store-error";
          }
        ];
        devDependencies = [
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "bincode";
            packageId = "bincode";
          }
          {
            name = "coset";
            packageId = "coset";
          }
          {
            name = "criterion";
            packageId = "criterion";
            features = [ "async" "async_tokio" "html_reports" ];
          }
          {
            name = "expect-test";
            packageId = "expect-test";
          }
          {
            name = "iota-util-mem";
            packageId = "iota-util-mem";
          }
          {
            name = "p256";
            packageId = "p256 0.13.2";
            features = [ "ecdsa" ];
          }
          {
            name = "passkey-authenticator";
            packageId = "passkey-authenticator";
          }
          {
            name = "passkey-client";
            packageId = "passkey-client";
          }
          {
            name = "proptest";
            packageId = "proptest";
          }
          {
            name = "serde_yaml";
            packageId = "serde_yaml";
          }
          {
            name = "tokio";
            packageId = "tokio";
          }
          {
            name = "url";
            packageId = "url";
          }
        ];
        features = {
          "fuzzing" = [ "move-core-types/fuzzing" "dep:proptest-derive" "dep:proptest" ];
          "gas-profiler" = [ "move-vm-profiler/gas-profiler" "move-vm-test-utils/gas-profiler" "move-vm-types/gas-profiler" ];
        };
        resolvedDefaultFeatures = [ "default" "fuzzing" "gas-profiler" "test-utils" ];
      };
      "iota-upgrade-compatibility-transactional-tests" = rec {
        crateName = "iota-upgrade-compatibility-transactional-tests";
        version = "0.5.0-alpha";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/iota-upgrade-compatibility-transactional-tests; }
          else ./crates/iota-upgrade-compatibility-transactional-tests;
        libName = "iota_upgrade_compatibility_transactional_tests";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        devDependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "datatest-stable";
            packageId = "datatest-stable";
          }
          {
            name = "insta";
            packageId = "insta";
            features = [ "redactions" "yaml" "json" ];
          }
          {
            name = "iota-move-build";
            packageId = "iota-move-build";
          }
          {
            name = "move-binary-format";
            packageId = "move-binary-format";
          }
          {
            name = "move-command-line-common";
            packageId = "move-command-line-common";
          }
          {
            name = "move-compiler";
            packageId = "move-compiler";
          }
          {
            name = "move-package";
            packageId = "move-package";
          }
        ];

      };
      "iota-util-mem" = rec {
        crateName = "iota-util-mem";
        version = "0.5.0-alpha";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/iota-util-mem; }
          else ./crates/iota-util-mem;
        libName = "iota_util_mem";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "ed25519-consensus";
            packageId = "ed25519-consensus";
            features = [ "serde" ];
          }
          {
            name = "fastcrypto";
            packageId = "fastcrypto";
          }
          {
            name = "fastcrypto-tbls";
            packageId = "fastcrypto-tbls";
          }
          {
            name = "hashbrown";
            packageId = "hashbrown 0.12.3";
            optional = true;
          }
          {
            name = "impl-trait-for-tuples";
            packageId = "impl-trait-for-tuples";
          }
          {
            name = "indexmap";
            packageId = "indexmap 2.5.0";
            features = [ "serde" ];
          }
          {
            name = "iota-util-mem-derive";
            packageId = "iota-util-mem-derive";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "parking_lot";
            packageId = "parking_lot 0.12.3";
            optional = true;
          }
          {
            name = "roaring";
            packageId = "roaring";
          }
          {
            name = "smallvec";
            packageId = "smallvec";
            optional = true;
          }
        ];
        features = {
          "default" = [ "std" "hashbrown" "smallvec" "estimate-heapsize" ];
          "hashbrown" = [ "dep:hashbrown" ];
          "parking_lot" = [ "dep:parking_lot" ];
          "smallvec" = [ "dep:smallvec" ];
          "std" = [ "parking_lot" ];
        };
        resolvedDefaultFeatures = [ "default" "estimate-heapsize" "hashbrown" "parking_lot" "smallvec" "std" ];
      };
      "iota-util-mem-derive" = rec {
        crateName = "iota-util-mem-derive";
        version = "0.5.0-alpha";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/iota-util-mem-derive; }
          else ./crates/iota-util-mem-derive;
        procMacro = true;
        libName = "iota_util_mem_derive";
        libPath = "lib.rs";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.86";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            features = [ "full" "derive" "extra-traits" ];
          }
          {
            name = "synstructure";
            packageId = "synstructure";
          }
        ];

      };
      "iota-verifier-latest" = rec {
        crateName = "iota-verifier-latest";
        version = "0.1.0";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./iota-execution/latest/iota-verifier; }
          else ./iota-execution/latest/iota-verifier;
        libName = "iota_verifier_latest";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "iota-protocol-config";
            packageId = "iota-protocol-config";
          }
          {
            name = "iota-types";
            packageId = "iota-types";
          }
          {
            name = "move-abstract-interpreter";
            packageId = "move-abstract-interpreter";
          }
          {
            name = "move-abstract-stack";
            packageId = "move-abstract-stack";
          }
          {
            name = "move-binary-format";
            packageId = "move-binary-format";
          }
          {
            name = "move-bytecode-utils";
            packageId = "move-bytecode-utils";
          }
          {
            name = "move-bytecode-verifier-meter";
            packageId = "move-bytecode-verifier-meter";
          }
          {
            name = "move-core-types";
            packageId = "move-core-types";
          }
          {
            name = "move-vm-config";
            packageId = "move-vm-config";
          }
        ];

      };
      "iota-verifier-transactional-tests" = rec {
        crateName = "iota-verifier-transactional-tests";
        version = "0.5.0-alpha";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/iota-verifier-transactional-tests; }
          else ./crates/iota-verifier-transactional-tests;
        libName = "iota_verifier_transactional_tests";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        devDependencies = [
          {
            name = "datatest-stable";
            packageId = "datatest-stable";
          }
          {
            name = "iota-transactional-test-runner";
            packageId = "iota-transactional-test-runner";
          }
        ];

      };
      "iota-verifier-v0" = rec {
        crateName = "iota-verifier-v0";
        version = "0.1.0";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./iota-execution/v0/iota-verifier; }
          else ./iota-execution/v0/iota-verifier;
        libName = "iota_verifier_v0";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "iota-protocol-config";
            packageId = "iota-protocol-config";
          }
          {
            name = "iota-types";
            packageId = "iota-types";
          }
          {
            name = "move-abstract-interpreter-v0";
            packageId = "move-abstract-interpreter-v0";
            rename = "move-abstract-interpreter";
          }
          {
            name = "move-abstract-stack";
            packageId = "move-abstract-stack";
          }
          {
            name = "move-binary-format";
            packageId = "move-binary-format";
          }
          {
            name = "move-bytecode-utils";
            packageId = "move-bytecode-utils";
          }
          {
            name = "move-bytecode-verifier-meter";
            packageId = "move-bytecode-verifier-meter";
          }
          {
            name = "move-core-types";
            packageId = "move-core-types";
          }
          {
            name = "move-vm-config";
            packageId = "move-vm-config";
          }
        ];

      };
      "iota_stronghold" = rec {
        crateName = "iota_stronghold";
        version = "2.1.0";
        edition = "2021";
        sha256 = "044fk2v4bbqvvy9kfbyf1yqky7dm3d6d5dw3s6a19hyvgqf303cc";
        authors = [
          "IOTA Stiftung"
        ];
        dependencies = [
          {
            name = "bincode";
            packageId = "bincode";
          }
          {
            name = "hkdf";
            packageId = "hkdf";
          }
          {
            name = "iota-crypto";
            packageId = "iota-crypto";
            usesDefaultFeatures = false;
            features = [ "aes-gcm" "blake2b" "aes-kw" "random" "rand" "ed25519" "secp256k1" "keccak" "sha" "hmac" "bip39-en" "bip39-jp" "slip10" "chacha" "x25519" ];
          }
          {
            name = "rust-argon2";
            packageId = "rust-argon2";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "stronghold-derive";
            packageId = "stronghold-derive";
            rename = "stronghold_derive";
          }
          {
            name = "stronghold-utils";
            packageId = "stronghold-utils";
            rename = "stronghold_utils";
          }
          {
            name = "stronghold_engine";
            packageId = "stronghold_engine";
            rename = "engine";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            usesDefaultFeatures = false;
            features = [ "zeroize_derive" "serde" ];
          }
        ];
        features = {
          "default" = [ "std" ];
          "futures" = [ "dep:futures" ];
          "pin-project" = [ "dep:pin-project" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "ipnet" = rec {
        crateName = "ipnet";
        version = "2.10.0";
        edition = "2018";
        sha256 = "1m7wyy57g7vaphy1rbaz85ym20cs3wlwch2v511gxmgfhyk78xhq";
        authors = [
          "Kris Price <kris@krisprice.nz>"
        ];
        features = {
          "default" = [ "std" ];
          "heapless" = [ "dep:heapless" ];
          "json" = [ "serde" "schemars" ];
          "schemars" = [ "dep:schemars" ];
          "ser_as_str" = [ "heapless" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "iri-string" = rec {
        crateName = "iri-string";
        version = "0.7.5";
        edition = "2021";
        sha256 = "0jkss3k7y7y5ndf65flj3zm55y7q69ayh0v7d2gfsvdy04r1c9cw";
        libName = "iri_string";
        authors = [
          "YOSHIOKA Takuma <nop_thread@nops.red>"
        ];
        dependencies = [
          {
            name = "memchr";
            packageId = "memchr";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
        ];
        features = {
          "alloc" = [ "serde?/alloc" ];
          "default" = [ "std" ];
          "memchr" = [ "dep:memchr" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "alloc" "memchr?/std" "serde?/std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "is-terminal" = rec {
        crateName = "is-terminal";
        version = "0.4.13";
        edition = "2018";
        sha256 = "0jwgjjz33kkmnwai3nsdk1pz9vb6gkqvw1d1vq7bs3q48kinh7r6";
        libName = "is_terminal";
        authors = [
          "softprops <d.tangren@gmail.com>"
          "Dan Gohman <dev@sunfishcode.online>"
        ];
        dependencies = [
          {
            name = "hermit-abi";
            packageId = "hermit-abi 0.4.0";
            target = { target, features }: ("hermit" == target."os" or null);
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: ((target."unix" or false) || ("wasi" == target."os" or null));
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.52.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_Foundation" "Win32_Storage_FileSystem" "Win32_System_Console" ];
          }
        ];
        devDependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = {target, features}: ((target."unix" or false) || ("wasi" == target."os" or null));
          }
        ];

      };
      "is_ci" = rec {
        crateName = "is_ci";
        version = "1.2.0";
        edition = "2018";
        crateBin = [];
        sha256 = "0ifwvxmrsj4r29agfzr71bjq6y1bihkx38fbzafq5vl0jn1wjmbn";
        authors = [
          "Kat Marchán <kzm@zkat.tech>"
        ];

      };
      "is_terminal_polyfill" = rec {
        crateName = "is_terminal_polyfill";
        version = "1.70.1";
        edition = "2021";
        sha256 = "1kwfgglh91z33kl0w5i338mfpa3zs0hidq5j4ny4rmjwrikchhvr";
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "iterator-sorted 0.1.0" = rec {
        crateName = "iterator-sorted";
        version = "0.1.0";
        edition = "2021";
        sha256 = "1llbpv5p150ph1xqvs51p4wd238csyg9pwlbq559zyf85dfpf0fi";
        libName = "iterator_sorted";
        authors = [
          "IOTA Stiftung"
        ];

      };
      "iterator-sorted 0.2.0" = rec {
        crateName = "iterator-sorted";
        version = "0.2.0";
        edition = "2021";
        sha256 = "1l9m9jw9h4r345i4bkh3x1b4374xlslw37cqkd1ndhhz35k1sg7d";
        libName = "iterator_sorted";
        authors = [
          "IOTA Stiftung"
        ];

      };
      "itertools 0.10.5" = rec {
        crateName = "itertools";
        version = "0.10.5";
        edition = "2018";
        sha256 = "0ww45h7nxx5kj6z2y6chlskxd1igvs4j507anr6dzg99x1h25zdh";
        authors = [
          "bluss"
        ];
        dependencies = [
          {
            name = "either";
            packageId = "either";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "use_std" ];
          "use_std" = [ "use_alloc" "either/use_std" ];
        };
        resolvedDefaultFeatures = [ "default" "use_alloc" "use_std" ];
      };
      "itertools 0.11.0" = rec {
        crateName = "itertools";
        version = "0.11.0";
        edition = "2018";
        sha256 = "0mzyqcc59azx9g5cg6fs8k529gvh4463smmka6jvzs3cd2jp7hdi";
        authors = [
          "bluss"
        ];
        dependencies = [
          {
            name = "either";
            packageId = "either";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "use_std" ];
          "use_std" = [ "use_alloc" "either/use_std" ];
        };
        resolvedDefaultFeatures = [ "default" "use_alloc" "use_std" ];
      };
      "itertools 0.12.1" = rec {
        crateName = "itertools";
        version = "0.12.1";
        edition = "2018";
        sha256 = "0s95jbb3ndj1lvfxyq5wanc0fm0r6hg6q4ngb92qlfdxvci10ads";
        authors = [
          "bluss"
        ];
        dependencies = [
          {
            name = "either";
            packageId = "either";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "use_std" ];
          "use_std" = [ "use_alloc" "either/use_std" ];
        };
        resolvedDefaultFeatures = [ "default" "use_alloc" "use_std" ];
      };
      "itertools 0.13.0" = rec {
        crateName = "itertools";
        version = "0.13.0";
        edition = "2018";
        sha256 = "11hiy3qzl643zcigknclh446qb9zlg4dpdzfkjaa9q9fqpgyfgj1";
        authors = [
          "bluss"
        ];
        dependencies = [
          {
            name = "either";
            packageId = "either";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "use_std" ];
          "use_std" = [ "use_alloc" "either/use_std" ];
        };
        resolvedDefaultFeatures = [ "default" "use_alloc" "use_std" ];
      };
      "itoa" = rec {
        crateName = "itoa";
        version = "1.0.11";
        edition = "2018";
        sha256 = "0nv9cqjwzr3q58qz84dcz63ggc54yhf1yqar1m858m1kfd4g3wa9";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        features = {
          "no-panic" = [ "dep:no-panic" ];
        };
      };
      "jemalloc-ctl" = rec {
        crateName = "jemalloc-ctl";
        version = "0.5.4";
        edition = "2018";
        sha256 = "0g5nb2aam7kc9vbbps25j99z80hlb7p14p8k9q2lqd2a882wgzvw";
        libName = "jemalloc_ctl";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
          "Gonzalo Brito Gadeschi <gonzalobg88@gmail.com>"
          "The TiKV Project Developers"
        ];
        dependencies = [
          {
            name = "jemalloc-sys";
            packageId = "jemalloc-sys";
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
          }
          {
            name = "paste";
            packageId = "paste";
          }
        ];
        features = {
          "disable_initial_exec_tls" = [ "jemalloc-sys/disable_initial_exec_tls" ];
          "use_std" = [ "libc/use_std" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "jemalloc-sys" = rec {
        crateName = "jemalloc-sys";
        version = "0.5.4+5.3.0-patched";
        edition = "2018";
        links = "jemalloc";
        sha256 = "1wpbpwhfs6wd484cdfpl0zdf441ann9wj0fypy67i8ffw531jv5c";
        libName = "jemalloc_sys";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
          "Gonzalo Brito Gadeschi <gonzalobg88@gmail.com>"
          "The TiKV Project Developers"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
          }
        ];
        features = {
          "background_threads" = [ "background_threads_runtime_support" ];
          "default" = [ "background_threads_runtime_support" ];
        };
        resolvedDefaultFeatures = [ "background_threads_runtime_support" "default" ];
      };
      "jni" = rec {
        crateName = "jni";
        version = "0.19.0";
        edition = "2018";
        sha256 = "1v0pn0i1wb8zp4wns4l8hz9689hqsplv7iba7hylaznvwg11ipy6";
        authors = [
          "Josh Chase <josh@prevoty.com>"
        ];
        dependencies = [
          {
            name = "cesu8";
            packageId = "cesu8";
          }
          {
            name = "combine";
            packageId = "combine";
          }
          {
            name = "jni-sys";
            packageId = "jni-sys";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
        ];
        buildDependencies = [
          {
            name = "walkdir";
            packageId = "walkdir";
          }
        ];
        features = {
        };
      };
      "jni-sys" = rec {
        crateName = "jni-sys";
        version = "0.3.0";
        edition = "2015";
        sha256 = "0c01zb9ygvwg9wdx2fii2d39myzprnpqqhy7yizxvjqp5p04pbwf";
        libName = "jni_sys";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
        ];

      };
      "jobserver" = rec {
        crateName = "jobserver";
        version = "0.1.32";
        edition = "2021";
        sha256 = "1l2k50qmj84x9mn39ivjz76alqmx72jhm12rw33zx9xnpv5xpla8";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."unix" or false);
          }
        ];

      };
      "js-sys" = rec {
        crateName = "js-sys";
        version = "0.3.70";
        edition = "2021";
        sha256 = "0yp3rz7vrn9mmqdpkds426r1p9vs6i8mkxx8ryqdfadr0s2q0s0q";
        libName = "js_sys";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
          }
        ];

      };
      "json_to_table" = rec {
        crateName = "json_to_table";
        version = "0.6.0";
        edition = "2018";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/zhiburt/tabled/";
          rev = "e449317a1c02eb6b29e409ad6617e5d9eb7b3bd4";
          sha256 = "07p30gz56gz43dhbv4rarx79c8nnmh2vsr18y0wh6rjnzxmi78sh";
        };
        authors = [
          "Maxim Zhiburt <zhiburt@gmail.com>"
        ];
        dependencies = [
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "tabled";
            packageId = "tabled";
            usesDefaultFeatures = false;
            features = [ "macros" ];
          }
        ];
        features = {
          "color" = [ "tabled/color" ];
        };
      };
      "jsonrpsee" = rec {
        crateName = "jsonrpsee";
        version = "0.24.5";
        edition = "2021";
        sha256 = "06s0dv0gjj5cwwlqln3r6494bqb0rfc7i9w1afyjzif3mjjlhsqj";
        authors = [
          "Parity Technologies <admin@parity.io>"
          "Pierre Krieger <pierre.krieger1708@gmail.com>"
        ];
        dependencies = [
          {
            name = "jsonrpsee-client-transport";
            packageId = "jsonrpsee-client-transport";
            optional = true;
          }
          {
            name = "jsonrpsee-core";
            packageId = "jsonrpsee-core";
            optional = true;
          }
          {
            name = "jsonrpsee-http-client";
            packageId = "jsonrpsee-http-client";
            optional = true;
          }
          {
            name = "jsonrpsee-proc-macros";
            packageId = "jsonrpsee-proc-macros";
            optional = true;
          }
          {
            name = "jsonrpsee-server";
            packageId = "jsonrpsee-server";
            optional = true;
          }
          {
            name = "jsonrpsee-types";
            packageId = "jsonrpsee-types";
            optional = true;
          }
          {
            name = "jsonrpsee-wasm-client";
            packageId = "jsonrpsee-wasm-client";
            optional = true;
          }
          {
            name = "jsonrpsee-ws-client";
            packageId = "jsonrpsee-ws-client";
            optional = true;
          }
          {
            name = "tokio";
            packageId = "tokio";
            optional = true;
          }
          {
            name = "tracing";
            packageId = "tracing";
            optional = true;
          }
        ];
        features = {
          "async-client" = [ "jsonrpsee-core/async-client" ];
          "async-wasm-client" = [ "jsonrpsee-core/async-wasm-client" ];
          "client" = [ "http-client" "ws-client" "wasm-client" "client-ws-transport-tls" "client-web-transport" "async-client" "async-wasm-client" "client-core" ];
          "client-core" = [ "jsonrpsee-core/client" ];
          "client-web-transport" = [ "jsonrpsee-client-transport/web" ];
          "client-ws-transport-no-tls" = [ "jsonrpsee-client-transport/ws" ];
          "client-ws-transport-tls" = [ "jsonrpsee-client-transport/ws" "jsonrpsee-client-transport/tls-rustls-platform-verifier" ];
          "full" = [ "client" "server" "macros" ];
          "http-client" = [ "jsonrpsee-http-client" "jsonrpsee-types" "jsonrpsee-core/client" ];
          "jsonrpsee-client-transport" = [ "dep:jsonrpsee-client-transport" ];
          "jsonrpsee-core" = [ "dep:jsonrpsee-core" ];
          "jsonrpsee-http-client" = [ "dep:jsonrpsee-http-client" ];
          "jsonrpsee-proc-macros" = [ "dep:jsonrpsee-proc-macros" ];
          "jsonrpsee-server" = [ "dep:jsonrpsee-server" ];
          "jsonrpsee-types" = [ "dep:jsonrpsee-types" ];
          "jsonrpsee-wasm-client" = [ "dep:jsonrpsee-wasm-client" ];
          "jsonrpsee-ws-client" = [ "dep:jsonrpsee-ws-client" ];
          "macros" = [ "jsonrpsee-proc-macros" "jsonrpsee-types" "tracing" ];
          "server" = [ "jsonrpsee-server" "server-core" "jsonrpsee-types" "tokio" ];
          "server-core" = [ "jsonrpsee-core/server" ];
          "tokio" = [ "dep:tokio" ];
          "tracing" = [ "dep:tracing" ];
          "wasm-client" = [ "jsonrpsee-wasm-client" "jsonrpsee-types" "jsonrpsee-core/client" ];
          "ws-client" = [ "jsonrpsee-ws-client" "jsonrpsee-types" "jsonrpsee-core/client" ];
        };
        resolvedDefaultFeatures = [ "async-client" "async-wasm-client" "client" "client-core" "client-web-transport" "client-ws-transport-tls" "http-client" "jsonrpsee-client-transport" "jsonrpsee-core" "jsonrpsee-http-client" "jsonrpsee-proc-macros" "jsonrpsee-server" "jsonrpsee-types" "jsonrpsee-wasm-client" "jsonrpsee-ws-client" "macros" "server" "server-core" "tokio" "tracing" "wasm-client" "ws-client" ];
      };
      "jsonrpsee-client-transport" = rec {
        crateName = "jsonrpsee-client-transport";
        version = "0.24.5";
        edition = "2021";
        sha256 = "0sics14g63y7m9if8yh20rci0xv5hb5b8jvwgycpfg081s79lrxz";
        libName = "jsonrpsee_client_transport";
        authors = [
          "Parity Technologies <admin@parity.io>"
          "Pierre Krieger <pierre.krieger1708@gmail.com>"
        ];
        dependencies = [
          {
            name = "base64";
            packageId = "base64 0.22.1";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "futures-channel";
            packageId = "futures-channel";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "gloo-net";
            packageId = "gloo-net";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: ("wasm32" == target."arch" or null);
            features = [ "json" "websocket" ];
          }
          {
            name = "http";
            packageId = "http 1.1.0";
            optional = true;
          }
          {
            name = "jsonrpsee-core";
            packageId = "jsonrpsee-core";
            features = [ "client" ];
          }
          {
            name = "pin-project";
            packageId = "pin-project";
            optional = true;
          }
          {
            name = "rustls";
            packageId = "rustls 0.23.13";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "rustls-pki-types";
            packageId = "rustls-pki-types";
            optional = true;
          }
          {
            name = "rustls-platform-verifier";
            packageId = "rustls-platform-verifier";
            optional = true;
          }
          {
            name = "soketto";
            packageId = "soketto";
            optional = true;
          }
          {
            name = "thiserror";
            packageId = "thiserror";
            optional = true;
          }
          {
            name = "tokio";
            packageId = "tokio";
            optional = true;
            features = [ "net" "time" "macros" ];
          }
          {
            name = "tokio-rustls";
            packageId = "tokio-rustls 0.26.0";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "logging" "tls12" "ring" ];
          }
          {
            name = "tokio-util";
            packageId = "tokio-util 0.7.12";
            optional = true;
            features = [ "compat" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "url";
            packageId = "url";
            optional = true;
          }
        ];
        features = {
          "base64" = [ "dep:base64" ];
          "futures-channel" = [ "dep:futures-channel" ];
          "futures-util" = [ "dep:futures-util" ];
          "gloo-net" = [ "dep:gloo-net" ];
          "http" = [ "dep:http" ];
          "pin-project" = [ "dep:pin-project" ];
          "rustls" = [ "dep:rustls" ];
          "rustls-pki-types" = [ "dep:rustls-pki-types" ];
          "rustls-platform-verifier" = [ "dep:rustls-platform-verifier" ];
          "soketto" = [ "dep:soketto" ];
          "thiserror" = [ "dep:thiserror" ];
          "tls" = [ "rustls" "tokio-rustls" "rustls-pki-types" ];
          "tls-rustls-platform-verifier" = [ "tls" "rustls-platform-verifier" ];
          "tokio" = [ "dep:tokio" ];
          "tokio-rustls" = [ "dep:tokio-rustls" ];
          "tokio-util" = [ "dep:tokio-util" ];
          "url" = [ "dep:url" ];
          "web" = [ "gloo-net" "futures-channel" "futures-util" "thiserror" ];
          "ws" = [ "base64" "futures-util" "http" "tokio" "tokio-util" "soketto" "pin-project" "thiserror" "url" ];
        };
        resolvedDefaultFeatures = [ "base64" "futures-channel" "futures-util" "gloo-net" "http" "pin-project" "rustls" "rustls-pki-types" "rustls-platform-verifier" "soketto" "thiserror" "tls" "tls-rustls-platform-verifier" "tokio" "tokio-rustls" "tokio-util" "url" "web" "ws" ];
      };
      "jsonrpsee-core" = rec {
        crateName = "jsonrpsee-core";
        version = "0.24.5";
        edition = "2021";
        sha256 = "0xq4m23kmp8dj0b976jf99whp476s2nmhl7kbav9bqbnk8v07rdh";
        libName = "jsonrpsee_core";
        authors = [
          "Parity Technologies <admin@parity.io>"
          "Pierre Krieger <pierre.krieger1708@gmail.com>"
        ];
        dependencies = [
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "bytes";
            packageId = "bytes";
            optional = true;
          }
          {
            name = "futures-timer";
            packageId = "futures-timer";
            optional = true;
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "http";
            packageId = "http 1.1.0";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "http-body";
            packageId = "http-body 1.0.1";
            optional = true;
          }
          {
            name = "http-body-util";
            packageId = "http-body-util";
            optional = true;
          }
          {
            name = "jsonrpsee-types";
            packageId = "jsonrpsee-types";
          }
          {
            name = "parking_lot";
            packageId = "parking_lot 0.12.3";
            optional = true;
          }
          {
            name = "pin-project";
            packageId = "pin-project";
            optional = true;
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
            optional = true;
          }
          {
            name = "rustc-hash";
            packageId = "rustc-hash 2.0.0";
            optional = true;
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            features = [ "raw_value" ];
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "tokio";
            packageId = "tokio";
            optional = true;
          }
          {
            name = "tokio-stream";
            packageId = "tokio-stream";
            optional = true;
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "wasm-bindgen-futures";
            packageId = "wasm-bindgen-futures";
            optional = true;
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
        ];
        devDependencies = [
          {
            name = "http-body-util";
            packageId = "http-body-util";
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "macros" "rt" ];
          }
        ];
        features = {
          "async-client" = [ "client" "futures-util/alloc" "rustc-hash" "tokio/macros" "tokio/rt" "tokio/time" "futures-timer" "tokio-stream" "pin-project" ];
          "async-wasm-client" = [ "client" "futures-util/alloc" "wasm-bindgen-futures" "rustc-hash/std" "futures-timer/wasm-bindgen" "tokio/macros" "tokio/time" "pin-project" ];
          "bytes" = [ "dep:bytes" ];
          "client" = [ "futures-util/sink" "tokio/sync" ];
          "futures-timer" = [ "dep:futures-timer" ];
          "futures-util" = [ "dep:futures-util" ];
          "http" = [ "dep:http" ];
          "http-body" = [ "dep:http-body" ];
          "http-body-util" = [ "dep:http-body-util" ];
          "http-helpers" = [ "bytes" "futures-util" "http-body" "http-body-util" "http" ];
          "parking_lot" = [ "dep:parking_lot" ];
          "pin-project" = [ "dep:pin-project" ];
          "rand" = [ "dep:rand" ];
          "rustc-hash" = [ "dep:rustc-hash" ];
          "server" = [ "futures-util/alloc" "rustc-hash/std" "parking_lot" "rand" "tokio/rt" "tokio/sync" "tokio/macros" "tokio/time" "http" ];
          "tokio" = [ "dep:tokio" ];
          "tokio-stream" = [ "dep:tokio-stream" ];
          "wasm-bindgen-futures" = [ "dep:wasm-bindgen-futures" ];
        };
        resolvedDefaultFeatures = [ "async-client" "async-wasm-client" "bytes" "client" "default" "futures-timer" "futures-util" "http" "http-body" "http-body-util" "http-helpers" "parking_lot" "pin-project" "rand" "rustc-hash" "server" "tokio" "tokio-stream" "wasm-bindgen-futures" ];
      };
      "jsonrpsee-http-client" = rec {
        crateName = "jsonrpsee-http-client";
        version = "0.24.5";
        edition = "2021";
        sha256 = "1dggf1j8s2dhj404nglxqab5m9r2ma3akfn9xspzp3ka9axcmh7j";
        libName = "jsonrpsee_http_client";
        authors = [
          "Parity Technologies <admin@parity.io>"
          "Pierre Krieger <pierre.krieger1708@gmail.com>"
        ];
        dependencies = [
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "base64";
            packageId = "base64 0.22.1";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "http-body";
            packageId = "http-body 1.0.1";
          }
          {
            name = "hyper";
            packageId = "hyper 1.4.1";
            features = [ "client" "http1" "http2" ];
          }
          {
            name = "hyper-rustls";
            packageId = "hyper-rustls 0.27.3";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "http1" "http2" "tls12" "logging" "ring" ];
          }
          {
            name = "hyper-util";
            packageId = "hyper-util";
            features = [ "client" "client-legacy" "tokio" "http1" "http2" ];
          }
          {
            name = "jsonrpsee-core";
            packageId = "jsonrpsee-core";
            features = [ "client" "http-helpers" ];
          }
          {
            name = "jsonrpsee-types";
            packageId = "jsonrpsee-types";
          }
          {
            name = "rustls";
            packageId = "rustls 0.23.13";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "logging" "std" "tls12" "ring" ];
          }
          {
            name = "rustls-platform-verifier";
            packageId = "rustls-platform-verifier";
            optional = true;
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "time" ];
          }
          {
            name = "tower";
            packageId = "tower 0.4.13";
            features = [ "util" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "url";
            packageId = "url";
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "net" "rt-multi-thread" "macros" ];
          }
        ];
        features = {
          "default" = [ "tls" ];
          "hyper-rustls" = [ "dep:hyper-rustls" ];
          "rustls" = [ "dep:rustls" ];
          "rustls-platform-verifier" = [ "dep:rustls-platform-verifier" ];
          "tls" = [ "hyper-rustls" "rustls" "rustls-platform-verifier" ];
        };
        resolvedDefaultFeatures = [ "default" "hyper-rustls" "rustls" "rustls-platform-verifier" "tls" ];
      };
      "jsonrpsee-proc-macros" = rec {
        crateName = "jsonrpsee-proc-macros";
        version = "0.24.5";
        edition = "2021";
        sha256 = "16s8dcqg1vzdh3dpqxb7nqnz60fmam0klrs099wqwx72i69hlrpw";
        procMacro = true;
        libName = "jsonrpsee_proc_macros";
        authors = [
          "Parity Technologies <admin@parity.io>"
          "Pierre Krieger <pierre.krieger1708@gmail.com>"
        ];
        dependencies = [
          {
            name = "heck";
            packageId = "heck 0.5.0";
          }
          {
            name = "proc-macro-crate";
            packageId = "proc-macro-crate 3.2.0";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.86";
          }
          {
            name = "quote";
            packageId = "quote 1.0.37";
          }
          {
            name = "syn";
            packageId = "syn 2.0.77";
            usesDefaultFeatures = false;
            features = [ "extra-traits" "full" "visit" "parsing" "printing" "clone-impls" "proc-macro" ];
          }
        ];

      };
      "jsonrpsee-server" = rec {
        crateName = "jsonrpsee-server";
        version = "0.24.5";
        edition = "2021";
        sha256 = "1vfdr568ka0i32aacfn69sh8agjzc25n8pan8fsdqplpdndnqvmg";
        libName = "jsonrpsee_server";
        authors = [
          "Parity Technologies <admin@parity.io>"
          "Pierre Krieger <pierre.krieger1708@gmail.com>"
        ];
        dependencies = [
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
            features = [ "io" "async-await-macro" ];
          }
          {
            name = "http";
            packageId = "http 1.1.0";
          }
          {
            name = "http-body";
            packageId = "http-body 1.0.1";
          }
          {
            name = "http-body-util";
            packageId = "http-body-util";
          }
          {
            name = "hyper";
            packageId = "hyper 1.4.1";
            features = [ "server" "http1" "http2" ];
          }
          {
            name = "hyper-util";
            packageId = "hyper-util";
            features = [ "tokio" "service" "tokio" "server-auto" ];
          }
          {
            name = "jsonrpsee-core";
            packageId = "jsonrpsee-core";
            features = [ "server" "http-helpers" ];
          }
          {
            name = "jsonrpsee-types";
            packageId = "jsonrpsee-types";
          }
          {
            name = "pin-project";
            packageId = "pin-project";
          }
          {
            name = "route-recognizer";
            packageId = "route-recognizer";
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            features = [ "raw_value" ];
          }
          {
            name = "soketto";
            packageId = "soketto";
            features = [ "http" ];
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "net" "rt-multi-thread" "macros" "time" ];
          }
          {
            name = "tokio-stream";
            packageId = "tokio-stream";
            features = [ "sync" ];
          }
          {
            name = "tokio-util";
            packageId = "tokio-util 0.7.12";
            features = [ "compat" ];
          }
          {
            name = "tower";
            packageId = "tower 0.4.13";
            features = [ "util" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
        ];
        devDependencies = [
          {
            name = "tower";
            packageId = "tower 0.4.13";
            features = [ "timeout" ];
          }
        ];

      };
      "jsonrpsee-types" = rec {
        crateName = "jsonrpsee-types";
        version = "0.24.5";
        edition = "2021";
        sha256 = "0ryyxr5b6khhplvx2xkzb7arql128izfyrbrvx7wkjr78cqidyyq";
        libName = "jsonrpsee_types";
        authors = [
          "Parity Technologies <admin@parity.io>"
          "Pierre Krieger <pierre.krieger1708@gmail.com>"
        ];
        dependencies = [
          {
            name = "http";
            packageId = "http 1.1.0";
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            usesDefaultFeatures = false;
            features = [ "alloc" "raw_value" "std" ];
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
        ];

      };
      "jsonrpsee-wasm-client" = rec {
        crateName = "jsonrpsee-wasm-client";
        version = "0.24.5";
        edition = "2021";
        sha256 = "0g2xygm3pnpy055pp6p7g34anc6sjpgkap9hx905dg826ys65np0";
        libName = "jsonrpsee_wasm_client";
        authors = [
          "Parity Technologies <admin@parity.io>"
          "Pierre Krieger <pierre.krieger1708@gmail.com>"
        ];
        dependencies = [
          {
            name = "jsonrpsee-client-transport";
            packageId = "jsonrpsee-client-transport";
            target = { target, features }: ("wasm32" == target."arch" or null);
            features = [ "web" ];
          }
          {
            name = "jsonrpsee-core";
            packageId = "jsonrpsee-core";
            target = { target, features }: ("wasm32" == target."arch" or null);
            features = [ "async-wasm-client" ];
          }
          {
            name = "jsonrpsee-types";
            packageId = "jsonrpsee-types";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
        ];

      };
      "jsonrpsee-ws-client" = rec {
        crateName = "jsonrpsee-ws-client";
        version = "0.24.5";
        edition = "2021";
        sha256 = "0sh4wl2g850v2hgzfhpv26ghadh7mcgym3l0bf6xl8kgdifvzair";
        libName = "jsonrpsee_ws_client";
        authors = [
          "Parity Technologies <admin@parity.io>"
          "Pierre Krieger <pierre.krieger1708@gmail.com>"
        ];
        dependencies = [
          {
            name = "http";
            packageId = "http 1.1.0";
          }
          {
            name = "jsonrpsee-client-transport";
            packageId = "jsonrpsee-client-transport";
            features = [ "ws" ];
          }
          {
            name = "jsonrpsee-core";
            packageId = "jsonrpsee-core";
            features = [ "async-client" ];
          }
          {
            name = "jsonrpsee-types";
            packageId = "jsonrpsee-types";
          }
          {
            name = "url";
            packageId = "url";
          }
        ];
        features = {
          "default" = [ "tls-rustls-platform-verifier" ];
          "tls" = [ "jsonrpsee-client-transport/tls" ];
          "tls-rustls-platform-verifier" = [ "jsonrpsee-client-transport/tls-rustls-platform-verifier" "tls" ];
        };
        resolvedDefaultFeatures = [ "default" "tls" "tls-rustls-platform-verifier" ];
      };
      "jsonwebtoken 8.3.0" = rec {
        crateName = "jsonwebtoken";
        version = "8.3.0";
        edition = "2021";
        sha256 = "0y034cm6nwb9ljakh04j281asjjkbcaz9w1ziwykr81ski6xlwb9";
        authors = [
          "Vincent Prouillet <hello@vincentprouillet.com>"
        ];
        dependencies = [
          {
            name = "base64";
            packageId = "base64 0.21.7";
          }
          {
            name = "pem";
            packageId = "pem 1.1.1";
            optional = true;
          }
          {
            name = "ring";
            packageId = "ring 0.16.20";
            features = [ "std" ];
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "simple_asn1";
            packageId = "simple_asn1";
            optional = true;
          }
        ];
        features = {
          "default" = [ "use_pem" ];
          "pem" = [ "dep:pem" ];
          "simple_asn1" = [ "dep:simple_asn1" ];
          "use_pem" = [ "pem" "simple_asn1" ];
        };
        resolvedDefaultFeatures = [ "default" "pem" "simple_asn1" "use_pem" ];
      };
      "jsonwebtoken 9.3.0" = rec {
        crateName = "jsonwebtoken";
        version = "9.3.0";
        edition = "2021";
        sha256 = "0gqr13c9fjd4zb2lqzhgi4xwq0rfnk8a47jzjis1w1957lci1bmr";
        authors = [
          "Vincent Prouillet <hello@vincentprouillet.com>"
        ];
        dependencies = [
          {
            name = "base64";
            packageId = "base64 0.21.7";
          }
          {
            name = "js-sys";
            packageId = "js-sys";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
          {
            name = "pem";
            packageId = "pem 3.0.4";
            optional = true;
          }
          {
            name = "ring";
            packageId = "ring 0.17.8";
            target = { target, features }: (!("wasm32" == target."arch" or null));
            features = [ "std" ];
          }
          {
            name = "ring";
            packageId = "ring 0.17.8";
            target = { target, features }: ("wasm32" == target."arch" or null);
            features = [ "std" "wasm32_unknown_unknown_js" ];
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "simple_asn1";
            packageId = "simple_asn1";
            optional = true;
          }
        ];
        features = {
          "default" = [ "use_pem" ];
          "pem" = [ "dep:pem" ];
          "simple_asn1" = [ "dep:simple_asn1" ];
          "use_pem" = [ "pem" "simple_asn1" ];
        };
        resolvedDefaultFeatures = [ "default" "pem" "simple_asn1" "use_pem" ];
      };
      "k256" = rec {
        crateName = "k256";
        version = "0.13.4";
        edition = "2021";
        sha256 = "06s1lxjp49zgmbxnfdy2kajyklbkl4s3jvdvy0amg552padr3qzn";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "ecdsa";
            packageId = "ecdsa 0.16.9";
            rename = "ecdsa-core";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "der" ];
          }
          {
            name = "elliptic-curve";
            packageId = "elliptic-curve 0.13.8";
            usesDefaultFeatures = false;
            features = [ "hazmat" "sec1" ];
          }
          {
            name = "once_cell";
            packageId = "once_cell";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "serdect";
            packageId = "serdect";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "sha2";
            packageId = "sha2 0.10.8";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "signature";
            packageId = "signature 2.2.0";
            optional = true;
          }
        ];
        devDependencies = [
          {
            name = "ecdsa";
            packageId = "ecdsa 0.16.9";
            rename = "ecdsa-core";
            usesDefaultFeatures = false;
            features = [ "dev" ];
          }
        ];
        features = {
          "alloc" = [ "ecdsa-core?/alloc" "elliptic-curve/alloc" ];
          "arithmetic" = [ "elliptic-curve/arithmetic" ];
          "bits" = [ "arithmetic" "elliptic-curve/bits" ];
          "critical-section" = [ "once_cell/critical-section" "precomputed-tables" ];
          "default" = [ "arithmetic" "ecdsa" "pkcs8" "precomputed-tables" "schnorr" "std" ];
          "digest" = [ "ecdsa-core/digest" "ecdsa-core/hazmat" ];
          "ecdh" = [ "arithmetic" "elliptic-curve/ecdh" ];
          "ecdsa" = [ "arithmetic" "ecdsa-core/signing" "ecdsa-core/verifying" "sha256" ];
          "ecdsa-core" = [ "dep:ecdsa-core" ];
          "expose-field" = [ "arithmetic" ];
          "hash2curve" = [ "arithmetic" "elliptic-curve/hash2curve" ];
          "hex-literal" = [ "dep:hex-literal" ];
          "jwk" = [ "elliptic-curve/jwk" ];
          "once_cell" = [ "dep:once_cell" ];
          "pem" = [ "ecdsa-core/pem" "elliptic-curve/pem" "pkcs8" ];
          "pkcs8" = [ "ecdsa-core/pkcs8" "elliptic-curve/pkcs8" ];
          "precomputed-tables" = [ "arithmetic" "once_cell" ];
          "schnorr" = [ "arithmetic" "sha256" "signature" ];
          "serde" = [ "ecdsa-core/serde" "elliptic-curve/serde" "serdect" ];
          "serdect" = [ "dep:serdect" ];
          "sha2" = [ "dep:sha2" ];
          "sha256" = [ "digest" "sha2" ];
          "signature" = [ "dep:signature" ];
          "std" = [ "alloc" "ecdsa-core?/std" "elliptic-curve/std" "once_cell?/std" ];
          "test-vectors" = [ "hex-literal" ];
        };
        resolvedDefaultFeatures = [ "alloc" "arithmetic" "default" "digest" "ecdsa" "ecdsa-core" "once_cell" "pem" "pkcs8" "precomputed-tables" "schnorr" "serde" "serdect" "sha2" "sha256" "signature" "std" ];
      };
      "keccak" = rec {
        crateName = "keccak";
        version = "0.1.5";
        edition = "2018";
        sha256 = "0m06swsyd58hvb1z17q6picdwywprf1yf1s6l491zi8r26dazhpc";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "cpufeatures";
            packageId = "cpufeatures";
            target = { target, features }: ("aarch64" == target."arch" or null);
          }
        ];
        features = {
        };
      };
      "kqueue" = rec {
        crateName = "kqueue";
        version = "1.0.8";
        edition = "2018";
        sha256 = "033x2knkbv8d3jy6i9r32jcgsq6zm3g97zh5la43amkv3g5g2ivl";
        authors = [
          "William Orr <will@worrbase.com>"
        ];
        dependencies = [
          {
            name = "kqueue-sys";
            packageId = "kqueue-sys";
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];

      };
      "kqueue-sys" = rec {
        crateName = "kqueue-sys";
        version = "1.0.4";
        edition = "2018";
        sha256 = "12w3wi90y4kwis4k9g6fp0kqjdmc6l00j16g8mgbhac7vbzjb5pd";
        libName = "kqueue_sys";
        authors = [
          "William Orr <will@worrbase.com>"
          "Daniel (dmilith) Dettlaff <dmilith@me.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 1.3.2";
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];

      };
      "lalrpop" = rec {
        crateName = "lalrpop";
        version = "0.20.2";
        edition = "2021";
        crateBin = [];
        sha256 = "1jn1qg7gs9kka6sy2sbxx8wp6z8lm892ksr414b9yaansrx0gjsm";
        authors = [
          "Niko Matsakis <niko@alum.mit.edu>"
        ];
        dependencies = [
          {
            name = "ascii-canvas";
            packageId = "ascii-canvas";
            usesDefaultFeatures = false;
          }
          {
            name = "bit-set";
            packageId = "bit-set";
            usesDefaultFeatures = false;
          }
          {
            name = "ena";
            packageId = "ena";
            usesDefaultFeatures = false;
          }
          {
            name = "itertools";
            packageId = "itertools 0.11.0";
            usesDefaultFeatures = false;
            features = [ "use_std" ];
          }
          {
            name = "lalrpop-util";
            packageId = "lalrpop-util";
            usesDefaultFeatures = false;
          }
          {
            name = "petgraph";
            packageId = "petgraph 0.6.5";
            usesDefaultFeatures = false;
          }
          {
            name = "regex";
            packageId = "regex";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "regex-syntax";
            packageId = "regex-syntax 0.8.4";
            usesDefaultFeatures = false;
          }
          {
            name = "string_cache";
            packageId = "string_cache";
            usesDefaultFeatures = false;
          }
          {
            name = "term";
            packageId = "term";
            usesDefaultFeatures = false;
          }
          {
            name = "tiny-keccak";
            packageId = "tiny-keccak";
            features = [ "sha3" ];
          }
          {
            name = "unicode-xid";
            packageId = "unicode-xid 0.2.6";
            usesDefaultFeatures = false;
          }
          {
            name = "walkdir";
            packageId = "walkdir";
          }
        ];
        features = {
          "default" = [ "lexer" "unicode" "pico-args" ];
          "lexer" = [ "lalrpop-util/lexer" ];
          "pico-args" = [ "dep:pico-args" ];
          "unicode" = [ "regex/unicode" "regex-syntax/unicode" "lalrpop-util/unicode" ];
        };
      };
      "lalrpop-util" = rec {
        crateName = "lalrpop-util";
        version = "0.20.2";
        edition = "2021";
        sha256 = "0lr5r12bh9gjjlmnjrbblf4bfcwnad4gz1hqjvp34yzb22ln0x2h";
        libName = "lalrpop_util";
        authors = [
          "Niko Matsakis <niko@alum.mit.edu>"
        ];
        dependencies = [
          {
            name = "regex-automata";
            packageId = "regex-automata 0.4.7";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "perf" "syntax" "hybrid" ];
          }
        ];
        features = {
          "default" = [ "std" "unicode" ];
          "lexer" = [ "regex-automata/std" "std" ];
          "regex-automata" = [ "dep:regex-automata" ];
          "unicode" = [ "regex-automata?/unicode" ];
        };
        resolvedDefaultFeatures = [ "default" "std" "unicode" ];
      };
      "lazy_static" = rec {
        crateName = "lazy_static";
        version = "1.5.0";
        edition = "2015";
        sha256 = "1zk6dqqni0193xg6iijh7i3i44sryglwgvx20spdvwk3r6sbrlmv";
        authors = [
          "Marvin Löbel <loebel.marvin@gmail.com>"
        ];
        dependencies = [
          {
            name = "spin";
            packageId = "spin 0.9.8";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "once" ];
          }
        ];
        features = {
          "spin" = [ "dep:spin" ];
          "spin_no_std" = [ "spin" ];
        };
        resolvedDefaultFeatures = [ "spin" "spin_no_std" ];
      };
      "lazycell" = rec {
        crateName = "lazycell";
        version = "1.3.0";
        edition = "2015";
        sha256 = "0m8gw7dn30i0zjjpjdyf6pc16c34nl71lpv461mix50x3p70h3c3";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
          "Nikita Pekin <contact@nikitapek.in>"
        ];
        features = {
          "clippy" = [ "dep:clippy" ];
          "nightly-testing" = [ "clippy" "nightly" ];
          "serde" = [ "dep:serde" ];
        };
      };
      "leb128" = rec {
        crateName = "leb128";
        version = "0.2.5";
        edition = "2018";
        crateBin = [];
        sha256 = "0rxxjdn76sjbrb08s4bi7m4x47zg68f71jzgx8ww7j0cnivjckl8";
        authors = [
          "Nick Fitzgerald <fitzgen@gmail.com>"
          "Philip Craig <philipjcraig@gmail.com>"
        ];
        features = {
        };
      };
      "lexical-core" = rec {
        crateName = "lexical-core";
        version = "1.0.2";
        edition = "2018";
        sha256 = "0n447nkxfzn3wv4r8bbn4wfjk4lcg5r6xzdqwqfhqnca65dwcc84";
        libName = "lexical_core";
        authors = [
          "Alex Huszagh <ahuszagh@gmail.com>"
        ];
        dependencies = [
          {
            name = "lexical-parse-float";
            packageId = "lexical-parse-float";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "lexical-parse-integer";
            packageId = "lexical-parse-integer";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "lexical-util";
            packageId = "lexical-util";
            usesDefaultFeatures = false;
          }
          {
            name = "lexical-write-float";
            packageId = "lexical-write-float";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "lexical-write-integer";
            packageId = "lexical-write-integer";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "compact" = [ "lexical-write-integer?/compact" "lexical-write-float?/compact" "lexical-parse-integer?/compact" "lexical-parse-float?/compact" ];
          "default" = [ "std" "write-integers" "write-floats" "parse-integers" "parse-floats" ];
          "f128" = [ "lexical-util/f128" "lexical-parse-float?/f128" "lexical-write-float?/f128" ];
          "f16" = [ "lexical-util/f16" "lexical-parse-float?/f16" "lexical-write-float?/f16" ];
          "floats" = [ "lexical-util/floats" ];
          "format" = [ "lexical-util/format" "lexical-parse-integer?/format" "lexical-parse-float?/format" "lexical-write-integer?/format" "lexical-write-float?/format" ];
          "integers" = [ "lexical-util/integers" ];
          "lexical-parse-float" = [ "dep:lexical-parse-float" ];
          "lexical-parse-integer" = [ "dep:lexical-parse-integer" ];
          "lexical-write-float" = [ "dep:lexical-write-float" ];
          "lexical-write-integer" = [ "dep:lexical-write-integer" ];
          "lint" = [ "lexical-util/lint" "lexical-write-integer?/lint" "lexical-write-float?/lint" "lexical-parse-integer?/lint" "lexical-parse-float?/lint" ];
          "parse" = [ "lexical-util/parse" ];
          "parse-floats" = [ "lexical-parse-float" "parse" "floats" ];
          "parse-integers" = [ "lexical-parse-integer" "parse" "integers" ];
          "power-of-two" = [ "lexical-util/power-of-two" "lexical-write-integer?/power-of-two" "lexical-write-float?/power-of-two" "lexical-parse-integer?/power-of-two" "lexical-parse-float?/power-of-two" ];
          "radix" = [ "lexical-util/radix" "lexical-write-integer?/radix" "lexical-write-float?/radix" "lexical-parse-integer?/radix" "lexical-parse-float?/radix" ];
          "std" = [ "lexical-util/std" "lexical-write-integer/std" "lexical-write-float/std" "lexical-parse-integer/std" "lexical-parse-float/std" ];
          "write" = [ "lexical-util/write" ];
          "write-floats" = [ "lexical-write-float" "write" "floats" ];
          "write-integers" = [ "lexical-write-integer" "write" "integers" ];
        };
        resolvedDefaultFeatures = [ "floats" "integers" "lexical-parse-float" "lexical-parse-integer" "lexical-write-float" "lexical-write-integer" "parse" "parse-floats" "parse-integers" "write" "write-floats" "write-integers" ];
      };
      "lexical-parse-float" = rec {
        crateName = "lexical-parse-float";
        version = "1.0.2";
        edition = "2018";
        sha256 = "1q5lncgj61kzmpjp5a0lngxazrcv3idxchcxlld0a65lp6ys85zb";
        libName = "lexical_parse_float";
        authors = [
          "Alex Huszagh <ahuszagh@gmail.com>"
        ];
        dependencies = [
          {
            name = "lexical-parse-integer";
            packageId = "lexical-parse-integer";
            usesDefaultFeatures = false;
          }
          {
            name = "lexical-util";
            packageId = "lexical-util";
            usesDefaultFeatures = false;
            features = [ "parse-floats" ];
          }
          {
            name = "static_assertions";
            packageId = "static_assertions";
          }
        ];
        features = {
          "compact" = [ "lexical-util/compact" "lexical-parse-integer/compact" ];
          "default" = [ "std" ];
          "f128" = [ "lexical-util/f128" ];
          "f16" = [ "lexical-util/f16" ];
          "format" = [ "lexical-util/format" "lexical-parse-integer/format" ];
          "lint" = [ "lexical-util/lint" "lexical-parse-integer/lint" ];
          "power-of-two" = [ "lexical-util/power-of-two" "lexical-parse-integer/power-of-two" ];
          "radix" = [ "lexical-util/radix" "lexical-parse-integer/radix" "power-of-two" ];
          "std" = [ "lexical-util/std" "lexical-parse-integer/std" ];
        };
      };
      "lexical-parse-integer" = rec {
        crateName = "lexical-parse-integer";
        version = "1.0.2";
        edition = "2018";
        sha256 = "0qgglhn64c3iy0dzph9wz4qzw27ng96a6qxkfnqzhfxm9958zyax";
        libName = "lexical_parse_integer";
        authors = [
          "Alex Huszagh <ahuszagh@gmail.com>"
        ];
        dependencies = [
          {
            name = "lexical-util";
            packageId = "lexical-util";
            usesDefaultFeatures = false;
            features = [ "parse-integers" ];
          }
          {
            name = "static_assertions";
            packageId = "static_assertions";
          }
        ];
        features = {
          "compact" = [ "lexical-util/compact" ];
          "default" = [ "std" ];
          "format" = [ "lexical-util/format" ];
          "lint" = [ "lexical-util/lint" ];
          "power-of-two" = [ "lexical-util/power-of-two" ];
          "radix" = [ "lexical-util/radix" "power-of-two" ];
          "std" = [ "lexical-util/std" ];
        };
      };
      "lexical-util" = rec {
        crateName = "lexical-util";
        version = "1.0.3";
        edition = "2018";
        sha256 = "181c4fwy36qymz0dl7c33c6sh56123xi39mwns9c3r9j6fslscc5";
        libName = "lexical_util";
        authors = [
          "Alex Huszagh <ahuszagh@gmail.com>"
        ];
        dependencies = [
          {
            name = "static_assertions";
            packageId = "static_assertions";
          }
        ];
        features = {
          "default" = [ "std" ];
          "f128" = [ "parse-floats" "write-floats" ];
          "f16" = [ "parse-floats" "write-floats" ];
          "parse-floats" = [ "parse" "floats" ];
          "parse-integers" = [ "parse" "integers" ];
          "radix" = [ "power-of-two" ];
          "write-floats" = [ "write" "floats" ];
          "write-integers" = [ "write" "integers" ];
        };
        resolvedDefaultFeatures = [ "floats" "integers" "parse" "parse-floats" "parse-integers" "write" "write-floats" "write-integers" ];
      };
      "lexical-write-float" = rec {
        crateName = "lexical-write-float";
        version = "1.0.2";
        edition = "2018";
        sha256 = "02f8qsmi59vp93vp46c74b1hkp0a6h84dwvwpqf1rf3xwga3lz3f";
        libName = "lexical_write_float";
        authors = [
          "Alex Huszagh <ahuszagh@gmail.com>"
        ];
        dependencies = [
          {
            name = "lexical-util";
            packageId = "lexical-util";
            usesDefaultFeatures = false;
            features = [ "write-floats" ];
          }
          {
            name = "lexical-write-integer";
            packageId = "lexical-write-integer";
            usesDefaultFeatures = false;
          }
          {
            name = "static_assertions";
            packageId = "static_assertions";
          }
        ];
        features = {
          "compact" = [ "lexical-util/compact" "lexical-write-integer/compact" ];
          "default" = [ "std" ];
          "f128" = [ "lexical-util/f128" ];
          "f16" = [ "lexical-util/f16" ];
          "format" = [ "lexical-util/format" ];
          "lint" = [ "lexical-util/lint" "lexical-write-integer/lint" ];
          "power-of-two" = [ "lexical-util/power-of-two" "lexical-write-integer/power-of-two" ];
          "radix" = [ "lexical-util/radix" "lexical-write-integer/radix" "power-of-two" ];
          "std" = [ "lexical-util/std" "lexical-write-integer/std" ];
        };
      };
      "lexical-write-integer" = rec {
        crateName = "lexical-write-integer";
        version = "1.0.2";
        edition = "2018";
        sha256 = "0qh1c52j7kciqy351bchy3p6ivz9bl5xkvixza52b0wbjpvfk2gb";
        libName = "lexical_write_integer";
        authors = [
          "Alex Huszagh <ahuszagh@gmail.com>"
        ];
        dependencies = [
          {
            name = "lexical-util";
            packageId = "lexical-util";
            usesDefaultFeatures = false;
            features = [ "write-integers" ];
          }
          {
            name = "static_assertions";
            packageId = "static_assertions";
          }
        ];
        features = {
          "compact" = [ "lexical-util/compact" ];
          "default" = [ "std" ];
          "format" = [ "lexical-util/format" ];
          "lint" = [ "lexical-util/lint" ];
          "power-of-two" = [ "lexical-util/power-of-two" ];
          "radix" = [ "lexical-util/radix" "power-of-two" ];
          "std" = [ "lexical-util/std" ];
        };
      };
      "libc" = rec {
        crateName = "libc";
        version = "0.2.159";
        edition = "2015";
        sha256 = "1i9xpia0hn1y8dws7all8rqng6h3lc8ymlgslnljcvm376jrf7an";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
          "default" = [ "std" ];
          "rustc-dep-of-std" = [ "align" "rustc-std-workspace-core" ];
          "rustc-std-workspace-core" = [ "dep:rustc-std-workspace-core" ];
          "use_std" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "extra_traits" "std" ];
      };
      "libflate" = rec {
        crateName = "libflate";
        version = "2.1.0";
        edition = "2021";
        sha256 = "07mj9z89vbhq837q58m4v2nblgsmrn6vrp8w1j8g0kpa2kfdzna5";
        authors = [
          "Takeru Ohta <phjgt308@gmail.com>"
        ];
        dependencies = [
          {
            name = "adler32";
            packageId = "adler32";
            usesDefaultFeatures = false;
          }
          {
            name = "core2";
            packageId = "core2";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "crc32fast";
            packageId = "crc32fast";
            usesDefaultFeatures = false;
          }
          {
            name = "dary_heap";
            packageId = "dary_heap";
          }
          {
            name = "libflate_lz77";
            packageId = "libflate_lz77";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "libflate_lz77/std" "core2/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "libflate_lz77" = rec {
        crateName = "libflate_lz77";
        version = "2.1.0";
        edition = "2021";
        sha256 = "0gc6h98jwigscasz8vw1vv65b3rismqcbndb8hf6yf4z6qxxgq76";
        authors = [
          "Takeru Ohta <phjgt308@gmail.com>"
        ];
        dependencies = [
          {
            name = "core2";
            packageId = "core2";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "hashbrown";
            packageId = "hashbrown 0.14.5";
          }
          {
            name = "rle-decode-fast";
            packageId = "rle-decode-fast";
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "core2/std" "libflate/std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "libloading" = rec {
        crateName = "libloading";
        version = "0.8.5";
        edition = "2015";
        sha256 = "194dvczq4sifwkzllfmw0qkgvilpha7m5xy90gd6i446vcpz4ya9";
        authors = [
          "Simonas Kazlauskas <libloading@kazlauskas.me>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "windows-targets";
            packageId = "windows-targets 0.48.5";
            target = { target, features }: (target."windows" or false);
          }
        ];

      };
      "libm" = rec {
        crateName = "libm";
        version = "0.2.8";
        edition = "2018";
        sha256 = "0n4hk1rs8pzw8hdfmwn96c4568s93kfxqgcqswr7sajd2diaihjf";
        authors = [
          "Jorge Aparicio <jorge@japaric.io>"
        ];
        features = {
          "musl-reference-tests" = [ "rand" ];
          "rand" = [ "dep:rand" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "libredox" = rec {
        crateName = "libredox";
        version = "0.1.3";
        edition = "2021";
        sha256 = "139602gzgs0k91zb7dvgj1qh4ynb8g1lbxsswdim18hcb6ykgzy0";
        authors = [
          "4lDO2 <4lDO2@protonmail.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.6.0";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "redox_syscall";
            packageId = "redox_syscall 0.5.6";
            optional = true;
          }
        ];
        features = {
          "default" = [ "call" "std" "redox_syscall" ];
          "ioslice" = [ "dep:ioslice" ];
          "mkns" = [ "ioslice" ];
          "redox_syscall" = [ "dep:redox_syscall" ];
        };
        resolvedDefaultFeatures = [ "call" "default" "redox_syscall" "std" ];
      };
      "librocksdb-sys" = rec {
        crateName = "librocksdb-sys";
        version = "0.11.0+8.1.1";
        edition = "2018";
        links = "rocksdb";
        sha256 = "0gly8vx2x65jap1pid32bahn421vxi0zplp9v19d4jyb3c86yf6k";
        libName = "librocksdb_sys";
        authors = [
          "Karl Hobley <karlhobley10@gmail.com>"
          "Arkadiy Paronyan <arkadiy@ethcore.io>"
        ];
        dependencies = [
          {
            name = "bzip2-sys";
            packageId = "bzip2-sys";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "libz-sys";
            packageId = "libz-sys";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "lz4-sys";
            packageId = "lz4-sys";
            optional = true;
          }
          {
            name = "zstd-sys";
            packageId = "zstd-sys";
            optional = true;
            features = [ "zdict_builder" ];
          }
        ];
        buildDependencies = [
          {
            name = "bindgen";
            packageId = "bindgen 0.65.1";
            usesDefaultFeatures = false;
            features = [ "runtime" ];
          }
          {
            name = "cc";
            packageId = "cc";
            features = [ "parallel" ];
          }
          {
            name = "glob";
            packageId = "glob";
          }
        ];
        features = {
          "bzip2" = [ "bzip2-sys" ];
          "bzip2-sys" = [ "dep:bzip2-sys" ];
          "default" = [ "static" ];
          "io-uring" = [ "pkg-config" ];
          "jemalloc" = [ "tikv-jemalloc-sys" ];
          "libz-sys" = [ "dep:libz-sys" ];
          "lz4" = [ "lz4-sys" ];
          "lz4-sys" = [ "dep:lz4-sys" ];
          "pkg-config" = [ "dep:pkg-config" ];
          "static" = [ "libz-sys?/static" "bzip2-sys?/static" ];
          "tikv-jemalloc-sys" = [ "dep:tikv-jemalloc-sys" ];
          "zlib" = [ "libz-sys" ];
          "zstd" = [ "zstd-sys" ];
          "zstd-sys" = [ "dep:zstd-sys" ];
        };
        resolvedDefaultFeatures = [ "default" "libz-sys" "lz4" "lz4-sys" "snappy" "static" "zlib" "zstd" "zstd-sys" ];
      };
      "libsodium-sys-stable" = rec {
        crateName = "libsodium-sys-stable";
        version = "1.21.2";
        edition = "2021";
        links = "sodium";
        sha256 = "0fnz2925lgq5n5scx8p5f7kw4fk52nssvrxal4vccxg89lrisqs2";
        libName = "libsodium_sys";
        authors = [
          "dnaq"
          "jedisct1"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
            target = {target, features}: (!("msvc" == target."env" or null));
          }
          {
            name = "libflate";
            packageId = "libflate";
          }
          {
            name = "minisign-verify";
            packageId = "minisign-verify";
          }
          {
            name = "pkg-config";
            packageId = "pkg-config";
          }
          {
            name = "tar";
            packageId = "tar";
          }
          {
            name = "ureq";
            packageId = "ureq";
            usesDefaultFeatures = false;
          }
          {
            name = "vcpkg";
            packageId = "vcpkg";
            target = {target, features}: ("msvc" == target."env" or null);
          }
          {
            name = "zip";
            packageId = "zip 2.2.0";
            usesDefaultFeatures = false;
            target = {target, features}: ("msvc" == target."env" or null);
            features = [ "deflate" ];
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "libtest-mimic" = rec {
        crateName = "libtest-mimic";
        version = "0.6.1";
        edition = "2021";
        sha256 = "1rwwdrzc5hmfisc9c3zcvnab14rgh0zfa636c2jbhv4az5qf73bd";
        libName = "libtest_mimic";
        authors = [
          "Lukas Kalbertodt <lukas.kalbertodt@gmail.com>"
        ];
        dependencies = [
          {
            name = "clap";
            packageId = "clap";
            features = [ "derive" ];
          }
          {
            name = "termcolor";
            packageId = "termcolor";
          }
          {
            name = "threadpool";
            packageId = "threadpool";
          }
        ];

      };
      "libz-sys" = rec {
        crateName = "libz-sys";
        version = "1.1.20";
        edition = "2018";
        links = "z";
        sha256 = "0wp4i6zl385ilmcqafv61jwsk1mpk6yb8gpws9nwza00x19n9lfj";
        libName = "libz_sys";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
          "Josh Triplett <josh@joshtriplett.org>"
          "Sebastian Thiel <sebastian.thiel@icloud.com>"
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
          }
          {
            name = "pkg-config";
            packageId = "pkg-config";
          }
          {
            name = "vcpkg";
            packageId = "vcpkg";
          }
        ];
        features = {
          "cmake" = [ "dep:cmake" ];
          "default" = [ "libc" "stock-zlib" ];
          "libc" = [ "dep:libc" ];
          "zlib-ng" = [ "libc" "cmake" ];
          "zlib-ng-no-cmake-experimental-community-maintained" = [ "libc" ];
        };
        resolvedDefaultFeatures = [ "static" ];
      };
      "link-cplusplus" = rec {
        crateName = "link-cplusplus";
        version = "1.0.9";
        edition = "2018";
        links = "cplusplus";
        sha256 = "1jc56xf51f3fn5hvppsj9c2pa0fxm7k79xs90a5s58qvgrphq94x";
        libName = "link_cplusplus";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
          }
        ];
        features = {
          "libcxx" = [ "libc++" ];
          "libstdcxx" = [ "libstdc++" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "linked-hash-map" = rec {
        crateName = "linked-hash-map";
        version = "0.5.6";
        edition = "2015";
        sha256 = "03vpgw7x507g524nx5i1jf5dl8k3kv0fzg8v3ip6qqwbpkqww5q7";
        libName = "linked_hash_map";
        authors = [
          "Stepan Koltsov <stepan.koltsov@gmail.com>"
          "Andrew Paseltiner <apaseltiner@gmail.com>"
        ];
        features = {
          "heapsize" = [ "dep:heapsize" ];
          "heapsize_impl" = [ "heapsize" ];
          "serde" = [ "dep:serde" ];
          "serde_impl" = [ "serde" ];
        };
      };
      "linux-raw-sys" = rec {
        crateName = "linux-raw-sys";
        version = "0.4.14";
        edition = "2021";
        sha256 = "12gsjgbhhjwywpqcrizv80vrp7p7grsz5laqq773i33wphjsxcvq";
        libName = "linux_raw_sys";
        authors = [
          "Dan Gohman <dev@sunfishcode.online>"
        ];
        features = {
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "default" = [ "std" "general" "errno" ];
          "rustc-dep-of-std" = [ "core" "compiler_builtins" "no_std" ];
        };
        resolvedDefaultFeatures = [ "elf" "errno" "general" "ioctl" "no_std" "std" ];
      };
      "lock_api" = rec {
        crateName = "lock_api";
        version = "0.4.12";
        edition = "2021";
        sha256 = "05qvxa6g27yyva25a5ghsg85apdxkvr77yhkyhapj6r8vnf8pbq7";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "scopeguard";
            packageId = "scopeguard";
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
          "default" = [ "atomic_usize" ];
          "owning_ref" = [ "dep:owning_ref" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "atomic_usize" "default" ];
      };
      "lockfree-object-pool" = rec {
        crateName = "lockfree-object-pool";
        version = "0.1.6";
        edition = "2021";
        sha256 = "0bjm2g1g1avab86r02jb65iyd7hdi35khn1y81z4nba0511fyx4k";
        libName = "lockfree_object_pool";
        authors = [
          "Etienne Vaillant <vaillant.etienne@gmail.com>"
        ];

      };
      "log" = rec {
        crateName = "log";
        version = "0.4.22";
        edition = "2021";
        sha256 = "093vs0wkm1rgyykk7fjbqp2lwizbixac1w52gv109p5r4jh0p9x7";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
        ];
        features = {
          "kv_serde" = [ "kv_std" "value-bag/serde" "serde" ];
          "kv_std" = [ "std" "kv" "value-bag/error" ];
          "kv_sval" = [ "kv" "value-bag/sval" "sval" "sval_ref" ];
          "kv_unstable" = [ "kv" "value-bag" ];
          "kv_unstable_serde" = [ "kv_serde" "kv_unstable_std" ];
          "kv_unstable_std" = [ "kv_std" "kv_unstable" ];
          "kv_unstable_sval" = [ "kv_sval" "kv_unstable" ];
          "serde" = [ "dep:serde" ];
          "sval" = [ "dep:sval" ];
          "sval_ref" = [ "dep:sval_ref" ];
          "value-bag" = [ "dep:value-bag" ];
        };
        resolvedDefaultFeatures = [ "serde" "std" ];
      };
      "logos" = rec {
        crateName = "logos";
        version = "0.14.2";
        edition = "2021";
        sha256 = "16zkw1savn5jn6r0pd54sldkpfln4halpgldzfjqr8ndz816wsqw";
        authors = [
          "Maciej Hirsz <hello@maciej.codes>"
          "Jérome Eertmans (maintainer) <jeertmans@icloud.com>"
        ];
        dependencies = [
          {
            name = "logos-derive";
            packageId = "logos-derive";
            optional = true;
          }
        ];
        features = {
          "debug" = [ "logos-derive?/debug" ];
          "default" = [ "export_derive" "std" ];
          "export_derive" = [ "logos-derive" ];
          "forbid_unsafe" = [ "logos-derive?/forbid_unsafe" ];
          "logos-derive" = [ "dep:logos-derive" ];
        };
        resolvedDefaultFeatures = [ "default" "export_derive" "logos-derive" "std" ];
      };
      "logos-codegen" = rec {
        crateName = "logos-codegen";
        version = "0.14.2";
        edition = "2021";
        sha256 = "043dcx9a1qk4nbva7nsbngcjqiw645bgq2q0bc0wvykfyasvcbmk";
        libName = "logos_codegen";
        authors = [
          "Maciej Hirsz <hello@maciej.codes>"
          "Jérome Eertmans (maintainer) <jeertmans@icloud.com>"
        ];
        dependencies = [
          {
            name = "beef";
            packageId = "beef";
          }
          {
            name = "fnv";
            packageId = "fnv";
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.86";
          }
          {
            name = "quote";
            packageId = "quote 1.0.37";
          }
          {
            name = "regex-syntax";
            packageId = "regex-syntax 0.8.4";
          }
          {
            name = "syn";
            packageId = "syn 2.0.77";
            features = [ "full" ];
          }
        ];
        features = {
        };
      };
      "logos-derive" = rec {
        crateName = "logos-derive";
        version = "0.14.2";
        edition = "2021";
        sha256 = "1v6mpz3gwhnwfpwf2jqly08f7d1q68szqfa7c9ayy4f9cda0qp9y";
        procMacro = true;
        libName = "logos_derive";
        authors = [
          "Maciej Hirsz <hello@maciej.codes>"
          "Jérome Eertmans (maintainer) <jeertmans@icloud.com>"
        ];
        dependencies = [
          {
            name = "logos-codegen";
            packageId = "logos-codegen";
          }
        ];
        features = {
          "debug" = [ "logos-codegen/debug" ];
          "forbid_unsafe" = [ "logos-codegen/forbid_unsafe" ];
        };
      };
      "lru 0.12.4" = rec {
        crateName = "lru";
        version = "0.12.4";
        edition = "2015";
        sha256 = "017rzh4kyl3j79sj0qc35wallblsqbnkzxpn6i3xkrv02y4kkvip";
        authors = [
          "Jerome Froelich <jeromefroelic@hotmail.com>"
        ];
        dependencies = [
          {
            name = "hashbrown";
            packageId = "hashbrown 0.14.5";
            optional = true;
          }
        ];
        features = {
          "default" = [ "hashbrown" ];
          "hashbrown" = [ "dep:hashbrown" ];
          "nightly" = [ "hashbrown" "hashbrown/nightly" ];
        };
        resolvedDefaultFeatures = [ "default" "hashbrown" ];
      };
      "lru 0.7.8" = rec {
        crateName = "lru";
        version = "0.7.8";
        edition = "2015";
        sha256 = "0yp4ai5rpr2czxklzxxx98p6l2aqv4g1906j3dr4b0vfgfxbx6g9";
        authors = [
          "Jerome Froelich <jeromefroelic@hotmail.com>"
        ];
        dependencies = [
          {
            name = "hashbrown";
            packageId = "hashbrown 0.12.3";
            optional = true;
          }
        ];
        features = {
          "default" = [ "hashbrown" ];
          "hashbrown" = [ "dep:hashbrown" ];
          "nightly" = [ "hashbrown" "hashbrown/nightly" ];
        };
        resolvedDefaultFeatures = [ "default" "hashbrown" ];
      };
      "lsp-server" = rec {
        crateName = "lsp-server";
        version = "0.7.7";
        edition = "2021";
        sha256 = "1nbw4sz42445cj6qykd3x09rwrjh72br785491nszp1r8zl4c12m";
        libName = "lsp_server";
        dependencies = [
          {
            name = "crossbeam-channel";
            packageId = "crossbeam-channel";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
        ];

      };
      "lsp-types" = rec {
        crateName = "lsp-types";
        version = "0.95.1";
        edition = "2018";
        sha256 = "0ra36fd4yr7lf5igfrdvwjx9g87z3a99mrjgzk9nq04viqxd6d4f";
        libName = "lsp_types";
        authors = [
          "Markus Westerlind <marwes91@gmail.com>"
          "Bruno Medeiros <bruno.do.medeiros@gmail.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 1.3.2";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "serde_repr";
            packageId = "serde_repr";
          }
          {
            name = "url";
            packageId = "url";
            features = [ "serde" ];
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "lz4-sys" = rec {
        crateName = "lz4-sys";
        version = "1.11.0";
        edition = "2015";
        links = "lz4";
        sha256 = "0zg5qvyf97ksbgvzkf439g6fzj04yg6d4c56wm3qv1bshc0lmd7w";
        libName = "lz4_sys";
        authors = [
          "Jens Heyens <jens.heyens@ewetel.net>"
          "Artem V. Navrotskiy <bozaro@buzzsoft.ru>"
          "Patrick Marks <pmarks@gmail.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
          }
        ];

      };
      "lz4_flex" = rec {
        crateName = "lz4_flex";
        version = "0.11.3";
        edition = "2021";
        sha256 = "1xg3h3y0ghnq3widdssd36s02pvy29c0afbwgq6mh3ibmri12xkm";
        authors = [
          "Pascal Seitz <pascal.seitz@gmail.com>"
          "Arthur Silva <arthurprs@gmail.com>"
          "ticki <Ticki@users.noreply.github.com>"
        ];
        dependencies = [
          {
            name = "twox-hash";
            packageId = "twox-hash";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" "safe-encode" "safe-decode" "frame" ];
          "frame" = [ "std" "dep:twox-hash" ];
        };
        resolvedDefaultFeatures = [ "frame" "std" ];
      };
      "maplit" = rec {
        crateName = "maplit";
        version = "1.0.2";
        edition = "2015";
        sha256 = "07b5kjnhrrmfhgqm9wprjw8adx6i225lqp49gasgqg74lahnabiy";
        authors = [
          "bluss"
        ];

      };
      "matchers" = rec {
        crateName = "matchers";
        version = "0.1.0";
        edition = "2018";
        sha256 = "0n2mbk7lg2vf962c8xwzdq96yrc9i0p8dbmm4wa1nnkcp1dhfqw2";
        authors = [
          "Eliza Weisman <eliza@buoyant.io>"
        ];
        dependencies = [
          {
            name = "regex-automata";
            packageId = "regex-automata 0.1.10";
          }
        ];

      };
      "matchit 0.5.0" = rec {
        crateName = "matchit";
        version = "0.5.0";
        edition = "2018";
        sha256 = "1swbyfxyz6nh8df514dqgds6al8lrrcxynhpbbgn5dvijrwvmjvk";
        authors = [
          "ibraheem <ibrah1440@gmail.com>"
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "matchit 0.7.3" = rec {
        crateName = "matchit";
        version = "0.7.3";
        edition = "2021";
        sha256 = "156bgdmmlv4crib31qhgg49nsjk88dxkdqp80ha2pk2rk6n6ax0f";
        authors = [
          "Ibraheem Ahmed <ibraheem@ibraheem.ca>"
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "md-5" = rec {
        crateName = "md-5";
        version = "0.10.6";
        edition = "2018";
        sha256 = "1kvq5rnpm4fzwmyv5nmnxygdhhb2369888a06gdc9pxyrzh7x7nq";
        libName = "md5";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "digest";
            packageId = "digest 0.10.7";
          }
        ];
        devDependencies = [
          {
            name = "digest";
            packageId = "digest 0.10.7";
            features = [ "dev" ];
          }
        ];
        features = {
          "asm" = [ "md5-asm" ];
          "default" = [ "std" ];
          "md5-asm" = [ "dep:md5-asm" ];
          "oid" = [ "digest/oid" ];
          "std" = [ "digest/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "md5" = rec {
        crateName = "md5";
        version = "0.7.0";
        edition = "2015";
        sha256 = "0wcps37hrhz59fkhf8di1ppdnqld6l1w5sdy7jp7p51z0i4c8329";
        authors = [
          "Ivan Ukhov <ivan.ukhov@gmail.com>"
          "Kamal Ahmad <shibe@openmailbox.org>"
          "Konstantin Stepanov <milezv@gmail.com>"
          "Lukas Kalbertodt <lukas.kalbertodt@gmail.com>"
          "Nathan Musoke <nathan.musoke@gmail.com>"
          "Scott Mabin <scott@mabez.dev>"
          "Tony Arcieri <bascule@gmail.com>"
          "Wim de With <register@dewith.io>"
          "Yosef Dinerstein <yosefdi@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "memchr" = rec {
        crateName = "memchr";
        version = "2.7.4";
        edition = "2021";
        sha256 = "18z32bhxrax0fnjikv475z7ii718hq457qwmaryixfxsl2qrmjkq";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
          "bluss"
        ];
        features = {
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "default" = [ "std" ];
          "logging" = [ "dep:log" ];
          "rustc-dep-of-std" = [ "core" "compiler_builtins" ];
          "std" = [ "alloc" ];
          "use_std" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "memmap2" = rec {
        crateName = "memmap2";
        version = "0.9.5";
        edition = "2018";
        sha256 = "0krpvvkpg4i3l05cv3q2xk24a1vj5c86gbrli2wzhj1qkpnpwgzx";
        authors = [
          "Dan Burkert <dan@danburkert.com>"
          "Yevhenii Reizner <razrfalcon@gmail.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."unix" or false);
          }
        ];
        features = {
          "stable_deref_trait" = [ "dep:stable_deref_trait" ];
        };
      };
      "memoffset" = rec {
        crateName = "memoffset";
        version = "0.6.5";
        edition = "2015";
        sha256 = "1kkrzll58a3ayn5zdyy9i1f1v3mx0xgl29x0chq614zazba638ss";
        authors = [
          "Gilad Naaman <gilad.naaman@gmail.com>"
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "miette" = rec {
        crateName = "miette";
        version = "7.2.0";
        edition = "2018";
        sha256 = "1hdgjkkj1vgiqn9dq445m1p8z4y8adiaig8gh2mhsahc699qip2f";
        authors = [
          "Kat Marchán <kzm@zkat.tech>"
        ];
        dependencies = [
          {
            name = "backtrace";
            packageId = "backtrace";
            optional = true;
          }
          {
            name = "backtrace-ext";
            packageId = "backtrace-ext";
            optional = true;
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "miette-derive";
            packageId = "miette-derive";
            optional = true;
          }
          {
            name = "owo-colors";
            packageId = "owo-colors 4.1.0";
            optional = true;
          }
          {
            name = "supports-color";
            packageId = "supports-color";
            optional = true;
          }
          {
            name = "supports-hyperlinks";
            packageId = "supports-hyperlinks";
            optional = true;
          }
          {
            name = "supports-unicode";
            packageId = "supports-unicode";
            optional = true;
          }
          {
            name = "terminal_size";
            packageId = "terminal_size";
            optional = true;
          }
          {
            name = "textwrap";
            packageId = "textwrap";
            optional = true;
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "unicode-width";
            packageId = "unicode-width";
          }
        ];
        features = {
          "backtrace" = [ "dep:backtrace" ];
          "backtrace-ext" = [ "dep:backtrace-ext" ];
          "default" = [ "derive" ];
          "derive" = [ "miette-derive" ];
          "fancy" = [ "fancy-no-backtrace" "backtrace" "backtrace-ext" ];
          "fancy-base" = [ "owo-colors" "textwrap" ];
          "fancy-no-backtrace" = [ "fancy-base" "terminal_size" "supports-hyperlinks" "supports-color" "supports-unicode" ];
          "fancy-no-syscall" = [ "fancy-base" ];
          "miette-derive" = [ "dep:miette-derive" ];
          "owo-colors" = [ "dep:owo-colors" ];
          "serde" = [ "dep:serde" ];
          "supports-color" = [ "dep:supports-color" ];
          "supports-hyperlinks" = [ "dep:supports-hyperlinks" ];
          "supports-unicode" = [ "dep:supports-unicode" ];
          "syntect" = [ "dep:syntect" ];
          "syntect-highlighter" = [ "fancy-no-backtrace" "syntect" ];
          "terminal_size" = [ "dep:terminal_size" ];
          "textwrap" = [ "dep:textwrap" ];
        };
        resolvedDefaultFeatures = [ "backtrace" "backtrace-ext" "default" "derive" "fancy" "fancy-base" "fancy-no-backtrace" "miette-derive" "owo-colors" "supports-color" "supports-hyperlinks" "supports-unicode" "terminal_size" "textwrap" ];
      };
      "miette-derive" = rec {
        crateName = "miette-derive";
        version = "7.2.0";
        edition = "2018";
        sha256 = "0v4sczg1n88arqwilhir1g97y5vsq9zjmpxn8v1ni05czaprrw6w";
        procMacro = true;
        libName = "miette_derive";
        authors = [
          "Kat Marchán <kzm@zkat.tech>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.86";
          }
          {
            name = "quote";
            packageId = "quote 1.0.37";
          }
          {
            name = "syn";
            packageId = "syn 2.0.77";
          }
        ];

      };
      "migrations_internals" = rec {
        crateName = "migrations_internals";
        version = "2.2.0";
        edition = "2021";
        sha256 = "1zw0lf2lw3wlmyb0kv68cnr3ya2n80svpavf0jcqfbz8a6c060gx";
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "toml";
            packageId = "toml 0.8.19";
          }
        ];

      };
      "migrations_macros" = rec {
        crateName = "migrations_macros";
        version = "2.2.0";
        edition = "2021";
        sha256 = "1z9p2ag0fnnh0m7z8qfncwyjc0pgschca7vzlixb6v0pfb663cgz";
        procMacro = true;
        dependencies = [
          {
            name = "migrations_internals";
            packageId = "migrations_internals";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.86";
          }
          {
            name = "quote";
            packageId = "quote 1.0.37";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "mime" = rec {
        crateName = "mime";
        version = "0.3.17";
        edition = "2015";
        sha256 = "16hkibgvb9klh0w0jk5crr5xv90l3wlf77ggymzjmvl1818vnxv8";
        authors = [
          "Sean McArthur <sean@seanmonstar.com>"
        ];

      };
      "mime_guess" = rec {
        crateName = "mime_guess";
        version = "2.0.5";
        edition = "2015";
        sha256 = "03jmg3yx6j39mg0kayf7w4a886dl3j15y8zs119zw01ccy74zi7p";
        authors = [
          "Austin Bonander <austin.bonander@gmail.com>"
        ];
        dependencies = [
          {
            name = "mime";
            packageId = "mime";
          }
          {
            name = "unicase";
            packageId = "unicase";
          }
        ];
        buildDependencies = [
          {
            name = "unicase";
            packageId = "unicase";
          }
        ];
        features = {
          "default" = [ "rev-mappings" ];
        };
      };
      "minimal-lexical" = rec {
        crateName = "minimal-lexical";
        version = "0.2.1";
        edition = "2018";
        sha256 = "16ppc5g84aijpri4jzv14rvcnslvlpphbszc7zzp6vfkddf4qdb8";
        libName = "minimal_lexical";
        authors = [
          "Alex Huszagh <ahuszagh@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "minisign-verify" = rec {
        crateName = "minisign-verify";
        version = "0.2.2";
        edition = "2018";
        sha256 = "087wdklaijac25l28ny7bn82akmqs8c30dz3rvc1mjz0jh2msnx0";
        libName = "minisign_verify";
        authors = [
          "Frank Denis <github@pureftpd.org>"
        ];

      };
      "miniz_oxide 0.7.4" = rec {
        crateName = "miniz_oxide";
        version = "0.7.4";
        edition = "2018";
        sha256 = "024wv14aa75cvik7005s5y2nfc8zfidddbd7g55g7sjgnzfl18mq";
        authors = [
          "Frommi <daniil.liferenko@gmail.com>"
          "oyvindln <oyvindln@users.noreply.github.com>"
        ];
        dependencies = [
          {
            name = "adler";
            packageId = "adler";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "dep:alloc" ];
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "default" = [ "with-alloc" ];
          "rustc-dep-of-std" = [ "core" "alloc" "compiler_builtins" "adler/rustc-dep-of-std" ];
          "simd" = [ "simd-adler32" ];
          "simd-adler32" = [ "dep:simd-adler32" ];
        };
      };
      "miniz_oxide 0.8.0" = rec {
        crateName = "miniz_oxide";
        version = "0.8.0";
        edition = "2021";
        sha256 = "1wadxkg6a6z4lr7kskapj5d8pxlx7cp1ifw4daqnkzqjxych5n72";
        authors = [
          "Frommi <daniil.liferenko@gmail.com>"
          "oyvindln <oyvindln@users.noreply.github.com>"
        ];
        dependencies = [
          {
            name = "adler2";
            packageId = "adler2";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "dep:alloc" ];
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "default" = [ "with-alloc" ];
          "rustc-dep-of-std" = [ "core" "alloc" "compiler_builtins" "adler2/rustc-dep-of-std" ];
          "simd" = [ "simd-adler32" ];
          "simd-adler32" = [ "dep:simd-adler32" ];
        };
        resolvedDefaultFeatures = [ "with-alloc" ];
      };
      "mio 0.8.11" = rec {
        crateName = "mio";
        version = "0.8.11";
        edition = "2018";
        sha256 = "034byyl0ardml5yliy1hmvx8arkmn9rv479pid794sm07ia519m4";
        authors = [
          "Carl Lerche <me@carllerche.com>"
          "Thomas de Zeeuw <thomasdezeeuw@gmail.com>"
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: ("wasi" == target."os" or null);
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "log";
            packageId = "log";
            optional = true;
          }
          {
            name = "wasi";
            packageId = "wasi 0.11.0+wasi-snapshot-preview1";
            target = { target, features }: ("wasi" == target."os" or null);
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.48.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_Foundation" "Win32_Networking_WinSock" "Win32_Storage_FileSystem" "Win32_System_IO" "Win32_System_WindowsProgramming" ];
          }
        ];
        features = {
          "default" = [ "log" ];
          "log" = [ "dep:log" ];
          "os-ext" = [ "os-poll" "windows-sys/Win32_System_Pipes" "windows-sys/Win32_Security" ];
        };
        resolvedDefaultFeatures = [ "default" "log" "net" "os-ext" "os-poll" ];
      };
      "mio 1.0.2" = rec {
        crateName = "mio";
        version = "1.0.2";
        edition = "2021";
        sha256 = "1v1cnnn44awxbcfm4zlavwgkvbyg7gp5zzjm8mqf1apkrwflvq40";
        authors = [
          "Carl Lerche <me@carllerche.com>"
          "Thomas de Zeeuw <thomasdezeeuw@gmail.com>"
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "hermit-abi";
            packageId = "hermit-abi 0.3.9";
            rename = "libc";
            target = { target, features }: ("hermit" == target."os" or null);
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: ("wasi" == target."os" or null);
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "wasi";
            packageId = "wasi 0.11.0+wasi-snapshot-preview1";
            target = { target, features }: ("wasi" == target."os" or null);
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.52.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Wdk_Foundation" "Wdk_Storage_FileSystem" "Wdk_System_IO" "Win32_Foundation" "Win32_Networking_WinSock" "Win32_Storage_FileSystem" "Win32_System_IO" "Win32_System_WindowsProgramming" ];
          }
        ];
        features = {
          "default" = [ "log" ];
          "log" = [ "dep:log" ];
          "os-ext" = [ "os-poll" "windows-sys/Win32_System_Pipes" "windows-sys/Win32_Security" ];
        };
        resolvedDefaultFeatures = [ "net" "os-ext" "os-poll" ];
      };
      "mirai-annotations" = rec {
        crateName = "mirai-annotations";
        version = "1.12.0";
        edition = "2018";
        sha256 = "1lfkgarmzd7mdr739s9yidh0xhc9d3g4jjiwh246mwmkq5i0ign9";
        libName = "mirai_annotations";
        authors = [
          "Herman Venter <hermanv@fb.com>"
        ];

      };
      "mockall" = rec {
        crateName = "mockall";
        version = "0.11.4";
        edition = "2018";
        sha256 = "15kww0a3wv300wkksc6zj0kz1jwk0hyly48daxs2vvpj300lk12c";
        authors = [
          "Alan Somers <asomers@gmail.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "downcast";
            packageId = "downcast";
          }
          {
            name = "fragile";
            packageId = "fragile";
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "mockall_derive";
            packageId = "mockall_derive";
          }
          {
            name = "predicates";
            packageId = "predicates 2.1.5";
          }
          {
            name = "predicates-tree";
            packageId = "predicates-tree";
          }
        ];
        features = {
          "nightly" = [ "mockall_derive/nightly_derive" "downcast/nightly" ];
        };
      };
      "mockall_derive" = rec {
        crateName = "mockall_derive";
        version = "0.11.4";
        edition = "2018";
        sha256 = "1fvc9kwjcc9ia6ng7z9z02b4qkl9dvsx9m4z51xz9i0mj1k7bki2";
        procMacro = true;
        authors = [
          "Alan Somers <asomers@gmail.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.86";
          }
          {
            name = "quote";
            packageId = "quote 1.0.37";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            features = [ "extra-traits" "full" ];
          }
        ];
        features = {
          "nightly_derive" = [ "proc-macro2/nightly" ];
        };
      };
      "moka" = rec {
        crateName = "moka";
        version = "0.12.8";
        edition = "2021";
        sha256 = "0vrbsd86bdnliwgnzwqw6gi3x7n4fl8gnck4wzfx4xfr9pmn5krj";
        dependencies = [
          {
            name = "crossbeam-channel";
            packageId = "crossbeam-channel";
          }
          {
            name = "crossbeam-epoch";
            packageId = "crossbeam-epoch";
          }
          {
            name = "crossbeam-utils";
            packageId = "crossbeam-utils";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "parking_lot";
            packageId = "parking_lot 0.12.3";
          }
          {
            name = "quanta";
            packageId = "quanta";
            optional = true;
          }
          {
            name = "smallvec";
            packageId = "smallvec";
          }
          {
            name = "tagptr";
            packageId = "tagptr";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "triomphe";
            packageId = "triomphe";
            usesDefaultFeatures = false;
          }
          {
            name = "uuid";
            packageId = "uuid 1.10.0";
            features = [ "v4" ];
          }
        ];
        buildDependencies = [
          {
            name = "rustc_version";
            packageId = "rustc_version";
            target = {target, features}: (target."rustver" or false);
          }
        ];
        features = {
          "async-lock" = [ "dep:async-lock" ];
          "async-trait" = [ "dep:async-trait" ];
          "default" = [ "atomic64" "quanta" ];
          "event-listener" = [ "dep:event-listener" ];
          "future" = [ "async-lock" "async-trait" "event-listener" "futures-util" ];
          "futures-util" = [ "dep:futures-util" ];
          "log" = [ "dep:log" ];
          "logging" = [ "log" ];
          "quanta" = [ "dep:quanta" ];
          "unstable-debug-counters" = [ "future" ];
        };
        resolvedDefaultFeatures = [ "atomic64" "default" "quanta" "sync" ];
      };
      "more-asserts" = rec {
        crateName = "more-asserts";
        version = "0.3.1";
        edition = "2018";
        sha256 = "0zj0f9z73nsn1zxk2y21f0mmafvz7dz5v93prlxwdndb3jbadbqz";
        libName = "more_asserts";
        authors = [
          "Thom Chiovoloni <chiovolonit@gmail.com>"
        ];

      };
      "move-abstract-interpreter" = rec {
        crateName = "move-abstract-interpreter";
        version = "0.1.0";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./external-crates/move/crates/move-abstract-interpreter; }
          else ./external-crates/move/crates/move-abstract-interpreter;
        libName = "move_abstract_interpreter";
        authors = [
          "The Move Contributors"
        ];
        dependencies = [
          {
            name = "move-binary-format";
            packageId = "move-binary-format";
          }
          {
            name = "move-bytecode-verifier-meter";
            packageId = "move-bytecode-verifier-meter";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "move-abstract-interpreter-v0" = rec {
        crateName = "move-abstract-interpreter-v0";
        version = "0.1.0";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./external-crates/move/move-execution/v0/crates/move-abstract-interpreter; }
          else ./external-crates/move/move-execution/v0/crates/move-abstract-interpreter;
        libName = "move_abstract_interpreter_v0";
        authors = [
          "The Move Contributors"
        ];
        dependencies = [
          {
            name = "move-binary-format";
            packageId = "move-binary-format";
          }
          {
            name = "move-bytecode-verifier-meter";
            packageId = "move-bytecode-verifier-meter";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "move-abstract-stack" = rec {
        crateName = "move-abstract-stack";
        version = "0.0.1";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./external-crates/move/crates/move-abstract-stack; }
          else ./external-crates/move/crates/move-abstract-stack;
        libName = "move_abstract_stack";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];

      };
      "move-analyzer" = rec {
        crateName = "move-analyzer";
        version = "1.0.0";
        edition = "2021";
        crateBin = [];
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./external-crates/move/crates/move-analyzer; }
          else ./external-crates/move/crates/move-analyzer;
        libName = "move_analyzer";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "clap";
            packageId = "clap";
            features = [ "derive" ];
          }
          {
            name = "codespan-reporting";
            packageId = "codespan-reporting";
          }
          {
            name = "crossbeam";
            packageId = "crossbeam";
          }
          {
            name = "derivative";
            packageId = "derivative";
          }
          {
            name = "dunce";
            packageId = "dunce";
          }
          {
            name = "im";
            packageId = "im";
          }
          {
            name = "itertools";
            packageId = "itertools 0.10.5";
          }
          {
            name = "lsp-server";
            packageId = "lsp-server";
          }
          {
            name = "lsp-types";
            packageId = "lsp-types";
          }
          {
            name = "move-command-line-common";
            packageId = "move-command-line-common";
          }
          {
            name = "move-compiler";
            packageId = "move-compiler";
          }
          {
            name = "move-ir-types";
            packageId = "move-ir-types";
          }
          {
            name = "move-package";
            packageId = "move-package";
          }
          {
            name = "move-symbol-pool";
            packageId = "move-symbol-pool";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "sha2";
            packageId = "sha2 0.9.9";
          }
          {
            name = "tempfile";
            packageId = "tempfile";
          }
          {
            name = "url";
            packageId = "url";
          }
          {
            name = "vfs";
            packageId = "vfs";
          }
        ];

      };
      "move-binary-format" = rec {
        crateName = "move-binary-format";
        version = "0.0.3";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./external-crates/move/crates/move-binary-format; }
          else ./external-crates/move/crates/move-binary-format;
        libName = "move_binary_format";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "arbitrary";
            packageId = "arbitrary";
            optional = true;
            features = [ "derive" "derive_arbitrary" "derive" ];
          }
          {
            name = "enum-compat-util";
            packageId = "enum-compat-util";
          }
          {
            name = "move-core-types";
            packageId = "move-core-types";
          }
          {
            name = "move-proc-macros";
            packageId = "move-proc-macros";
          }
          {
            name = "proptest";
            packageId = "proptest";
            optional = true;
          }
          {
            name = "proptest-derive";
            packageId = "proptest-derive";
            optional = true;
          }
          {
            name = "ref-cast";
            packageId = "ref-cast";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "variant_count";
            packageId = "variant_count";
          }
        ];
        devDependencies = [
          {
            name = "move-core-types";
            packageId = "move-core-types";
            features = [ "fuzzing" ];
          }
          {
            name = "proptest";
            packageId = "proptest";
          }
          {
            name = "proptest-derive";
            packageId = "proptest-derive";
          }
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "fuzzing" = [ "proptest" "proptest-derive" "arbitrary" "move-core-types/fuzzing" ];
          "getrandom" = [ "dep:getrandom" ];
          "proptest" = [ "dep:proptest" ];
          "proptest-derive" = [ "dep:proptest-derive" ];
          "wasm" = [ "getrandom" ];
        };
        resolvedDefaultFeatures = [ "arbitrary" "default" "fuzzing" "proptest" "proptest-derive" ];
      };
      "move-borrow-graph" = rec {
        crateName = "move-borrow-graph";
        version = "0.0.1";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./external-crates/move/crates/move-borrow-graph; }
          else ./external-crates/move/crates/move-borrow-graph;
        libName = "move_borrow_graph";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];

      };
      "move-bytecode-source-map" = rec {
        crateName = "move-bytecode-source-map";
        version = "0.1.0";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./external-crates/move/crates/move-bytecode-source-map; }
          else ./external-crates/move/crates/move-bytecode-source-map;
        libName = "move_bytecode_source_map";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "bcs";
            packageId = "bcs";
          }
          {
            name = "move-binary-format";
            packageId = "move-binary-format";
          }
          {
            name = "move-command-line-common";
            packageId = "move-command-line-common";
          }
          {
            name = "move-core-types";
            packageId = "move-core-types";
          }
          {
            name = "move-ir-types";
            packageId = "move-ir-types";
          }
          {
            name = "move-symbol-pool";
            packageId = "move-symbol-pool";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "move-bytecode-utils" = rec {
        crateName = "move-bytecode-utils";
        version = "0.1.0";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./external-crates/move/crates/move-bytecode-utils; }
          else ./external-crates/move/crates/move-bytecode-utils;
        libName = "move_bytecode_utils";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "move-binary-format";
            packageId = "move-binary-format";
          }
          {
            name = "move-core-types";
            packageId = "move-core-types";
          }
          {
            name = "petgraph";
            packageId = "petgraph 0.5.1";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "serde-reflection";
            packageId = "serde-reflection";
          }
        ];

      };
      "move-bytecode-verifier" = rec {
        crateName = "move-bytecode-verifier";
        version = "0.1.0";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./external-crates/move/crates/move-bytecode-verifier; }
          else ./external-crates/move/crates/move-bytecode-verifier;
        libName = "move_bytecode_verifier";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "move-abstract-interpreter";
            packageId = "move-abstract-interpreter";
          }
          {
            name = "move-abstract-stack";
            packageId = "move-abstract-stack";
          }
          {
            name = "move-binary-format";
            packageId = "move-binary-format";
          }
          {
            name = "move-borrow-graph";
            packageId = "move-borrow-graph";
          }
          {
            name = "move-bytecode-verifier-meter";
            packageId = "move-bytecode-verifier-meter";
          }
          {
            name = "move-core-types";
            packageId = "move-core-types";
          }
          {
            name = "move-vm-config";
            packageId = "move-vm-config";
          }
          {
            name = "petgraph";
            packageId = "petgraph 0.5.1";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "move-bytecode-verifier-meter" = rec {
        crateName = "move-bytecode-verifier-meter";
        version = "0.1.0";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./external-crates/move/crates/move-bytecode-verifier-meter; }
          else ./external-crates/move/crates/move-bytecode-verifier-meter;
        libName = "move_bytecode_verifier_meter";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "move-binary-format";
            packageId = "move-binary-format";
          }
          {
            name = "move-core-types";
            packageId = "move-core-types";
          }
          {
            name = "move-vm-config";
            packageId = "move-vm-config";
          }
        ];

      };
      "move-bytecode-verifier-v0" = rec {
        crateName = "move-bytecode-verifier-v0";
        version = "0.1.0";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./external-crates/move/move-execution/v0/crates/move-bytecode-verifier; }
          else ./external-crates/move/move-execution/v0/crates/move-bytecode-verifier;
        libName = "move_bytecode_verifier_v0";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "move-abstract-interpreter";
            packageId = "move-abstract-interpreter";
          }
          {
            name = "move-abstract-stack";
            packageId = "move-abstract-stack";
          }
          {
            name = "move-binary-format";
            packageId = "move-binary-format";
          }
          {
            name = "move-borrow-graph";
            packageId = "move-borrow-graph";
          }
          {
            name = "move-bytecode-verifier-meter";
            packageId = "move-bytecode-verifier-meter";
          }
          {
            name = "move-core-types";
            packageId = "move-core-types";
          }
          {
            name = "move-vm-config";
            packageId = "move-vm-config";
          }
          {
            name = "petgraph";
            packageId = "petgraph 0.5.1";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "move-bytecode-viewer" = rec {
        crateName = "move-bytecode-viewer";
        version = "0.1.0";
        edition = "2021";
        crateBin = [];
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./external-crates/move/crates/move-bytecode-viewer; }
          else ./external-crates/move/crates/move-bytecode-viewer;
        libName = "move_bytecode_viewer";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "clap";
            packageId = "clap";
            features = [ "derive" ];
          }
          {
            name = "crossterm";
            packageId = "crossterm 0.25.0";
          }
          {
            name = "move-binary-format";
            packageId = "move-binary-format";
          }
          {
            name = "move-bytecode-source-map";
            packageId = "move-bytecode-source-map";
          }
          {
            name = "move-disassembler";
            packageId = "move-disassembler";
          }
          {
            name = "regex";
            packageId = "regex";
          }
          {
            name = "tui";
            packageId = "tui";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "move-cli" = rec {
        crateName = "move-cli";
        version = "0.1.0";
        edition = "2021";
        crateBin = [];
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./external-crates/move/crates/move-cli; }
          else ./external-crates/move/crates/move-cli;
        libName = "move_cli";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "bcs";
            packageId = "bcs";
          }
          {
            name = "clap";
            packageId = "clap";
            features = [ "derive" ];
          }
          {
            name = "codespan-reporting";
            packageId = "codespan-reporting";
          }
          {
            name = "colored";
            packageId = "colored";
          }
          {
            name = "difference";
            packageId = "difference";
          }
          {
            name = "move-binary-format";
            packageId = "move-binary-format";
          }
          {
            name = "move-bytecode-utils";
            packageId = "move-bytecode-utils";
          }
          {
            name = "move-bytecode-verifier";
            packageId = "move-bytecode-verifier";
          }
          {
            name = "move-bytecode-viewer";
            packageId = "move-bytecode-viewer";
          }
          {
            name = "move-command-line-common";
            packageId = "move-command-line-common";
          }
          {
            name = "move-compiler";
            packageId = "move-compiler";
          }
          {
            name = "move-core-types";
            packageId = "move-core-types";
          }
          {
            name = "move-coverage";
            packageId = "move-coverage";
          }
          {
            name = "move-disassembler";
            packageId = "move-disassembler";
          }
          {
            name = "move-docgen";
            packageId = "move-docgen";
          }
          {
            name = "move-ir-types";
            packageId = "move-ir-types";
          }
          {
            name = "move-package";
            packageId = "move-package";
          }
          {
            name = "move-stdlib-natives";
            packageId = "move-stdlib-natives";
          }
          {
            name = "move-unit-test";
            packageId = "move-unit-test";
          }
          {
            name = "move-vm-profiler";
            packageId = "move-vm-profiler";
          }
          {
            name = "move-vm-runtime";
            packageId = "move-vm-runtime";
          }
          {
            name = "move-vm-test-utils";
            packageId = "move-vm-test-utils";
          }
          {
            name = "move-vm-types";
            packageId = "move-vm-types";
          }
          {
            name = "serde_yaml";
            packageId = "serde_yaml";
          }
          {
            name = "tempfile";
            packageId = "tempfile";
          }
          {
            name = "toml_edit";
            packageId = "toml_edit 0.14.4";
            features = [ "easy" ];
          }
          {
            name = "walkdir";
            packageId = "walkdir";
          }
        ];
        features = {
          "tiered-gas" = [ "move-vm-test-utils/tiered-gas" ];
        };
      };
      "move-command-line-common" = rec {
        crateName = "move-command-line-common";
        version = "0.1.0";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./external-crates/move/crates/move-command-line-common; }
          else ./external-crates/move/crates/move-command-line-common;
        libName = "move_command_line_common";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "bcs";
            packageId = "bcs";
          }
          {
            name = "difference";
            packageId = "difference";
          }
          {
            name = "dirs-next";
            packageId = "dirs-next";
          }
          {
            name = "hex";
            packageId = "hex";
          }
          {
            name = "move-binary-format";
            packageId = "move-binary-format";
          }
          {
            name = "move-core-types";
            packageId = "move-core-types";
          }
          {
            name = "num-bigint";
            packageId = "num-bigint 0.4.6";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "sha2";
            packageId = "sha2 0.9.9";
          }
          {
            name = "vfs";
            packageId = "vfs";
          }
          {
            name = "walkdir";
            packageId = "walkdir";
          }
        ];
        devDependencies = [
          {
            name = "move-core-types";
            packageId = "move-core-types";
            features = [ "fuzzing" ];
          }
        ];

      };
      "move-compiler" = rec {
        crateName = "move-compiler";
        version = "0.0.1";
        edition = "2021";
        crateBin = [];
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./external-crates/move/crates/move-compiler; }
          else ./external-crates/move/crates/move-compiler;
        libName = "move_compiler";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "bcs";
            packageId = "bcs";
          }
          {
            name = "clap";
            packageId = "clap";
            features = [ "derive" ];
          }
          {
            name = "codespan-reporting";
            packageId = "codespan-reporting";
          }
          {
            name = "dunce";
            packageId = "dunce";
          }
          {
            name = "hex";
            packageId = "hex";
          }
          {
            name = "lsp-types";
            packageId = "lsp-types";
          }
          {
            name = "move-binary-format";
            packageId = "move-binary-format";
          }
          {
            name = "move-borrow-graph";
            packageId = "move-borrow-graph";
          }
          {
            name = "move-bytecode-source-map";
            packageId = "move-bytecode-source-map";
          }
          {
            name = "move-bytecode-verifier";
            packageId = "move-bytecode-verifier";
          }
          {
            name = "move-command-line-common";
            packageId = "move-command-line-common";
          }
          {
            name = "move-core-types";
            packageId = "move-core-types";
          }
          {
            name = "move-ir-to-bytecode";
            packageId = "move-ir-to-bytecode";
          }
          {
            name = "move-ir-types";
            packageId = "move-ir-types";
          }
          {
            name = "move-proc-macros";
            packageId = "move-proc-macros";
          }
          {
            name = "move-symbol-pool";
            packageId = "move-symbol-pool";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "petgraph";
            packageId = "petgraph 0.5.1";
          }
          {
            name = "regex";
            packageId = "regex";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "similar";
            packageId = "similar";
          }
          {
            name = "stacker";
            packageId = "stacker";
          }
          {
            name = "vfs";
            packageId = "vfs";
          }
        ];

      };
      "move-core-types" = rec {
        crateName = "move-core-types";
        version = "0.0.4";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./external-crates/move/crates/move-core-types; }
          else ./external-crates/move/crates/move-core-types;
        libName = "move_core_types";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "arbitrary";
            packageId = "arbitrary";
            optional = true;
            features = [ "derive" "derive_arbitrary" ];
          }
          {
            name = "bcs";
            packageId = "bcs";
          }
          {
            name = "enum-compat-util";
            packageId = "enum-compat-util";
          }
          {
            name = "ethnum";
            packageId = "ethnum";
          }
          {
            name = "hex";
            packageId = "hex";
          }
          {
            name = "leb128";
            packageId = "leb128";
          }
          {
            name = "move-proc-macros";
            packageId = "move-proc-macros";
          }
          {
            name = "num";
            packageId = "num";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "primitive-types";
            packageId = "primitive-types 0.10.1";
            features = [ "impl-serde" ];
          }
          {
            name = "proptest";
            packageId = "proptest";
            optional = true;
          }
          {
            name = "proptest-derive";
            packageId = "proptest-derive";
            optional = true;
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "ref-cast";
            packageId = "ref-cast";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "serde_bytes";
            packageId = "serde_bytes";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "uint";
            packageId = "uint";
          }
        ];
        devDependencies = [
          {
            name = "arbitrary";
            packageId = "arbitrary";
            features = [ "derive" "derive_arbitrary" "derive_arbitrary" ];
          }
          {
            name = "proptest";
            packageId = "proptest";
          }
          {
            name = "proptest-derive";
            packageId = "proptest-derive";
          }
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "fuzzing" = [ "proptest" "proptest-derive" "arbitrary" ];
          "proptest" = [ "dep:proptest" ];
          "proptest-derive" = [ "dep:proptest-derive" ];
        };
        resolvedDefaultFeatures = [ "arbitrary" "default" "fuzzing" "proptest" "proptest-derive" ];
      };
      "move-coverage" = rec {
        crateName = "move-coverage";
        version = "0.1.0";
        edition = "2021";
        crateBin = [];
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./external-crates/move/crates/move-coverage; }
          else ./external-crates/move/crates/move-coverage;
        libName = "move_coverage";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "bcs";
            packageId = "bcs";
          }
          {
            name = "clap";
            packageId = "clap";
            features = [ "derive" ];
          }
          {
            name = "codespan";
            packageId = "codespan";
            features = [ "serialization" ];
          }
          {
            name = "colored";
            packageId = "colored";
          }
          {
            name = "move-abstract-interpreter";
            packageId = "move-abstract-interpreter";
          }
          {
            name = "move-binary-format";
            packageId = "move-binary-format";
          }
          {
            name = "move-bytecode-source-map";
            packageId = "move-bytecode-source-map";
          }
          {
            name = "move-command-line-common";
            packageId = "move-command-line-common";
          }
          {
            name = "move-core-types";
            packageId = "move-core-types";
          }
          {
            name = "move-ir-types";
            packageId = "move-ir-types";
          }
          {
            name = "petgraph";
            packageId = "petgraph 0.5.1";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "move-disassembler" = rec {
        crateName = "move-disassembler";
        version = "0.1.0";
        edition = "2021";
        crateBin = [];
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./external-crates/move/crates/move-disassembler; }
          else ./external-crates/move/crates/move-disassembler;
        libName = "move_disassembler";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "bcs";
            packageId = "bcs";
          }
          {
            name = "clap";
            packageId = "clap";
            features = [ "derive" ];
          }
          {
            name = "colored";
            packageId = "colored";
          }
          {
            name = "hex";
            packageId = "hex";
          }
          {
            name = "move-abstract-interpreter";
            packageId = "move-abstract-interpreter";
          }
          {
            name = "move-binary-format";
            packageId = "move-binary-format";
          }
          {
            name = "move-bytecode-source-map";
            packageId = "move-bytecode-source-map";
          }
          {
            name = "move-command-line-common";
            packageId = "move-command-line-common";
          }
          {
            name = "move-compiler";
            packageId = "move-compiler";
          }
          {
            name = "move-core-types";
            packageId = "move-core-types";
          }
          {
            name = "move-coverage";
            packageId = "move-coverage";
          }
          {
            name = "move-ir-types";
            packageId = "move-ir-types";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "move-docgen" = rec {
        crateName = "move-docgen";
        version = "0.1.0";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./external-crates/move/crates/move-docgen; }
          else ./external-crates/move/crates/move-docgen;
        libName = "move_docgen";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "codespan";
            packageId = "codespan";
          }
          {
            name = "codespan-reporting";
            packageId = "codespan-reporting";
          }
          {
            name = "itertools";
            packageId = "itertools 0.10.5";
          }
          {
            name = "log";
            packageId = "log";
            features = [ "serde" ];
          }
          {
            name = "move-compiler";
            packageId = "move-compiler";
          }
          {
            name = "move-model";
            packageId = "move-model";
          }
          {
            name = "num";
            packageId = "num";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "regex";
            packageId = "regex";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
        ];

      };
      "move-ir-compiler" = rec {
        crateName = "move-ir-compiler";
        version = "0.1.0";
        edition = "2021";
        crateBin = [];
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./external-crates/move/crates/move-ir-compiler; }
          else ./external-crates/move/crates/move-ir-compiler;
        libName = "move_ir_compiler";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "bcs";
            packageId = "bcs";
          }
          {
            name = "clap";
            packageId = "clap";
            features = [ "derive" ];
          }
          {
            name = "move-abstract-interpreter";
            packageId = "move-abstract-interpreter";
          }
          {
            name = "move-binary-format";
            packageId = "move-binary-format";
          }
          {
            name = "move-bytecode-source-map";
            packageId = "move-bytecode-source-map";
          }
          {
            name = "move-bytecode-verifier";
            packageId = "move-bytecode-verifier";
          }
          {
            name = "move-command-line-common";
            packageId = "move-command-line-common";
          }
          {
            name = "move-core-types";
            packageId = "move-core-types";
          }
          {
            name = "move-ir-to-bytecode";
            packageId = "move-ir-to-bytecode";
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "move-ir-to-bytecode" = rec {
        crateName = "move-ir-to-bytecode";
        version = "0.1.0";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./external-crates/move/crates/move-ir-to-bytecode; }
          else ./external-crates/move/crates/move-ir-to-bytecode;
        libName = "move_ir_to_bytecode";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "codespan-reporting";
            packageId = "codespan-reporting";
          }
          {
            name = "log";
            packageId = "log";
            features = [ "serde" ];
          }
          {
            name = "move-binary-format";
            packageId = "move-binary-format";
          }
          {
            name = "move-bytecode-source-map";
            packageId = "move-bytecode-source-map";
          }
          {
            name = "move-command-line-common";
            packageId = "move-command-line-common";
          }
          {
            name = "move-core-types";
            packageId = "move-core-types";
          }
          {
            name = "move-ir-to-bytecode-syntax";
            packageId = "move-ir-to-bytecode-syntax";
          }
          {
            name = "move-ir-types";
            packageId = "move-ir-types";
          }
          {
            name = "move-symbol-pool";
            packageId = "move-symbol-pool";
          }
          {
            name = "ouroboros";
            packageId = "ouroboros 0.17.2";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "move-ir-to-bytecode-syntax" = rec {
        crateName = "move-ir-to-bytecode-syntax";
        version = "0.1.0";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./external-crates/move/crates/move-ir-to-bytecode-syntax; }
          else ./external-crates/move/crates/move-ir-to-bytecode-syntax;
        libName = "move_ir_to_bytecode_syntax";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "hex";
            packageId = "hex";
          }
          {
            name = "move-command-line-common";
            packageId = "move-command-line-common";
          }
          {
            name = "move-core-types";
            packageId = "move-core-types";
          }
          {
            name = "move-ir-types";
            packageId = "move-ir-types";
          }
          {
            name = "move-symbol-pool";
            packageId = "move-symbol-pool";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "move-ir-types" = rec {
        crateName = "move-ir-types";
        version = "0.1.0";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./external-crates/move/crates/move-ir-types; }
          else ./external-crates/move/crates/move-ir-types;
        libName = "move_ir_types";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "hex";
            packageId = "hex";
          }
          {
            name = "move-command-line-common";
            packageId = "move-command-line-common";
          }
          {
            name = "move-core-types";
            packageId = "move-core-types";
          }
          {
            name = "move-symbol-pool";
            packageId = "move-symbol-pool";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
        ];

      };
      "move-model" = rec {
        crateName = "move-model";
        version = "0.1.0";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./external-crates/move/crates/move-model; }
          else ./external-crates/move/crates/move-model;
        libName = "move_model";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "codespan";
            packageId = "codespan";
          }
          {
            name = "codespan-reporting";
            packageId = "codespan-reporting";
          }
          {
            name = "itertools";
            packageId = "itertools 0.10.5";
          }
          {
            name = "log";
            packageId = "log";
            features = [ "serde" ];
          }
          {
            name = "move-binary-format";
            packageId = "move-binary-format";
          }
          {
            name = "move-bytecode-source-map";
            packageId = "move-bytecode-source-map";
          }
          {
            name = "move-command-line-common";
            packageId = "move-command-line-common";
          }
          {
            name = "move-compiler";
            packageId = "move-compiler";
          }
          {
            name = "move-core-types";
            packageId = "move-core-types";
          }
          {
            name = "move-disassembler";
            packageId = "move-disassembler";
          }
          {
            name = "move-ir-types";
            packageId = "move-ir-types";
          }
          {
            name = "move-symbol-pool";
            packageId = "move-symbol-pool";
          }
          {
            name = "num";
            packageId = "num";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "regex";
            packageId = "regex";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
        ];

      };
      "move-package" = rec {
        crateName = "move-package";
        version = "0.1.0";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./external-crates/move/crates/move-package; }
          else ./external-crates/move/crates/move-package;
        libName = "move_package";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "clap";
            packageId = "clap";
            features = [ "derive" ];
          }
          {
            name = "colored";
            packageId = "colored";
          }
          {
            name = "itertools";
            packageId = "itertools 0.10.5";
          }
          {
            name = "move-binary-format";
            packageId = "move-binary-format";
          }
          {
            name = "move-bytecode-source-map";
            packageId = "move-bytecode-source-map";
          }
          {
            name = "move-bytecode-utils";
            packageId = "move-bytecode-utils";
          }
          {
            name = "move-command-line-common";
            packageId = "move-command-line-common";
          }
          {
            name = "move-compiler";
            packageId = "move-compiler";
          }
          {
            name = "move-core-types";
            packageId = "move-core-types";
          }
          {
            name = "move-docgen";
            packageId = "move-docgen";
          }
          {
            name = "move-model";
            packageId = "move-model";
          }
          {
            name = "move-symbol-pool";
            packageId = "move-symbol-pool";
          }
          {
            name = "named-lock";
            packageId = "named-lock";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "petgraph";
            packageId = "petgraph 0.5.1";
          }
          {
            name = "regex";
            packageId = "regex";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "serde_yaml";
            packageId = "serde_yaml";
          }
          {
            name = "sha2";
            packageId = "sha2 0.9.9";
          }
          {
            name = "tempfile";
            packageId = "tempfile";
          }
          {
            name = "toml";
            packageId = "toml 0.5.11";
          }
          {
            name = "toml_edit";
            packageId = "toml_edit 0.14.4";
            features = [ "easy" ];
          }
          {
            name = "treeline";
            packageId = "treeline";
          }
          {
            name = "vfs";
            packageId = "vfs";
          }
          {
            name = "walkdir";
            packageId = "walkdir";
          }
          {
            name = "whoami";
            packageId = "whoami";
          }
        ];

      };
      "move-proc-macros" = rec {
        crateName = "move-proc-macros";
        version = "0.1.0";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./external-crates/move/crates/move-proc-macros; }
          else ./external-crates/move/crates/move-proc-macros;
        procMacro = true;
        libName = "move_proc_macros";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "quote";
            packageId = "quote 1.0.37";
          }
          {
            name = "syn";
            packageId = "syn 2.0.77";
            features = [ "full" "fold" "extra-traits" ];
          }
        ];

      };
      "move-prover" = rec {
        crateName = "move-prover";
        version = "0.1.0";
        edition = "2021";
        crateBin = [];
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./external-crates/move/crates/move-prover; }
          else ./external-crates/move/crates/move-prover;
        libName = "move_prover";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "clap";
            packageId = "clap";
            features = [ "derive" ];
          }
          {
            name = "codespan-reporting";
            packageId = "codespan-reporting";
          }
          {
            name = "itertools";
            packageId = "itertools 0.10.5";
          }
          {
            name = "log";
            packageId = "log";
            features = [ "serde" ];
          }
          {
            name = "move-command-line-common";
            packageId = "move-command-line-common";
          }
          {
            name = "move-compiler";
            packageId = "move-compiler";
          }
          {
            name = "move-docgen";
            packageId = "move-docgen";
          }
          {
            name = "move-model";
            packageId = "move-model";
          }
          {
            name = "move-stackless-bytecode";
            packageId = "move-stackless-bytecode";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "simplelog";
            packageId = "simplelog";
          }
          {
            name = "toml";
            packageId = "toml 0.5.11";
          }
        ];

      };
      "move-stackless-bytecode" = rec {
        crateName = "move-stackless-bytecode";
        version = "0.1.0";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./external-crates/move/crates/move-stackless-bytecode; }
          else ./external-crates/move/crates/move-stackless-bytecode;
        libName = "move_stackless_bytecode";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "codespan";
            packageId = "codespan";
          }
          {
            name = "codespan-reporting";
            packageId = "codespan-reporting";
            features = [ "serde" "serialization" ];
          }
          {
            name = "ethnum";
            packageId = "ethnum";
          }
          {
            name = "im";
            packageId = "im";
          }
          {
            name = "itertools";
            packageId = "itertools 0.10.5";
          }
          {
            name = "log";
            packageId = "log";
            features = [ "serde" ];
          }
          {
            name = "move-binary-format";
            packageId = "move-binary-format";
          }
          {
            name = "move-command-line-common";
            packageId = "move-command-line-common";
          }
          {
            name = "move-compiler";
            packageId = "move-compiler";
          }
          {
            name = "move-core-types";
            packageId = "move-core-types";
          }
          {
            name = "move-model";
            packageId = "move-model";
          }
          {
            name = "num";
            packageId = "num";
          }
          {
            name = "petgraph";
            packageId = "petgraph 0.5.1";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
        ];

      };
      "move-stdlib" = rec {
        crateName = "move-stdlib";
        version = "0.1.1";
        edition = "2021";
        crateBin = [];
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./external-crates/move/crates/move-stdlib; }
          else ./external-crates/move/crates/move-stdlib;
        libName = "move_stdlib";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "hex";
            packageId = "hex";
          }
          {
            name = "log";
            packageId = "log";
            features = [ "serde" ];
          }
          {
            name = "move-binary-format";
            packageId = "move-binary-format";
          }
          {
            name = "move-command-line-common";
            packageId = "move-command-line-common";
          }
          {
            name = "move-core-types";
            packageId = "move-core-types";
          }
          {
            name = "move-docgen";
            packageId = "move-docgen";
          }
          {
            name = "move-prover";
            packageId = "move-prover";
          }
          {
            name = "sha2";
            packageId = "sha2 0.9.9";
          }
          {
            name = "walkdir";
            packageId = "walkdir";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "move-stdlib-natives" = rec {
        crateName = "move-stdlib-natives";
        version = "0.1.1";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./external-crates/move/crates/move-stdlib-natives; }
          else ./external-crates/move/crates/move-stdlib-natives;
        libName = "move_stdlib_natives";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "hex";
            packageId = "hex";
          }
          {
            name = "move-binary-format";
            packageId = "move-binary-format";
          }
          {
            name = "move-core-types";
            packageId = "move-core-types";
          }
          {
            name = "move-vm-runtime";
            packageId = "move-vm-runtime";
          }
          {
            name = "move-vm-types";
            packageId = "move-vm-types";
          }
          {
            name = "sha2";
            packageId = "sha2 0.9.9";
          }
          {
            name = "sha3";
            packageId = "sha3 0.9.1";
          }
          {
            name = "smallvec";
            packageId = "smallvec";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" "testing" ];
      };
      "move-stdlib-natives-v0" = rec {
        crateName = "move-stdlib-natives-v0";
        version = "0.1.1";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./external-crates/move/move-execution/v0/crates/move-stdlib-natives; }
          else ./external-crates/move/move-execution/v0/crates/move-stdlib-natives;
        libName = "move_stdlib_natives_v0";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "hex";
            packageId = "hex";
          }
          {
            name = "move-binary-format";
            packageId = "move-binary-format";
          }
          {
            name = "move-core-types";
            packageId = "move-core-types";
          }
          {
            name = "move-vm-runtime-v0";
            packageId = "move-vm-runtime-v0";
            rename = "move-vm-runtime";
          }
          {
            name = "move-vm-types";
            packageId = "move-vm-types";
          }
          {
            name = "sha2";
            packageId = "sha2 0.9.9";
          }
          {
            name = "sha3";
            packageId = "sha3 0.9.1";
          }
          {
            name = "smallvec";
            packageId = "smallvec";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "move-symbol-pool" = rec {
        crateName = "move-symbol-pool";
        version = "0.1.0";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./external-crates/move/crates/move-symbol-pool; }
          else ./external-crates/move/crates/move-symbol-pool;
        libName = "move_symbol_pool";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "phf";
            packageId = "phf";
            features = [ "macros" ];
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "move-transactional-test-runner" = rec {
        crateName = "move-transactional-test-runner";
        version = "0.1.0";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./external-crates/move/crates/move-transactional-test-runner; }
          else ./external-crates/move/crates/move-transactional-test-runner;
        libName = "move_transactional_test_runner";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "clap";
            packageId = "clap";
            features = [ "derive" ];
          }
          {
            name = "move-binary-format";
            packageId = "move-binary-format";
          }
          {
            name = "move-bytecode-source-map";
            packageId = "move-bytecode-source-map";
          }
          {
            name = "move-cli";
            packageId = "move-cli";
          }
          {
            name = "move-command-line-common";
            packageId = "move-command-line-common";
          }
          {
            name = "move-compiler";
            packageId = "move-compiler";
          }
          {
            name = "move-core-types";
            packageId = "move-core-types";
          }
          {
            name = "move-disassembler";
            packageId = "move-disassembler";
          }
          {
            name = "move-ir-compiler";
            packageId = "move-ir-compiler";
          }
          {
            name = "move-ir-types";
            packageId = "move-ir-types";
          }
          {
            name = "move-stdlib";
            packageId = "move-stdlib";
          }
          {
            name = "move-stdlib-natives";
            packageId = "move-stdlib-natives";
          }
          {
            name = "move-symbol-pool";
            packageId = "move-symbol-pool";
          }
          {
            name = "move-vm-config";
            packageId = "move-vm-config";
          }
          {
            name = "move-vm-runtime";
            packageId = "move-vm-runtime";
          }
          {
            name = "move-vm-test-utils";
            packageId = "move-vm-test-utils";
          }
          {
            name = "move-vm-types";
            packageId = "move-vm-types";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "rayon";
            packageId = "rayon";
          }
          {
            name = "regex";
            packageId = "regex";
          }
          {
            name = "tempfile";
            packageId = "tempfile";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "full" ];
          }
        ];
        features = {
          "failpoints" = [ "move-vm-runtime/failpoints" ];
        };
      };
      "move-unit-test" = rec {
        crateName = "move-unit-test";
        version = "0.1.0";
        edition = "2021";
        crateBin = [];
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./external-crates/move/crates/move-unit-test; }
          else ./external-crates/move/crates/move-unit-test;
        libName = "move_unit_test";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "bcs";
            packageId = "bcs";
          }
          {
            name = "better_any";
            packageId = "better_any";
          }
          {
            name = "clap";
            packageId = "clap";
            features = [ "derive" ];
          }
          {
            name = "codespan-reporting";
            packageId = "codespan-reporting";
          }
          {
            name = "colored";
            packageId = "colored";
          }
          {
            name = "move-binary-format";
            packageId = "move-binary-format";
          }
          {
            name = "move-bytecode-utils";
            packageId = "move-bytecode-utils";
          }
          {
            name = "move-command-line-common";
            packageId = "move-command-line-common";
          }
          {
            name = "move-compiler";
            packageId = "move-compiler";
          }
          {
            name = "move-core-types";
            packageId = "move-core-types";
          }
          {
            name = "move-ir-types";
            packageId = "move-ir-types";
          }
          {
            name = "move-stdlib-natives";
            packageId = "move-stdlib-natives";
            features = [ "testing" ];
          }
          {
            name = "move-symbol-pool";
            packageId = "move-symbol-pool";
          }
          {
            name = "move-vm-profiler";
            packageId = "move-vm-profiler";
          }
          {
            name = "move-vm-runtime";
            packageId = "move-vm-runtime";
            features = [ "testing" ];
          }
          {
            name = "move-vm-test-utils";
            packageId = "move-vm-test-utils";
          }
          {
            name = "move-vm-types";
            packageId = "move-vm-types";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "rayon";
            packageId = "rayon";
          }
          {
            name = "regex";
            packageId = "regex";
          }
        ];
        features = {
        };
      };
      "move-vm-config" = rec {
        crateName = "move-vm-config";
        version = "0.1.0";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./external-crates/move/crates/move-vm-config; }
          else ./external-crates/move/crates/move-vm-config;
        libName = "move_vm_config";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "move-binary-format";
            packageId = "move-binary-format";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "gas-profiler" ];
      };
      "move-vm-profiler" = rec {
        crateName = "move-vm-profiler";
        version = "0.1.0";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./external-crates/move/crates/move-vm-profiler; }
          else ./external-crates/move/crates/move-vm-profiler;
        libName = "move_vm_profiler";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "move-vm-config";
            packageId = "move-vm-config";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            optional = true;
          }
          {
            name = "tracing";
            packageId = "tracing";
            optional = true;
          }
        ];
        features = {
          "gas-profiler" = [ "move-vm-config/gas-profiler" "serde_json" "tracing" ];
          "serde_json" = [ "dep:serde_json" ];
          "tracing" = [ "dep:tracing" ];
        };
        resolvedDefaultFeatures = [ "gas-profiler" "serde_json" "tracing" ];
      };
      "move-vm-runtime" = rec {
        crateName = "move-vm-runtime";
        version = "0.1.0";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./external-crates/move/crates/move-vm-runtime; }
          else ./external-crates/move/crates/move-vm-runtime;
        libName = "move_vm_runtime";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "better_any";
            packageId = "better_any";
          }
          {
            name = "fail";
            packageId = "fail";
          }
          {
            name = "move-binary-format";
            packageId = "move-binary-format";
          }
          {
            name = "move-bytecode-verifier";
            packageId = "move-bytecode-verifier";
          }
          {
            name = "move-core-types";
            packageId = "move-core-types";
          }
          {
            name = "move-vm-config";
            packageId = "move-vm-config";
          }
          {
            name = "move-vm-profiler";
            packageId = "move-vm-profiler";
          }
          {
            name = "move-vm-types";
            packageId = "move-vm-types";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "parking_lot";
            packageId = "parking_lot 0.11.2";
          }
          {
            name = "smallvec";
            packageId = "smallvec";
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
        ];
        devDependencies = [
          {
            name = "move-binary-format";
            packageId = "move-binary-format";
            features = [ "fuzzing" ];
          }
        ];
        features = {
          "failpoints" = [ "fail/failpoints" ];
          "fuzzing" = [ "move-vm-types/fuzzing" ];
          "gas-profiler" = [ "move-vm-config/gas-profiler" "move-vm-types/gas-profiler" "move-vm-profiler/gas-profiler" ];
        };
        resolvedDefaultFeatures = [ "default" "gas-profiler" "testing" ];
      };
      "move-vm-runtime-v0" = rec {
        crateName = "move-vm-runtime-v0";
        version = "0.1.0";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./external-crates/move/move-execution/v0/crates/move-vm-runtime; }
          else ./external-crates/move/move-execution/v0/crates/move-vm-runtime;
        libName = "move_vm_runtime_v0";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "better_any";
            packageId = "better_any";
          }
          {
            name = "fail";
            packageId = "fail";
          }
          {
            name = "move-binary-format";
            packageId = "move-binary-format";
          }
          {
            name = "move-bytecode-verifier-v0";
            packageId = "move-bytecode-verifier-v0";
            rename = "move-bytecode-verifier";
          }
          {
            name = "move-core-types";
            packageId = "move-core-types";
          }
          {
            name = "move-vm-config";
            packageId = "move-vm-config";
          }
          {
            name = "move-vm-profiler";
            packageId = "move-vm-profiler";
          }
          {
            name = "move-vm-types";
            packageId = "move-vm-types";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "parking_lot";
            packageId = "parking_lot 0.11.2";
          }
          {
            name = "smallvec";
            packageId = "smallvec";
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
        ];
        devDependencies = [
          {
            name = "move-binary-format";
            packageId = "move-binary-format";
            features = [ "fuzzing" ];
          }
        ];
        features = {
          "failpoints" = [ "fail/failpoints" ];
          "fuzzing" = [ "move-vm-types/fuzzing" ];
          "gas-profiler" = [ "move-vm-config/gas-profiler" "move-vm-types/gas-profiler" "move-vm-profiler/gas-profiler" ];
        };
        resolvedDefaultFeatures = [ "default" "gas-profiler" ];
      };
      "move-vm-test-utils" = rec {
        crateName = "move-vm-test-utils";
        version = "0.1.0";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./external-crates/move/crates/move-vm-test-utils; }
          else ./external-crates/move/crates/move-vm-test-utils;
        libName = "move_vm_test_utils";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "move-binary-format";
            packageId = "move-binary-format";
          }
          {
            name = "move-core-types";
            packageId = "move-core-types";
          }
          {
            name = "move-vm-profiler";
            packageId = "move-vm-profiler";
          }
          {
            name = "move-vm-types";
            packageId = "move-vm-types";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" "gas-profiler" "tiered-gas" ];
      };
      "move-vm-types" = rec {
        crateName = "move-vm-types";
        version = "0.1.0";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./external-crates/move/crates/move-vm-types; }
          else ./external-crates/move/crates/move-vm-types;
        libName = "move_vm_types";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "bcs";
            packageId = "bcs";
          }
          {
            name = "move-binary-format";
            packageId = "move-binary-format";
          }
          {
            name = "move-core-types";
            packageId = "move-core-types";
          }
          {
            name = "move-vm-profiler";
            packageId = "move-vm-profiler";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "smallvec";
            packageId = "smallvec";
          }
        ];
        features = {
          "fuzzing" = [ "proptest" "move-binary-format/fuzzing" ];
          "gas-profiler" = [ "move-vm-profiler/gas-profiler" ];
          "proptest" = [ "dep:proptest" ];
        };
        resolvedDefaultFeatures = [ "default" "gas-profiler" ];
      };
      "msim" = rec {
        crateName = "msim";
        version = "0.1.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "ssh://git@github.com/iotaledger/iota-sim.git";
          rev = "8fe1939f4bf1e54d0638756c82aaa6c29212e2bb";
          sha256 = "0z1b373zzcbyc54gs8l60l6c57a0vgyi5xg9krlaibcbrwm3yisg";
        };
        authors = [
          "IOTA Stiftung"
        ];
        dependencies = [
          {
            name = "ahash";
            packageId = "ahash 0.8.11";
            target = { target, features }: (target."msim" or false);
          }
          {
            name = "async-task";
            packageId = "async-task";
            target = { target, features }: (target."msim" or false);
          }
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "downcast-rs";
            packageId = "downcast-rs";
            target = { target, features }: (target."msim" or false);
          }
          {
            name = "erasable";
            packageId = "erasable";
            target = { target, features }: (target."msim" or false);
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."msim" or false);
          }
          {
            name = "msim-macros";
            packageId = "msim-macros";
            optional = true;
          }
          {
            name = "naive-timer";
            packageId = "naive-timer";
            target = { target, features }: (target."msim" or false);
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
            features = [ "small_rng" ];
          }
          {
            name = "real_tokio";
            packageId = "real_tokio";
            rename = "tokio";
            target = { target, features }: (target."msim" or false);
            features = [ "full" ];
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "socket2";
            packageId = "socket2";
            target = { target, features }: (target."msim" or false);
          }
          {
            name = "tap";
            packageId = "tap";
          }
          {
            name = "tokio-util";
            packageId = "tokio-util 0.7.11";
            target = { target, features }: (target."msim" or false);
            features = [ "full" ];
          }
          {
            name = "toml";
            packageId = "toml 0.8.19";
            target = { target, features }: (target."msim" or false);
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "tracing-subscriber";
            packageId = "tracing-subscriber";
          }
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
          }
        ];
        devDependencies = [
          {
            name = "real_tokio";
            packageId = "real_tokio";
            rename = "tokio";
            features = [ "full" ];
          }
        ];
        features = {
          "default" = [ "macros" ];
          "macros" = [ "msim-macros" "tokio/macros" ];
          "msim-macros" = [ "dep:msim-macros" ];
        };
        resolvedDefaultFeatures = [ "default" "macros" "msim-macros" ];
      };
      "msim-macros" = rec {
        crateName = "msim-macros";
        version = "0.1.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "ssh://git@github.com/iotaledger/iota-sim.git";
          rev = "8fe1939f4bf1e54d0638756c82aaa6c29212e2bb";
          sha256 = "0z1b373zzcbyc54gs8l60l6c57a0vgyi5xg9krlaibcbrwm3yisg";
        };
        procMacro = true;
        libName = "msim_macros";
        authors = [
          "IOTA Stiftung"
        ];
        dependencies = [
          {
            name = "darling";
            packageId = "darling 0.14.4";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.86";
          }
          {
            name = "quote";
            packageId = "quote 1.0.37";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
          }
        ];

      };
      "multer" = rec {
        crateName = "multer";
        version = "3.1.0";
        edition = "2018";
        sha256 = "0jr2snfay5fjz50yvdja4vbnddlj1iriiqjym88pbj3daiv7gs43";
        authors = [
          "Rousan Ali <hello@rousan.io>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "encoding_rs";
            packageId = "encoding_rs";
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
          }
          {
            name = "http";
            packageId = "http 1.1.0";
          }
          {
            name = "httparse";
            packageId = "httparse";
          }
          {
            name = "memchr";
            packageId = "memchr";
          }
          {
            name = "mime";
            packageId = "mime";
          }
          {
            name = "spin";
            packageId = "spin 0.9.8";
            usesDefaultFeatures = false;
            features = [ "spin_mutex" ];
          }
        ];
        buildDependencies = [
          {
            name = "version_check";
            packageId = "version_check";
          }
        ];
        features = {
          "all" = [ "json" ];
          "json" = [ "serde" "serde_json" ];
          "log" = [ "dep:log" ];
          "serde" = [ "dep:serde" ];
          "serde_json" = [ "dep:serde_json" ];
          "tokio" = [ "dep:tokio" ];
          "tokio-io" = [ "tokio" "tokio-util" ];
          "tokio-util" = [ "dep:tokio-util" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "multiaddr" = rec {
        crateName = "multiaddr";
        version = "0.17.1";
        edition = "2018";
        sha256 = "1gfkcsvzsprs9rqk3kxspph9qhd2vm9bpfqjhvx13589qxkzadib";
        authors = [
          "dignifiedquire <dignifiedquire@gmail.com>"
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "arrayref";
            packageId = "arrayref";
          }
          {
            name = "byteorder";
            packageId = "byteorder";
          }
          {
            name = "data-encoding";
            packageId = "data-encoding";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "multibase";
            packageId = "multibase";
          }
          {
            name = "multihash";
            packageId = "multihash";
            usesDefaultFeatures = false;
            features = [ "std" "multihash-impl" "identity" ];
          }
          {
            name = "percent-encoding";
            packageId = "percent-encoding";
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "static_assertions";
            packageId = "static_assertions";
          }
          {
            name = "unsigned-varint";
            packageId = "unsigned-varint";
          }
          {
            name = "url";
            packageId = "url";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "url" ];
          "url" = [ "dep:url" ];
        };
        resolvedDefaultFeatures = [ "default" "url" ];
      };
      "multibase" = rec {
        crateName = "multibase";
        version = "0.9.1";
        edition = "2018";
        sha256 = "014l697md16829k41hzmfx4in9jzhn774q5292bsq10z7kn3jdcv";
        authors = [
          "Friedel Ziegelmayer <dignifiedquire@gmail.com>"
        ];
        dependencies = [
          {
            name = "base-x";
            packageId = "base-x";
            usesDefaultFeatures = false;
          }
          {
            name = "data-encoding";
            packageId = "data-encoding";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "data-encoding-macro";
            packageId = "data-encoding-macro";
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "data-encoding/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "multihash" = rec {
        crateName = "multihash";
        version = "0.17.0";
        edition = "2018";
        sha256 = "0h5fhgvnn7cl72c6habz7brhnl3y016nkq9xrvxpj0b13pq6ypc3";
        authors = [
          "dignifiedquire <dignifiedquire@gmail.com>"
          "David Craven <david@craven.ch>"
          "Volker Mische <volker.mische@gmail.com>"
        ];
        dependencies = [
          {
            name = "core2";
            packageId = "core2";
            usesDefaultFeatures = false;
          }
          {
            name = "multihash-derive";
            packageId = "multihash-derive";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "unsigned-varint";
            packageId = "unsigned-varint";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "core2/alloc" ];
          "arb" = [ "quickcheck" "rand" "arbitrary" ];
          "arbitrary" = [ "dep:arbitrary" ];
          "blake2b" = [ "blake2b_simd" ];
          "blake2b_simd" = [ "dep:blake2b_simd" ];
          "blake2s" = [ "blake2s_simd" ];
          "blake2s_simd" = [ "dep:blake2s_simd" ];
          "blake3" = [ "dep:blake3" ];
          "default" = [ "std" "derive" "multihash-impl" "secure-hashes" ];
          "derive" = [ "multihash-derive" ];
          "digest" = [ "dep:digest" ];
          "multihash-derive" = [ "dep:multihash-derive" ];
          "multihash-impl" = [ "derive" ];
          "parity-scale-codec" = [ "dep:parity-scale-codec" ];
          "quickcheck" = [ "dep:quickcheck" ];
          "rand" = [ "dep:rand" ];
          "ripemd" = [ "ripemd-rs" ];
          "ripemd-rs" = [ "dep:ripemd-rs" ];
          "scale-codec" = [ "parity-scale-codec" ];
          "secure-hashes" = [ "blake2b" "blake2s" "blake3" "sha2" "sha3" ];
          "serde" = [ "dep:serde" ];
          "serde-big-array" = [ "dep:serde-big-array" ];
          "serde-codec" = [ "serde" "serde-big-array" ];
          "sha-1" = [ "dep:sha-1" ];
          "sha-2" = [ "dep:sha-2" ];
          "sha-3" = [ "dep:sha-3" ];
          "sha1" = [ "digest" "sha-1" ];
          "sha2" = [ "digest" "sha-2" ];
          "sha3" = [ "digest" "sha-3" ];
          "std" = [ "unsigned-varint/std" "multihash-derive/std" "alloc" ];
          "strobe" = [ "strobe-rs" ];
          "strobe-rs" = [ "dep:strobe-rs" ];
        };
        resolvedDefaultFeatures = [ "alloc" "derive" "identity" "multihash-derive" "multihash-impl" "std" ];
      };
      "multihash-derive" = rec {
        crateName = "multihash-derive";
        version = "0.8.0";
        edition = "2018";
        sha256 = "1kcbz75zp7xml7wqylqlcgkndcyqkw0vxlr6a256249108wnj1zw";
        procMacro = true;
        libName = "multihash_derive";
        authors = [
          "David Craven <david@craven.ch>"
        ];
        dependencies = [
          {
            name = "proc-macro-crate";
            packageId = "proc-macro-crate 1.3.1";
          }
          {
            name = "proc-macro-error";
            packageId = "proc-macro-error";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.86";
            features = [ "span-locations" ];
          }
          {
            name = "quote";
            packageId = "quote 1.0.37";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
          }
          {
            name = "synstructure";
            packageId = "synstructure";
          }
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "multimap" = rec {
        crateName = "multimap";
        version = "0.10.0";
        edition = "2015";
        sha256 = "00vs2frqdhrr8iqx4y3fbq73ax5l12837fvbjrpi729d85alrz6y";
        authors = [
          "Håvar Nøvik <havar.novik@gmail.com>"
        ];
        features = {
          "default" = [ "serde_impl" ];
          "serde" = [ "dep:serde" ];
          "serde_impl" = [ "serde" ];
        };
      };
      "mysqlclient-src" = rec {
        crateName = "mysqlclient-src";
        version = "0.1.2";
        edition = "2021";
        links = "mysqlclient_sys_src";
        sha256 = "15f64s43af0z6608mja7q7wzxiakbsxgad2f4ffpw89g8ppfxjac";
        libName = "mysqlclient_src";
        dependencies = [
          {
            name = "link-cplusplus";
            packageId = "link-cplusplus";
          }
          {
            name = "openssl-src";
            packageId = "openssl-src";
          }
          {
            name = "openssl-sys";
            packageId = "openssl-sys";
            features = [ "vendored" ];
          }
        ];
        buildDependencies = [
          {
            name = "cmake";
            packageId = "cmake";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "mysqlclient-sys" = rec {
        crateName = "mysqlclient-sys";
        version = "0.4.1";
        edition = "2021";
        links = "mysqlclient";
        sha256 = "06a68f99bs31xn16jsipmgg1kplnlj8vx8kpgf976p63vd0213j7";
        libName = "mysqlclient_sys";
        dependencies = [
          {
            name = "mysqlclient-src";
            packageId = "mysqlclient-src";
            optional = true;
          }
        ];
        buildDependencies = [
          {
            name = "pkg-config";
            packageId = "pkg-config";
          }
          {
            name = "vcpkg";
            packageId = "vcpkg";
            target = {target, features}: ("msvc" == target."env" or null);
          }
        ];
        features = {
          "buildtime_bindgen" = [ "dep:bindgen" ];
          "bundled" = [ "dep:mysqlclient-src" ];
        };
        resolvedDefaultFeatures = [ "bundled" "default" ];
      };
      "naive-timer" = rec {
        crateName = "naive-timer";
        version = "0.2.0";
        edition = "2018";
        sha256 = "1v9zhizqmylfyk0d1ynqm5gc3hv6cq59ad94rymw5w7bvvbhljh3";
        libName = "naive_timer";
        authors = [
          "Runji Wang <wangrunji0408@163.com>"
        ];

      };
      "named-lock" = rec {
        crateName = "named-lock";
        version = "0.2.0";
        edition = "2018";
        sha256 = "1b2r5s121wlvf4zxvb1s1d2snwlxh9v33v1iyv8naav8gimyp8s0";
        libName = "named_lock";
        authors = [
          "oblique <psyberbits@gmail.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "parking_lot";
            packageId = "parking_lot 0.12.3";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "widestring";
            packageId = "widestring";
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: (target."windows" or false);
            features = [ "handleapi" "synchapi" "winbase" "winnt" "winerror" ];
          }
        ];

      };
      "neptune" = rec {
        crateName = "neptune";
        version = "13.0.0";
        edition = "2021";
        sha256 = "0f74r1zvapx151niar7yqp6hd1gj149vlqfh4fd4x2acq2d6qqh6";
        authors = [
          "porcuquine <porcuquine@gmail.com>"
        ];
        dependencies = [
          {
            name = "bellpepper";
            packageId = "bellpepper";
            usesDefaultFeatures = false;
          }
          {
            name = "bellpepper-core";
            packageId = "bellpepper-core";
            usesDefaultFeatures = false;
          }
          {
            name = "blake2s_simd";
            packageId = "blake2s_simd";
          }
          {
            name = "blstrs";
            packageId = "blstrs";
            optional = true;
          }
          {
            name = "byteorder";
            packageId = "byteorder";
          }
          {
            name = "ff";
            packageId = "ff 0.13.0";
          }
          {
            name = "generic-array";
            packageId = "generic-array";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "pasta_curves";
            packageId = "pasta_curves";
            features = [ "serde" ];
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "trait-set";
            packageId = "trait-set";
          }
        ];
        buildDependencies = [
          {
            name = "blstrs";
            packageId = "blstrs";
          }
          {
            name = "pasta_curves";
            packageId = "pasta_curves";
            features = [ "serde" ];
          }
        ];
        devDependencies = [
          {
            name = "blstrs";
            packageId = "blstrs";
          }
        ];
        features = {
          "abomonation" = [ "dep:abomonation" "dep:abomonation_derive" ];
          "bls" = [ "blstrs/gpu" ];
          "blstrs" = [ "dep:blstrs" ];
          "cuda" = [ "ec-gpu-gen/cuda" "ec-gpu" ];
          "default" = [ "bls" "pasta" ];
          "ec-gpu" = [ "dep:ec-gpu" ];
          "ec-gpu-gen" = [ "dep:ec-gpu-gen" ];
          "opencl" = [ "ec-gpu-gen/opencl" "ec-gpu" ];
          "pasta" = [ "pasta_curves/gpu" ];
          "portable" = [ "blstrs/portable" ];
        };
      };
      "new_debug_unreachable" = rec {
        crateName = "new_debug_unreachable";
        version = "1.0.6";
        edition = "2021";
        sha256 = "11phpf1mjxq6khk91yzcbd3ympm78m3ivl7xg6lg2c0lf66fy3k5";
        libName = "debug_unreachable";
        authors = [
          "Matt Brubeck <mbrubeck@limpet.net>"
          "Jonathan Reem <jonathan.reem@gmail.com>"
        ];

      };
      "newline-converter" = rec {
        crateName = "newline-converter";
        version = "0.2.2";
        edition = "2018";
        sha256 = "03y000bbxnwzb7aipxyw7gm68b1bd8dv7illz03l4qw7bjfx0w8z";
        libName = "newline_converter";
        authors = [
          "Michal Borejszo <michael.borejszo@gmail.com>"
        ];
        dependencies = [
          {
            name = "unicode-segmentation";
            packageId = "unicode-segmentation";
          }
        ];

      };
      "nibble_vec" = rec {
        crateName = "nibble_vec";
        version = "0.1.0";
        edition = "2018";
        sha256 = "0hsdp3s724s30hkqz74ky6sqnadhp2xwcj1n1hzy4vzkz4yxi9bp";
        authors = [
          "Michael Sproul <micsproul@gmail.com>"
        ];
        dependencies = [
          {
            name = "smallvec";
            packageId = "smallvec";
          }
        ];

      };
      "nix 0.24.3" = rec {
        crateName = "nix";
        version = "0.24.3";
        edition = "2018";
        sha256 = "0sc0yzdl51b49bqd9l9cmimp1sw1hxb8iyv4d35ww6d7m5rfjlps";
        authors = [
          "The nix-rust Project Developers"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 1.3.2";
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "libc";
            packageId = "libc";
            features = [ "extra_traits" ];
          }
          {
            name = "memoffset";
            packageId = "memoffset";
            optional = true;
            target = { target, features }: (!("redox" == target."os" or null));
          }
        ];
        features = {
          "default" = [ "acct" "aio" "dir" "env" "event" "feature" "fs" "hostname" "inotify" "ioctl" "kmod" "mman" "mount" "mqueue" "net" "personality" "poll" "process" "pthread" "ptrace" "quota" "reboot" "resource" "sched" "signal" "socket" "term" "time" "ucontext" "uio" "user" "zerocopy" ];
          "dir" = [ "fs" ];
          "memoffset" = [ "dep:memoffset" ];
          "mount" = [ "uio" ];
          "mqueue" = [ "fs" ];
          "net" = [ "socket" ];
          "ptrace" = [ "process" ];
          "sched" = [ "process" ];
          "signal" = [ "process" ];
          "socket" = [ "memoffset" ];
          "ucontext" = [ "signal" ];
          "user" = [ "feature" ];
          "zerocopy" = [ "fs" "uio" ];
        };
        resolvedDefaultFeatures = [ "acct" "aio" "default" "dir" "env" "event" "feature" "fs" "hostname" "inotify" "ioctl" "kmod" "memoffset" "mman" "mount" "mqueue" "net" "personality" "poll" "process" "pthread" "ptrace" "quota" "reboot" "resource" "sched" "signal" "socket" "term" "time" "ucontext" "uio" "user" "zerocopy" ];
      };
      "nix 0.26.4" = rec {
        crateName = "nix";
        version = "0.26.4";
        edition = "2018";
        sha256 = "06xgl4ybb8pvjrbmc3xggbgk3kbs1j0c4c0nzdfrmpbgrkrym2sr";
        authors = [
          "The nix-rust Project Developers"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 1.3.2";
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "libc";
            packageId = "libc";
            features = [ "extra_traits" ];
          }
        ];
        features = {
          "aio" = [ "pin-utils" ];
          "default" = [ "acct" "aio" "dir" "env" "event" "feature" "fs" "hostname" "inotify" "ioctl" "kmod" "mman" "mount" "mqueue" "net" "personality" "poll" "process" "pthread" "ptrace" "quota" "reboot" "resource" "sched" "signal" "socket" "term" "time" "ucontext" "uio" "user" "zerocopy" ];
          "dir" = [ "fs" ];
          "memoffset" = [ "dep:memoffset" ];
          "mount" = [ "uio" ];
          "mqueue" = [ "fs" ];
          "net" = [ "socket" ];
          "pin-utils" = [ "dep:pin-utils" ];
          "ptrace" = [ "process" ];
          "sched" = [ "process" ];
          "signal" = [ "process" ];
          "socket" = [ "memoffset" ];
          "ucontext" = [ "signal" ];
          "user" = [ "feature" ];
          "zerocopy" = [ "fs" "uio" ];
        };
        resolvedDefaultFeatures = [ "fs" "process" "signal" ];
      };
      "nix 0.28.0" = rec {
        crateName = "nix";
        version = "0.28.0";
        edition = "2021";
        sha256 = "1r0rylax4ycx3iqakwjvaa178jrrwiiwghcw95ndzy72zk25c8db";
        authors = [
          "The nix-rust Project Developers"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.6.0";
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "libc";
            packageId = "libc";
            features = [ "extra_traits" ];
          }
        ];
        buildDependencies = [
          {
            name = "cfg_aliases";
            packageId = "cfg_aliases";
          }
        ];
        features = {
          "aio" = [ "pin-utils" ];
          "dir" = [ "fs" ];
          "memoffset" = [ "dep:memoffset" ];
          "mount" = [ "uio" ];
          "mqueue" = [ "fs" ];
          "net" = [ "socket" ];
          "pin-utils" = [ "dep:pin-utils" ];
          "ptrace" = [ "process" ];
          "sched" = [ "process" ];
          "signal" = [ "process" ];
          "socket" = [ "memoffset" ];
          "ucontext" = [ "signal" ];
          "user" = [ "feature" ];
          "zerocopy" = [ "fs" "uio" ];
        };
        resolvedDefaultFeatures = [ "fs" "ioctl" "poll" "process" "signal" "term" ];
      };
      "no-std-compat" = rec {
        crateName = "no-std-compat";
        version = "0.4.1";
        edition = "2018";
        sha256 = "132vrf710zsdp40yp1z3kgc2ss8pi0z4gmihsz3y7hl4dpd56f5r";
        libName = "no_std_compat";
        authors = [
          "jD91mZM2 <me@krake.one>"
        ];
        features = {
          "compat_hash" = [ "hashbrown" ];
          "compat_sync" = [ "spin" ];
          "hashbrown" = [ "dep:hashbrown" ];
          "spin" = [ "dep:spin" ];
        };
        resolvedDefaultFeatures = [ "alloc" "std" ];
      };
      "nom" = rec {
        crateName = "nom";
        version = "7.1.3";
        edition = "2018";
        sha256 = "0jha9901wxam390jcf5pfa0qqfrgh8li787jx2ip0yk5b8y9hwyj";
        authors = [
          "contact@geoffroycouprie.com"
        ];
        dependencies = [
          {
            name = "memchr";
            packageId = "memchr";
            usesDefaultFeatures = false;
          }
          {
            name = "minimal-lexical";
            packageId = "minimal-lexical";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" "memchr/std" "minimal-lexical/std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "nonempty" = rec {
        crateName = "nonempty";
        version = "0.9.0";
        edition = "2018";
        sha256 = "1rh8yv3l0531696d27x3fmv4ykbbi4xqwbmxs7ysr2d5l3ffypcr";
        authors = [
          "Alexis Sellier <self@cloudhead.io>"
        ];
        features = {
          "serde" = [ "dep:serde" ];
          "serialize" = [ "serde" ];
        };
      };
      "nonzero_ext" = rec {
        crateName = "nonzero_ext";
        version = "0.3.0";
        edition = "2015";
        sha256 = "08fghyinb07xwhbj7vwvlhg45g5cvhvld2min25njidir12rdgrq";
        authors = [
          "Andreas Fuchs <asf@boinkor.net>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "normalize-line-endings" = rec {
        crateName = "normalize-line-endings";
        version = "0.3.0";
        edition = "2015";
        sha256 = "1gp52dfn2glz26a352zra8h04351icf0fkqzw1shkwrgh1vpz031";
        libName = "normalize_line_endings";
        authors = [
          "Richard Dodd <richdodj@gmail.com>"
        ];

      };
      "notify" = rec {
        crateName = "notify";
        version = "6.1.1";
        edition = "2021";
        sha256 = "0bad98r0ilkhhq2jg3zs11zcqasgbvxia8224wpasm74n65vs1b2";
        authors = [
          "Félix Saparelli <me@passcod.name>"
          "Daniel Faust <hessijames@gmail.com>"
          "Aron Heinecke <Ox0p54r36@t-online.de>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.6.0";
            target = { target, features }: ("macos" == target."os" or null);
          }
          {
            name = "crossbeam-channel";
            packageId = "crossbeam-channel";
            optional = true;
          }
          {
            name = "filetime";
            packageId = "filetime";
          }
          {
            name = "fsevent-sys";
            packageId = "fsevent-sys";
            optional = true;
            target = { target, features }: ("macos" == target."os" or null);
          }
          {
            name = "inotify";
            packageId = "inotify";
            usesDefaultFeatures = false;
            target = { target, features }: (("linux" == target."os" or null) || ("android" == target."os" or null));
          }
          {
            name = "kqueue";
            packageId = "kqueue";
            target = { target, features }: (("freebsd" == target."os" or null) || ("openbsd" == target."os" or null) || ("netbsd" == target."os" or null) || ("dragonflybsd" == target."os" or null));
          }
          {
            name = "kqueue";
            packageId = "kqueue";
            optional = true;
            target = { target, features }: ("macos" == target."os" or null);
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "mio";
            packageId = "mio 0.8.11";
            target = { target, features }: (("freebsd" == target."os" or null) || ("openbsd" == target."os" or null) || ("netbsd" == target."os" or null) || ("dragonflybsd" == target."os" or null));
            features = [ "os-ext" ];
          }
          {
            name = "mio";
            packageId = "mio 0.8.11";
            target = { target, features }: (("linux" == target."os" or null) || ("android" == target."os" or null));
            features = [ "os-ext" ];
          }
          {
            name = "mio";
            packageId = "mio 0.8.11";
            optional = true;
            target = { target, features }: ("macos" == target."os" or null);
            features = [ "os-ext" ];
          }
          {
            name = "walkdir";
            packageId = "walkdir";
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.48.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_System_Threading" "Win32_Foundation" "Win32_Storage_FileSystem" "Win32_Security" "Win32_System_WindowsProgramming" "Win32_System_IO" ];
          }
        ];
        features = {
          "crossbeam-channel" = [ "dep:crossbeam-channel" ];
          "default" = [ "macos_fsevent" "crossbeam-channel" ];
          "fsevent-sys" = [ "dep:fsevent-sys" ];
          "kqueue" = [ "dep:kqueue" ];
          "macos_fsevent" = [ "fsevent-sys" ];
          "macos_kqueue" = [ "kqueue" "mio" ];
          "mio" = [ "dep:mio" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "crossbeam-channel" "default" "fsevent-sys" "macos_fsevent" ];
      };
      "ntapi" = rec {
        crateName = "ntapi";
        version = "0.4.1";
        edition = "2018";
        sha256 = "1r38zhbwdvkis2mzs6671cm1p6djgsl49i7bwxzrvhwicdf8k8z8";
        authors = [
          "MSxDOS <melcodos@gmail.com>"
        ];
        dependencies = [
          {
            name = "winapi";
            packageId = "winapi";
            features = [ "cfg" "evntrace" "in6addr" "inaddr" "minwinbase" "ntsecapi" "windef" "winioctl" ];
          }
        ];
        features = {
          "default" = [ "user" ];
          "impl-default" = [ "winapi/impl-default" ];
        };
        resolvedDefaultFeatures = [ "default" "user" ];
      };
      "nu-ansi-term" = rec {
        crateName = "nu-ansi-term";
        version = "0.46.0";
        edition = "2018";
        sha256 = "115sywxh53p190lyw97alm14nc004qj5jm5lvdj608z84rbida3p";
        libName = "nu_ansi_term";
        authors = [
          "ogham@bsago.me"
          "Ryan Scheel (Havvy) <ryan.havvy@gmail.com>"
          "Josh Triplett <josh@joshtriplett.org>"
          "The Nushell Project Developers"
        ];
        dependencies = [
          {
            name = "overload";
            packageId = "overload";
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: ("windows" == target."os" or null);
            features = [ "consoleapi" "errhandlingapi" "fileapi" "handleapi" "processenv" ];
          }
        ];
        features = {
          "derive_serde_style" = [ "serde" ];
          "serde" = [ "dep:serde" ];
        };
      };
      "num" = rec {
        crateName = "num";
        version = "0.4.3";
        edition = "2021";
        sha256 = "08yb2fc1psig7pkzaplm495yp7c30m4pykpkwmi5bxrgid705g9m";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "num-bigint";
            packageId = "num-bigint 0.4.6";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "num-complex";
            packageId = "num-complex";
            usesDefaultFeatures = false;
          }
          {
            name = "num-integer";
            packageId = "num-integer";
            usesDefaultFeatures = false;
            features = [ "i128" ];
          }
          {
            name = "num-iter";
            packageId = "num-iter";
            usesDefaultFeatures = false;
            features = [ "i128" ];
          }
          {
            name = "num-rational";
            packageId = "num-rational";
            usesDefaultFeatures = false;
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
            features = [ "i128" ];
          }
        ];
        features = {
          "alloc" = [ "dep:num-bigint" "num-rational/num-bigint" ];
          "default" = [ "std" ];
          "libm" = [ "num-complex/libm" "num-traits/libm" ];
          "num-bigint" = [ "dep:num-bigint" ];
          "rand" = [ "num-bigint/rand" "num-complex/rand" ];
          "serde" = [ "num-bigint/serde" "num-complex/serde" "num-rational/serde" ];
          "std" = [ "dep:num-bigint" "num-bigint/std" "num-complex/std" "num-integer/std" "num-iter/std" "num-rational/std" "num-rational/num-bigint-std" "num-traits/std" ];
        };
        resolvedDefaultFeatures = [ "default" "num-bigint" "std" ];
      };
      "num-bigint 0.3.3" = rec {
        crateName = "num-bigint";
        version = "0.3.3";
        edition = "2018";
        sha256 = "1hxjawydfbnxqyqza0n2sh5sk9rslm0wsn7xdh53dwnby8rphvsz";
        libName = "num_bigint";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "num-integer";
            packageId = "num-integer";
            usesDefaultFeatures = false;
            features = [ "i128" ];
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
            features = [ "i128" ];
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "default" = [ "std" ];
          "quickcheck" = [ "dep:quickcheck" ];
          "rand" = [ "dep:rand" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "num-integer/std" "num-traits/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "num-bigint 0.4.6" = rec {
        crateName = "num-bigint";
        version = "0.4.6";
        edition = "2021";
        sha256 = "1f903zd33i6hkjpsgwhqwi2wffnvkxbn6rv4mkgcjcqi7xr4zr55";
        libName = "num_bigint";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "num-integer";
            packageId = "num-integer";
            usesDefaultFeatures = false;
            features = [ "i128" ];
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
            features = [ "i128" ];
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "default" = [ "std" ];
          "quickcheck" = [ "dep:quickcheck" ];
          "rand" = [ "dep:rand" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "num-integer/std" "num-traits/std" ];
        };
        resolvedDefaultFeatures = [ "default" "rand" "std" ];
      };
      "num-bigint-dig" = rec {
        crateName = "num-bigint-dig";
        version = "0.8.4";
        edition = "2021";
        sha256 = "0lb12df24wgxxbspz4gw1sf1kdqwvpdcpwq4fdlwg4gj41c1k16w";
        libName = "num_bigint_dig";
        authors = [
          "dignifiedquire <dignifiedquire@gmail.com>"
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "byteorder";
            packageId = "byteorder";
            usesDefaultFeatures = false;
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
            usesDefaultFeatures = false;
            features = [ "spin_no_std" ];
          }
          {
            name = "libm";
            packageId = "libm";
          }
          {
            name = "num-integer";
            packageId = "num-integer";
            usesDefaultFeatures = false;
            features = [ "i128" ];
          }
          {
            name = "num-iter";
            packageId = "num-iter";
            usesDefaultFeatures = false;
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
            features = [ "i128" ];
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "smallvec";
            packageId = "smallvec";
            usesDefaultFeatures = false;
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "rand";
            packageId = "rand 0.8.5";
            features = [ "small_rng" ];
          }
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "default" = [ "std" "u64_digit" ];
          "fuzz" = [ "arbitrary" "smallvec/arbitrary" ];
          "prime" = [ "rand/std_rng" ];
          "rand" = [ "dep:rand" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "num-integer/std" "num-traits/std" "smallvec/write" "rand/std" "serde/std" ];
          "zeroize" = [ "dep:zeroize" ];
        };
        resolvedDefaultFeatures = [ "i128" "prime" "rand" "u64_digit" "zeroize" ];
      };
      "num-complex" = rec {
        crateName = "num-complex";
        version = "0.4.6";
        edition = "2021";
        sha256 = "15cla16mnw12xzf5g041nxbjjm9m85hdgadd5dl5d0b30w9qmy3k";
        libName = "num_complex";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
            features = [ "i128" ];
          }
        ];
        features = {
          "bytecheck" = [ "dep:bytecheck" ];
          "bytemuck" = [ "dep:bytemuck" ];
          "default" = [ "std" ];
          "libm" = [ "num-traits/libm" ];
          "rand" = [ "dep:rand" ];
          "rkyv" = [ "dep:rkyv" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "num-traits/std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "num-conv" = rec {
        crateName = "num-conv";
        version = "0.1.0";
        edition = "2021";
        sha256 = "1ndiyg82q73783jq18isi71a7mjh56wxrk52rlvyx0mi5z9ibmai";
        libName = "num_conv";
        authors = [
          "Jacob Pratt <jacob@jhpratt.dev>"
        ];

      };
      "num-integer" = rec {
        crateName = "num-integer";
        version = "0.1.46";
        edition = "2018";
        sha256 = "13w5g54a9184cqlbsq80rnxw4jj4s0d8wv75jsq5r2lms8gncsbr";
        libName = "num_integer";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
            features = [ "i128" ];
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "num-traits/std" ];
        };
        resolvedDefaultFeatures = [ "default" "i128" "std" ];
      };
      "num-iter" = rec {
        crateName = "num-iter";
        version = "0.1.45";
        edition = "2018";
        sha256 = "1gzm7vc5g9qsjjl3bqk9rz1h6raxhygbrcpbfl04swlh0i506a8l";
        libName = "num_iter";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "num-integer";
            packageId = "num-integer";
            usesDefaultFeatures = false;
            features = [ "i128" ];
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
            features = [ "i128" ];
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "num-integer/std" "num-traits/std" ];
        };
        resolvedDefaultFeatures = [ "i128" "std" ];
      };
      "num-modular" = rec {
        crateName = "num-modular";
        version = "0.5.1";
        edition = "2018";
        sha256 = "0681zckrmg2pv3sk9w3gby561adgjjqihnx9yg6knp0ksh8zx9b4";
        libName = "num_modular";
        dependencies = [
          {
            name = "num-bigint";
            packageId = "num-bigint 0.4.6";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "num-integer";
            packageId = "num-integer";
          }
          {
            name = "num-traits";
            packageId = "num-traits";
          }
        ];
        features = {
          "num-bigint" = [ "dep:num-bigint" ];
        };
        resolvedDefaultFeatures = [ "num-bigint" ];
      };
      "num-prime" = rec {
        crateName = "num-prime";
        version = "0.4.4";
        edition = "2018";
        sha256 = "1hyy7da64y43asxf3kc4g6z0kw2b05n53k1wa1j73v41g0m46f72";
        libName = "num_prime";
        dependencies = [
          {
            name = "bitvec";
            packageId = "bitvec 1.0.1";
          }
          {
            name = "either";
            packageId = "either";
          }
          {
            name = "lru";
            packageId = "lru 0.12.4";
          }
          {
            name = "num-bigint";
            packageId = "num-bigint 0.4.6";
            optional = true;
            features = [ "rand" ];
          }
          {
            name = "num-integer";
            packageId = "num-integer";
          }
          {
            name = "num-modular";
            packageId = "num-modular";
          }
          {
            name = "num-traits";
            packageId = "num-traits";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
        ];
        features = {
          "big-int" = [ "num-bigint" "num-modular/num-bigint" ];
          "default" = [ "big-table" "big-int" ];
          "num-bigint" = [ "dep:num-bigint" ];
        };
        resolvedDefaultFeatures = [ "big-int" "big-table" "default" "num-bigint" ];
      };
      "num-rational" = rec {
        crateName = "num-rational";
        version = "0.4.2";
        edition = "2021";
        sha256 = "093qndy02817vpgcqjnj139im3jl7vkq4h68kykdqqh577d18ggq";
        libName = "num_rational";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "num-bigint";
            packageId = "num-bigint 0.4.6";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "num-integer";
            packageId = "num-integer";
            usesDefaultFeatures = false;
            features = [ "i128" ];
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
            features = [ "i128" ];
          }
        ];
        features = {
          "default" = [ "num-bigint" "std" ];
          "num-bigint" = [ "dep:num-bigint" ];
          "num-bigint-std" = [ "num-bigint/std" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "num-bigint?/std" "num-integer/std" "num-traits/std" ];
        };
        resolvedDefaultFeatures = [ "default" "num-bigint" "num-bigint-std" "std" ];
      };
      "num-traits" = rec {
        crateName = "num-traits";
        version = "0.2.19";
        edition = "2021";
        sha256 = "0h984rhdkkqd4ny9cif7y2azl3xdfb7768hb9irhpsch4q3gq787";
        libName = "num_traits";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "libm";
            packageId = "libm";
            optional = true;
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
          "default" = [ "std" ];
          "libm" = [ "dep:libm" ];
        };
        resolvedDefaultFeatures = [ "default" "i128" "libm" "std" ];
      };
      "num_cpus" = rec {
        crateName = "num_cpus";
        version = "1.16.0";
        edition = "2015";
        sha256 = "0hra6ihpnh06dvfvz9ipscys0xfqa9ca9hzp384d5m02ssvgqqa1";
        authors = [
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "hermit-abi";
            packageId = "hermit-abi 0.3.9";
            target = { target, features }: ("hermit" == target."os" or null);
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (!(target."windows" or false));
          }
        ];

      };
      "num_enum" = rec {
        crateName = "num_enum";
        version = "0.7.3";
        edition = "2021";
        sha256 = "0yai0vafhy85mvhknzfqd7lm04hzaln7i5c599rhy8mj831kyqaf";
        authors = [
          "Daniel Wagner-Hall <dawagner@gmail.com>"
          "Daniel Henry-Mantilla <daniel.henry.mantilla@gmail.com>"
          "Vincent Esche <regexident@gmail.com>"
        ];
        dependencies = [
          {
            name = "num_enum_derive";
            packageId = "num_enum_derive";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "complex-expressions" = [ "num_enum_derive/complex-expressions" ];
          "default" = [ "std" ];
          "std" = [ "num_enum_derive/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "num_enum_derive" = rec {
        crateName = "num_enum_derive";
        version = "0.7.3";
        edition = "2021";
        sha256 = "0mksna1jj87ydh146gn6jcqkvvs920c3dgh0p4f3xk184kpl865g";
        procMacro = true;
        authors = [
          "Daniel Wagner-Hall <dawagner@gmail.com>"
          "Daniel Henry-Mantilla <daniel.henry.mantilla@gmail.com>"
          "Vincent Esche <regexident@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro-crate";
            packageId = "proc-macro-crate 3.2.0";
            optional = true;
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.86";
          }
          {
            name = "quote";
            packageId = "quote 1.0.37";
          }
          {
            name = "syn";
            packageId = "syn 2.0.77";
            features = [ "parsing" ];
          }
        ];
        devDependencies = [
          {
            name = "syn";
            packageId = "syn 2.0.77";
            features = [ "extra-traits" "parsing" ];
          }
        ];
        features = {
          "complex-expressions" = [ "syn/full" ];
          "default" = [ "std" ];
          "proc-macro-crate" = [ "dep:proc-macro-crate" ];
          "std" = [ "proc-macro-crate" ];
        };
        resolvedDefaultFeatures = [ "proc-macro-crate" "std" ];
      };
      "num_threads" = rec {
        crateName = "num_threads";
        version = "0.1.7";
        edition = "2015";
        sha256 = "1ngajbmhrgyhzrlc4d5ga9ych1vrfcvfsiqz6zv0h2dpr2wrhwsw";
        authors = [
          "Jacob Pratt <open-source@jhpratt.dev>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (("macos" == target."os" or null) || ("ios" == target."os" or null) || ("freebsd" == target."os" or null));
          }
        ];

      };
      "number_prefix" = rec {
        crateName = "number_prefix";
        version = "0.4.0";
        edition = "2015";
        sha256 = "1wvh13wvlajqxkb1filsfzbrnq0vrmrw298v2j3sy82z1rm282w3";
        authors = [
          "Benjamin Sago <ogham@bsago.me>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "object" = rec {
        crateName = "object";
        version = "0.32.2";
        edition = "2018";
        sha256 = "0hc4cjwyngiy6k51hlzrlsxgv5z25vv7c2cp0ky1lckfic0259m6";
        dependencies = [
          {
            name = "memchr";
            packageId = "memchr";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "all" = [ "read" "write" "std" "compression" "wasm" ];
          "alloc" = [ "dep:alloc" ];
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "compression" = [ "dep:flate2" "dep:ruzstd" "std" ];
          "core" = [ "dep:core" ];
          "default" = [ "read" "compression" ];
          "doc" = [ "read_core" "write_std" "std" "compression" "archive" "coff" "elf" "macho" "pe" "wasm" "xcoff" ];
          "pe" = [ "coff" ];
          "read" = [ "read_core" "archive" "coff" "elf" "macho" "pe" "xcoff" "unaligned" ];
          "rustc-dep-of-std" = [ "core" "compiler_builtins" "alloc" "memchr/rustc-dep-of-std" ];
          "std" = [ "memchr/std" ];
          "unstable-all" = [ "all" "unstable" ];
          "wasm" = [ "dep:wasmparser" ];
          "write" = [ "write_std" "coff" "elf" "macho" "pe" "xcoff" ];
          "write_core" = [ "dep:crc32fast" "dep:indexmap" "dep:hashbrown" ];
          "write_std" = [ "write_core" "std" "indexmap?/std" "crc32fast?/std" ];
        };
        resolvedDefaultFeatures = [ "archive" "coff" "elf" "macho" "pe" "read_core" "unaligned" "xcoff" ];
      };
      "object_store 0.10.2" = rec {
        crateName = "object_store";
        version = "0.10.2";
        edition = "2021";
        sha256 = "1wz3m20hqs3v93dyxcqy7qpsbd4rqp6050hy49wcw5f740l4bnp6";
        dependencies = [
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "base64";
            packageId = "base64 0.22.1";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "chrono";
            packageId = "chrono";
            usesDefaultFeatures = false;
            features = [ "clock" ];
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "humantime";
            packageId = "humantime";
          }
          {
            name = "hyper";
            packageId = "hyper 1.4.1";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "itertools";
            packageId = "itertools 0.13.0";
          }
          {
            name = "md-5";
            packageId = "md-5";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "parking_lot";
            packageId = "parking_lot 0.12.3";
          }
          {
            name = "percent-encoding";
            packageId = "percent-encoding";
          }
          {
            name = "quick-xml";
            packageId = "quick-xml";
            optional = true;
            features = [ "serialize" "overlapped-lists" ];
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "std" "std_rng" ];
          }
          {
            name = "reqwest";
            packageId = "reqwest 0.12.7";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "rustls-tls-native-roots" "http2" ];
          }
          {
            name = "ring";
            packageId = "ring 0.17.8";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "rustls-pemfile";
            packageId = "rustls-pemfile 2.1.3";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "snafu";
            packageId = "snafu 0.7.5";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "sync" "macros" "rt" "time" "io-util" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "url";
            packageId = "url";
          }
          {
            name = "walkdir";
            packageId = "walkdir";
          }
        ];
        devDependencies = [
          {
            name = "hyper";
            packageId = "hyper 1.4.1";
            features = [ "server" ];
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
        ];
        features = {
          "aws" = [ "cloud" "md-5" ];
          "azure" = [ "cloud" ];
          "base64" = [ "dep:base64" ];
          "cloud" = [ "serde" "serde_json" "quick-xml" "hyper" "reqwest" "reqwest/json" "reqwest/stream" "chrono/serde" "base64" "rand" "ring" ];
          "gcp" = [ "cloud" "rustls-pemfile" ];
          "http" = [ "cloud" ];
          "hyper" = [ "dep:hyper" ];
          "md-5" = [ "dep:md-5" ];
          "quick-xml" = [ "dep:quick-xml" ];
          "rand" = [ "dep:rand" ];
          "reqwest" = [ "dep:reqwest" ];
          "ring" = [ "dep:ring" ];
          "rustls-pemfile" = [ "dep:rustls-pemfile" ];
          "serde" = [ "dep:serde" ];
          "serde_json" = [ "dep:serde_json" ];
          "tls-webpki-roots" = [ "reqwest?/rustls-tls-webpki-roots" ];
        };
        resolvedDefaultFeatures = [ "aws" "azure" "base64" "cloud" "gcp" "http" "hyper" "md-5" "quick-xml" "rand" "reqwest" "ring" "rustls-pemfile" "serde" "serde_json" ];
      };
      "object_store 0.11.0" = rec {
        crateName = "object_store";
        version = "0.11.0";
        edition = "2021";
        sha256 = "0i9vkx016vs3j7kwvqln068p79zg452hdn0syxk8n7z3l2rw9815";
        dependencies = [
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "base64";
            packageId = "base64 0.22.1";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "chrono";
            packageId = "chrono";
            usesDefaultFeatures = false;
            features = [ "clock" ];
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "humantime";
            packageId = "humantime";
          }
          {
            name = "hyper";
            packageId = "hyper 1.4.1";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "itertools";
            packageId = "itertools 0.13.0";
          }
          {
            name = "md-5";
            packageId = "md-5";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "parking_lot";
            packageId = "parking_lot 0.12.3";
          }
          {
            name = "percent-encoding";
            packageId = "percent-encoding";
          }
          {
            name = "quick-xml";
            packageId = "quick-xml";
            optional = true;
            features = [ "serialize" "overlapped-lists" ];
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "std" "std_rng" ];
          }
          {
            name = "reqwest";
            packageId = "reqwest 0.12.7";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "rustls-tls-native-roots" "http2" ];
          }
          {
            name = "ring";
            packageId = "ring 0.17.8";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "snafu";
            packageId = "snafu 0.8.5";
            usesDefaultFeatures = false;
            features = [ "std" "rust_1_61" ];
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "sync" "macros" "rt" "time" "io-util" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "url";
            packageId = "url";
          }
          {
            name = "walkdir";
            packageId = "walkdir";
          }
        ];
        devDependencies = [
          {
            name = "hyper";
            packageId = "hyper 1.4.1";
            features = [ "server" ];
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
        ];
        features = {
          "aws" = [ "cloud" "md-5" ];
          "azure" = [ "cloud" ];
          "base64" = [ "dep:base64" ];
          "cloud" = [ "serde" "serde_json" "quick-xml" "hyper" "reqwest" "reqwest/json" "reqwest/stream" "chrono/serde" "base64" "rand" "ring" ];
          "gcp" = [ "cloud" "rustls-pemfile" ];
          "http" = [ "cloud" ];
          "hyper" = [ "dep:hyper" ];
          "md-5" = [ "dep:md-5" ];
          "quick-xml" = [ "dep:quick-xml" ];
          "rand" = [ "dep:rand" ];
          "reqwest" = [ "dep:reqwest" ];
          "ring" = [ "dep:ring" ];
          "rustls-pemfile" = [ "dep:rustls-pemfile" ];
          "serde" = [ "dep:serde" ];
          "serde_json" = [ "dep:serde_json" ];
          "tls-webpki-roots" = [ "reqwest?/rustls-tls-webpki-roots" ];
        };
        resolvedDefaultFeatures = [ "aws" "base64" "cloud" "hyper" "md-5" "quick-xml" "rand" "reqwest" "ring" "serde" "serde_json" ];
      };
      "oid-registry" = rec {
        crateName = "oid-registry";
        version = "0.6.1";
        edition = "2018";
        sha256 = "1zwvjp3ad6gzn8g8w2hcn9a2xdap0lkzckhlnwp6rabbzdpz7vcv";
        libName = "oid_registry";
        authors = [
          "Pierre Chifflier <chifflier@wzdftpd.net>"
        ];
        dependencies = [
          {
            name = "asn1-rs";
            packageId = "asn1-rs";
          }
        ];
        features = {
          "crypto" = [ "kdf" "pkcs1" "pkcs7" "pkcs9" "pkcs12" "nist_algs" "x962" ];
          "default" = [ "registry" ];
        };
        resolvedDefaultFeatures = [ "crypto" "default" "kdf" "nist_algs" "pkcs1" "pkcs12" "pkcs7" "pkcs9" "registry" "x509" "x962" ];
      };
      "once_cell" = rec {
        crateName = "once_cell";
        version = "1.19.0";
        edition = "2021";
        sha256 = "14kvw7px5z96dk4dwdm1r9cqhhy2cyj1l5n5b29mynbb8yr15nrz";
        authors = [
          "Aleksey Kladov <aleksey.kladov@gmail.com>"
        ];
        features = {
          "alloc" = [ "race" ];
          "atomic-polyfill" = [ "critical-section" ];
          "critical-section" = [ "dep:critical-section" "portable-atomic" ];
          "default" = [ "std" ];
          "parking_lot" = [ "dep:parking_lot_core" ];
          "portable-atomic" = [ "dep:portable-atomic" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "race" "std" ];
      };
      "oorandom" = rec {
        crateName = "oorandom";
        version = "11.1.4";
        edition = "2018";
        sha256 = "1sg4j19r5302a6jpn0kgfkbjnslrqr3ynxv8x2h2ddaaw7kvn45l";
        authors = [
          "Simon Heath <icefox@dreamquest.io>"
        ];

      };
      "opaque-debug" = rec {
        crateName = "opaque-debug";
        version = "0.3.1";
        edition = "2018";
        sha256 = "10b3w0kydz5jf1ydyli5nv10gdfp97xh79bgz327d273bs46b3f0";
        libName = "opaque_debug";
        authors = [
          "RustCrypto Developers"
        ];

      };
      "open-fastrlp" = rec {
        crateName = "open-fastrlp";
        version = "0.1.4";
        edition = "2021";
        sha256 = "1kmrx6f4qc6vhdiimgf4qsf11pali09x6gq4ysa5fi450kw96qvq";
        libName = "open_fastrlp";
        dependencies = [
          {
            name = "arrayvec";
            packageId = "arrayvec";
            usesDefaultFeatures = false;
          }
          {
            name = "auto_impl";
            packageId = "auto_impl";
          }
          {
            name = "bytes";
            packageId = "bytes";
            usesDefaultFeatures = false;
          }
          {
            name = "ethereum-types";
            packageId = "ethereum-types";
            optional = true;
            features = [ "codec" ];
          }
          {
            name = "open-fastrlp-derive";
            packageId = "open-fastrlp-derive";
            rename = "rlp-derive";
            optional = true;
          }
        ];
        features = {
          "derive" = [ "rlp-derive" ];
          "ethereum-types" = [ "dep:ethereum-types" ];
          "ethnum" = [ "dep:ethnum" ];
          "rlp-derive" = [ "dep:rlp-derive" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "derive" "ethereum-types" "rlp-derive" "std" ];
      };
      "open-fastrlp-derive" = rec {
        crateName = "open-fastrlp-derive";
        version = "0.1.1";
        edition = "2021";
        sha256 = "075vckvkh0616rx4b15nzq8d8p4iqfhvhf52n3z1qg65qvjjnfq0";
        procMacro = true;
        libName = "open_fastrlp_derive";
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
            usesDefaultFeatures = false;
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.86";
          }
          {
            name = "quote";
            packageId = "quote 1.0.37";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
          }
        ];

      };
      "openapiv3" = rec {
        crateName = "openapiv3";
        version = "2.0.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/bmwill/openapiv3.git";
          rev = "ca4b4845b7c159a39f5c68ad8f7f76cb6f4d6963";
          sha256 = "0jdij26i9awycvj18xsmijgc7b07yfj666iplvx2qq614y7slggy";
        };
        authors = [
          "Glade Miller <glademiller@gmail.com>"
        ];
        dependencies = [
          {
            name = "indexmap";
            packageId = "indexmap 2.5.0";
            features = [ "serde" ];
          }
          {
            name = "schemars";
            packageId = "schemars";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
        ];
        features = {
        };
      };
      "openssl-probe" = rec {
        crateName = "openssl-probe";
        version = "0.1.5";
        edition = "2015";
        sha256 = "1kq18qm48rvkwgcggfkqq6pm948190czqc94d6bm2sir5hq1l0gz";
        libName = "openssl_probe";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];

      };
      "openssl-src" = rec {
        crateName = "openssl-src";
        version = "300.3.1+3.3.1";
        edition = "2021";
        sha256 = "14cbc0i3ly3msl7bkhj3rrnlv4g1m0qbswxxzcvz26x888yranbj";
        libName = "openssl_src";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "cc";
            packageId = "cc";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" "legacy" ];
      };
      "openssl-sys" = rec {
        crateName = "openssl-sys";
        version = "0.9.104";
        edition = "2021";
        links = "openssl";
        sha256 = "0hf712xcxmycnlc09r8d446b3mwqchsbfrjv374fp7grrc3g7as5";
        build = "build/main.rs";
        libName = "openssl_sys";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
          "Steven Fackler <sfackler@gmail.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
          }
          {
            name = "openssl-src";
            packageId = "openssl-src";
            optional = true;
            features = [ "legacy" ];
          }
          {
            name = "pkg-config";
            packageId = "pkg-config";
          }
          {
            name = "vcpkg";
            packageId = "vcpkg";
          }
        ];
        features = {
          "bindgen" = [ "dep:bindgen" ];
          "bssl-sys" = [ "dep:bssl-sys" ];
          "openssl-src" = [ "dep:openssl-src" ];
          "unstable_boringssl" = [ "bssl-sys" ];
          "vendored" = [ "openssl-src" ];
        };
        resolvedDefaultFeatures = [ "openssl-src" "vendored" ];
      };
      "opentelemetry 0.21.0" = rec {
        crateName = "opentelemetry";
        version = "0.21.0";
        edition = "2021";
        sha256 = "12jfmyx8k9q2sjlx4wp76ddzaf94i7lnkliv1c9mj164bnd36chy";
        dependencies = [
          {
            name = "futures-core";
            packageId = "futures-core";
          }
          {
            name = "futures-sink";
            packageId = "futures-sink";
          }
          {
            name = "indexmap";
            packageId = "indexmap 2.5.0";
          }
          {
            name = "js-sys";
            packageId = "js-sys";
            target = { target, features }: (("wasm32" == target."arch" or null) && (!("wasi" == target."os" or null)));
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
            optional = true;
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "urlencoding";
            packageId = "urlencoding";
          }
        ];
        features = {
          "default" = [ "trace" ];
          "logs_level_enabled" = [ "logs" ];
          "pin-project-lite" = [ "dep:pin-project-lite" ];
          "testing" = [ "trace" "metrics" ];
          "trace" = [ "pin-project-lite" ];
        };
        resolvedDefaultFeatures = [ "pin-project-lite" "trace" ];
      };
      "opentelemetry 0.24.0" = rec {
        crateName = "opentelemetry";
        version = "0.24.0";
        edition = "2021";
        sha256 = "15msgya5nandw9chxdr76k7sj9kg6gqj9dyfzrz5pxf4xrimldjc";
        dependencies = [
          {
            name = "futures-core";
            packageId = "futures-core";
          }
          {
            name = "futures-sink";
            packageId = "futures-sink";
          }
          {
            name = "js-sys";
            packageId = "js-sys";
            target = { target, features }: (("wasm32" == target."arch" or null) && (!("wasi" == target."os" or null)));
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
            optional = true;
          }
          {
            name = "thiserror";
            packageId = "thiserror";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "trace" "metrics" "logs" ];
          "logs_level_enabled" = [ "logs" ];
          "pin-project-lite" = [ "dep:pin-project-lite" ];
          "testing" = [ "trace" "metrics" ];
          "trace" = [ "pin-project-lite" ];
        };
        resolvedDefaultFeatures = [ "default" "logs" "metrics" "pin-project-lite" "trace" ];
      };
      "opentelemetry-otlp" = rec {
        crateName = "opentelemetry-otlp";
        version = "0.17.0";
        edition = "2021";
        sha256 = "09z70ygp6lfcplnwx7cgf3p3fyq2arkvhxhj8avnz4gv5xh5m4kb";
        libName = "opentelemetry_otlp";
        dependencies = [
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "futures-core";
            packageId = "futures-core";
          }
          {
            name = "http";
            packageId = "http 1.1.0";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "opentelemetry";
            packageId = "opentelemetry 0.24.0";
            usesDefaultFeatures = false;
          }
          {
            name = "opentelemetry-proto";
            packageId = "opentelemetry-proto";
            usesDefaultFeatures = false;
          }
          {
            name = "opentelemetry_sdk";
            packageId = "opentelemetry_sdk";
            usesDefaultFeatures = false;
          }
          {
            name = "prost";
            packageId = "prost";
            optional = true;
          }
          {
            name = "thiserror";
            packageId = "thiserror";
            usesDefaultFeatures = false;
          }
          {
            name = "tokio";
            packageId = "tokio";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "sync" "rt" ];
          }
          {
            name = "tonic";
            packageId = "tonic";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            usesDefaultFeatures = false;
            features = [ "macros" "rt-multi-thread" ];
          }
        ];
        features = {
          "default" = [ "grpc-tonic" "trace" "metrics" "logs" ];
          "grpc-tonic" = [ "tonic" "prost" "http" "tokio" "opentelemetry-proto/gen-tonic" ];
          "gzip-tonic" = [ "tonic/gzip" ];
          "http" = [ "dep:http" ];
          "http-json" = [ "serde_json" "prost" "opentelemetry-http" "opentelemetry-proto/gen-tonic-messages" "opentelemetry-proto/with-serde" "http" "trace" "metrics" ];
          "http-proto" = [ "prost" "opentelemetry-http" "opentelemetry-proto/gen-tonic-messages" "http" "trace" "metrics" ];
          "integration-testing" = [ "tonic" "prost" "tokio/full" "trace" ];
          "logs" = [ "opentelemetry/logs" "opentelemetry_sdk/logs" "opentelemetry-proto/logs" ];
          "metrics" = [ "opentelemetry/metrics" "opentelemetry_sdk/metrics" "opentelemetry-proto/metrics" ];
          "opentelemetry-http" = [ "dep:opentelemetry-http" ];
          "prost" = [ "dep:prost" ];
          "reqwest" = [ "dep:reqwest" ];
          "reqwest-blocking-client" = [ "reqwest/blocking" "opentelemetry-http/reqwest" ];
          "reqwest-client" = [ "reqwest" "opentelemetry-http/reqwest" ];
          "reqwest-rustls" = [ "reqwest" "opentelemetry-http/reqwest-rustls" ];
          "reqwest-rustls-webpki-roots" = [ "reqwest" "opentelemetry-http/reqwest-rustls-webpki-roots" ];
          "serde" = [ "dep:serde" ];
          "serde_json" = [ "dep:serde_json" ];
          "serialize" = [ "serde" "serde_json" ];
          "tls" = [ "tonic/tls" ];
          "tls-roots" = [ "tls" "tonic/tls-roots" ];
          "tls-webpki-roots" = [ "tls" "tonic/tls-webpki-roots" ];
          "tokio" = [ "dep:tokio" ];
          "tonic" = [ "dep:tonic" ];
          "trace" = [ "opentelemetry/trace" "opentelemetry_sdk/trace" "opentelemetry-proto/trace" ];
        };
        resolvedDefaultFeatures = [ "default" "grpc-tonic" "http" "logs" "metrics" "prost" "tokio" "tonic" "trace" ];
      };
      "opentelemetry-proto" = rec {
        crateName = "opentelemetry-proto";
        version = "0.7.0";
        edition = "2021";
        sha256 = "1nahv1dflvwdgi4c4p7ikd59x0yyivf85w02398q9jgrpwh9zvih";
        libName = "opentelemetry_proto";
        dependencies = [
          {
            name = "hex";
            packageId = "hex";
            optional = true;
          }
          {
            name = "opentelemetry";
            packageId = "opentelemetry 0.24.0";
            usesDefaultFeatures = false;
          }
          {
            name = "opentelemetry_sdk";
            packageId = "opentelemetry_sdk";
            usesDefaultFeatures = false;
          }
          {
            name = "prost";
            packageId = "prost";
            optional = true;
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "serde_derive" ];
          }
          {
            name = "tonic";
            packageId = "tonic";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "codegen" "prost" ];
          }
        ];
        devDependencies = [
          {
            name = "opentelemetry";
            packageId = "opentelemetry 0.24.0";
            features = [ "testing" ];
          }
        ];
        features = {
          "default" = [ "full" ];
          "full" = [ "gen-tonic" "trace" "logs" "metrics" "zpages" "with-serde" ];
          "gen-tonic" = [ "gen-tonic-messages" "tonic/transport" ];
          "gen-tonic-messages" = [ "tonic" "prost" ];
          "hex" = [ "dep:hex" ];
          "logs" = [ "opentelemetry/logs" "opentelemetry_sdk/logs" ];
          "metrics" = [ "opentelemetry/metrics" "opentelemetry_sdk/metrics" ];
          "prost" = [ "dep:prost" ];
          "schemars" = [ "dep:schemars" ];
          "serde" = [ "dep:serde" ];
          "testing" = [ "opentelemetry/testing" ];
          "tonic" = [ "dep:tonic" ];
          "trace" = [ "opentelemetry/trace" "opentelemetry_sdk/trace" ];
          "with-schemars" = [ "schemars" ];
          "with-serde" = [ "serde" "hex" ];
          "zpages" = [ "trace" ];
        };
        resolvedDefaultFeatures = [ "default" "full" "gen-tonic" "gen-tonic-messages" "hex" "logs" "metrics" "prost" "serde" "tonic" "trace" "with-serde" "zpages" ];
      };
      "opentelemetry_sdk" = rec {
        crateName = "opentelemetry_sdk";
        version = "0.24.1";
        edition = "2021";
        sha256 = "1pr8phigsfki77wh79g6vz6flnhgnr09pm18g2hj83y81r4sqbk9";
        dependencies = [
          {
            name = "async-trait";
            packageId = "async-trait";
            optional = true;
          }
          {
            name = "futures-channel";
            packageId = "futures-channel";
          }
          {
            name = "futures-executor";
            packageId = "futures-executor";
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
            features = [ "std" "sink" "async-await-macro" ];
          }
          {
            name = "glob";
            packageId = "glob";
            optional = true;
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "opentelemetry";
            packageId = "opentelemetry 0.24.0";
          }
          {
            name = "percent-encoding";
            packageId = "percent-encoding";
            optional = true;
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "std" "std_rng" "small_rng" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            optional = true;
          }
          {
            name = "thiserror";
            packageId = "thiserror";
            usesDefaultFeatures = false;
          }
          {
            name = "tokio";
            packageId = "tokio";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "rt" "time" ];
          }
          {
            name = "tokio-stream";
            packageId = "tokio-stream";
            optional = true;
          }
        ];
        features = {
          "async-std" = [ "dep:async-std" ];
          "async-trait" = [ "dep:async-trait" ];
          "default" = [ "trace" "metrics" "logs" ];
          "glob" = [ "dep:glob" ];
          "http" = [ "dep:http" ];
          "jaeger_remote_sampler" = [ "trace" "opentelemetry-http" "http" "serde" "serde_json" "url" ];
          "logs" = [ "opentelemetry/logs" "async-trait" "serde_json" ];
          "logs_level_enabled" = [ "logs" "opentelemetry/logs_level_enabled" ];
          "metrics" = [ "opentelemetry/metrics" "glob" "async-trait" ];
          "opentelemetry-http" = [ "dep:opentelemetry-http" ];
          "percent-encoding" = [ "dep:percent-encoding" ];
          "rand" = [ "dep:rand" ];
          "rt-async-std" = [ "async-std" ];
          "rt-tokio" = [ "tokio" "tokio-stream" ];
          "rt-tokio-current-thread" = [ "tokio" "tokio-stream" ];
          "serde" = [ "dep:serde" ];
          "serde_json" = [ "dep:serde_json" ];
          "testing" = [ "opentelemetry/testing" "trace" "metrics" "logs" "rt-async-std" "rt-tokio" "rt-tokio-current-thread" "tokio/macros" "tokio/rt-multi-thread" ];
          "tokio" = [ "dep:tokio" ];
          "tokio-stream" = [ "dep:tokio-stream" ];
          "trace" = [ "opentelemetry/trace" "rand" "async-trait" "percent-encoding" ];
          "url" = [ "dep:url" ];
        };
        resolvedDefaultFeatures = [ "async-trait" "default" "glob" "logs" "metrics" "percent-encoding" "rand" "rt-tokio" "serde_json" "tokio" "tokio-stream" "trace" ];
      };
      "option-ext" = rec {
        crateName = "option-ext";
        version = "0.2.0";
        edition = "2015";
        sha256 = "0zbf7cx8ib99frnlanpyikm1bx8qn8x602sw1n7bg6p9x94lyx04";
        libName = "option_ext";
        authors = [
          "Simon Ochsenreither <simon@ochsenreither.de>"
        ];

      };
      "ordered-float" = rec {
        crateName = "ordered-float";
        version = "2.10.1";
        edition = "2018";
        sha256 = "075i108hr95pr7hy4fgxivib5pky3b6b22rywya5qyd2wmkrvwb8";
        libName = "ordered_float";
        authors = [
          "Jonathan Reem <jonathan.reem@gmail.com>"
          "Matt Brubeck <mbrubeck@limpet.net>"
        ];
        dependencies = [
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "default" = [ "std" ];
          "proptest" = [ "dep:proptest" ];
          "rand" = [ "dep:rand" ];
          "randtest" = [ "rand/std" "rand/std_rng" ];
          "rkyv" = [ "dep:rkyv" ];
          "schemars" = [ "dep:schemars" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "num-traits/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "ouroboros 0.17.2" = rec {
        crateName = "ouroboros";
        version = "0.17.2";
        edition = "2018";
        sha256 = "0m69j8288k3b3iyblngdfgraahnk9d5maw5a5y4fmprr1lr0gfp2";
        authors = [
          "Joshua Maros <joshua-maros@github.com>"
        ];
        dependencies = [
          {
            name = "aliasable";
            packageId = "aliasable";
          }
          {
            name = "ouroboros_macro";
            packageId = "ouroboros_macro 0.17.2";
          }
          {
            name = "static_assertions";
            packageId = "static_assertions";
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "ouroboros_macro/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "ouroboros 0.18.4" = rec {
        crateName = "ouroboros";
        version = "0.18.4";
        edition = "2018";
        sha256 = "0rsazk2hh2w626585scb7ylaf500y5insp3rnkbdwnm2jq4s4kwl";
        authors = [
          "Josh <someguynamedjosh@github.com>"
        ];
        dependencies = [
          {
            name = "aliasable";
            packageId = "aliasable";
          }
          {
            name = "ouroboros_macro";
            packageId = "ouroboros_macro 0.18.4";
          }
          {
            name = "static_assertions";
            packageId = "static_assertions";
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "ouroboros_macro/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "ouroboros_macro 0.17.2" = rec {
        crateName = "ouroboros_macro";
        version = "0.17.2";
        edition = "2018";
        sha256 = "1y5nmgnng4i23g333cvp8p7j3i3438r9g85fq1wafk4vqqjn4k7c";
        procMacro = true;
        authors = [
          "Joshua Maros <joshua-maros@github.com>"
        ];
        dependencies = [
          {
            name = "heck";
            packageId = "heck 0.4.1";
          }
          {
            name = "proc-macro-error";
            packageId = "proc-macro-error";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.86";
          }
          {
            name = "quote";
            packageId = "quote 1.0.37";
          }
          {
            name = "syn";
            packageId = "syn 2.0.77";
            features = [ "full" ];
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "ouroboros_macro 0.18.4" = rec {
        crateName = "ouroboros_macro";
        version = "0.18.4";
        edition = "2018";
        sha256 = "1gb5njxh9clp9krjc7kfbz17g5racjlld1bsjkjx13sjs7mdxc1r";
        procMacro = true;
        authors = [
          "Josh <someguynamedjosh@github.com>"
        ];
        dependencies = [
          {
            name = "heck";
            packageId = "heck 0.4.1";
          }
          {
            name = "itertools";
            packageId = "itertools 0.12.1";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.86";
          }
          {
            name = "proc-macro2-diagnostics";
            packageId = "proc-macro2-diagnostics";
          }
          {
            name = "quote";
            packageId = "quote 1.0.37";
          }
          {
            name = "syn";
            packageId = "syn 2.0.77";
            features = [ "full" ];
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "outref" = rec {
        crateName = "outref";
        version = "0.5.1";
        edition = "2021";
        sha256 = "0ynw7nb89603gkfi83f9chsf76ds3b710gxfn12yyawrzl7pcc20";

      };
      "overload" = rec {
        crateName = "overload";
        version = "0.1.1";
        edition = "2018";
        sha256 = "0fdgbaqwknillagy1xq7xfgv60qdbk010diwl7s1p0qx7hb16n5i";
        authors = [
          "Daniel Salvadori <danaugrs@gmail.com>"
        ];

      };
      "owo-colors 3.5.0" = rec {
        crateName = "owo-colors";
        version = "3.5.0";
        edition = "2018";
        sha256 = "0vyvry6ba1xmpd45hpi6savd8mbx09jpmvnnwkf6z62pk6s4zc61";
        libName = "owo_colors";
        authors = [
          "jam1garner <8260240+jam1garner@users.noreply.github.com>"
        ];
        features = {
          "supports-color" = [ "dep:supports-color" ];
          "supports-colors" = [ "supports-color" ];
        };
      };
      "owo-colors 4.1.0" = rec {
        crateName = "owo-colors";
        version = "4.1.0";
        edition = "2021";
        sha256 = "0mms4sbisxm1w8v08qz85m90sv861xg4ahil85587kb9cmzpcdzv";
        libName = "owo_colors";
        authors = [
          "jam1garner <8260240+jam1garner@users.noreply.github.com>"
        ];
        features = {
          "supports-color" = [ "dep:supports-color" ];
          "supports-colors" = [ "dep:supports-color-2" "supports-color" ];
        };
      };
      "p256 0.11.1" = rec {
        crateName = "p256";
        version = "0.11.1";
        edition = "2021";
        sha256 = "151mqd8m25c8ib97saz4fwkg4nhw098i051gazg2l7pm13flxx2i";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "ecdsa";
            packageId = "ecdsa 0.14.8";
            rename = "ecdsa-core";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "der" ];
          }
          {
            name = "elliptic-curve";
            packageId = "elliptic-curve 0.12.3";
            usesDefaultFeatures = false;
            features = [ "hazmat" "sec1" ];
          }
          {
            name = "sha2";
            packageId = "sha2 0.10.8";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "ecdsa";
            packageId = "ecdsa 0.14.8";
            rename = "ecdsa-core";
            usesDefaultFeatures = false;
            features = [ "dev" ];
          }
        ];
        features = {
          "arithmetic" = [ "elliptic-curve/arithmetic" ];
          "bits" = [ "arithmetic" "elliptic-curve/bits" ];
          "default" = [ "arithmetic" "ecdsa" "pkcs8" "std" ];
          "digest" = [ "ecdsa-core/digest" "ecdsa-core/hazmat" ];
          "ecdh" = [ "arithmetic" "elliptic-curve/ecdh" ];
          "ecdsa" = [ "arithmetic" "ecdsa-core/sign" "ecdsa-core/verify" "sha256" ];
          "ecdsa-core" = [ "dep:ecdsa-core" ];
          "expose-field" = [ "arithmetic" ];
          "hash2curve" = [ "arithmetic" "elliptic-curve/hash2curve" ];
          "hex-literal" = [ "dep:hex-literal" ];
          "jwk" = [ "elliptic-curve/jwk" ];
          "pem" = [ "elliptic-curve/pem" "ecdsa-core/pem" "pkcs8" ];
          "pkcs8" = [ "ecdsa-core/pkcs8" "elliptic-curve/pkcs8" ];
          "serde" = [ "ecdsa-core/serde" "elliptic-curve/serde" "serdect" ];
          "serdect" = [ "dep:serdect" ];
          "sha2" = [ "dep:sha2" ];
          "sha256" = [ "digest" "sha2" ];
          "std" = [ "ecdsa-core/std" "elliptic-curve/std" ];
          "test-vectors" = [ "hex-literal" ];
          "voprf" = [ "elliptic-curve/voprf" "sha2" ];
        };
        resolvedDefaultFeatures = [ "arithmetic" "default" "digest" "ecdsa" "ecdsa-core" "pkcs8" "sha2" "sha256" "std" ];
      };
      "p256 0.13.2" = rec {
        crateName = "p256";
        version = "0.13.2";
        edition = "2021";
        sha256 = "0jyd3c3k239ybs59ixpnl7dqkmm072fr1js8kh7ldx58bzc3m1n9";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "ecdsa";
            packageId = "ecdsa 0.16.9";
            rename = "ecdsa-core";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "der" ];
          }
          {
            name = "elliptic-curve";
            packageId = "elliptic-curve 0.13.8";
            usesDefaultFeatures = false;
            features = [ "hazmat" "sec1" ];
          }
          {
            name = "primeorder";
            packageId = "primeorder";
            optional = true;
          }
          {
            name = "sha2";
            packageId = "sha2 0.10.8";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "ecdsa";
            packageId = "ecdsa 0.16.9";
            rename = "ecdsa-core";
            usesDefaultFeatures = false;
            features = [ "dev" ];
          }
          {
            name = "primeorder";
            packageId = "primeorder";
            features = [ "dev" ];
          }
        ];
        features = {
          "alloc" = [ "ecdsa-core?/alloc" "elliptic-curve/alloc" ];
          "arithmetic" = [ "dep:primeorder" "elliptic-curve/arithmetic" ];
          "bits" = [ "arithmetic" "elliptic-curve/bits" ];
          "default" = [ "arithmetic" "ecdsa" "pem" "std" ];
          "digest" = [ "ecdsa-core/digest" "ecdsa-core/hazmat" ];
          "ecdh" = [ "arithmetic" "elliptic-curve/ecdh" ];
          "ecdsa" = [ "arithmetic" "ecdsa-core/signing" "ecdsa-core/verifying" "sha256" ];
          "ecdsa-core" = [ "dep:ecdsa-core" ];
          "expose-field" = [ "arithmetic" ];
          "hash2curve" = [ "arithmetic" "elliptic-curve/hash2curve" ];
          "jwk" = [ "elliptic-curve/jwk" ];
          "pem" = [ "elliptic-curve/pem" "ecdsa-core/pem" "pkcs8" ];
          "pkcs8" = [ "ecdsa-core?/pkcs8" "elliptic-curve/pkcs8" ];
          "serde" = [ "ecdsa-core?/serde" "elliptic-curve/serde" "primeorder?/serde" "serdect" ];
          "serdect" = [ "dep:serdect" ];
          "sha2" = [ "dep:sha2" ];
          "sha256" = [ "digest" "sha2" ];
          "std" = [ "alloc" "ecdsa-core?/std" "elliptic-curve/std" ];
          "test-vectors" = [ "dep:hex-literal" ];
          "voprf" = [ "elliptic-curve/voprf" "sha2" ];
        };
        resolvedDefaultFeatures = [ "alloc" "arithmetic" "default" "digest" "ecdh" "ecdsa" "ecdsa-core" "jwk" "pem" "pkcs8" "sha2" "sha256" "std" ];
      };
      "p384" = rec {
        crateName = "p384";
        version = "0.13.0";
        edition = "2021";
        sha256 = "02cjlxdvxwvhmnckqnydqpvrwhf5raj67q300d66m7y6pi8nyy3h";
        authors = [
          "RustCrypto Developers"
          "Frank Denis <github@pureftpd.org>"
        ];
        dependencies = [
          {
            name = "ecdsa";
            packageId = "ecdsa 0.16.9";
            rename = "ecdsa-core";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "der" ];
          }
          {
            name = "elliptic-curve";
            packageId = "elliptic-curve 0.13.8";
            usesDefaultFeatures = false;
            features = [ "hazmat" "sec1" ];
          }
          {
            name = "primeorder";
            packageId = "primeorder";
          }
          {
            name = "sha2";
            packageId = "sha2 0.10.8";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "ecdsa";
            packageId = "ecdsa 0.16.9";
            rename = "ecdsa-core";
            usesDefaultFeatures = false;
            features = [ "dev" ];
          }
        ];
        features = {
          "alloc" = [ "ecdsa-core?/alloc" "elliptic-curve/alloc" ];
          "arithmetic" = [ "elliptic-curve/arithmetic" "elliptic-curve/digest" ];
          "bits" = [ "arithmetic" "elliptic-curve/bits" ];
          "default" = [ "arithmetic" "ecdh" "ecdsa" "pem" "std" ];
          "digest" = [ "ecdsa-core/digest" "ecdsa-core/hazmat" ];
          "ecdh" = [ "arithmetic" "elliptic-curve/ecdh" ];
          "ecdsa" = [ "arithmetic" "ecdsa-core/signing" "ecdsa-core/verifying" "sha384" ];
          "ecdsa-core" = [ "dep:ecdsa-core" ];
          "expose-field" = [ "arithmetic" ];
          "hash2curve" = [ "arithmetic" "elliptic-curve/hash2curve" ];
          "hex-literal" = [ "dep:hex-literal" ];
          "jwk" = [ "elliptic-curve/jwk" ];
          "pem" = [ "elliptic-curve/pem" "ecdsa-core/pem" "pkcs8" ];
          "pkcs8" = [ "ecdsa-core/pkcs8" "elliptic-curve/pkcs8" ];
          "serde" = [ "ecdsa-core/serde" "elliptic-curve/serde" "serdect" ];
          "serdect" = [ "dep:serdect" ];
          "sha2" = [ "dep:sha2" ];
          "sha384" = [ "digest" "sha2" ];
          "std" = [ "alloc" "ecdsa-core?/std" "elliptic-curve/std" ];
          "test-vectors" = [ "hex-literal" ];
          "voprf" = [ "elliptic-curve/voprf" "sha2" ];
        };
        resolvedDefaultFeatures = [ "alloc" "arithmetic" "default" "digest" "ecdh" "ecdsa" "ecdsa-core" "pem" "pkcs8" "sha2" "sha384" "std" ];
      };
      "p521" = rec {
        crateName = "p521";
        version = "0.13.3";
        edition = "2021";
        sha256 = "1cl5y2aypa1vxg181a0na3abndz1981pfdp2zkyml88z3wbf5j8g";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "base16ct";
            packageId = "base16ct 0.2.0";
          }
          {
            name = "ecdsa";
            packageId = "ecdsa 0.16.9";
            rename = "ecdsa-core";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "der" ];
          }
          {
            name = "elliptic-curve";
            packageId = "elliptic-curve 0.13.8";
            usesDefaultFeatures = false;
            features = [ "hazmat" "sec1" ];
          }
          {
            name = "primeorder";
            packageId = "primeorder";
            optional = true;
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "sha2";
            packageId = "sha2 0.10.8";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "ecdsa";
            packageId = "ecdsa 0.16.9";
            rename = "ecdsa-core";
            usesDefaultFeatures = false;
            features = [ "dev" ];
          }
          {
            name = "primeorder";
            packageId = "primeorder";
            features = [ "dev" ];
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
            features = [ "getrandom" ];
          }
        ];
        features = {
          "alloc" = [ "ecdsa-core?/alloc" "elliptic-curve/alloc" ];
          "arithmetic" = [ "dep:primeorder" ];
          "default" = [ "arithmetic" "ecdsa" "getrandom" "pem" "std" ];
          "digest" = [ "ecdsa-core/digest" "ecdsa-core/hazmat" ];
          "ecdh" = [ "arithmetic" "elliptic-curve/ecdh" ];
          "ecdsa" = [ "arithmetic" "ecdsa-core/signing" "ecdsa-core/verifying" "sha512" ];
          "ecdsa-core" = [ "dep:ecdsa-core" ];
          "getrandom" = [ "rand_core/getrandom" ];
          "hash2curve" = [ "arithmetic" "elliptic-curve/hash2curve" ];
          "jwk" = [ "elliptic-curve/jwk" ];
          "pem" = [ "elliptic-curve/pem" "pkcs8" ];
          "pkcs8" = [ "ecdsa-core?/pkcs8" "elliptic-curve/pkcs8" ];
          "rand_core" = [ "dep:rand_core" ];
          "serde" = [ "ecdsa-core?/serde" "elliptic-curve/serde" "primeorder?/serde" "serdect" ];
          "serdect" = [ "dep:serdect" ];
          "sha512" = [ "digest" "dep:sha2" ];
          "std" = [ "alloc" "ecdsa-core?/std" "elliptic-curve/std" ];
          "test-vectors" = [ "dep:hex-literal" ];
          "voprf" = [ "elliptic-curve/voprf" "dep:sha2" ];
        };
        resolvedDefaultFeatures = [ "alloc" "arithmetic" "default" "digest" "ecdh" "ecdsa" "ecdsa-core" "getrandom" "pem" "pkcs8" "rand_core" "sha512" "std" ];
      };
      "packable" = rec {
        crateName = "packable";
        version = "0.8.3";
        edition = "2021";
        sha256 = "1dpx4kyljg9yd7wildb01ak0y7zi2j7msj4hyxb95z4ncq49n98i";
        authors = [
          "IOTA Stiftung"
        ];
        dependencies = [
          {
            name = "packable-derive";
            packageId = "packable-derive";
            usesDefaultFeatures = false;
          }
          {
            name = "primitive-types";
            packageId = "primitive-types 0.12.2";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "io" = [ "std" ];
          "primitive-types" = [ "dep:primitive-types" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "serde?/std" "primitive-types?/std" ];
        };
        resolvedDefaultFeatures = [ "io" "primitive-types" "serde" "std" ];
      };
      "packable-derive" = rec {
        crateName = "packable-derive";
        version = "0.7.0";
        edition = "2021";
        sha256 = "0kycl48mspzvvp34cblbr051qhybq3yasm0arcwl76igvn9pcmp9";
        procMacro = true;
        libName = "packable_derive";
        authors = [
          "IOTA Stiftung"
        ];
        dependencies = [
          {
            name = "proc-macro-crate";
            packageId = "proc-macro-crate 1.3.1";
            usesDefaultFeatures = false;
          }
          {
            name = "proc-macro-error";
            packageId = "proc-macro-error";
            usesDefaultFeatures = false;
            features = [ "syn-error" ];
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.86";
            usesDefaultFeatures = false;
          }
          {
            name = "quote";
            packageId = "quote 1.0.37";
            usesDefaultFeatures = false;
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            usesDefaultFeatures = false;
            features = [ "full" "extra-traits" "parsing" "printing" "derive" "proc-macro" "clone-impls" ];
          }
        ];

      };
      "pairing" = rec {
        crateName = "pairing";
        version = "0.23.0";
        edition = "2021";
        sha256 = "0vwr2c500jkw81ga8as4bx93ciyllspnr15n9gpl3kvkbric9zl1";
        authors = [
          "Sean Bowe <ewillbefull@gmail.com>"
          "Jack Grigg <jack@z.cash>"
        ];
        dependencies = [
          {
            name = "group";
            packageId = "group 0.13.0";
            usesDefaultFeatures = false;
          }
        ];

      };
      "papergrid" = rec {
        crateName = "papergrid";
        version = "0.9.1";
        edition = "2018";
        sha256 = "141jx0n6iknn94x9hvfkcwmcfc3r8kk8y33rk11nx4lq4nr92y5f";
        authors = [
          "Maxim Zhiburt <zhiburt@gmail.com>"
        ];
        dependencies = [
          {
            name = "bytecount";
            packageId = "bytecount";
          }
          {
            name = "fnv";
            packageId = "fnv";
          }
          {
            name = "unicode-width";
            packageId = "unicode-width";
          }
        ];
        features = {
          "ansi-str" = [ "dep:ansi-str" ];
          "ansitok" = [ "dep:ansitok" ];
          "color" = [ "ansi-str" "ansitok" ];
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "parity-scale-codec 2.3.1" = rec {
        crateName = "parity-scale-codec";
        version = "2.3.1";
        edition = "2018";
        sha256 = "02g95fp56sfpxixpy3x2h2yvcnmbpl8klfx53wywvn9q2d61lfrp";
        libName = "parity_scale_codec";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "arrayvec";
            packageId = "arrayvec";
            usesDefaultFeatures = false;
          }
          {
            name = "bitvec";
            packageId = "bitvec 0.20.4";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "byte-slice-cast";
            packageId = "byte-slice-cast";
            usesDefaultFeatures = false;
          }
          {
            name = "impl-trait-for-tuples";
            packageId = "impl-trait-for-tuples";
          }
          {
            name = "parity-scale-codec-derive";
            packageId = "parity-scale-codec-derive 2.3.1";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "bit-vec" = [ "bitvec" ];
          "bitvec" = [ "dep:bitvec" ];
          "default" = [ "std" ];
          "derive" = [ "parity-scale-codec-derive" ];
          "fuzz" = [ "std" "arbitrary" ];
          "generic-array" = [ "dep:generic-array" ];
          "max-encoded-len" = [ "parity-scale-codec-derive/max-encoded-len" ];
          "parity-scale-codec-derive" = [ "dep:parity-scale-codec-derive" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "serde" "bitvec/std" "byte-slice-cast/std" "chain-error" ];
        };
        resolvedDefaultFeatures = [ "bitvec" "chain-error" "max-encoded-len" "parity-scale-codec-derive" "serde" "std" ];
      };
      "parity-scale-codec 3.6.12" = rec {
        crateName = "parity-scale-codec";
        version = "3.6.12";
        edition = "2021";
        sha256 = "1vlmz0cwr6dn286d10wn2jrxbqrmhic0m5xmjrjz3ir9zamh0s1h";
        libName = "parity_scale_codec";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "arrayvec";
            packageId = "arrayvec";
            usesDefaultFeatures = false;
          }
          {
            name = "bitvec";
            packageId = "bitvec 1.0.1";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "byte-slice-cast";
            packageId = "byte-slice-cast";
            usesDefaultFeatures = false;
          }
          {
            name = "impl-trait-for-tuples";
            packageId = "impl-trait-for-tuples";
          }
          {
            name = "parity-scale-codec-derive";
            packageId = "parity-scale-codec-derive 3.6.12";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "bit-vec" = [ "bitvec" ];
          "bitvec" = [ "dep:bitvec" ];
          "bytes" = [ "dep:bytes" ];
          "default" = [ "std" ];
          "derive" = [ "parity-scale-codec-derive" ];
          "fuzz" = [ "std" "arbitrary" ];
          "generic-array" = [ "dep:generic-array" ];
          "max-encoded-len" = [ "parity-scale-codec-derive?/max-encoded-len" ];
          "parity-scale-codec-derive" = [ "dep:parity-scale-codec-derive" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "serde/std" "bitvec?/std" "byte-slice-cast/std" "chain-error" ];
        };
        resolvedDefaultFeatures = [ "chain-error" "derive" "max-encoded-len" "parity-scale-codec-derive" "serde" "std" ];
      };
      "parity-scale-codec-derive 2.3.1" = rec {
        crateName = "parity-scale-codec-derive";
        version = "2.3.1";
        edition = "2018";
        sha256 = "09zdgdqalc8d2zsjc9v1ayqxwg5rh7xxq5ldasdmqng0fq202mqm";
        procMacro = true;
        libName = "parity_scale_codec_derive";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "proc-macro-crate";
            packageId = "proc-macro-crate 1.3.1";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.86";
          }
          {
            name = "quote";
            packageId = "quote 1.0.37";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            features = [ "full" "visit" ];
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "max-encoded-len" ];
      };
      "parity-scale-codec-derive 3.6.12" = rec {
        crateName = "parity-scale-codec-derive";
        version = "3.6.12";
        edition = "2021";
        sha256 = "0b54af85dc1p9j399swl4a7l6yyslrbywfh309j9b56jfsf96c6q";
        procMacro = true;
        libName = "parity_scale_codec_derive";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "proc-macro-crate";
            packageId = "proc-macro-crate 3.2.0";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.86";
          }
          {
            name = "quote";
            packageId = "quote 1.0.37";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            features = [ "full" "visit" ];
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "max-encoded-len" ];
      };
      "parking_lot 0.11.2" = rec {
        crateName = "parking_lot";
        version = "0.11.2";
        edition = "2018";
        sha256 = "16gzf41bxmm10x82bla8d6wfppy9ym3fxsmdjyvn61m66s0bf5vx";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "instant";
            packageId = "instant";
          }
          {
            name = "lock_api";
            packageId = "lock_api";
          }
          {
            name = "parking_lot_core";
            packageId = "parking_lot_core 0.8.6";
          }
        ];
        features = {
          "arc_lock" = [ "lock_api/arc_lock" ];
          "deadlock_detection" = [ "parking_lot_core/deadlock_detection" ];
          "nightly" = [ "parking_lot_core/nightly" "lock_api/nightly" ];
          "owning_ref" = [ "lock_api/owning_ref" ];
          "serde" = [ "lock_api/serde" ];
          "stdweb" = [ "instant/stdweb" ];
          "wasm-bindgen" = [ "instant/wasm-bindgen" ];
        };
        resolvedDefaultFeatures = [ "default" "wasm-bindgen" ];
      };
      "parking_lot 0.12.3" = rec {
        crateName = "parking_lot";
        version = "0.12.3";
        edition = "2021";
        sha256 = "09ws9g6245iiq8z975h8ycf818a66q3c6zv4b5h8skpm7hc1igzi";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "lock_api";
            packageId = "lock_api";
          }
          {
            name = "parking_lot_core";
            packageId = "parking_lot_core 0.9.10";
          }
        ];
        features = {
          "arc_lock" = [ "lock_api/arc_lock" ];
          "deadlock_detection" = [ "parking_lot_core/deadlock_detection" ];
          "nightly" = [ "parking_lot_core/nightly" "lock_api/nightly" ];
          "owning_ref" = [ "lock_api/owning_ref" ];
          "serde" = [ "lock_api/serde" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "parking_lot_core 0.8.6" = rec {
        crateName = "parking_lot_core";
        version = "0.8.6";
        edition = "2018";
        sha256 = "1p2nfcbr0b9lm9rglgm28k6mwyjwgm4knipsmqbgqaxdy3kcz8k0";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "instant";
            packageId = "instant";
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "redox_syscall";
            packageId = "redox_syscall 0.2.16";
            target = { target, features }: ("redox" == target."os" or null);
          }
          {
            name = "smallvec";
            packageId = "smallvec";
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: (target."windows" or false);
            features = [ "winnt" "ntstatus" "minwindef" "winerror" "winbase" "errhandlingapi" "handleapi" ];
          }
        ];
        features = {
          "backtrace" = [ "dep:backtrace" ];
          "deadlock_detection" = [ "petgraph" "thread-id" "backtrace" ];
          "petgraph" = [ "dep:petgraph" ];
          "thread-id" = [ "dep:thread-id" ];
        };
      };
      "parking_lot_core 0.9.10" = rec {
        crateName = "parking_lot_core";
        version = "0.9.10";
        edition = "2021";
        sha256 = "1y3cf9ld9ijf7i4igwzffcn0xl16dxyn4c5bwgjck1dkgabiyh0y";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "redox_syscall";
            packageId = "redox_syscall 0.5.6";
            target = { target, features }: ("redox" == target."os" or null);
          }
          {
            name = "smallvec";
            packageId = "smallvec";
          }
          {
            name = "windows-targets";
            packageId = "windows-targets 0.52.6";
            target = { target, features }: (target."windows" or false);
          }
        ];
        features = {
          "backtrace" = [ "dep:backtrace" ];
          "deadlock_detection" = [ "petgraph" "thread-id" "backtrace" ];
          "petgraph" = [ "dep:petgraph" ];
          "thread-id" = [ "dep:thread-id" ];
        };
      };
      "parquet" = rec {
        crateName = "parquet";
        version = "53.1.0";
        edition = "2021";
        crateBin = [];
        sha256 = "0gnxs22986cxdjsnznli85a1wwwxdpda57y3zsc0va9v1aklc31i";
        authors = [
          "Apache Arrow <dev@arrow.apache.org>"
        ];
        dependencies = [
          {
            name = "ahash";
            packageId = "ahash 0.8.11";
            usesDefaultFeatures = false;
            target = { target, features }: (!("wasm32" == target."arch" or null));
            features = [ "runtime-rng" ];
          }
          {
            name = "ahash";
            packageId = "ahash 0.8.11";
            usesDefaultFeatures = false;
            target = { target, features }: ("wasm32" == target."arch" or null);
            features = [ "compile-time-rng" ];
          }
          {
            name = "arrow-array";
            packageId = "arrow-array";
            optional = true;
          }
          {
            name = "arrow-buffer";
            packageId = "arrow-buffer";
            optional = true;
          }
          {
            name = "arrow-cast";
            packageId = "arrow-cast";
            optional = true;
          }
          {
            name = "arrow-data";
            packageId = "arrow-data";
            optional = true;
          }
          {
            name = "arrow-ipc";
            packageId = "arrow-ipc";
            optional = true;
          }
          {
            name = "arrow-schema";
            packageId = "arrow-schema";
            optional = true;
          }
          {
            name = "arrow-select";
            packageId = "arrow-select";
            optional = true;
          }
          {
            name = "base64";
            packageId = "base64 0.22.1";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "brotli";
            packageId = "brotli";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "bytes";
            packageId = "bytes";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "chrono";
            packageId = "chrono";
            usesDefaultFeatures = false;
            features = [ "clock" ];
          }
          {
            name = "flate2";
            packageId = "flate2";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "rust_backend" ];
          }
          {
            name = "half";
            packageId = "half";
            usesDefaultFeatures = false;
            features = [ "num-traits" ];
          }
          {
            name = "hashbrown";
            packageId = "hashbrown 0.14.5";
            usesDefaultFeatures = false;
          }
          {
            name = "lz4_flex";
            packageId = "lz4_flex";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "std" "frame" ];
          }
          {
            name = "num";
            packageId = "num";
            usesDefaultFeatures = false;
          }
          {
            name = "num-bigint";
            packageId = "num-bigint 0.4.6";
            usesDefaultFeatures = false;
          }
          {
            name = "paste";
            packageId = "paste";
          }
          {
            name = "seq-macro";
            packageId = "seq-macro";
            usesDefaultFeatures = false;
          }
          {
            name = "snap";
            packageId = "snap";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "thrift";
            packageId = "thrift";
            usesDefaultFeatures = false;
          }
          {
            name = "twox-hash";
            packageId = "twox-hash";
            usesDefaultFeatures = false;
          }
          {
            name = "zstd";
            packageId = "zstd 0.13.2";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "zstd-sys";
            packageId = "zstd-sys";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: (builtins.elem "wasm" target."family");
          }
        ];
        devDependencies = [
          {
            name = "base64";
            packageId = "base64 0.22.1";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "brotli";
            packageId = "brotli";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "flate2";
            packageId = "flate2";
            usesDefaultFeatures = false;
            features = [ "rust_backend" ];
          }
          {
            name = "lz4_flex";
            packageId = "lz4_flex";
            usesDefaultFeatures = false;
            features = [ "std" "frame" ];
          }
          {
            name = "snap";
            packageId = "snap";
            usesDefaultFeatures = false;
          }
          {
            name = "zstd";
            packageId = "zstd 0.13.2";
            usesDefaultFeatures = false;
          }
          {
            name = "zstd-sys";
            packageId = "zstd-sys";
            usesDefaultFeatures = false;
            target = {target, features}: (builtins.elem "wasm" target."family");
          }
        ];
        features = {
          "arrow" = [ "base64" "arrow-array" "arrow-buffer" "arrow-cast" "arrow-data" "arrow-schema" "arrow-select" "arrow-ipc" ];
          "arrow-array" = [ "dep:arrow-array" ];
          "arrow-buffer" = [ "dep:arrow-buffer" ];
          "arrow-cast" = [ "dep:arrow-cast" ];
          "arrow-csv" = [ "dep:arrow-csv" ];
          "arrow-data" = [ "dep:arrow-data" ];
          "arrow-ipc" = [ "dep:arrow-ipc" ];
          "arrow-schema" = [ "dep:arrow-schema" ];
          "arrow-select" = [ "dep:arrow-select" ];
          "async" = [ "futures" "tokio" ];
          "base64" = [ "dep:base64" ];
          "brotli" = [ "dep:brotli" ];
          "clap" = [ "dep:clap" ];
          "cli" = [ "json" "base64" "clap" "arrow-csv" "serde" ];
          "crc" = [ "dep:crc32fast" ];
          "default" = [ "arrow" "snap" "brotli" "flate2" "lz4" "zstd" "base64" ];
          "flate2" = [ "dep:flate2" ];
          "futures" = [ "dep:futures" ];
          "json" = [ "serde_json" "base64" ];
          "lz4" = [ "lz4_flex" ];
          "lz4_flex" = [ "dep:lz4_flex" ];
          "object_store" = [ "dep:object_store" "async" ];
          "serde" = [ "dep:serde" ];
          "serde_json" = [ "dep:serde_json" ];
          "snap" = [ "dep:snap" ];
          "sysinfo" = [ "dep:sysinfo" ];
          "test_common" = [ "arrow/test_utils" ];
          "tokio" = [ "dep:tokio" ];
          "zstd" = [ "dep:zstd" "zstd-sys" ];
          "zstd-sys" = [ "dep:zstd-sys" ];
        };
        resolvedDefaultFeatures = [ "arrow" "arrow-array" "arrow-buffer" "arrow-cast" "arrow-data" "arrow-ipc" "arrow-schema" "arrow-select" "base64" "brotli" "default" "flate2" "lz4" "lz4_flex" "snap" "zstd" "zstd-sys" ];
      };
      "passkey-authenticator" = rec {
        crateName = "passkey-authenticator";
        version = "0.2.0";
        edition = "2021";
        sha256 = "0yam8j90w8w7h16n6d9v3j17qyrxrcczx8s3icsrh2llk1zd45s0";
        libName = "passkey_authenticator";
        authors = [
          "1Password"
        ];
        dependencies = [
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "coset";
            packageId = "coset";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "p256";
            packageId = "p256 0.13.2";
            features = [ "pem" "arithmetic" "jwk" ];
          }
          {
            name = "passkey-types";
            packageId = "passkey-types";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
        ];
        features = {
          "testable" = [ "dep:mockall" ];
          "tokio" = [ "dep:tokio" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "passkey-client" = rec {
        crateName = "passkey-client";
        version = "0.2.0";
        edition = "2021";
        sha256 = "1p9r2h386wd6p984hf1klr4m7k5kncr9jjnkmlkpkk298yql4kgi";
        libName = "passkey_client";
        authors = [
          "1Password"
        ];
        dependencies = [
          {
            name = "ciborium";
            packageId = "ciborium";
          }
          {
            name = "coset";
            packageId = "coset";
          }
          {
            name = "idna";
            packageId = "idna";
          }
          {
            name = "passkey-authenticator";
            packageId = "passkey-authenticator";
          }
          {
            name = "passkey-types";
            packageId = "passkey-types";
          }
          {
            name = "public-suffix";
            packageId = "public-suffix";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "typeshare";
            packageId = "typeshare";
          }
          {
            name = "url";
            packageId = "url";
          }
        ];
        devDependencies = [
          {
            name = "coset";
            packageId = "coset";
          }
        ];

      };
      "passkey-types" = rec {
        crateName = "passkey-types";
        version = "0.2.0";
        edition = "2021";
        sha256 = "0f35khi5w2qp0sk6i6zmcx6n1jlz1yn5lr6rhj3my7776a2gz729";
        libName = "passkey_types";
        authors = [
          "1Password"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.6.0";
          }
          {
            name = "ciborium";
            packageId = "ciborium";
          }
          {
            name = "coset";
            packageId = "coset";
          }
          {
            name = "data-encoding";
            packageId = "data-encoding";
          }
          {
            name = "indexmap";
            packageId = "indexmap 2.5.0";
            features = [ "serde" ];
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            features = [ "preserve_order" ];
          }
          {
            name = "sha2";
            packageId = "sha2 0.10.8";
          }
          {
            name = "strum";
            packageId = "strum 0.25.0";
            features = [ "derive" ];
          }
          {
            name = "typeshare";
            packageId = "typeshare";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "password-hash" = rec {
        crateName = "password-hash";
        version = "0.4.2";
        edition = "2021";
        sha256 = "003p2hssyrcaxyq9fs8x2wx5di8ny9byaakskrf352pfm963fxkn";
        libName = "password_hash";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "base64ct";
            packageId = "base64ct";
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "subtle";
            packageId = "subtle";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "base64ct/alloc" ];
          "default" = [ "rand_core" ];
          "rand_core" = [ "dep:rand_core" ];
          "std" = [ "alloc" "base64ct/std" "rand_core/std" ];
        };
        resolvedDefaultFeatures = [ "rand_core" ];
      };
      "pasta_curves" = rec {
        crateName = "pasta_curves";
        version = "0.5.1";
        edition = "2021";
        sha256 = "15d0wy6j1d8ilg5cs0n4sxy8g81igd8rriv3mjrf3irwyyc7brfk";
        authors = [
          "Sean Bowe <sean@electriccoin.co>"
          "Ying Tong Lai <yingtong@electriccoin.co>"
          "Daira Hopwood <daira@electriccoin.co>"
          "Jack Grigg <jack@electriccoin.co>"
        ];
        dependencies = [
          {
            name = "blake2b_simd";
            packageId = "blake2b_simd";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "ff";
            packageId = "ff 0.13.0";
            usesDefaultFeatures = false;
          }
          {
            name = "group";
            packageId = "group 0.13.0";
            usesDefaultFeatures = false;
          }
          {
            name = "hex";
            packageId = "hex";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "alloc" "serde" ];
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
            optional = true;
            features = [ "spin_no_std" ];
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            rename = "serde_crate";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "static_assertions";
            packageId = "static_assertions";
          }
          {
            name = "subtle";
            packageId = "subtle";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "group/alloc" "blake2b_simd" ];
          "bits" = [ "ff/bits" ];
          "blake2b_simd" = [ "dep:blake2b_simd" ];
          "default" = [ "bits" "sqrt-table" ];
          "ec-gpu" = [ "dep:ec-gpu" ];
          "gpu" = [ "alloc" "ec-gpu" ];
          "hex" = [ "dep:hex" ];
          "lazy_static" = [ "dep:lazy_static" ];
          "serde" = [ "hex" "serde_crate" ];
          "serde_crate" = [ "dep:serde_crate" ];
          "sqrt-table" = [ "alloc" "lazy_static" ];
        };
        resolvedDefaultFeatures = [ "alloc" "bits" "blake2b_simd" "default" "hex" "lazy_static" "serde" "serde_crate" "sqrt-table" ];
      };
      "paste" = rec {
        crateName = "paste";
        version = "1.0.15";
        edition = "2018";
        sha256 = "02pxffpdqkapy292harq6asfjvadgp1s005fip9ljfsn9fvxgh2p";
        procMacro = true;
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];

      };
      "path-slash" = rec {
        crateName = "path-slash";
        version = "0.2.1";
        edition = "2018";
        sha256 = "0hjgljv4vy97qqw9gxnwzqhhpysjss2yhdphfccy3c388afhk48y";
        libName = "path_slash";
        authors = [
          "rhysd <https://rhysd.github.io>"
        ];

      };
      "pbkdf2 0.11.0" = rec {
        crateName = "pbkdf2";
        version = "0.11.0";
        edition = "2021";
        sha256 = "05q9wqjvfrs4dvw03yn3bvcs4zghz0a7ycfa53pz2k2fqhp6k843";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "digest";
            packageId = "digest 0.10.7";
            features = [ "mac" ];
          }
          {
            name = "hmac";
            packageId = "hmac";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "password-hash";
            packageId = "password-hash";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "rand_core" ];
          }
          {
            name = "sha2";
            packageId = "sha2 0.10.8";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "hmac";
            packageId = "hmac";
          }
          {
            name = "sha2";
            packageId = "sha2 0.10.8";
          }
        ];
        features = {
          "default" = [ "simple" ];
          "hmac" = [ "dep:hmac" ];
          "parallel" = [ "rayon" "std" ];
          "password-hash" = [ "dep:password-hash" ];
          "rayon" = [ "dep:rayon" ];
          "sha1" = [ "dep:sha1" ];
          "sha2" = [ "dep:sha2" ];
          "simple" = [ "hmac" "password-hash" "sha2" ];
          "std" = [ "password-hash/std" ];
        };
        resolvedDefaultFeatures = [ "default" "hmac" "password-hash" "sha2" "simple" ];
      };
      "pbkdf2 0.12.2" = rec {
        crateName = "pbkdf2";
        version = "0.12.2";
        edition = "2021";
        sha256 = "1wms79jh4flpy1zi8xdp4h8ccxv4d85adc6zjagknvppc5vnmvgq";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "digest";
            packageId = "digest 0.10.7";
            features = [ "mac" ];
          }
          {
            name = "hmac";
            packageId = "hmac";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "hmac";
            packageId = "hmac";
          }
        ];
        features = {
          "default" = [ "hmac" ];
          "hmac" = [ "dep:hmac" ];
          "parallel" = [ "rayon" "std" ];
          "password-hash" = [ "dep:password-hash" ];
          "rayon" = [ "dep:rayon" ];
          "sha1" = [ "dep:sha1" ];
          "sha2" = [ "dep:sha2" ];
          "simple" = [ "hmac" "password-hash" "sha2" ];
          "std" = [ "password-hash/std" ];
        };
        resolvedDefaultFeatures = [ "default" "hmac" ];
      };
      "peeking_take_while" = rec {
        crateName = "peeking_take_while";
        version = "0.1.2";
        edition = "2015";
        sha256 = "16bhqr6rdyrp12zv381cxaaqqd0pwysvm1q8h2ygihvypvfprc8r";
        authors = [
          "Nick Fitzgerald <fitzgen@gmail.com>"
        ];

      };
      "pem 1.1.1" = rec {
        crateName = "pem";
        version = "1.1.1";
        edition = "2018";
        sha256 = "1f184b7vs5kgwglfsy9adqqy7625jsq8jj1lsxah9abn78kmr0x8";
        authors = [
          "Jonathan Creekmore <jonathan@thecreekmores.org>"
        ];
        dependencies = [
          {
            name = "base64";
            packageId = "base64 0.13.1";
          }
        ];
        features = {
          "serde" = [ "dep:serde" ];
        };
      };
      "pem 3.0.4" = rec {
        crateName = "pem";
        version = "3.0.4";
        edition = "2021";
        sha256 = "1blgcn17wc41yxdzrxlsir5m6ds8r13ijmpsqda6lwwhwmjr6icf";
        authors = [
          "Jonathan Creekmore <jonathan@thecreekmores.org>"
        ];
        dependencies = [
          {
            name = "base64";
            packageId = "base64 0.22.1";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "base64/std" "serde?/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "pem-rfc7468 0.6.0" = rec {
        crateName = "pem-rfc7468";
        version = "0.6.0";
        edition = "2021";
        sha256 = "1b5d8rvc4lgwxhs72m99fnrg0wq7bqh4x4wq0c7501ci7a1mkl94";
        libName = "pem_rfc7468";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "base64ct";
            packageId = "base64ct";
          }
        ];
        features = {
          "alloc" = [ "base64ct/alloc" ];
          "std" = [ "alloc" "base64ct/std" ];
        };
        resolvedDefaultFeatures = [ "alloc" ];
      };
      "pem-rfc7468 0.7.0" = rec {
        crateName = "pem-rfc7468";
        version = "0.7.0";
        edition = "2021";
        sha256 = "04l4852scl4zdva31c1z6jafbak0ni5pi0j38ml108zwzjdrrcw8";
        libName = "pem_rfc7468";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "base64ct";
            packageId = "base64ct";
          }
        ];
        features = {
          "alloc" = [ "base64ct/alloc" ];
          "std" = [ "alloc" "base64ct/std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "std" ];
      };
      "percent-encoding" = rec {
        crateName = "percent-encoding";
        version = "2.3.1";
        edition = "2018";
        sha256 = "0gi8wgx0dcy8rnv1kywdv98lwcx67hz0a0zwpib5v2i08r88y573";
        libName = "percent_encoding";
        authors = [
          "The rust-url developers"
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "pest" = rec {
        crateName = "pest";
        version = "2.7.13";
        edition = "2021";
        sha256 = "1nf2vwl5xhiqn1kl6skgwajp7naaxcjys86jmfasi1vhsk8zkgpx";
        authors = [
          "Dragoș Tiselice <dragostiselice@gmail.com>"
        ];
        dependencies = [
          {
            name = "memchr";
            packageId = "memchr";
            optional = true;
          }
          {
            name = "thiserror";
            packageId = "thiserror";
            optional = true;
          }
          {
            name = "ucd-trie";
            packageId = "ucd-trie";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" "memchr" ];
          "memchr" = [ "dep:memchr" ];
          "miette-error" = [ "std" "pretty-print" "dep:miette" "dep:thiserror" ];
          "pretty-print" = [ "dep:serde" "dep:serde_json" ];
          "std" = [ "ucd-trie/std" "dep:thiserror" ];
        };
        resolvedDefaultFeatures = [ "default" "memchr" "std" ];
      };
      "pest_derive" = rec {
        crateName = "pest_derive";
        version = "2.7.13";
        edition = "2021";
        sha256 = "182sp7b10216mwdccr8296462k3mf5ap4g1rnsrzx07cjhrnwfjd";
        procMacro = true;
        authors = [
          "Dragoș Tiselice <dragostiselice@gmail.com>"
        ];
        dependencies = [
          {
            name = "pest";
            packageId = "pest";
            usesDefaultFeatures = false;
          }
          {
            name = "pest_generator";
            packageId = "pest_generator";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "grammar-extras" = [ "pest_generator/grammar-extras" ];
          "not-bootstrap-in-src" = [ "pest_generator/not-bootstrap-in-src" ];
          "std" = [ "pest/std" "pest_generator/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "pest_generator" = rec {
        crateName = "pest_generator";
        version = "2.7.13";
        edition = "2021";
        sha256 = "03lk1v5ih4lkjpm5j6jp4r3snwj17z3n46b0np8nkjp1pl39ahll";
        authors = [
          "Dragoș Tiselice <dragostiselice@gmail.com>"
        ];
        dependencies = [
          {
            name = "pest";
            packageId = "pest";
            usesDefaultFeatures = false;
          }
          {
            name = "pest_meta";
            packageId = "pest_meta";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.86";
          }
          {
            name = "quote";
            packageId = "quote 1.0.37";
          }
          {
            name = "syn";
            packageId = "syn 2.0.77";
          }
        ];
        features = {
          "default" = [ "std" ];
          "grammar-extras" = [ "pest_meta/grammar-extras" ];
          "not-bootstrap-in-src" = [ "pest_meta/not-bootstrap-in-src" ];
          "std" = [ "pest/std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "pest_meta" = rec {
        crateName = "pest_meta";
        version = "2.7.13";
        edition = "2021";
        sha256 = "0gx30r4jq8ijfar4a0mcfd277wrzwfw5z6jfwfv90dp9c8c0g2mc";
        authors = [
          "Dragoș Tiselice <dragostiselice@gmail.com>"
        ];
        dependencies = [
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "pest";
            packageId = "pest";
          }
        ];
        buildDependencies = [
          {
            name = "sha2";
            packageId = "sha2 0.10.8";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "not-bootstrap-in-src" = [ "dep:cargo" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "petgraph 0.5.1" = rec {
        crateName = "petgraph";
        version = "0.5.1";
        edition = "2018";
        sha256 = "1dzxda6z17sfxly11m8ja3iargh73pw0s1sdgjyp0qp5dm51cza6";
        authors = [
          "bluss"
          "mitchmindtree"
        ];
        dependencies = [
          {
            name = "fixedbitset";
            packageId = "fixedbitset 0.2.0";
            usesDefaultFeatures = false;
          }
          {
            name = "indexmap";
            packageId = "indexmap 1.9.3";
          }
        ];
        features = {
          "all" = [ "unstable" "quickcheck" "matrix_graph" "stable_graph" "graphmap" ];
          "default" = [ "graphmap" "stable_graph" "matrix_graph" ];
          "quickcheck" = [ "dep:quickcheck" ];
          "serde" = [ "dep:serde" ];
          "serde-1" = [ "serde" "serde_derive" ];
          "serde_derive" = [ "dep:serde_derive" ];
          "unstable" = [ "generate" ];
        };
        resolvedDefaultFeatures = [ "default" "graphmap" "matrix_graph" "stable_graph" ];
      };
      "petgraph 0.6.5" = rec {
        crateName = "petgraph";
        version = "0.6.5";
        edition = "2018";
        sha256 = "1ns7mbxidnn2pqahbbjccxkrqkrll2i5rbxx43ns6rh6fn3cridl";
        authors = [
          "bluss"
          "mitchmindtree"
        ];
        dependencies = [
          {
            name = "fixedbitset";
            packageId = "fixedbitset 0.4.2";
            usesDefaultFeatures = false;
          }
          {
            name = "indexmap";
            packageId = "indexmap 2.5.0";
          }
        ];
        features = {
          "all" = [ "unstable" "quickcheck" "matrix_graph" "stable_graph" "graphmap" "rayon" ];
          "default" = [ "graphmap" "stable_graph" "matrix_graph" ];
          "quickcheck" = [ "dep:quickcheck" ];
          "rayon" = [ "dep:rayon" "indexmap/rayon" ];
          "serde" = [ "dep:serde" ];
          "serde-1" = [ "serde" "serde_derive" ];
          "serde_derive" = [ "dep:serde_derive" ];
          "unstable" = [ "generate" ];
        };
        resolvedDefaultFeatures = [ "default" "graphmap" "matrix_graph" "stable_graph" ];
      };
      "pharos" = rec {
        crateName = "pharos";
        version = "0.5.3";
        edition = "2021";
        sha256 = "055lg1dzrxnryfy34a9cyrg21b7cl6l2frfx2p7fdvkz864p6mp9";
        authors = [
          "Naja Melan <najamelan@autistici.org>"
        ];
        dependencies = [
          {
            name = "futures";
            packageId = "futures";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
        ];
        buildDependencies = [
          {
            name = "rustc_version";
            packageId = "rustc_version";
          }
        ];
        devDependencies = [
          {
            name = "futures";
            packageId = "futures";
          }
        ];

      };
      "phf" = rec {
        crateName = "phf";
        version = "0.11.2";
        edition = "2021";
        sha256 = "1p03rsw66l7naqhpgr1a34r9yzi1gv9jh16g3fsk6wrwyfwdiqmd";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
        ];
        dependencies = [
          {
            name = "phf_macros";
            packageId = "phf_macros";
            optional = true;
          }
          {
            name = "phf_shared";
            packageId = "phf_shared 0.11.2";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "macros" = [ "phf_macros" ];
          "phf_macros" = [ "dep:phf_macros" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "phf_shared/std" ];
          "uncased" = [ "phf_shared/uncased" ];
          "unicase" = [ "phf_macros?/unicase" "phf_shared/unicase" ];
        };
        resolvedDefaultFeatures = [ "default" "macros" "phf_macros" "std" ];
      };
      "phf_generator" = rec {
        crateName = "phf_generator";
        version = "0.11.2";
        edition = "2021";
        crateBin = [];
        sha256 = "1c14pjyxbcpwkdgw109f7581cc5fa3fnkzdq1ikvx7mdq9jcrr28";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
        ];
        dependencies = [
          {
            name = "phf_shared";
            packageId = "phf_shared 0.11.2";
            usesDefaultFeatures = false;
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
            usesDefaultFeatures = false;
            features = [ "small_rng" ];
          }
        ];
        features = {
          "criterion" = [ "dep:criterion" ];
        };
      };
      "phf_macros" = rec {
        crateName = "phf_macros";
        version = "0.11.2";
        edition = "2021";
        sha256 = "0js61lc0bhzzrbd9vhpcqp11vvwckdkz3g7k95z5h1k651p68i1l";
        procMacro = true;
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
        ];
        dependencies = [
          {
            name = "phf_generator";
            packageId = "phf_generator";
          }
          {
            name = "phf_shared";
            packageId = "phf_shared 0.11.2";
            usesDefaultFeatures = false;
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.86";
          }
          {
            name = "quote";
            packageId = "quote 1.0.37";
          }
          {
            name = "syn";
            packageId = "syn 2.0.77";
            features = [ "full" ];
          }
        ];
        features = {
          "unicase" = [ "unicase_" "phf_shared/unicase" ];
          "unicase_" = [ "dep:unicase_" ];
        };
      };
      "phf_shared 0.10.0" = rec {
        crateName = "phf_shared";
        version = "0.10.0";
        edition = "2018";
        sha256 = "15n02nc8yqpd8hbxngblar2g53p3nllc93d8s8ih3p5cf7bnlydn";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
        ];
        dependencies = [
          {
            name = "siphasher";
            packageId = "siphasher";
          }
        ];
        features = {
          "default" = [ "std" ];
          "uncased" = [ "dep:uncased" ];
          "unicase" = [ "dep:unicase" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "phf_shared 0.11.2" = rec {
        crateName = "phf_shared";
        version = "0.11.2";
        edition = "2021";
        sha256 = "0azphb0a330ypqx3qvyffal5saqnks0xvl8rj73jlk3qxxgbkz4h";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
        ];
        dependencies = [
          {
            name = "siphasher";
            packageId = "siphasher";
          }
        ];
        features = {
          "default" = [ "std" ];
          "uncased" = [ "dep:uncased" ];
          "unicase" = [ "dep:unicase" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "pin-project" = rec {
        crateName = "pin-project";
        version = "1.1.5";
        edition = "2021";
        sha256 = "1cxl146x0q7lawp0m1826wsgj8mmmfs6ja8q7m6f7ff5j6vl7gxn";
        libName = "pin_project";
        dependencies = [
          {
            name = "pin-project-internal";
            packageId = "pin-project-internal";
          }
        ];

      };
      "pin-project-internal" = rec {
        crateName = "pin-project-internal";
        version = "1.1.5";
        edition = "2021";
        sha256 = "0r9r4ivwiyqf45sv6b30l1dx282lxaax2f6gl84jwa3q590s8f1g";
        procMacro = true;
        libName = "pin_project_internal";
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.86";
          }
          {
            name = "quote";
            packageId = "quote 1.0.37";
          }
          {
            name = "syn";
            packageId = "syn 2.0.77";
            features = [ "full" "visit-mut" ];
          }
        ];

      };
      "pin-project-lite" = rec {
        crateName = "pin-project-lite";
        version = "0.2.14";
        edition = "2018";
        sha256 = "00nx3f04agwjlsmd3mc5rx5haibj2v8q9b52b0kwn63wcv4nz9mx";
        libName = "pin_project_lite";

      };
      "pin-utils" = rec {
        crateName = "pin-utils";
        version = "0.1.0";
        edition = "2018";
        sha256 = "117ir7vslsl2z1a7qzhws4pd01cg2d3338c47swjyvqv2n60v1wb";
        libName = "pin_utils";
        authors = [
          "Josef Brandl <mail@josefbrandl.de>"
        ];

      };
      "pkcs1 0.4.1" = rec {
        crateName = "pkcs1";
        version = "0.4.1";
        edition = "2021";
        sha256 = "06gpasl1v2d2r74xa8vm72vqy6ryxjynwxna5s5cjk65vzdkpwzg";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "der";
            packageId = "der 0.6.1";
            features = [ "oid" ];
          }
          {
            name = "pkcs8";
            packageId = "pkcs8 0.9.0";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "spki";
            packageId = "spki 0.6.0";
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "der/alloc" "pkcs8/alloc" "zeroize/alloc" ];
          "pem" = [ "alloc" "der/pem" "pkcs8/pem" ];
          "pkcs8" = [ "dep:pkcs8" ];
          "std" = [ "der/std" "alloc" ];
          "zeroize" = [ "dep:zeroize" ];
        };
        resolvedDefaultFeatures = [ "alloc" "pem" "pkcs8" "std" "zeroize" ];
      };
      "pkcs1 0.7.5" = rec {
        crateName = "pkcs1";
        version = "0.7.5";
        edition = "2021";
        sha256 = "0zz4mil3nchnxljdfs2k5ab1cjqn7kq5lqp62n9qfix01zqvkzy8";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "der";
            packageId = "der 0.7.9";
            features = [ "oid" ];
          }
          {
            name = "pkcs8";
            packageId = "pkcs8 0.10.2";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "spki";
            packageId = "spki 0.7.3";
          }
        ];
        features = {
          "alloc" = [ "der/alloc" "zeroize" "pkcs8?/alloc" ];
          "pem" = [ "alloc" "der/pem" "pkcs8?/pem" ];
          "pkcs8" = [ "dep:pkcs8" ];
          "std" = [ "der/std" "alloc" ];
          "zeroize" = [ "der/zeroize" ];
        };
        resolvedDefaultFeatures = [ "alloc" "pem" "pkcs8" "std" "zeroize" ];
      };
      "pkcs5" = rec {
        crateName = "pkcs5";
        version = "0.7.1";
        edition = "2021";
        sha256 = "19k9igzay529fqj90qdkgnvmvwp65wzw73h2vn3sigqq3b4y4iz8";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "aes";
            packageId = "aes";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "cbc";
            packageId = "cbc";
            optional = true;
          }
          {
            name = "der";
            packageId = "der 0.7.9";
            features = [ "oid" ];
          }
          {
            name = "pbkdf2";
            packageId = "pbkdf2 0.12.2";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "scrypt";
            packageId = "scrypt 0.11.0";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "sha2";
            packageId = "sha2 0.10.8";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "spki";
            packageId = "spki 0.7.3";
          }
        ];
        features = {
          "3des" = [ "dep:des" "pbes2" ];
          "des-insecure" = [ "dep:des" "pbes2" ];
          "pbes2" = [ "dep:aes" "dep:cbc" "dep:pbkdf2" "dep:scrypt" "dep:sha2" ];
          "sha1-insecure" = [ "dep:sha1" "pbes2" ];
        };
        resolvedDefaultFeatures = [ "alloc" "pbes2" ];
      };
      "pkcs8 0.10.2" = rec {
        crateName = "pkcs8";
        version = "0.10.2";
        edition = "2021";
        sha256 = "1dx7w21gvn07azszgqd3ryjhyphsrjrmq5mmz1fbxkj5g0vv4l7r";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "der";
            packageId = "der 0.7.9";
            features = [ "oid" ];
          }
          {
            name = "pkcs5";
            packageId = "pkcs5";
            optional = true;
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "spki";
            packageId = "spki 0.7.3";
          }
        ];
        features = {
          "3des" = [ "encryption" "pkcs5/3des" ];
          "alloc" = [ "der/alloc" "der/zeroize" "spki/alloc" ];
          "des-insecure" = [ "encryption" "pkcs5/des-insecure" ];
          "encryption" = [ "alloc" "pkcs5/alloc" "pkcs5/pbes2" "rand_core" ];
          "getrandom" = [ "rand_core/getrandom" ];
          "pem" = [ "alloc" "der/pem" "spki/pem" ];
          "pkcs5" = [ "dep:pkcs5" ];
          "rand_core" = [ "dep:rand_core" ];
          "sha1-insecure" = [ "encryption" "pkcs5/sha1-insecure" ];
          "std" = [ "alloc" "der/std" "spki/std" ];
          "subtle" = [ "dep:subtle" ];
        };
        resolvedDefaultFeatures = [ "alloc" "encryption" "pem" "pkcs5" "rand_core" "std" ];
      };
      "pkcs8 0.9.0" = rec {
        crateName = "pkcs8";
        version = "0.9.0";
        edition = "2021";
        sha256 = "1fm4sigvcd0zpzg9jcp862a8p272kk08b9lgcs1dm1az19cjrjly";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "der";
            packageId = "der 0.6.1";
            features = [ "oid" ];
          }
          {
            name = "spki";
            packageId = "spki 0.6.0";
          }
        ];
        features = {
          "3des" = [ "encryption" "pkcs5/3des" ];
          "alloc" = [ "der/alloc" "der/zeroize" "spki/alloc" ];
          "des-insecure" = [ "encryption" "pkcs5/des-insecure" ];
          "encryption" = [ "alloc" "pkcs5/alloc" "pkcs5/pbes2" "rand_core" ];
          "getrandom" = [ "rand_core/getrandom" ];
          "pem" = [ "alloc" "der/pem" "spki/pem" ];
          "pkcs5" = [ "dep:pkcs5" ];
          "rand_core" = [ "dep:rand_core" ];
          "sha1" = [ "encryption" "pkcs5/sha1" ];
          "std" = [ "alloc" "der/std" "spki/std" ];
          "subtle" = [ "dep:subtle" ];
        };
        resolvedDefaultFeatures = [ "alloc" "pem" "std" ];
      };
      "pkg-config" = rec {
        crateName = "pkg-config";
        version = "0.3.31";
        edition = "2018";
        sha256 = "1wk6yp2phl91795ia0lwkr3wl4a9xkrympvhqq8cxk4d75hwhglm";
        libName = "pkg_config";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];

      };
      "plotters" = rec {
        crateName = "plotters";
        version = "0.3.7";
        edition = "2018";
        sha256 = "0ixpy9svpmr2rkzkxvvdpysjjky4gw104d73n7pi2jbs7m06zsss";
        authors = [
          "Hao Hou <haohou302@gmail.com>"
        ];
        dependencies = [
          {
            name = "num-traits";
            packageId = "num-traits";
          }
          {
            name = "plotters-backend";
            packageId = "plotters-backend";
          }
          {
            name = "plotters-svg";
            packageId = "plotters-svg";
            optional = true;
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            target = { target, features }: (("wasm32" == target."arch" or null) && (!("wasi" == target."os" or null)));
          }
          {
            name = "web-sys";
            packageId = "web-sys";
            target = { target, features }: (("wasm32" == target."arch" or null) && (!("wasi" == target."os" or null)));
            features = [ "Document" "DomRect" "Element" "HtmlElement" "Node" "Window" "HtmlCanvasElement" "CanvasRenderingContext2d" ];
          }
        ];
        features = {
          "ab_glyph" = [ "dep:ab_glyph" "once_cell" ];
          "all_elements" = [ "errorbar" "candlestick" "boxplot" "histogram" ];
          "all_series" = [ "area_series" "line_series" "point_series" "surface_series" ];
          "bitmap_backend" = [ "plotters-bitmap" ];
          "bitmap_encoder" = [ "plotters-bitmap/image_encoder" ];
          "bitmap_gif" = [ "plotters-bitmap/gif_backend" ];
          "chrono" = [ "dep:chrono" ];
          "datetime" = [ "chrono" ];
          "default" = [ "bitmap_backend" "bitmap_encoder" "bitmap_gif" "svg_backend" "chrono" "ttf" "image" "deprecated_items" "all_series" "all_elements" "full_palette" "colormaps" ];
          "evcxr" = [ "svg_backend" ];
          "evcxr_bitmap" = [ "evcxr" "bitmap_backend" "plotters-svg/bitmap_encoder" ];
          "font-kit" = [ "dep:font-kit" ];
          "fontconfig-dlopen" = [ "font-kit/source-fontconfig-dlopen" ];
          "image" = [ "dep:image" ];
          "lazy_static" = [ "dep:lazy_static" ];
          "once_cell" = [ "dep:once_cell" ];
          "pathfinder_geometry" = [ "dep:pathfinder_geometry" ];
          "plotters-bitmap" = [ "dep:plotters-bitmap" ];
          "plotters-svg" = [ "dep:plotters-svg" ];
          "svg_backend" = [ "plotters-svg" ];
          "ttf" = [ "font-kit" "ttf-parser" "lazy_static" "pathfinder_geometry" ];
          "ttf-parser" = [ "dep:ttf-parser" ];
        };
        resolvedDefaultFeatures = [ "area_series" "line_series" "plotters-svg" "svg_backend" ];
      };
      "plotters-backend" = rec {
        crateName = "plotters-backend";
        version = "0.3.7";
        edition = "2018";
        sha256 = "0ahpliim4hrrf7d4ispc2hwr7rzkn6d6nf7lyyrid2lm28yf2hnz";
        libName = "plotters_backend";
        authors = [
          "Hao Hou <haohou302@gmail.com>"
        ];

      };
      "plotters-svg" = rec {
        crateName = "plotters-svg";
        version = "0.3.7";
        edition = "2018";
        sha256 = "0w56sxaa2crpasa1zj0bhxzihlapqfkncggavyngg0w86anf5fji";
        libName = "plotters_svg";
        authors = [
          "Hao Hou <haohou302@gmail.com>"
        ];
        dependencies = [
          {
            name = "plotters-backend";
            packageId = "plotters-backend";
          }
        ];
        features = {
          "bitmap_encoder" = [ "image" ];
          "image" = [ "dep:image" ];
        };
      };
      "poly1305" = rec {
        crateName = "poly1305";
        version = "0.8.0";
        edition = "2021";
        sha256 = "1grs77skh7d8vi61ji44i8gpzs3r9x7vay50i6cg8baxfa8bsnc1";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "cpufeatures";
            packageId = "cpufeatures";
            target = { target, features }: (("x86_64" == target."arch" or null) || ("x86" == target."arch" or null));
          }
          {
            name = "opaque-debug";
            packageId = "opaque-debug";
          }
          {
            name = "universal-hash";
            packageId = "universal-hash";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "std" = [ "universal-hash/std" ];
          "zeroize" = [ "dep:zeroize" ];
        };
      };
      "polyval" = rec {
        crateName = "polyval";
        version = "0.6.2";
        edition = "2021";
        sha256 = "09gs56vm36ls6pyxgh06gw2875z2x77r8b2km8q28fql0q6yc7wx";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "cpufeatures";
            packageId = "cpufeatures";
            target = { target, features }: (("aarch64" == target."arch" or null) || ("x86_64" == target."arch" or null) || ("x86" == target."arch" or null));
          }
          {
            name = "opaque-debug";
            packageId = "opaque-debug";
          }
          {
            name = "universal-hash";
            packageId = "universal-hash";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "std" = [ "universal-hash/std" ];
          "zeroize" = [ "dep:zeroize" ];
        };
      };
      "portable-atomic" = rec {
        crateName = "portable-atomic";
        version = "1.8.0";
        edition = "2018";
        sha256 = "1ki2pkyjh0f510w6xif6wlg1p5iq9kfxcvy79c1nppjr4pa3h1fk";
        libName = "portable_atomic";
        features = {
          "critical-section" = [ "dep:critical-section" ];
          "default" = [ "fallback" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "default" "fallback" "require-cas" ];
      };
      "powerfmt" = rec {
        crateName = "powerfmt";
        version = "0.2.0";
        edition = "2021";
        sha256 = "14ckj2xdpkhv3h6l5sdmb9f1d57z8hbfpdldjc2vl5givq2y77j3";
        authors = [
          "Jacob Pratt <jacob@jhpratt.dev>"
        ];
        features = {
          "default" = [ "std" "macros" ];
          "macros" = [ "dep:powerfmt-macros" ];
          "std" = [ "alloc" ];
        };
      };
      "pprof" = rec {
        crateName = "pprof";
        version = "0.13.0";
        edition = "2021";
        sha256 = "1jqi6yakwwhln5b1vr3aprgl2kdlvsmidqh24is7wk6k3g2rfp7g";
        authors = [
          "Yang Keao <keao.yang@yahoo.com>"
        ];
        dependencies = [
          {
            name = "backtrace";
            packageId = "backtrace";
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "findshlibs";
            packageId = "findshlibs";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "nix";
            packageId = "nix 0.26.4";
            usesDefaultFeatures = false;
            features = [ "signal" "fs" ];
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "parking_lot";
            packageId = "parking_lot 0.12.3";
          }
          {
            name = "smallvec";
            packageId = "smallvec";
          }
          {
            name = "symbolic-demangle";
            packageId = "symbolic-demangle";
            usesDefaultFeatures = false;
            features = [ "rust" ];
          }
          {
            name = "tempfile";
            packageId = "tempfile";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
        ];
        features = {
          "cpp" = [ "symbolic-demangle/cpp" ];
          "criterion" = [ "dep:criterion" ];
          "default" = [ "cpp" ];
          "flamegraph" = [ "inferno" ];
          "inferno" = [ "dep:inferno" ];
          "prost" = [ "dep:prost" ];
          "prost-build" = [ "dep:prost-build" ];
          "prost-codec" = [ "prost" "prost-derive" "prost-build" "sha2" "_protobuf" ];
          "prost-derive" = [ "dep:prost-derive" ];
          "protobuf" = [ "dep:protobuf" ];
          "protobuf-codec" = [ "protobuf" "protobuf-codegen-pure" "_protobuf" ];
          "protobuf-codegen-pure" = [ "dep:protobuf-codegen-pure" ];
          "sha2" = [ "dep:sha2" ];
        };
        resolvedDefaultFeatures = [ "cpp" "default" "frame-pointer" ];
      };
      "ppv-lite86" = rec {
        crateName = "ppv-lite86";
        version = "0.2.20";
        edition = "2021";
        sha256 = "017ax9ssdnpww7nrl1hvqh2lzncpv04nnsibmnw9nxjnaqlpp5bp";
        libName = "ppv_lite86";
        authors = [
          "The CryptoCorrosion Contributors"
        ];
        dependencies = [
          {
            name = "zerocopy";
            packageId = "zerocopy";
            features = [ "simd" "derive" ];
          }
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "simd" "std" ];
      };
      "pq-sys" = rec {
        crateName = "pq-sys";
        version = "0.6.3";
        edition = "2015";
        links = "pq";
        sha256 = "14w71gm61khqiaraw88qj4j48r6hxplyx5ki263h284mxbbhbk7n";
        libName = "pq_sys";
        buildDependencies = [
          {
            name = "vcpkg";
            packageId = "vcpkg";
            target = {target, features}: ("msvc" == target."env" or null);
          }
        ];
        features = {
          "buildtime_bindgen" = [ "dep:bindgen" ];
          "bundled" = [ "bundled_without_openssl" "pq-src/with-openssl" ];
          "bundled_without_openssl" = [ "dep:pq-src" ];
          "pkg-config" = [ "dep:pkg-config" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "precomputed-hash" = rec {
        crateName = "precomputed-hash";
        version = "0.1.1";
        edition = "2015";
        sha256 = "075k9bfy39jhs53cb2fpb9klfakx2glxnf28zdw08ws6lgpq6lwj";
        libName = "precomputed_hash";
        authors = [
          "Emilio Cobos Álvarez <emilio@crisal.io>"
        ];

      };
      "predicates 2.1.5" = rec {
        crateName = "predicates";
        version = "2.1.5";
        edition = "2021";
        sha256 = "1pdd8zgw8351bvk882zadyqghnxzkjlf946vkdb1hgkzqdihl8sr";
        authors = [
          "Nick Stevens <nick@bitcurry.com>"
        ];
        dependencies = [
          {
            name = "difflib";
            packageId = "difflib";
            optional = true;
          }
          {
            name = "float-cmp";
            packageId = "float-cmp";
            optional = true;
          }
          {
            name = "itertools";
            packageId = "itertools 0.10.5";
          }
          {
            name = "normalize-line-endings";
            packageId = "normalize-line-endings";
            optional = true;
          }
          {
            name = "predicates-core";
            packageId = "predicates-core";
          }
          {
            name = "regex";
            packageId = "regex";
            optional = true;
          }
        ];
        features = {
          "color" = [ "dep:yansi" "dep:concolor" "concolor?/std" ];
          "color-auto" = [ "color" "concolor?/auto" ];
          "default" = [ "diff" "regex" "float-cmp" "normalize-line-endings" ];
          "diff" = [ "dep:difflib" ];
          "float-cmp" = [ "dep:float-cmp" ];
          "normalize-line-endings" = [ "dep:normalize-line-endings" ];
          "regex" = [ "dep:regex" ];
        };
        resolvedDefaultFeatures = [ "default" "diff" "float-cmp" "normalize-line-endings" "regex" ];
      };
      "predicates 3.1.2" = rec {
        crateName = "predicates";
        version = "3.1.2";
        edition = "2021";
        sha256 = "15rcyjax4ykflw5425wsyzcfkgl08c9zsa8sdlsrmhj0fv68d43y";
        authors = [
          "Nick Stevens <nick@bitcurry.com>"
        ];
        dependencies = [
          {
            name = "anstyle";
            packageId = "anstyle";
          }
          {
            name = "difflib";
            packageId = "difflib";
            optional = true;
          }
          {
            name = "predicates-core";
            packageId = "predicates-core";
          }
        ];
        features = {
          "default" = [ "diff" "regex" "float-cmp" "normalize-line-endings" "color" ];
          "diff" = [ "dep:difflib" ];
          "float-cmp" = [ "dep:float-cmp" ];
          "normalize-line-endings" = [ "dep:normalize-line-endings" ];
          "regex" = [ "dep:regex" ];
        };
        resolvedDefaultFeatures = [ "diff" ];
      };
      "predicates-core" = rec {
        crateName = "predicates-core";
        version = "1.0.8";
        edition = "2021";
        sha256 = "0c8rl6d7qkcl773fw539h61fhlgdg7v9yswwb536hpg7x2z7g0df";
        libName = "predicates_core";
        authors = [
          "Nick Stevens <nick@bitcurry.com>"
        ];

      };
      "predicates-tree" = rec {
        crateName = "predicates-tree";
        version = "1.0.11";
        edition = "2021";
        sha256 = "04zv0i9pjfrldnvyxf4y07n243nvk3n4g03w2k6nccgdjp8l1ds1";
        libName = "predicates_tree";
        authors = [
          "Nick Stevens <nick@bitcurry.com>"
        ];
        dependencies = [
          {
            name = "predicates-core";
            packageId = "predicates-core";
          }
          {
            name = "termtree";
            packageId = "termtree";
          }
        ];

      };
      "prefix-hex" = rec {
        crateName = "prefix-hex";
        version = "0.7.1";
        edition = "2021";
        sha256 = "0jf226rjis37gchjxnyr8rfd68pk7xnl9v2ig6axc6ipk3rrj5qz";
        libName = "prefix_hex";
        authors = [
          "IOTA Stiftung"
        ];
        dependencies = [
          {
            name = "hex";
            packageId = "hex";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "primitive-types";
            packageId = "primitive-types 0.12.2";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "uint";
            packageId = "uint";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "primitive-types" = [ "dep:primitive-types" "dep:uint" ];
        };
        resolvedDefaultFeatures = [ "primitive-types" "std" ];
      };
      "pretty_assertions" = rec {
        crateName = "pretty_assertions";
        version = "1.4.1";
        edition = "2018";
        sha256 = "0v8iq35ca4rw3rza5is3wjxwsf88303ivys07anc5yviybi31q9s";
        authors = [
          "Colin Kiegel <kiegel@gmx.de>"
          "Florent Fayolle <florent.fayolle69@gmail.com>"
          "Tom Milligan <code@tommilligan.net>"
        ];
        dependencies = [
          {
            name = "diff";
            packageId = "diff";
          }
          {
            name = "yansi";
            packageId = "yansi 1.0.1";
          }
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "prettyplease" = rec {
        crateName = "prettyplease";
        version = "0.2.22";
        edition = "2021";
        links = "prettyplease02";
        sha256 = "1fpsyn4x1scbp8ik8xw4pfh4jxfm5bv7clax5k1jcd5vzd0gk727";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.86";
            usesDefaultFeatures = false;
          }
          {
            name = "syn";
            packageId = "syn 2.0.77";
            usesDefaultFeatures = false;
            features = [ "full" ];
          }
        ];
        devDependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.86";
            usesDefaultFeatures = false;
          }
          {
            name = "syn";
            packageId = "syn 2.0.77";
            usesDefaultFeatures = false;
            features = [ "parsing" ];
          }
        ];
        features = {
          "verbatim" = [ "syn/parsing" ];
        };
        resolvedDefaultFeatures = [ "verbatim" ];
      };
      "prettytable-rs" = rec {
        crateName = "prettytable-rs";
        version = "0.10.0";
        edition = "2018";
        crateBin = [];
        sha256 = "0nnryfnahfwy0yxhv4nsp1id25k00cybx3ih8xjsp9haa43mx8pf";
        libName = "prettytable";
        authors = [
          "Pierre-Henri Symoneaux"
        ];
        dependencies = [
          {
            name = "csv";
            packageId = "csv";
            optional = true;
          }
          {
            name = "encode_unicode";
            packageId = "encode_unicode 1.0.0";
          }
          {
            name = "is-terminal";
            packageId = "is-terminal";
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "term";
            packageId = "term";
          }
          {
            name = "unicode-width";
            packageId = "unicode-width";
          }
        ];
        features = {
          "csv" = [ "dep:csv" ];
          "default" = [ "win_crlf" "csv" ];
        };
        resolvedDefaultFeatures = [ "csv" "default" "win_crlf" ];
      };
      "primeorder" = rec {
        crateName = "primeorder";
        version = "0.13.6";
        edition = "2021";
        sha256 = "1rp16710mxksagcjnxqjjq9r9wf5vf72fs8wxffnvhb6i6hiqgim";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "elliptic-curve";
            packageId = "elliptic-curve 0.13.8";
            usesDefaultFeatures = false;
            features = [ "arithmetic" "sec1" ];
          }
        ];
        features = {
          "alloc" = [ "elliptic-curve/alloc" ];
          "serde" = [ "elliptic-curve/serde" "serdect" ];
          "serdect" = [ "dep:serdect" ];
          "std" = [ "alloc" "elliptic-curve/std" ];
        };
      };
      "primitive-types 0.10.1" = rec {
        crateName = "primitive-types";
        version = "0.10.1";
        edition = "2018";
        sha256 = "0wr3yhpc59m5xbhqs69j8qm0hz0xh8q8r806bnfsjn3sd4n75r05";
        libName = "primitive_types";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "fixed-hash";
            packageId = "fixed-hash 0.7.0";
            usesDefaultFeatures = false;
          }
          {
            name = "impl-codec";
            packageId = "impl-codec 0.5.1";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "impl-serde";
            packageId = "impl-serde 0.3.2";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "uint";
            packageId = "uint";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "arbitrary" = [ "fixed-hash/arbitrary" "uint/arbitrary" ];
          "byteorder" = [ "fixed-hash/byteorder" ];
          "codec" = [ "impl-codec" ];
          "default" = [ "std" ];
          "fp-conversion" = [ "std" ];
          "impl-codec" = [ "dep:impl-codec" ];
          "impl-num-traits" = [ "dep:impl-num-traits" ];
          "impl-rlp" = [ "dep:impl-rlp" ];
          "impl-serde" = [ "dep:impl-serde" ];
          "num-traits" = [ "impl-num-traits" ];
          "rlp" = [ "impl-rlp" ];
          "rustc-hex" = [ "fixed-hash/rustc-hex" ];
          "scale-info" = [ "codec" "scale-info-crate" ];
          "scale-info-crate" = [ "dep:scale-info-crate" ];
          "serde" = [ "std" "impl-serde" "impl-serde/std" ];
          "serde_no_std" = [ "impl-serde" ];
          "std" = [ "uint/std" "fixed-hash/std" "impl-codec/std" ];
        };
        resolvedDefaultFeatures = [ "default" "impl-codec" "impl-serde" "std" ];
      };
      "primitive-types 0.12.2" = rec {
        crateName = "primitive-types";
        version = "0.12.2";
        edition = "2021";
        sha256 = "1qj4w8vhn52c7f4ywkh4xbzs0yl4c8pkrh113fj782xfd3yxjd0b";
        libName = "primitive_types";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "fixed-hash";
            packageId = "fixed-hash 0.8.0";
            usesDefaultFeatures = false;
          }
          {
            name = "impl-codec";
            packageId = "impl-codec 0.6.0";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "impl-rlp";
            packageId = "impl-rlp";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "impl-serde";
            packageId = "impl-serde 0.4.0";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "scale-info";
            packageId = "scale-info";
            rename = "scale-info-crate";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "uint";
            packageId = "uint";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "arbitrary" = [ "fixed-hash/arbitrary" "uint/arbitrary" ];
          "byteorder" = [ "fixed-hash/byteorder" ];
          "codec" = [ "impl-codec" ];
          "default" = [ "std" ];
          "fp-conversion" = [ "std" ];
          "impl-codec" = [ "dep:impl-codec" ];
          "impl-num-traits" = [ "dep:impl-num-traits" ];
          "impl-rlp" = [ "dep:impl-rlp" ];
          "impl-serde" = [ "dep:impl-serde" ];
          "json-schema" = [ "dep:schemars" ];
          "num-traits" = [ "impl-num-traits" ];
          "rlp" = [ "impl-rlp" ];
          "rustc-hex" = [ "fixed-hash/rustc-hex" ];
          "scale-info" = [ "codec" "scale-info-crate" ];
          "scale-info-crate" = [ "dep:scale-info-crate" ];
          "serde" = [ "std" "impl-serde" "impl-serde/std" ];
          "serde_no_std" = [ "impl-serde" ];
          "std" = [ "uint/std" "fixed-hash/std" "impl-codec?/std" ];
        };
        resolvedDefaultFeatures = [ "byteorder" "codec" "impl-codec" "impl-rlp" "impl-serde" "rlp" "rustc-hex" "scale-info" "scale-info-crate" "serde_no_std" "std" ];
      };
      "proc-macro-crate 1.3.1" = rec {
        crateName = "proc-macro-crate";
        version = "1.3.1";
        edition = "2021";
        sha256 = "069r1k56bvgk0f58dm5swlssfcp79im230affwk6d9ck20g04k3z";
        libName = "proc_macro_crate";
        authors = [
          "Bastian Köcher <git@kchr.de>"
        ];
        dependencies = [
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "toml_edit";
            packageId = "toml_edit 0.19.15";
          }
        ];

      };
      "proc-macro-crate 3.2.0" = rec {
        crateName = "proc-macro-crate";
        version = "3.2.0";
        edition = "2021";
        sha256 = "0yzsqnavb3lmrcsmbrdjfrky9vcbl46v59xi9avn0796rb3likwf";
        libName = "proc_macro_crate";
        authors = [
          "Bastian Köcher <git@kchr.de>"
        ];
        dependencies = [
          {
            name = "toml_edit";
            packageId = "toml_edit 0.22.22";
          }
        ];

      };
      "proc-macro-error" = rec {
        crateName = "proc-macro-error";
        version = "1.0.4";
        edition = "2018";
        sha256 = "1373bhxaf0pagd8zkyd03kkx6bchzf6g0dkwrwzsnal9z47lj9fs";
        libName = "proc_macro_error";
        authors = [
          "CreepySkeleton <creepy-skeleton@yandex.ru>"
        ];
        dependencies = [
          {
            name = "proc-macro-error-attr";
            packageId = "proc-macro-error-attr";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.86";
          }
          {
            name = "quote";
            packageId = "quote 1.0.37";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "version_check";
            packageId = "version_check";
          }
        ];
        features = {
          "default" = [ "syn-error" ];
          "syn" = [ "dep:syn" ];
          "syn-error" = [ "syn" ];
        };
        resolvedDefaultFeatures = [ "default" "syn" "syn-error" ];
      };
      "proc-macro-error-attr" = rec {
        crateName = "proc-macro-error-attr";
        version = "1.0.4";
        edition = "2018";
        sha256 = "0sgq6m5jfmasmwwy8x4mjygx5l7kp8s4j60bv25ckv2j1qc41gm1";
        procMacro = true;
        libName = "proc_macro_error_attr";
        authors = [
          "CreepySkeleton <creepy-skeleton@yandex.ru>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.86";
          }
          {
            name = "quote";
            packageId = "quote 1.0.37";
          }
        ];
        buildDependencies = [
          {
            name = "version_check";
            packageId = "version_check";
          }
        ];

      };
      "proc-macro-error-attr2" = rec {
        crateName = "proc-macro-error-attr2";
        version = "2.0.0";
        edition = "2021";
        sha256 = "1ifzi763l7swl258d8ar4wbpxj4c9c2im7zy89avm6xv6vgl5pln";
        procMacro = true;
        libName = "proc_macro_error_attr2";
        authors = [
          "CreepySkeleton <creepy-skeleton@yandex.ru>"
          "GnomedDev <david2005thomas@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.86";
          }
          {
            name = "quote";
            packageId = "quote 1.0.37";
          }
        ];

      };
      "proc-macro-error2" = rec {
        crateName = "proc-macro-error2";
        version = "2.0.1";
        edition = "2021";
        sha256 = "00lq21vgh7mvyx51nwxwf822w2fpww1x0z8z0q47p8705g2hbv0i";
        libName = "proc_macro_error2";
        authors = [
          "CreepySkeleton <creepy-skeleton@yandex.ru>"
          "GnomedDev <david2005thomas@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro-error-attr2";
            packageId = "proc-macro-error-attr2";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.86";
          }
          {
            name = "quote";
            packageId = "quote 1.0.37";
          }
          {
            name = "syn";
            packageId = "syn 2.0.77";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "syn";
            packageId = "syn 2.0.77";
            features = [ "full" ];
          }
        ];
        features = {
          "default" = [ "syn-error" ];
          "syn-error" = [ "dep:syn" ];
        };
        resolvedDefaultFeatures = [ "default" "syn-error" ];
      };
      "proc-macro2 0.4.30" = rec {
        crateName = "proc-macro2";
        version = "0.4.30";
        edition = "2015";
        sha256 = "0nd71fl24sys066jrha6j7i34nfkjv44yzw8yww9742wmc8j0gfg";
        libName = "proc_macro2";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "unicode-xid";
            packageId = "unicode-xid 0.1.0";
          }
        ];
        features = {
          "default" = [ "proc-macro" ];
        };
        resolvedDefaultFeatures = [ "default" "proc-macro" ];
      };
      "proc-macro2 1.0.86" = rec {
        crateName = "proc-macro2";
        version = "1.0.86";
        edition = "2021";
        sha256 = "0xrv22p8lqlfdf1w0pj4si8n2ws4aw0kilmziwf0vpv5ys6rwway";
        libName = "proc_macro2";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "unicode-ident";
            packageId = "unicode-ident";
          }
        ];
        features = {
          "default" = [ "proc-macro" ];
        };
        resolvedDefaultFeatures = [ "default" "proc-macro" "span-locations" ];
      };
      "proc-macro2-diagnostics" = rec {
        crateName = "proc-macro2-diagnostics";
        version = "0.10.1";
        edition = "2018";
        sha256 = "1j48ipc80pykvhx6yhndfa774s58ax1h6sm6mlhf09ls76f6l1mg";
        libName = "proc_macro2_diagnostics";
        authors = [
          "Sergio Benitez <sb@sergio.bz>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.86";
          }
          {
            name = "quote";
            packageId = "quote 1.0.37";
          }
          {
            name = "syn";
            packageId = "syn 2.0.77";
          }
          {
            name = "yansi";
            packageId = "yansi 1.0.1";
            optional = true;
          }
        ];
        buildDependencies = [
          {
            name = "version_check";
            packageId = "version_check";
          }
        ];
        features = {
          "colors" = [ "yansi" ];
          "default" = [ "colors" ];
          "yansi" = [ "dep:yansi" ];
        };
        resolvedDefaultFeatures = [ "colors" "default" "yansi" ];
      };
      "prometheus" = rec {
        crateName = "prometheus";
        version = "0.13.4";
        edition = "2018";
        sha256 = "1lbymqdsh9v4zk4fjdq2gq6lbxspp1w3z2b9vfb7y7vp625c4crx";
        authors = [
          "overvenus@gmail.com"
          "siddontang@gmail.com"
          "vistaswx@gmail.com"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "fnv";
            packageId = "fnv";
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "memchr";
            packageId = "memchr";
          }
          {
            name = "parking_lot";
            packageId = "parking_lot 0.12.3";
          }
          {
            name = "protobuf";
            packageId = "protobuf";
            optional = true;
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
        ];
        features = {
          "default" = [ "protobuf" ];
          "gen" = [ "protobuf-codegen-pure" ];
          "libc" = [ "dep:libc" ];
          "nightly" = [ "libc" ];
          "process" = [ "libc" "procfs" ];
          "procfs" = [ "dep:procfs" ];
          "protobuf" = [ "dep:protobuf" ];
          "protobuf-codegen-pure" = [ "dep:protobuf-codegen-pure" ];
          "push" = [ "reqwest" "libc" "protobuf" ];
          "reqwest" = [ "dep:reqwest" ];
        };
        resolvedDefaultFeatures = [ "default" "protobuf" ];
      };
      "prometheus-closure-metric" = rec {
        crateName = "prometheus-closure-metric";
        version = "0.5.0-alpha";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/prometheus-closure-metric; }
          else ./crates/prometheus-closure-metric;
        libName = "prometheus_closure_metric";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "prometheus";
            packageId = "prometheus";
          }
          {
            name = "protobuf";
            packageId = "protobuf";
            features = [ "with-bytes" ];
          }
        ];

      };
      "prometheus-http-query" = rec {
        crateName = "prometheus-http-query";
        version = "0.8.3";
        edition = "2021";
        sha256 = "1nybch7vvia8iy228b6849iy70a9s8vnncbq0wi53bh3kylvzkhg";
        libName = "prometheus_http_query";
        authors = [
          "Peter Sebastian Puetz <ppuetz@protonmail.com>"
        ];
        dependencies = [
          {
            name = "enum-as-inner";
            packageId = "enum-as-inner";
          }
          {
            name = "mime";
            packageId = "mime";
          }
          {
            name = "reqwest";
            packageId = "reqwest 0.12.7";
            usesDefaultFeatures = false;
            features = [ "json" ];
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "time";
            packageId = "time";
            features = [ "parsing" "macros" "serde" ];
          }
          {
            name = "url";
            packageId = "url";
            features = [ "serde" ];
          }
        ];
        features = {
          "default" = [ "reqwest/default-tls" ];
          "default-tls" = [ "reqwest/default-tls" ];
          "native-tls" = [ "reqwest/native-tls" ];
          "native-tls-alpn" = [ "reqwest/native-tls-alpn" ];
          "native-tls-vendored" = [ "reqwest/native-tls-vendored" ];
          "rustls-tls" = [ "reqwest/rustls-tls" ];
          "rustls-tls-manual-roots" = [ "reqwest/rustls-tls-manual-roots" ];
          "rustls-tls-native-roots" = [ "reqwest/rustls-tls-native-roots" ];
          "rustls-tls-webpki-roots" = [ "reqwest/rustls-tls-webpki-roots" ];
        };
        resolvedDefaultFeatures = [ "rustls-tls" ];
      };
      "prometheus-parse" = rec {
        crateName = "prometheus-parse";
        version = "0.2.5";
        edition = "2018";
        sha256 = "19bq7g8m54qqlc4khimc0ki02rna5j07vwz1n8gl0njylsz32441";
        libName = "prometheus_parse";
        authors = [
          "Cameron Daniel <cam.daniel@gmail.com>"
        ];
        dependencies = [
          {
            name = "chrono";
            packageId = "chrono";
            usesDefaultFeatures = false;
            features = [ "clock" ];
          }
          {
            name = "itertools";
            packageId = "itertools 0.12.1";
            usesDefaultFeatures = false;
          }
          {
            name = "once_cell";
            packageId = "once_cell";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "regex";
            packageId = "regex";
            usesDefaultFeatures = false;
            features = [ "std" "perf" "unicode" ];
          }
        ];

      };
      "proptest" = rec {
        crateName = "proptest";
        version = "1.5.0";
        edition = "2018";
        sha256 = "13gm7mphs95cw4gbgk5qiczkmr68dvcwhp58gmiz33dq2ccm3hml";
        authors = [
          "Jason Lingle"
        ];
        dependencies = [
          {
            name = "bit-set";
            packageId = "bit-set";
            optional = true;
          }
          {
            name = "bit-vec";
            packageId = "bit-vec";
            optional = true;
          }
          {
            name = "bitflags";
            packageId = "bitflags 2.6.0";
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
            optional = true;
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
            features = [ "libm" ];
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "rand_chacha";
            packageId = "rand_chacha 0.3.1";
            usesDefaultFeatures = false;
          }
          {
            name = "rand_xorshift";
            packageId = "rand_xorshift";
          }
          {
            name = "regex-syntax";
            packageId = "regex-syntax 0.8.4";
            optional = true;
          }
          {
            name = "rusty-fork";
            packageId = "rusty-fork";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "tempfile";
            packageId = "tempfile";
            optional = true;
          }
          {
            name = "unarray";
            packageId = "unarray";
          }
        ];
        features = {
          "attr-macro" = [ "proptest-macro" ];
          "bit-set" = [ "dep:bit-set" "dep:bit-vec" ];
          "default" = [ "std" "fork" "timeout" "bit-set" ];
          "default-code-coverage" = [ "std" "fork" "timeout" "bit-set" ];
          "fork" = [ "std" "rusty-fork" "tempfile" ];
          "hardware-rng" = [ "x86" ];
          "lazy_static" = [ "dep:lazy_static" ];
          "proptest-macro" = [ "dep:proptest-macro" ];
          "regex-syntax" = [ "dep:regex-syntax" ];
          "rusty-fork" = [ "dep:rusty-fork" ];
          "std" = [ "rand/std" "lazy_static" "regex-syntax" "num-traits/std" ];
          "tempfile" = [ "dep:tempfile" ];
          "timeout" = [ "fork" "rusty-fork/timeout" ];
          "x86" = [ "dep:x86" ];
        };
        resolvedDefaultFeatures = [ "alloc" "bit-set" "default" "fork" "lazy_static" "regex-syntax" "rusty-fork" "std" "tempfile" "timeout" ];
      };
      "proptest-derive" = rec {
        crateName = "proptest-derive";
        version = "0.3.0";
        edition = "2018";
        sha256 = "1p4x6k1zxq9lrpk46npdnzj6894mjx5bpwkwrdk63ird72an5d4h";
        procMacro = true;
        libName = "proptest_derive";
        authors = [
          "Mazdak Farrokhzad <twingoow@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2 0.4.30";
          }
          {
            name = "quote";
            packageId = "quote 0.6.13";
          }
          {
            name = "syn";
            packageId = "syn 0.15.44";
            features = [ "visit" "extra-traits" "full" ];
          }
        ];

      };
      "prost" = rec {
        crateName = "prost";
        version = "0.13.3";
        edition = "2021";
        sha256 = "0gx1kbvgnws59ggv1mda15bc00f6hlxp24s9k1zyhz841vcqf13v";
        authors = [
          "Dan Burkert <dan@danburkert.com>"
          "Lucio Franco <luciofranco14@gmail.com>"
          "Casper Meijn <casper@meijn.net>"
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
            usesDefaultFeatures = false;
          }
          {
            name = "prost-derive";
            packageId = "prost-derive";
            optional = true;
          }
        ];
        features = {
          "default" = [ "derive" "std" ];
          "derive" = [ "dep:prost-derive" ];
          "prost-derive" = [ "derive" ];
        };
        resolvedDefaultFeatures = [ "default" "derive" "prost-derive" "std" ];
      };
      "prost-build" = rec {
        crateName = "prost-build";
        version = "0.13.3";
        edition = "2021";
        sha256 = "05dyk9fzyl05p2chjb88kj7qbxxvadc469k9060qdw45j2qih4qc";
        libName = "prost_build";
        authors = [
          "Dan Burkert <dan@danburkert.com>"
          "Lucio Franco <luciofranco14@gmail.com>"
          "Casper Meijn <casper@meijn.net>"
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
            usesDefaultFeatures = false;
          }
          {
            name = "heck";
            packageId = "heck 0.5.0";
          }
          {
            name = "itertools";
            packageId = "itertools 0.10.5";
            usesDefaultFeatures = false;
            features = [ "use_alloc" ];
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "multimap";
            packageId = "multimap";
            usesDefaultFeatures = false;
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "petgraph";
            packageId = "petgraph 0.6.5";
            usesDefaultFeatures = false;
          }
          {
            name = "prettyplease";
            packageId = "prettyplease";
            optional = true;
          }
          {
            name = "prost";
            packageId = "prost";
            usesDefaultFeatures = false;
          }
          {
            name = "prost-types";
            packageId = "prost-types";
            usesDefaultFeatures = false;
          }
          {
            name = "regex";
            packageId = "regex";
            usesDefaultFeatures = false;
            features = [ "std" "unicode-bool" ];
          }
          {
            name = "syn";
            packageId = "syn 2.0.77";
            optional = true;
            features = [ "full" ];
          }
          {
            name = "tempfile";
            packageId = "tempfile";
          }
        ];
        features = {
          "cleanup-markdown" = [ "dep:pulldown-cmark" "dep:pulldown-cmark-to-cmark" ];
          "default" = [ "format" ];
          "format" = [ "dep:prettyplease" "dep:syn" ];
        };
        resolvedDefaultFeatures = [ "default" "format" ];
      };
      "prost-derive" = rec {
        crateName = "prost-derive";
        version = "0.13.3";
        edition = "2021";
        sha256 = "1i9wh2q5rly0lwsmxq5svwyk4adcb5j31gyhwjj682az1n2jymg9";
        procMacro = true;
        libName = "prost_derive";
        authors = [
          "Dan Burkert <dan@danburkert.com>"
          "Lucio Franco <luciofranco14@gmail.com>"
          "Casper Meijn <casper@meijn.net>"
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "itertools";
            packageId = "itertools 0.10.5";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.86";
          }
          {
            name = "quote";
            packageId = "quote 1.0.37";
          }
          {
            name = "syn";
            packageId = "syn 2.0.77";
            features = [ "extra-traits" ];
          }
        ];

      };
      "prost-types" = rec {
        crateName = "prost-types";
        version = "0.13.3";
        edition = "2021";
        sha256 = "0w6n122pi7fsfvnwfcm9mil7q1105kg62yxrpn6znck2786slna7";
        libName = "prost_types";
        authors = [
          "Dan Burkert <dan@danburkert.com>"
          "Lucio Franco <luciofranco14@gmail.com>"
          "Casper Meijn <casper@meijn.net>"
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "prost";
            packageId = "prost";
            usesDefaultFeatures = false;
            features = [ "prost-derive" ];
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "prost/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "protobuf" = rec {
        crateName = "protobuf";
        version = "2.28.0";
        edition = "2018";
        sha256 = "154dfzjvxlpx37ha3cmp7fkhcsnyzbnfv7aisvz34x23k2gdjv8h";
        authors = [
          "Stepan Koltsov <stepan.koltsov@gmail.com>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
            optional = true;
          }
        ];
        features = {
          "bytes" = [ "dep:bytes" ];
          "serde" = [ "dep:serde" ];
          "serde_derive" = [ "dep:serde_derive" ];
          "with-bytes" = [ "bytes" ];
          "with-serde" = [ "serde" "serde_derive" ];
        };
        resolvedDefaultFeatures = [ "bytes" "with-bytes" ];
      };
      "psm" = rec {
        crateName = "psm";
        version = "0.1.23";
        edition = "2015";
        sha256 = "01gj25ma73zv0iy3z5bxg49zr299i9d53sgs6dh9f146ll6ghdxa";
        authors = [
          "Simonas Kazlauskas <psm@kazlauskas.me>"
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
          }
        ];

      };
      "public-suffix" = rec {
        crateName = "public-suffix";
        version = "0.1.2";
        edition = "2021";
        sha256 = "1i4vrahrfjl3ml82vk3gxxl4s76gcxhkwwbx9r8w2parpi9rb9b8";
        libName = "public_suffix";
        authors = [
          "1Password"
        ];
        features = {
          "default" = [ "default_provider" ];
        };
        resolvedDefaultFeatures = [ "default" "default_provider" ];
      };
      "quanta" = rec {
        crateName = "quanta";
        version = "0.12.3";
        edition = "2021";
        sha256 = "19cds3yg3ri0wrypn7b3j2x8qf1w9rkw5yl4nah2i4k1fyj6flcf";
        authors = [
          "Toby Lawrence <toby@nuclearfurnace.com>"
        ];
        dependencies = [
          {
            name = "crossbeam-utils";
            packageId = "crossbeam-utils";
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (!(("windows" == target."os" or null) || ("wasm32" == target."arch" or null)));
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "raw-cpuid";
            packageId = "raw-cpuid";
            target = { target, features }: ("x86" == target."arch" or null);
          }
          {
            name = "raw-cpuid";
            packageId = "raw-cpuid";
            target = { target, features }: ("x86_64" == target."arch" or null);
          }
          {
            name = "wasi";
            packageId = "wasi 0.11.0+wasi-snapshot-preview1";
            target = { target, features }: (("wasm32" == target."arch" or null) && ("wasi" == target."os" or null));
          }
          {
            name = "web-sys";
            packageId = "web-sys";
            target = { target, features }: (("wasm32" == target."arch" or null) && ("unknown" == target."os" or null));
            features = [ "Window" "Performance" ];
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: ("windows" == target."os" or null);
            features = [ "profileapi" ];
          }
        ];
        features = {
          "default" = [ "flaky_tests" ];
          "prost" = [ "prost-types" ];
          "prost-types" = [ "dep:prost-types" ];
        };
        resolvedDefaultFeatures = [ "default" "flaky_tests" ];
      };
      "quick-error" = rec {
        crateName = "quick-error";
        version = "1.2.3";
        edition = "2015";
        sha256 = "1q6za3v78hsspisc197bg3g7rpc989qycy8ypr8ap8igv10ikl51";
        libName = "quick_error";
        authors = [
          "Paul Colomiets <paul@colomiets.name>"
          "Colin Kiegel <kiegel@gmx.de>"
        ];

      };
      "quick-xml" = rec {
        crateName = "quick-xml";
        version = "0.36.2";
        edition = "2021";
        sha256 = "1zj3sjcjk6sn544wb2wvhr1km5f9cy664vzclygfsnph9mxrlr7p";
        libName = "quick_xml";
        dependencies = [
          {
            name = "memchr";
            packageId = "memchr";
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "async-tokio" = [ "tokio" ];
          "document-features" = [ "dep:document-features" ];
          "encoding" = [ "encoding_rs" ];
          "encoding_rs" = [ "dep:encoding_rs" ];
          "serde" = [ "dep:serde" ];
          "serde-types" = [ "serde/derive" ];
          "serialize" = [ "serde" ];
          "tokio" = [ "dep:tokio" ];
        };
        resolvedDefaultFeatures = [ "default" "overlapped-lists" "serde" "serialize" ];
      };
      "quinn" = rec {
        crateName = "quinn";
        version = "0.11.5";
        edition = "2021";
        sha256 = "1146h9wkn5bb8l1mllnw7s1hkvg0iykg1i3x881p5bndwgfmyz4c";
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "futures-io";
            packageId = "futures-io";
            optional = true;
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "quinn-proto";
            packageId = "quinn-proto";
            rename = "proto";
            usesDefaultFeatures = false;
          }
          {
            name = "quinn-udp";
            packageId = "quinn-udp";
            rename = "udp";
            usesDefaultFeatures = false;
            features = [ "tracing" ];
          }
          {
            name = "rustc-hash";
            packageId = "rustc-hash 2.0.0";
          }
          {
            name = "rustls";
            packageId = "rustls 0.23.13";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "ring" "std" ];
          }
          {
            name = "socket2";
            packageId = "socket2";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "sync" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "sync" "rt" "rt-multi-thread" "time" "macros" ];
          }
        ];
        features = {
          "async-io" = [ "dep:async-io" ];
          "async-std" = [ "dep:async-std" ];
          "default" = [ "log" "platform-verifier" "ring" "runtime-tokio" "rustls" ];
          "futures-io" = [ "dep:futures-io" ];
          "log" = [ "tracing/log" "proto/log" "udp/log" ];
          "platform-verifier" = [ "proto/platform-verifier" ];
          "ring" = [ "proto/ring" ];
          "runtime-async-std" = [ "async-io" "async-std" ];
          "runtime-smol" = [ "async-io" "smol" ];
          "runtime-tokio" = [ "tokio/time" "tokio/rt" "tokio/net" ];
          "rustls" = [ "dep:rustls" "proto/rustls" "proto/ring" ];
          "smol" = [ "dep:smol" ];
        };
        resolvedDefaultFeatures = [ "futures-io" "ring" "runtime-tokio" "rustls" ];
      };
      "quinn-proto" = rec {
        crateName = "quinn-proto";
        version = "0.11.8";
        edition = "2021";
        sha256 = "19m4219ybsma7kkz79j721lzhy3vgfqfwwxvc40rsf3zrp9axpzs";
        libName = "quinn_proto";
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "ring";
            packageId = "ring 0.17.8";
            optional = true;
          }
          {
            name = "rustc-hash";
            packageId = "rustc-hash 2.0.0";
          }
          {
            name = "rustls";
            packageId = "rustls 0.23.13";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "ring" "std" ];
          }
          {
            name = "slab";
            packageId = "slab";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "tinyvec";
            packageId = "tinyvec";
            features = [ "alloc" "alloc" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "default" = [ "rustls" "log" ];
          "log" = [ "tracing/log" ];
          "platform-verifier" = [ "dep:rustls-platform-verifier" ];
          "ring" = [ "dep:ring" ];
          "rustls" = [ "dep:rustls" "ring" ];
        };
        resolvedDefaultFeatures = [ "default" "log" "ring" "rustls" ];
      };
      "quinn-udp" = rec {
        crateName = "quinn-udp";
        version = "0.5.5";
        edition = "2021";
        sha256 = "02qlqjsbmfgwin9jpb652d0hkjyzz7wvsgb833i384hskqp8rrjg";
        libName = "quinn_udp";
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "socket2";
            packageId = "socket2";
          }
          {
            name = "tracing";
            packageId = "tracing";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.59.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_Foundation" "Win32_System_IO" "Win32_Networking_WinSock" ];
          }
        ];
        features = {
          "default" = [ "tracing" "log" ];
          "direct-log" = [ "dep:log" ];
          "log" = [ "tracing/log" ];
          "tracing" = [ "dep:tracing" ];
        };
        resolvedDefaultFeatures = [ "tracing" ];
      };
      "quote 0.6.13" = rec {
        crateName = "quote";
        version = "0.6.13";
        edition = "2015";
        sha256 = "1qgqq48jymp5h4y082aanf25hrw6bpb678xh3zw993qfhxmkpqkc";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2 0.4.30";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "proc-macro" ];
          "proc-macro" = [ "proc-macro2/proc-macro" ];
        };
        resolvedDefaultFeatures = [ "default" "proc-macro" ];
      };
      "quote 1.0.37" = rec {
        crateName = "quote";
        version = "1.0.37";
        edition = "2018";
        sha256 = "1brklraw2g34bxy9y4q1nbrccn7bv36ylihv12c9vlcii55x7fdm";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.86";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "proc-macro" ];
          "proc-macro" = [ "proc-macro2/proc-macro" ];
        };
        resolvedDefaultFeatures = [ "default" "proc-macro" ];
      };
      "r2d2" = rec {
        crateName = "r2d2";
        version = "0.8.10";
        edition = "2018";
        sha256 = "14qw32y4m564xb1f5ya8ii7dwqyknvk8bsx2r0lljlmn7zxqbpji";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
        ];
        dependencies = [
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "parking_lot";
            packageId = "parking_lot 0.12.3";
          }
          {
            name = "scheduled-thread-pool";
            packageId = "scheduled-thread-pool";
          }
        ];

      };
      "radium 0.6.2" = rec {
        crateName = "radium";
        version = "0.6.2";
        edition = "2018";
        sha256 = "1ys4bpp2l701ghdniz90zhkvb5ykmfw2pj0m8pfcbi7bm10qygv4";
        authors = [
          "Nika Layzell <nika@thelayzells.com>"
          "myrrlyn <self@myrrlyn.dev>"
        ];

      };
      "radium 0.7.0" = rec {
        crateName = "radium";
        version = "0.7.0";
        edition = "2018";
        sha256 = "02cxfi3ky3c4yhyqx9axqwhyaca804ws46nn4gc1imbk94nzycyw";
        authors = [
          "Nika Layzell <nika@thelayzells.com>"
          "myrrlyn <self@myrrlyn.dev>"
        ];

      };
      "radix_trie" = rec {
        crateName = "radix_trie";
        version = "0.2.1";
        edition = "2018";
        sha256 = "1zaq3im5ss03w91ij11cj97vvzc5y1f3064d9pi2ysnwziww2sf0";
        authors = [
          "Michael Sproul <micsproul@gmail.com>"
        ];
        dependencies = [
          {
            name = "endian-type";
            packageId = "endian-type";
          }
          {
            name = "nibble_vec";
            packageId = "nibble_vec";
          }
        ];
        features = {
          "serde" = [ "dep:serde" ];
        };
      };
      "rand 0.7.3" = rec {
        crateName = "rand";
        version = "0.7.3";
        edition = "2018";
        sha256 = "00sdaimkbz491qgi6qxkv582yivl32m2jd401kzbn94vsiwicsva";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "getrandom";
            packageId = "getrandom 0.1.16";
            rename = "getrandom_package";
            optional = true;
          }
          {
            name = "libc";
            packageId = "libc";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "rand_chacha";
            packageId = "rand_chacha 0.2.2";
            usesDefaultFeatures = false;
            target = { target, features }: (!("emscripten" == target."os" or null));
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.5.1";
          }
          {
            name = "rand_hc";
            packageId = "rand_hc";
            target = { target, features }: ("emscripten" == target."os" or null);
          }
        ];
        devDependencies = [
          {
            name = "rand_hc";
            packageId = "rand_hc";
          }
        ];
        features = {
          "alloc" = [ "rand_core/alloc" ];
          "default" = [ "std" ];
          "getrandom" = [ "getrandom_package" "rand_core/getrandom" ];
          "getrandom_package" = [ "dep:getrandom_package" ];
          "libc" = [ "dep:libc" ];
          "log" = [ "dep:log" ];
          "nightly" = [ "simd_support" ];
          "packed_simd" = [ "dep:packed_simd" ];
          "rand_pcg" = [ "dep:rand_pcg" ];
          "simd_support" = [ "packed_simd" ];
          "small_rng" = [ "rand_pcg" ];
          "std" = [ "rand_core/std" "rand_chacha/std" "alloc" "getrandom" "libc" ];
          "stdweb" = [ "getrandom_package/stdweb" ];
          "wasm-bindgen" = [ "getrandom_package/wasm-bindgen" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "getrandom" "getrandom_package" "libc" "std" ];
      };
      "rand 0.8.5" = rec {
        crateName = "rand";
        version = "0.8.5";
        edition = "2018";
        sha256 = "013l6931nn7gkc23jz5mm3qdhf93jjf0fg64nz2lp4i51qd8vbrl";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "rand_chacha";
            packageId = "rand_chacha 0.3.1";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
          }
        ];
        features = {
          "alloc" = [ "rand_core/alloc" ];
          "default" = [ "std" "std_rng" ];
          "getrandom" = [ "rand_core/getrandom" ];
          "libc" = [ "dep:libc" ];
          "log" = [ "dep:log" ];
          "packed_simd" = [ "dep:packed_simd" ];
          "rand_chacha" = [ "dep:rand_chacha" ];
          "serde" = [ "dep:serde" ];
          "serde1" = [ "serde" "rand_core/serde1" ];
          "simd_support" = [ "packed_simd" ];
          "std" = [ "rand_core/std" "rand_chacha/std" "alloc" "getrandom" "libc" ];
          "std_rng" = [ "rand_chacha" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "getrandom" "libc" "min_const_gen" "rand_chacha" "small_rng" "std" "std_rng" ];
      };
      "rand_chacha 0.2.2" = rec {
        crateName = "rand_chacha";
        version = "0.2.2";
        edition = "2018";
        sha256 = "00il36fkdbsmpr99p9ksmmp6dn1md7rmnwmz0rr77jbrca2yvj7l";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
          "The CryptoCorrosion Contributors"
        ];
        dependencies = [
          {
            name = "ppv-lite86";
            packageId = "ppv-lite86";
            usesDefaultFeatures = false;
            features = [ "simd" ];
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.5.1";
          }
        ];
        features = {
          "default" = [ "std" "simd" ];
          "std" = [ "ppv-lite86/std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "rand_chacha 0.3.1" = rec {
        crateName = "rand_chacha";
        version = "0.3.1";
        edition = "2018";
        sha256 = "123x2adin558xbhvqb8w4f6syjsdkmqff8cxwhmjacpsl1ihmhg6";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
          "The CryptoCorrosion Contributors"
        ];
        dependencies = [
          {
            name = "ppv-lite86";
            packageId = "ppv-lite86";
            usesDefaultFeatures = false;
            features = [ "simd" ];
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
          }
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
          "serde1" = [ "serde" ];
          "std" = [ "ppv-lite86/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "rand_core 0.5.1" = rec {
        crateName = "rand_core";
        version = "0.5.1";
        edition = "2018";
        sha256 = "06bdvx08v3rkz451cm7z59xwwqn1rkfh6v9ay77b14f8dwlybgch";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "getrandom";
            packageId = "getrandom 0.1.16";
            optional = true;
          }
        ];
        features = {
          "getrandom" = [ "dep:getrandom" ];
          "serde" = [ "dep:serde" ];
          "serde1" = [ "serde" ];
          "std" = [ "alloc" "getrandom" "getrandom/std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "getrandom" "std" ];
      };
      "rand_core 0.6.4" = rec {
        crateName = "rand_core";
        version = "0.6.4";
        edition = "2018";
        sha256 = "0b4j2v4cb5krak1pv6kakv4sz6xcwbrmy2zckc32hsigbrwy82zc";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "getrandom";
            packageId = "getrandom 0.2.15";
            optional = true;
          }
        ];
        features = {
          "getrandom" = [ "dep:getrandom" ];
          "serde" = [ "dep:serde" ];
          "serde1" = [ "serde" ];
          "std" = [ "alloc" "getrandom" "getrandom/std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "getrandom" "std" ];
      };
      "rand_hc" = rec {
        crateName = "rand_hc";
        version = "0.2.0";
        edition = "2018";
        sha256 = "0g31sqwpmsirdlwr0svnacr4dbqyz339im4ssl9738cjgfpjjcfa";
        authors = [
          "The Rand Project Developers"
        ];
        dependencies = [
          {
            name = "rand_core";
            packageId = "rand_core 0.5.1";
          }
        ];

      };
      "rand_pcg" = rec {
        crateName = "rand_pcg";
        version = "0.3.1";
        edition = "2018";
        sha256 = "0gn79wzs5b19iivybwa09wv4lhi4kbcqciasiqqynggnr8cd1jjr";
        authors = [
          "The Rand Project Developers"
        ];
        dependencies = [
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
          }
        ];
        features = {
          "serde" = [ "dep:serde" ];
          "serde1" = [ "serde" ];
        };
      };
      "rand_seeder" = rec {
        crateName = "rand_seeder";
        version = "0.3.0";
        edition = "2015";
        sha256 = "0kif9fidj7mj0945wwq19ry7cy3ml5l2d5pffvy2z16j87kfp7sa";
        authors = [
          "The Rand Project Developers"
        ];
        dependencies = [
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
            usesDefaultFeatures = false;
          }
        ];

      };
      "rand_xorshift" = rec {
        crateName = "rand_xorshift";
        version = "0.3.0";
        edition = "2018";
        sha256 = "13vcag7gmqspzyabfl1gr9ykvxd2142q2agrj8dkyjmfqmgg4nyj";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
          }
        ];
        features = {
          "serde" = [ "dep:serde" ];
          "serde1" = [ "serde" ];
        };
      };
      "rand_xoshiro" = rec {
        crateName = "rand_xoshiro";
        version = "0.6.0";
        edition = "2018";
        sha256 = "1ajsic84rzwz5qr0mzlay8vi17swqi684bqvwqyiim3flfrcv5vg";
        authors = [
          "The Rand Project Developers"
        ];
        dependencies = [
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
          }
        ];
        features = {
          "serde" = [ "dep:serde" ];
          "serde1" = [ "serde" ];
        };
      };
      "raw-cpuid" = rec {
        crateName = "raw-cpuid";
        version = "11.1.0";
        edition = "2018";
        crateBin = [];
        sha256 = "138dm4mqmmkdd1g5gkf90dlj2bnlxp0yy4d56r5xbyz3rwby77nb";
        libName = "raw_cpuid";
        authors = [
          "Gerd Zellweger <mail@gerdzellweger.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.6.0";
          }
        ];
        features = {
          "clap" = [ "dep:clap" ];
          "cli" = [ "display" "clap" ];
          "display" = [ "std" "termimad" "serde_json" "serialize" ];
          "serde" = [ "dep:serde" ];
          "serde_derive" = [ "dep:serde_derive" ];
          "serde_json" = [ "dep:serde_json" ];
          "serialize" = [ "serde" "serde_derive" ];
          "termimad" = [ "dep:termimad" ];
        };
      };
      "rayon" = rec {
        crateName = "rayon";
        version = "1.10.0";
        edition = "2021";
        sha256 = "1ylgnzwgllajalr4v00y4kj22klq2jbwllm70aha232iah0sc65l";
        authors = [
          "Niko Matsakis <niko@alum.mit.edu>"
          "Josh Stone <cuviper@gmail.com>"
        ];
        dependencies = [
          {
            name = "either";
            packageId = "either";
            usesDefaultFeatures = false;
          }
          {
            name = "rayon-core";
            packageId = "rayon-core";
          }
        ];
        features = {
          "web_spin_lock" = [ "dep:wasm_sync" "rayon-core/web_spin_lock" ];
        };
      };
      "rayon-core" = rec {
        crateName = "rayon-core";
        version = "1.12.1";
        edition = "2021";
        links = "rayon-core";
        sha256 = "1qpwim68ai5h0j7axa8ai8z0payaawv3id0lrgkqmapx7lx8fr8l";
        libName = "rayon_core";
        authors = [
          "Niko Matsakis <niko@alum.mit.edu>"
          "Josh Stone <cuviper@gmail.com>"
        ];
        dependencies = [
          {
            name = "crossbeam-deque";
            packageId = "crossbeam-deque";
          }
          {
            name = "crossbeam-utils";
            packageId = "crossbeam-utils";
          }
        ];
        features = {
          "web_spin_lock" = [ "dep:wasm_sync" ];
        };
      };
      "rcgen" = rec {
        crateName = "rcgen";
        version = "0.13.1";
        edition = "2021";
        sha256 = "0yb7lg0pd1j66jr0kacs5z8q66fb9izkvsp11ma8hry4f8c7w1sl";
        dependencies = [
          {
            name = "pem";
            packageId = "pem 3.0.4";
            optional = true;
          }
          {
            name = "ring";
            packageId = "ring 0.17.8";
            optional = true;
          }
          {
            name = "rustls-pki-types";
            packageId = "rustls-pki-types";
            rename = "pki-types";
          }
          {
            name = "time";
            packageId = "time";
            usesDefaultFeatures = false;
          }
          {
            name = "yasna";
            packageId = "yasna";
            features = [ "time" "std" ];
          }
        ];
        devDependencies = [
          {
            name = "ring";
            packageId = "ring 0.17.8";
          }
          {
            name = "rustls-pki-types";
            packageId = "rustls-pki-types";
            rename = "pki-types";
          }
        ];
        features = {
          "aws_lc_rs" = [ "crypto" "dep:aws-lc-rs" ];
          "default" = [ "crypto" "pem" "ring" ];
          "fips" = [ "aws_lc_rs" "aws-lc-rs?/fips" ];
          "pem" = [ "dep:pem" ];
          "ring" = [ "crypto" "dep:ring" ];
          "x509-parser" = [ "dep:x509-parser" ];
          "zeroize" = [ "dep:zeroize" ];
        };
        resolvedDefaultFeatures = [ "crypto" "default" "pem" "ring" ];
      };
      "readonly" = rec {
        crateName = "readonly";
        version = "0.2.12";
        edition = "2021";
        sha256 = "1sws48fymmjvfrinbqhizyiszw7pc9gj3qnlw76zvddz84g66pd2";
        procMacro = true;
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.86";
          }
          {
            name = "quote";
            packageId = "quote 1.0.37";
          }
          {
            name = "syn";
            packageId = "syn 2.0.77";
            features = [ "visit-mut" ];
          }
        ];

      };
      "real_tokio" = rec {
        crateName = "real_tokio";
        version = "1.39.2";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "ssh://git@github.com/iotaledger/tokio-madsim-fork.git";
          rev = "e34a35287024b341db16139a402508aaea8ec955";
          sha256 = "0p0djsx0r02hlhsws3hjmsg2p5xhk31166kc4mginaynvv8b6rp5";
        };
        authors = [
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "backtrace";
            packageId = "backtrace";
            target = { target, features }: (target."tokio_taskdump" or false);
          }
          {
            name = "bytes";
            packageId = "bytes";
            optional = true;
          }
          {
            name = "tokio-macros";
            packageId = "git+ssh://git@github.com/iotaledger/tokio-madsim-fork.git?branch=main#tokio-macros@2.4.0";
            optional = true;
          }
          {
            name = "libc";
            packageId = "libc";
            optional = true;
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "mio";
            packageId = "mio 1.0.2";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "parking_lot";
            packageId = "parking_lot 0.12.3";
            optional = true;
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "signal-hook-registry";
            packageId = "signal-hook-registry";
            optional = true;
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "socket2";
            packageId = "socket2";
            optional = true;
            target = { target, features }: (!(builtins.elem "wasm" target."family"));
            features = [ "all" ];
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.52.0";
            optional = true;
            target = { target, features }: (target."windows" or false);
          }
        ];
        devDependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = {target, features}: (target."unix" or false);
          }
          {
            name = "socket2";
            packageId = "socket2";
            target = {target, features}: (!(builtins.elem "wasm" target."family"));
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.52.0";
            target = {target, features}: (target."windows" or false);
            features = [ "Win32_Foundation" "Win32_Security_Authorization" ];
          }
        ];
        features = {
          "bytes" = [ "dep:bytes" ];
          "full" = [ "fs" "io-util" "io-std" "macros" "net" "parking_lot" "process" "rt" "rt-multi-thread" "signal" "sync" "time" ];
          "io-util" = [ "bytes" ];
          "libc" = [ "dep:libc" ];
          "macros" = [ "tokio-macros" ];
          "mio" = [ "dep:mio" ];
          "net" = [ "libc" "mio/os-poll" "mio/os-ext" "mio/net" "socket2" "windows-sys/Win32_Foundation" "windows-sys/Win32_Security" "windows-sys/Win32_Storage_FileSystem" "windows-sys/Win32_System_Pipes" "windows-sys/Win32_System_SystemServices" ];
          "parking_lot" = [ "dep:parking_lot" ];
          "process" = [ "bytes" "libc" "mio/os-poll" "mio/os-ext" "mio/net" "signal-hook-registry" "windows-sys/Win32_Foundation" "windows-sys/Win32_System_Threading" "windows-sys/Win32_System_WindowsProgramming" ];
          "rt-multi-thread" = [ "rt" ];
          "signal" = [ "libc" "mio/os-poll" "mio/net" "mio/os-ext" "signal-hook-registry" "windows-sys/Win32_Foundation" "windows-sys/Win32_System_Console" ];
          "signal-hook-registry" = [ "dep:signal-hook-registry" ];
          "socket2" = [ "dep:socket2" ];
          "test-util" = [ "rt" "sync" "time" ];
          "tokio-macros" = [ "dep:tokio-macros" ];
          "tracing" = [ "dep:tracing" ];
          "windows-sys" = [ "dep:windows-sys" ];
        };
        resolvedDefaultFeatures = [ "bytes" "default" "fs" "full" "io-std" "io-util" "libc" "macros" "mio" "net" "parking_lot" "process" "rt" "rt-multi-thread" "signal" "signal-hook-registry" "socket2" "sync" "time" "tokio-macros" "windows-sys" ];
      };
      "redox_syscall 0.2.16" = rec {
        crateName = "redox_syscall";
        version = "0.2.16";
        edition = "2018";
        sha256 = "16jicm96kjyzm802cxdd1k9jmcph0db1a4lhslcnhjsvhp0mhnpv";
        libName = "syscall";
        authors = [
          "Jeremy Soller <jackpot51@gmail.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 1.3.2";
          }
        ];

      };
      "redox_syscall 0.5.6" = rec {
        crateName = "redox_syscall";
        version = "0.5.6";
        edition = "2021";
        sha256 = "0fx1c883b6jqw5v5b4cdv1sfm2bnss36w97qscal786krhay8nim";
        libName = "syscall";
        authors = [
          "Jeremy Soller <jackpot51@gmail.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.6.0";
          }
        ];
        features = {
          "core" = [ "dep:core" ];
          "default" = [ "userspace" ];
          "rustc-dep-of-std" = [ "core" "bitflags/rustc-dep-of-std" ];
        };
        resolvedDefaultFeatures = [ "default" "userspace" ];
      };
      "redox_users" = rec {
        crateName = "redox_users";
        version = "0.4.6";
        edition = "2021";
        sha256 = "0hya2cxx6hxmjfxzv9n8rjl5igpychav7zfi1f81pz6i4krry05s";
        authors = [
          "Jose Narvaez <goyox86@gmail.com>"
          "Wesley Hershberger <mggmugginsmc@gmail.com>"
        ];
        dependencies = [
          {
            name = "getrandom";
            packageId = "getrandom 0.2.15";
            features = [ "std" ];
          }
          {
            name = "libredox";
            packageId = "libredox";
            usesDefaultFeatures = false;
            features = [ "std" "call" ];
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
        ];
        features = {
          "auth" = [ "rust-argon2" "zeroize" ];
          "default" = [ "auth" ];
          "rust-argon2" = [ "dep:rust-argon2" ];
          "zeroize" = [ "dep:zeroize" ];
        };
      };
      "ref-cast" = rec {
        crateName = "ref-cast";
        version = "1.0.23";
        edition = "2021";
        sha256 = "0ca9fi5jsdibaidi2a55y9i1k1q0hvn4f6xlm0fmh7az9pwadw6c";
        libName = "ref_cast";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "ref-cast-impl";
            packageId = "ref-cast-impl";
          }
        ];

      };
      "ref-cast-impl" = rec {
        crateName = "ref-cast-impl";
        version = "1.0.23";
        edition = "2021";
        sha256 = "1rpkjlsr99g8nb5ripffz9n9rb3g32dmw83x724l8wykjgkh7hxw";
        procMacro = true;
        libName = "ref_cast_impl";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.86";
          }
          {
            name = "quote";
            packageId = "quote 1.0.37";
          }
          {
            name = "syn";
            packageId = "syn 2.0.77";
          }
        ];

      };
      "regex" = rec {
        crateName = "regex";
        version = "1.10.6";
        edition = "2021";
        sha256 = "06cnlxwzyqfbw1za1i7ks89ns4i2kr0lpg5ykx56b8v7dd6df6a2";
        authors = [
          "The Rust Project Developers"
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "aho-corasick";
            packageId = "aho-corasick";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "memchr";
            packageId = "memchr";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "regex-automata";
            packageId = "regex-automata 0.4.7";
            usesDefaultFeatures = false;
            features = [ "alloc" "syntax" "meta" "nfa-pikevm" ];
          }
          {
            name = "regex-syntax";
            packageId = "regex-syntax 0.8.4";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" "perf" "unicode" "regex-syntax/default" ];
          "logging" = [ "aho-corasick?/logging" "memchr?/logging" "regex-automata/logging" ];
          "perf" = [ "perf-cache" "perf-dfa" "perf-onepass" "perf-backtrack" "perf-inline" "perf-literal" ];
          "perf-backtrack" = [ "regex-automata/nfa-backtrack" ];
          "perf-dfa" = [ "regex-automata/hybrid" ];
          "perf-dfa-full" = [ "regex-automata/dfa-build" "regex-automata/dfa-search" ];
          "perf-inline" = [ "regex-automata/perf-inline" ];
          "perf-literal" = [ "dep:aho-corasick" "dep:memchr" "regex-automata/perf-literal" ];
          "perf-onepass" = [ "regex-automata/dfa-onepass" ];
          "std" = [ "aho-corasick?/std" "memchr?/std" "regex-automata/std" "regex-syntax/std" ];
          "unicode" = [ "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" "regex-automata/unicode" "regex-syntax/unicode" ];
          "unicode-age" = [ "regex-automata/unicode-age" "regex-syntax/unicode-age" ];
          "unicode-bool" = [ "regex-automata/unicode-bool" "regex-syntax/unicode-bool" ];
          "unicode-case" = [ "regex-automata/unicode-case" "regex-syntax/unicode-case" ];
          "unicode-gencat" = [ "regex-automata/unicode-gencat" "regex-syntax/unicode-gencat" ];
          "unicode-perl" = [ "regex-automata/unicode-perl" "regex-automata/unicode-word-boundary" "regex-syntax/unicode-perl" ];
          "unicode-script" = [ "regex-automata/unicode-script" "regex-syntax/unicode-script" ];
          "unicode-segment" = [ "regex-automata/unicode-segment" "regex-syntax/unicode-segment" ];
          "unstable" = [ "pattern" ];
          "use_std" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "perf" "perf-backtrack" "perf-cache" "perf-dfa" "perf-inline" "perf-literal" "perf-onepass" "std" "unicode" "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" ];
      };
      "regex-automata 0.1.10" = rec {
        crateName = "regex-automata";
        version = "0.1.10";
        edition = "2015";
        sha256 = "0ci1hvbzhrfby5fdpf4ganhf7kla58acad9i1ff1p34dzdrhs8vc";
        libName = "regex_automata";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "regex-syntax";
            packageId = "regex-syntax 0.6.29";
            optional = true;
          }
        ];
        features = {
          "default" = [ "std" ];
          "fst" = [ "dep:fst" ];
          "regex-syntax" = [ "dep:regex-syntax" ];
          "std" = [ "regex-syntax" ];
          "transducer" = [ "std" "fst" ];
        };
        resolvedDefaultFeatures = [ "default" "regex-syntax" "std" ];
      };
      "regex-automata 0.4.7" = rec {
        crateName = "regex-automata";
        version = "0.4.7";
        edition = "2021";
        sha256 = "1pwjdi4jckpbaivpl6x4v5g4crb37zr2wac93wlfsbzgqn6gbjiq";
        libName = "regex_automata";
        authors = [
          "The Rust Project Developers"
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "aho-corasick";
            packageId = "aho-corasick";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "memchr";
            packageId = "memchr";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "regex-syntax";
            packageId = "regex-syntax 0.8.4";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" "syntax" "perf" "unicode" "meta" "nfa" "dfa" "hybrid" ];
          "dfa" = [ "dfa-build" "dfa-search" "dfa-onepass" ];
          "dfa-build" = [ "nfa-thompson" "dfa-search" ];
          "dfa-onepass" = [ "nfa-thompson" ];
          "hybrid" = [ "alloc" "nfa-thompson" ];
          "internal-instrument" = [ "internal-instrument-pikevm" ];
          "internal-instrument-pikevm" = [ "logging" "std" ];
          "logging" = [ "dep:log" "aho-corasick?/logging" "memchr?/logging" ];
          "meta" = [ "syntax" "nfa-pikevm" ];
          "nfa" = [ "nfa-thompson" "nfa-pikevm" "nfa-backtrack" ];
          "nfa-backtrack" = [ "nfa-thompson" ];
          "nfa-pikevm" = [ "nfa-thompson" ];
          "nfa-thompson" = [ "alloc" ];
          "perf" = [ "perf-inline" "perf-literal" ];
          "perf-literal" = [ "perf-literal-substring" "perf-literal-multisubstring" ];
          "perf-literal-multisubstring" = [ "std" "dep:aho-corasick" ];
          "perf-literal-substring" = [ "aho-corasick?/perf-literal" "dep:memchr" ];
          "std" = [ "regex-syntax?/std" "memchr?/std" "aho-corasick?/std" "alloc" ];
          "syntax" = [ "dep:regex-syntax" "alloc" ];
          "unicode" = [ "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" "unicode-word-boundary" "regex-syntax?/unicode" ];
          "unicode-age" = [ "regex-syntax?/unicode-age" ];
          "unicode-bool" = [ "regex-syntax?/unicode-bool" ];
          "unicode-case" = [ "regex-syntax?/unicode-case" ];
          "unicode-gencat" = [ "regex-syntax?/unicode-gencat" ];
          "unicode-perl" = [ "regex-syntax?/unicode-perl" ];
          "unicode-script" = [ "regex-syntax?/unicode-script" ];
          "unicode-segment" = [ "regex-syntax?/unicode-segment" ];
        };
        resolvedDefaultFeatures = [ "alloc" "dfa-onepass" "dfa-search" "hybrid" "meta" "nfa-backtrack" "nfa-pikevm" "nfa-thompson" "perf" "perf-inline" "perf-literal" "perf-literal-multisubstring" "perf-literal-substring" "std" "syntax" "unicode" "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" "unicode-word-boundary" ];
      };
      "regex-lite" = rec {
        crateName = "regex-lite";
        version = "0.1.6";
        edition = "2021";
        sha256 = "0almvx3z75f611pdcd9mslh7zxg76zh3shifql4ndch6mn3rb92k";
        libName = "regex_lite";
        authors = [
          "The Rust Project Developers"
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        features = {
          "default" = [ "std" "string" ];
        };
        resolvedDefaultFeatures = [ "default" "std" "string" ];
      };
      "regex-syntax 0.6.29" = rec {
        crateName = "regex-syntax";
        version = "0.6.29";
        edition = "2018";
        sha256 = "1qgj49vm6y3zn1hi09x91jvgkl2b1fiaq402skj83280ggfwcqpi";
        libName = "regex_syntax";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
          "default" = [ "unicode" ];
          "unicode" = [ "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" ];
        };
        resolvedDefaultFeatures = [ "default" "unicode" "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" ];
      };
      "regex-syntax 0.8.4" = rec {
        crateName = "regex-syntax";
        version = "0.8.4";
        edition = "2021";
        sha256 = "16r0kjy20vx33dr4mhasj5l1f87czas714x2fz6zl0f8wwxa0rks";
        libName = "regex_syntax";
        authors = [
          "The Rust Project Developers"
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "default" = [ "std" "unicode" ];
          "unicode" = [ "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" ];
        };
        resolvedDefaultFeatures = [ "default" "std" "unicode" "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" ];
      };
      "registry+https://github.com/rust-lang/crates.io-index#tokio-macros@2.4.0" = rec {
        crateName = "tokio-macros";
        version = "2.4.0";
        edition = "2021";
        sha256 = "0lnpg14h1v3fh2jvnc8cz7cjf0m7z1xgkwfpcyy632g829imjgb9";
        procMacro = true;
        libName = "tokio_macros";
        authors = [
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.86";
          }
          {
            name = "quote";
            packageId = "quote 1.0.37";
          }
          {
            name = "syn";
            packageId = "syn 2.0.77";
            features = [ "full" ];
          }
        ];

      };
      "reqwest 0.11.27" = rec {
        crateName = "reqwest";
        version = "0.11.27";
        edition = "2021";
        sha256 = "0qjary4hpplpgdi62d2m0xvbn6lnzckwffm0rgkm2x51023m6ryx";
        authors = [
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "base64";
            packageId = "base64 0.21.7";
          }
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "encoding_rs";
            packageId = "encoding_rs";
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
          }
          {
            name = "h2";
            packageId = "h2 0.3.26";
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "http";
            packageId = "http 0.2.12";
          }
          {
            name = "http-body";
            packageId = "http-body 0.4.6";
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "hyper";
            packageId = "hyper 0.14.30";
            usesDefaultFeatures = false;
            target = { target, features }: (!("wasm32" == target."arch" or null));
            features = [ "tcp" "http1" "http2" "client" "runtime" ];
          }
          {
            name = "hyper-rustls";
            packageId = "hyper-rustls 0.24.2";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "ipnet";
            packageId = "ipnet";
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "js-sys";
            packageId = "js-sys";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
          {
            name = "log";
            packageId = "log";
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "mime";
            packageId = "mime";
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "once_cell";
            packageId = "once_cell";
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "percent-encoding";
            packageId = "percent-encoding";
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "rustls";
            packageId = "rustls 0.21.12";
            optional = true;
            target = { target, features }: (!("wasm32" == target."arch" or null));
            features = [ "dangerous_configuration" ];
          }
          {
            name = "rustls-pemfile";
            packageId = "rustls-pemfile 1.0.4";
            optional = true;
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            optional = true;
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
          {
            name = "serde_urlencoded";
            packageId = "serde_urlencoded";
          }
          {
            name = "sync_wrapper";
            packageId = "sync_wrapper 0.1.2";
          }
          {
            name = "system-configuration";
            packageId = "system-configuration";
            target = { target, features }: ("macos" == target."os" or null);
          }
          {
            name = "tokio";
            packageId = "tokio";
            usesDefaultFeatures = false;
            target = { target, features }: (!("wasm32" == target."arch" or null));
            features = [ "net" "time" ];
          }
          {
            name = "tokio-rustls";
            packageId = "tokio-rustls 0.24.1";
            optional = true;
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "tower-service";
            packageId = "tower-service";
          }
          {
            name = "url";
            packageId = "url";
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
          {
            name = "wasm-bindgen-futures";
            packageId = "wasm-bindgen-futures";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
          {
            name = "web-sys";
            packageId = "web-sys";
            target = { target, features }: ("wasm32" == target."arch" or null);
            features = [ "AbortController" "AbortSignal" "Headers" "Request" "RequestInit" "RequestMode" "Response" "Window" "FormData" "Blob" "BlobPropertyBag" "ServiceWorkerGlobalScope" "RequestCredentials" "File" "ReadableStream" ];
          }
          {
            name = "webpki-roots";
            packageId = "webpki-roots 0.25.4";
            optional = true;
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "winreg";
            packageId = "winreg";
            target = { target, features }: (target."windows" or false);
          }
        ];
        devDependencies = [
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
            target = {target, features}: (!("wasm32" == target."arch" or null));
            features = [ "std" "alloc" ];
          }
          {
            name = "hyper";
            packageId = "hyper 0.14.30";
            usesDefaultFeatures = false;
            target = {target, features}: (!("wasm32" == target."arch" or null));
            features = [ "tcp" "stream" "http1" "http2" "client" "server" "runtime" ];
          }
          {
            name = "serde";
            packageId = "serde";
            target = {target, features}: (!("wasm32" == target."arch" or null));
            features = [ "derive" ];
          }
          {
            name = "tokio";
            packageId = "tokio";
            usesDefaultFeatures = false;
            target = {target, features}: (!("wasm32" == target."arch" or null));
            features = [ "macros" "rt-multi-thread" ];
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            target = {target, features}: ("wasm32" == target."arch" or null);
            features = [ "serde-serialize" ];
          }
        ];
        features = {
          "__rustls" = [ "hyper-rustls" "tokio-rustls" "rustls" "__tls" ];
          "__tls" = [ "dep:rustls-pemfile" ];
          "async-compression" = [ "dep:async-compression" ];
          "blocking" = [ "futures-util/io" "tokio/sync" ];
          "brotli" = [ "async-compression" "async-compression/brotli" "tokio-util" ];
          "cookie_crate" = [ "dep:cookie_crate" ];
          "cookie_store" = [ "dep:cookie_store" ];
          "cookies" = [ "cookie_crate" "cookie_store" ];
          "default" = [ "default-tls" ];
          "default-tls" = [ "hyper-tls" "native-tls-crate" "__tls" "tokio-native-tls" ];
          "deflate" = [ "async-compression" "async-compression/zlib" "tokio-util" ];
          "futures-channel" = [ "dep:futures-channel" ];
          "gzip" = [ "async-compression" "async-compression/gzip" "tokio-util" ];
          "h3" = [ "dep:h3" ];
          "h3-quinn" = [ "dep:h3-quinn" ];
          "hickory-dns" = [ "hickory-resolver" ];
          "hickory-resolver" = [ "dep:hickory-resolver" ];
          "http3" = [ "rustls-tls-manual-roots" "h3" "h3-quinn" "quinn" "futures-channel" ];
          "hyper-rustls" = [ "dep:hyper-rustls" ];
          "hyper-tls" = [ "dep:hyper-tls" ];
          "json" = [ "serde_json" ];
          "mime_guess" = [ "dep:mime_guess" ];
          "multipart" = [ "mime_guess" ];
          "native-tls" = [ "default-tls" ];
          "native-tls-alpn" = [ "native-tls" "native-tls-crate/alpn" ];
          "native-tls-crate" = [ "dep:native-tls-crate" ];
          "native-tls-vendored" = [ "native-tls" "native-tls-crate/vendored" ];
          "quinn" = [ "dep:quinn" ];
          "rustls" = [ "dep:rustls" ];
          "rustls-native-certs" = [ "dep:rustls-native-certs" ];
          "rustls-tls" = [ "rustls-tls-webpki-roots" ];
          "rustls-tls-manual-roots" = [ "__rustls" ];
          "rustls-tls-native-roots" = [ "rustls-native-certs" "__rustls" ];
          "rustls-tls-webpki-roots" = [ "webpki-roots" "__rustls" ];
          "serde_json" = [ "dep:serde_json" ];
          "socks" = [ "tokio-socks" ];
          "stream" = [ "tokio/fs" "tokio-util" "wasm-streams" ];
          "tokio-native-tls" = [ "dep:tokio-native-tls" ];
          "tokio-rustls" = [ "dep:tokio-rustls" ];
          "tokio-socks" = [ "dep:tokio-socks" ];
          "tokio-util" = [ "dep:tokio-util" ];
          "trust-dns" = [ "hickory-dns" ];
          "wasm-streams" = [ "dep:wasm-streams" ];
          "webpki-roots" = [ "dep:webpki-roots" ];
        };
        resolvedDefaultFeatures = [ "__rustls" "__tls" "blocking" "hyper-rustls" "json" "rustls" "rustls-tls" "rustls-tls-webpki-roots" "serde_json" "tokio-rustls" "webpki-roots" ];
      };
      "reqwest 0.12.7" = rec {
        crateName = "reqwest";
        version = "0.12.7";
        edition = "2021";
        sha256 = "0qsymmmgam6whjcymnlpf5kvk3ylc4bs92lygz63hp7g95b9bx7q";
        authors = [
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "async-compression";
            packageId = "async-compression";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: (!("wasm32" == target."arch" or null));
            features = [ "tokio" ];
          }
          {
            name = "base64";
            packageId = "base64 0.22.1";
          }
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "futures-channel";
            packageId = "futures-channel";
            optional = true;
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
          }
          {
            name = "h2";
            packageId = "h2 0.4.6";
            optional = true;
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "http";
            packageId = "http 1.1.0";
          }
          {
            name = "http-body";
            packageId = "http-body 1.0.1";
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "http-body-util";
            packageId = "http-body-util";
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "hyper";
            packageId = "hyper 1.4.1";
            target = { target, features }: (!("wasm32" == target."arch" or null));
            features = [ "http1" "client" ];
          }
          {
            name = "hyper-rustls";
            packageId = "hyper-rustls 0.27.3";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: (!("wasm32" == target."arch" or null));
            features = [ "http1" "tls12" ];
          }
          {
            name = "hyper-util";
            packageId = "hyper-util";
            target = { target, features }: (!("wasm32" == target."arch" or null));
            features = [ "http1" "client" "client-legacy" "tokio" ];
          }
          {
            name = "ipnet";
            packageId = "ipnet";
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "js-sys";
            packageId = "js-sys";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
          {
            name = "log";
            packageId = "log";
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "mime";
            packageId = "mime";
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "once_cell";
            packageId = "once_cell";
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "percent-encoding";
            packageId = "percent-encoding";
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "quinn";
            packageId = "quinn";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: (!("wasm32" == target."arch" or null));
            features = [ "rustls" "runtime-tokio" ];
          }
          {
            name = "rustls";
            packageId = "rustls 0.23.13";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: (!("wasm32" == target."arch" or null));
            features = [ "std" "tls12" ];
          }
          {
            name = "rustls-native-certs";
            packageId = "rustls-native-certs 0.7.3";
            optional = true;
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "rustls-pemfile";
            packageId = "rustls-pemfile 2.1.3";
            optional = true;
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "rustls-pki-types";
            packageId = "rustls-pki-types";
            optional = true;
            target = { target, features }: (!("wasm32" == target."arch" or null));
            features = [ "alloc" ];
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            optional = true;
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
          {
            name = "serde_urlencoded";
            packageId = "serde_urlencoded";
          }
          {
            name = "sync_wrapper";
            packageId = "sync_wrapper 1.0.1";
            features = [ "futures" ];
          }
          {
            name = "tokio";
            packageId = "tokio";
            usesDefaultFeatures = false;
            target = { target, features }: (!("wasm32" == target."arch" or null));
            features = [ "net" "time" ];
          }
          {
            name = "tokio-rustls";
            packageId = "tokio-rustls 0.26.0";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: (!("wasm32" == target."arch" or null));
            features = [ "tls12" ];
          }
          {
            name = "tokio-util";
            packageId = "tokio-util 0.7.12";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: (!("wasm32" == target."arch" or null));
            features = [ "codec" "io" ];
          }
          {
            name = "tower-service";
            packageId = "tower-service";
          }
          {
            name = "url";
            packageId = "url";
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
          {
            name = "wasm-bindgen-futures";
            packageId = "wasm-bindgen-futures";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
          {
            name = "wasm-streams";
            packageId = "wasm-streams";
            optional = true;
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
          {
            name = "web-sys";
            packageId = "web-sys";
            target = { target, features }: ("wasm32" == target."arch" or null);
            features = [ "AbortController" "AbortSignal" "Headers" "Request" "RequestInit" "RequestMode" "Response" "Window" "FormData" "Blob" "BlobPropertyBag" "ServiceWorkerGlobalScope" "RequestCredentials" "File" "ReadableStream" ];
          }
          {
            name = "webpki-roots";
            packageId = "webpki-roots 0.26.6";
            optional = true;
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "windows-registry";
            packageId = "windows-registry";
            target = { target, features }: (target."windows" or false);
          }
        ];
        devDependencies = [
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
            target = {target, features}: (!("wasm32" == target."arch" or null));
            features = [ "std" "alloc" ];
          }
          {
            name = "hyper";
            packageId = "hyper 1.4.1";
            usesDefaultFeatures = false;
            target = {target, features}: (!("wasm32" == target."arch" or null));
            features = [ "http1" "http2" "client" "server" ];
          }
          {
            name = "hyper-util";
            packageId = "hyper-util";
            target = {target, features}: (!("wasm32" == target."arch" or null));
            features = [ "http1" "http2" "client" "client-legacy" "server-auto" "tokio" ];
          }
          {
            name = "rustls";
            packageId = "rustls 0.23.13";
            usesDefaultFeatures = false;
            target = {target, features}: (!("wasm32" == target."arch" or null));
            features = [ "ring" ];
          }
          {
            name = "serde";
            packageId = "serde";
            target = {target, features}: (!("wasm32" == target."arch" or null));
            features = [ "derive" ];
          }
          {
            name = "tokio";
            packageId = "tokio";
            usesDefaultFeatures = false;
            target = {target, features}: (!("wasm32" == target."arch" or null));
            features = [ "macros" "rt-multi-thread" ];
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            target = {target, features}: ("wasm32" == target."arch" or null);
            features = [ "serde-serialize" ];
          }
        ];
        features = {
          "__rustls" = [ "dep:hyper-rustls" "dep:tokio-rustls" "dep:rustls" "__tls" "dep:rustls-pemfile" "dep:rustls-pki-types" ];
          "__rustls-ring" = [ "hyper-rustls?/ring" "tokio-rustls?/ring" "rustls?/ring" "quinn?/ring" ];
          "__tls" = [ "dep:rustls-pemfile" "tokio/io-util" ];
          "blocking" = [ "dep:futures-channel" "futures-channel?/sink" "futures-util/io" "futures-util/sink" "tokio/sync" ];
          "brotli" = [ "dep:async-compression" "async-compression?/brotli" "dep:tokio-util" ];
          "charset" = [ "dep:encoding_rs" ];
          "cookies" = [ "dep:cookie_crate" "dep:cookie_store" ];
          "default" = [ "default-tls" "charset" "http2" "macos-system-configuration" ];
          "default-tls" = [ "dep:hyper-tls" "dep:native-tls-crate" "__tls" "dep:tokio-native-tls" ];
          "deflate" = [ "dep:async-compression" "async-compression?/zlib" "dep:tokio-util" ];
          "gzip" = [ "dep:async-compression" "async-compression?/gzip" "dep:tokio-util" ];
          "h2" = [ "dep:h2" ];
          "hickory-dns" = [ "dep:hickory-resolver" ];
          "http2" = [ "h2" "hyper/http2" "hyper-util/http2" "hyper-rustls?/http2" ];
          "http3" = [ "rustls-tls-manual-roots" "dep:h3" "dep:h3-quinn" "dep:quinn" "dep:slab" "dep:futures-channel" ];
          "json" = [ "dep:serde_json" ];
          "macos-system-configuration" = [ "dep:system-configuration" ];
          "multipart" = [ "dep:mime_guess" ];
          "native-tls" = [ "default-tls" ];
          "native-tls-alpn" = [ "native-tls" "native-tls-crate?/alpn" "hyper-tls?/alpn" ];
          "native-tls-vendored" = [ "native-tls" "native-tls-crate?/vendored" ];
          "rustls-tls" = [ "rustls-tls-webpki-roots" ];
          "rustls-tls-manual-roots" = [ "__rustls" "__rustls-ring" ];
          "rustls-tls-manual-roots-no-provider" = [ "__rustls" ];
          "rustls-tls-native-roots" = [ "dep:rustls-native-certs" "hyper-rustls?/native-tokio" "__rustls" "__rustls-ring" ];
          "rustls-tls-no-provider" = [ "rustls-tls-manual-roots-no-provider" ];
          "rustls-tls-webpki-roots" = [ "dep:webpki-roots" "hyper-rustls?/webpki-tokio" "__rustls" "__rustls-ring" ];
          "socks" = [ "dep:tokio-socks" ];
          "stream" = [ "tokio/fs" "dep:tokio-util" "dep:wasm-streams" ];
          "zstd" = [ "dep:async-compression" "async-compression?/zstd" "dep:tokio-util" ];
        };
        resolvedDefaultFeatures = [ "__rustls" "__rustls-ring" "__tls" "blocking" "gzip" "h2" "http2" "json" "rustls-tls" "rustls-tls-native-roots" "rustls-tls-webpki-roots" "stream" ];
      };
      "reqwest-middleware" = rec {
        crateName = "reqwest-middleware";
        version = "0.3.3";
        edition = "2018";
        sha256 = "011b8n9a1bwalyk2y6x5s0wz52pxk70l4bbrba47qgsdc1dfnb2n";
        libName = "reqwest_middleware";
        authors = [
          "Rodrigo Gryzinski <rodrigo.gryzinski@truelayer.com>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "http";
            packageId = "http 1.1.0";
          }
          {
            name = "reqwest";
            packageId = "reqwest 0.12.7";
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "tower-service";
            packageId = "tower-service";
          }
        ];
        devDependencies = [
          {
            name = "reqwest";
            packageId = "reqwest 0.12.7";
            features = [ "rustls-tls" ];
          }
        ];
        features = {
          "charset" = [ "reqwest/charset" ];
          "http2" = [ "reqwest/http2" ];
          "json" = [ "reqwest/json" ];
          "multipart" = [ "reqwest/multipart" ];
          "rustls-tls" = [ "reqwest/rustls-tls" ];
        };
        resolvedDefaultFeatures = [ "json" ];
      };
      "reqwest-retry" = rec {
        crateName = "reqwest-retry";
        version = "0.6.1";
        edition = "2018";
        sha256 = "1l112acd9ln52zy7l44rr93a9lijz09ylpdnmc7ns5q0xjmg2gd8";
        libName = "reqwest_retry";
        authors = [
          "Rodrigo Gryzinski <rodrigo.gryzinski@truelayer.com>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "getrandom";
            packageId = "getrandom 0.2.15";
            target = { target, features }: ("wasm32" == target."arch" or null);
            features = [ "js" ];
          }
          {
            name = "http";
            packageId = "http 1.1.0";
          }
          {
            name = "hyper";
            packageId = "hyper 1.4.1";
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "parking_lot";
            packageId = "parking_lot 0.11.2";
            target = { target, features }: ("wasm32" == target."arch" or null);
            features = [ "wasm-bindgen" ];
          }
          {
            name = "reqwest";
            packageId = "reqwest 0.12.7";
            usesDefaultFeatures = false;
          }
          {
            name = "reqwest-middleware";
            packageId = "reqwest-middleware";
          }
          {
            name = "retry-policies";
            packageId = "retry-policies";
          }
          {
            name = "tokio";
            packageId = "tokio";
            target = { target, features }: (!("wasm32" == target."arch" or null));
            features = [ "time" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "wasm-timer";
            packageId = "wasm-timer";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
        ];
        devDependencies = [
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "full" ];
          }
        ];

      };
      "retry-policies" = rec {
        crateName = "retry-policies";
        version = "0.4.0";
        edition = "2018";
        sha256 = "070alim5nhp3bvf58cyc729kq4dmgmr8rjqf2ny72a5bdhg4fxaq";
        libName = "retry_policies";
        authors = [
          "Luca Palmieri <lpalmieri@truelayer.com>"
        ];
        dependencies = [
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
        ];

      };
      "rfc6979 0.3.1" = rec {
        crateName = "rfc6979";
        version = "0.3.1";
        edition = "2021";
        sha256 = "1fzsp705b5lhwd2r9il9grc3lj6rm3b2r89vh0xv181gy5xg2hvp";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "crypto-bigint";
            packageId = "crypto-bigint 0.4.9";
            usesDefaultFeatures = false;
            features = [ "generic-array" "zeroize" ];
          }
          {
            name = "hmac";
            packageId = "hmac";
            usesDefaultFeatures = false;
            features = [ "reset" ];
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            usesDefaultFeatures = false;
          }
        ];

      };
      "rfc6979 0.4.0" = rec {
        crateName = "rfc6979";
        version = "0.4.0";
        edition = "2021";
        sha256 = "1chw95jgcfrysyzsq6a10b1j5qb7bagkx8h0wda4lv25in02mpgq";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "hmac";
            packageId = "hmac";
            usesDefaultFeatures = false;
            features = [ "reset" ];
          }
          {
            name = "subtle";
            packageId = "subtle";
            usesDefaultFeatures = false;
          }
        ];

      };
      "ring 0.16.20" = rec {
        crateName = "ring";
        version = "0.16.20";
        edition = "2018";
        links = "ring-asm";
        sha256 = "1z682xp7v38ayq9g9nkbhhfpj6ygralmlx7wdmsfv8rnw99cylrh";
        authors = [
          "Brian Smith <brian@briansmith.org>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: (("android" == target."os" or null) || ("linux" == target."os" or null));
          }
          {
            name = "once_cell";
            packageId = "once_cell";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: (("android" == target."os" or null) || ("linux" == target."os" or null));
            features = [ "std" ];
          }
          {
            name = "once_cell";
            packageId = "once_cell";
            usesDefaultFeatures = false;
            target = { target, features }: (("dragonfly" == target."os" or null) || ("freebsd" == target."os" or null) || ("illumos" == target."os" or null) || ("netbsd" == target."os" or null) || ("openbsd" == target."os" or null) || ("solaris" == target."os" or null));
            features = [ "std" ];
          }
          {
            name = "spin";
            packageId = "spin 0.5.2";
            usesDefaultFeatures = false;
            target = { target, features }: (("x86" == target."arch" or null) || ("x86_64" == target."arch" or null) || ((("aarch64" == target."arch" or null) || ("arm" == target."arch" or null)) && (("android" == target."os" or null) || ("fuchsia" == target."os" or null) || ("linux" == target."os" or null))));
          }
          {
            name = "untrusted";
            packageId = "untrusted 0.7.1";
          }
          {
            name = "web-sys";
            packageId = "web-sys";
            usesDefaultFeatures = false;
            target = { target, features }: (("wasm32" == target."arch" or null) && ("unknown" == target."vendor" or null) && ("unknown" == target."os" or null) && ("" == target."env" or null));
            features = [ "Crypto" "Window" ];
          }
          {
            name = "winapi";
            packageId = "winapi";
            usesDefaultFeatures = false;
            target = { target, features }: ("windows" == target."os" or null);
            features = [ "ntsecapi" "wtypesbase" ];
          }
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = {target, features}: ((target."unix" or false) || (target."windows" or false));
          }
        ];
        features = {
          "default" = [ "alloc" "dev_urandom_fallback" ];
          "dev_urandom_fallback" = [ "once_cell" ];
          "once_cell" = [ "dep:once_cell" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "dev_urandom_fallback" "once_cell" "std" ];
      };
      "ring 0.17.8" = rec {
        crateName = "ring";
        version = "0.17.8";
        edition = "2021";
        links = "ring_core_0_17_8";
        sha256 = "03fwlb1ssrmfxdckvqv033pfmk01rhx9ynwi7r186dcfcp5s8zy1";
        authors = [
          "Brian Smith <brian@briansmith.org>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
            usesDefaultFeatures = false;
          }
          {
            name = "getrandom";
            packageId = "getrandom 0.2.15";
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: ((("android" == target."os" or null) || ("linux" == target."os" or null)) && (("aarch64" == target."arch" or null) || ("arm" == target."arch" or null)));
          }
          {
            name = "spin";
            packageId = "spin 0.9.8";
            usesDefaultFeatures = false;
            target = { target, features }: (("aarch64" == target."arch" or null) || ("arm" == target."arch" or null) || ("x86" == target."arch" or null) || ("x86_64" == target."arch" or null));
            features = [ "once" ];
          }
          {
            name = "untrusted";
            packageId = "untrusted 0.9.0";
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.52.0";
            target = { target, features }: (("aarch64" == target."arch" or null) && ("windows" == target."os" or null));
            features = [ "Win32_Foundation" "Win32_System_Threading" ];
          }
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = {target, features}: ((target."unix" or false) || (target."windows" or false) || ("wasi" == target."os" or null));
          }
        ];
        features = {
          "default" = [ "alloc" "dev_urandom_fallback" ];
          "std" = [ "alloc" ];
          "wasm32_unknown_unknown_js" = [ "getrandom/js" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "dev_urandom_fallback" "std" "wasm32_unknown_unknown_js" ];
      };
      "ripemd" = rec {
        crateName = "ripemd";
        version = "0.1.3";
        edition = "2018";
        sha256 = "17xh5yl9wjjj2v18rh3m8ajlmdjg1yj13l6r9rj3mnbss4i444mx";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "digest";
            packageId = "digest 0.10.7";
          }
        ];
        devDependencies = [
          {
            name = "digest";
            packageId = "digest 0.10.7";
            features = [ "dev" ];
          }
        ];
        features = {
          "default" = [ "std" ];
          "oid" = [ "digest/oid" ];
          "std" = [ "digest/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "rle-decode-fast" = rec {
        crateName = "rle-decode-fast";
        version = "1.0.3";
        edition = "2015";
        sha256 = "08kljzl29rpm12fiz0qj5pask49aiswdvcjigdcq73s224rgd0im";
        libName = "rle_decode_fast";
        authors = [
          "Moritz Wanzenböck <moritz@wanzenbug.xyz>"
        ];
        features = {
          "bench" = [ "criterion" ];
          "criterion" = [ "dep:criterion" ];
        };
      };
      "rlp" = rec {
        crateName = "rlp";
        version = "0.5.2";
        edition = "2018";
        sha256 = "1v718xmnv7274y2rkrsjq8rmz9xzxnbzf3n15yyvcr23yd1r54dv";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
            usesDefaultFeatures = false;
          }
          {
            name = "rlp-derive";
            packageId = "rlp-derive";
            optional = true;
          }
          {
            name = "rustc-hex";
            packageId = "rustc-hex";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "derive" = [ "rlp-derive" ];
          "rlp-derive" = [ "dep:rlp-derive" ];
          "std" = [ "bytes/std" "rustc-hex/std" ];
        };
        resolvedDefaultFeatures = [ "default" "derive" "rlp-derive" "std" ];
      };
      "rlp-derive" = rec {
        crateName = "rlp-derive";
        version = "0.1.0";
        edition = "2018";
        sha256 = "0ak73xi7zpw0zs5n30w6j2jmwfqdyb9hfagyjy3hsd0cpqm7ngg3";
        procMacro = true;
        libName = "rlp_derive";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.86";
          }
          {
            name = "quote";
            packageId = "quote 1.0.37";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
          }
        ];

      };
      "roaring" = rec {
        crateName = "roaring";
        version = "0.10.6";
        edition = "2021";
        sha256 = "1lfnh4820nlcpqfvf0zyv51sqkr4c151kr8xni3yp343dsx88jwg";
        authors = [
          "Wim Looman <wim@nemo157.com>"
          "Kerollmops <kero@meilisearch.com>"
        ];
        dependencies = [
          {
            name = "bytemuck";
            packageId = "bytemuck";
            optional = true;
          }
          {
            name = "byteorder";
            packageId = "byteorder";
            optional = true;
          }
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" "std" ];
          "std" = [ "dep:bytemuck" "dep:byteorder" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "rocksdb" = rec {
        crateName = "rocksdb";
        version = "0.21.0";
        edition = "2018";
        sha256 = "1zlz55fkk55nln4jchifx9ishv3dj4a2w3abw060mma18051fvxv";
        authors = [
          "Tyler Neely <t@jujit.su>"
          "David Greenberg <dsg123456789@gmail.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "librocksdb-sys";
            packageId = "librocksdb-sys";
          }
        ];
        features = {
          "bzip2" = [ "librocksdb-sys/bzip2" ];
          "default" = [ "snappy" "lz4" "zstd" "zlib" "bzip2" ];
          "io-uring" = [ "librocksdb-sys/io-uring" ];
          "jemalloc" = [ "librocksdb-sys/jemalloc" ];
          "lz4" = [ "librocksdb-sys/lz4" ];
          "rtti" = [ "librocksdb-sys/rtti" ];
          "serde" = [ "dep:serde" ];
          "serde1" = [ "serde" ];
          "snappy" = [ "librocksdb-sys/snappy" ];
          "zlib" = [ "librocksdb-sys/zlib" ];
          "zstd" = [ "librocksdb-sys/zstd" ];
        };
        resolvedDefaultFeatures = [ "lz4" "multi-threaded-cf" "snappy" "zlib" "zstd" ];
      };
      "ron" = rec {
        crateName = "ron";
        version = "0.8.1";
        edition = "2021";
        sha256 = "154w53s895yxdfg7rn87c6f6x4yncc535x1x31zpcj7p0pzpw7xr";
        authors = [
          "Christopher Durham <cad97@cad97.com>"
          "Dzmitry Malyshau <kvarkus@gmail.com>"
          "Thomas Schaller <torkleyy@gmail.com>"
          "Juniper Tyree <juniper.tyree@helsinki.fi>"
        ];
        dependencies = [
          {
            name = "base64";
            packageId = "base64 0.21.7";
          }
          {
            name = "bitflags";
            packageId = "bitflags 2.6.0";
            features = [ "serde" ];
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
          }
        ];
        devDependencies = [
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
        ];
        features = {
          "indexmap" = [ "dep:indexmap" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "route-recognizer" = rec {
        crateName = "route-recognizer";
        version = "0.3.1";
        edition = "2018";
        sha256 = "0ikp3blbina00jdbifxw1c9whg6mljli24lq5pv82iar53xr9axg";
        libName = "route_recognizer";
        authors = [
          "wycats"
          "rustasync"
        ];

      };
      "rsa 0.8.2" = rec {
        crateName = "rsa";
        version = "0.8.2";
        edition = "2021";
        sha256 = "1d6spc9r966jkak8rily1071rnapfh7fbdwmmmaybzm1klc7v9sm";
        authors = [
          "RustCrypto Developers"
          "dignifiedquire <dignifiedquire@gmail.com>"
        ];
        dependencies = [
          {
            name = "byteorder";
            packageId = "byteorder";
            usesDefaultFeatures = false;
          }
          {
            name = "digest";
            packageId = "digest 0.10.7";
            usesDefaultFeatures = false;
            features = [ "alloc" "oid" ];
          }
          {
            name = "num-bigint-dig";
            packageId = "num-bigint-dig";
            rename = "num-bigint";
            usesDefaultFeatures = false;
            features = [ "i128" "u64_digit" "prime" "zeroize" ];
          }
          {
            name = "num-integer";
            packageId = "num-integer";
            usesDefaultFeatures = false;
          }
          {
            name = "num-iter";
            packageId = "num-iter";
            usesDefaultFeatures = false;
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
            features = [ "libm" ];
          }
          {
            name = "pkcs1";
            packageId = "pkcs1 0.4.1";
            usesDefaultFeatures = false;
            features = [ "pkcs8" "alloc" ];
          }
          {
            name = "pkcs8";
            packageId = "pkcs8 0.9.0";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
            usesDefaultFeatures = false;
          }
          {
            name = "sha2";
            packageId = "sha2 0.10.8";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "oid" ];
          }
          {
            name = "signature";
            packageId = "signature 2.2.0";
            usesDefaultFeatures = false;
            features = [ "digest" "rand_core" ];
          }
          {
            name = "subtle";
            packageId = "subtle";
            usesDefaultFeatures = false;
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            features = [ "alloc" ];
          }
        ];
        devDependencies = [
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
            usesDefaultFeatures = false;
          }
          {
            name = "sha2";
            packageId = "sha2 0.10.8";
            usesDefaultFeatures = false;
            features = [ "oid" ];
          }
        ];
        features = {
          "default" = [ "std" "pem" ];
          "getrandom" = [ "rand_core/getrandom" ];
          "nightly" = [ "num-bigint/nightly" ];
          "pem" = [ "pkcs1/pem" "pkcs8/pem" ];
          "pkcs5" = [ "pkcs8/encryption" ];
          "serde" = [ "num-bigint/serde" "serde_crate" ];
          "serde_crate" = [ "dep:serde_crate" ];
          "sha2" = [ "dep:sha2" ];
          "std" = [ "digest/std" "pkcs1/std" "pkcs8/std" "rand_core/std" "signature/std" ];
        };
        resolvedDefaultFeatures = [ "default" "pem" "sha2" "std" ];
      };
      "rsa 0.9.6" = rec {
        crateName = "rsa";
        version = "0.9.6";
        edition = "2021";
        sha256 = "1z0d1aavfm0v4pv8jqmqhhvvhvblla1ydzlvwykpc3mkzhj523jx";
        authors = [
          "RustCrypto Developers"
          "dignifiedquire <dignifiedquire@gmail.com>"
        ];
        dependencies = [
          {
            name = "const-oid";
            packageId = "const-oid";
            usesDefaultFeatures = false;
          }
          {
            name = "digest";
            packageId = "digest 0.10.7";
            usesDefaultFeatures = false;
            features = [ "alloc" "oid" ];
          }
          {
            name = "num-bigint-dig";
            packageId = "num-bigint-dig";
            rename = "num-bigint";
            usesDefaultFeatures = false;
            features = [ "i128" "prime" "zeroize" ];
          }
          {
            name = "num-integer";
            packageId = "num-integer";
            usesDefaultFeatures = false;
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
            features = [ "libm" ];
          }
          {
            name = "pkcs1";
            packageId = "pkcs1 0.7.5";
            usesDefaultFeatures = false;
            features = [ "alloc" "pkcs8" ];
          }
          {
            name = "pkcs8";
            packageId = "pkcs8 0.10.2";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
            usesDefaultFeatures = false;
          }
          {
            name = "sha2";
            packageId = "sha2 0.10.8";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "oid" ];
          }
          {
            name = "signature";
            packageId = "signature 2.2.0";
            usesDefaultFeatures = false;
            features = [ "alloc" "digest" "rand_core" ];
          }
          {
            name = "spki";
            packageId = "spki 0.7.3";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "subtle";
            packageId = "subtle";
            usesDefaultFeatures = false;
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            features = [ "alloc" ];
          }
        ];
        devDependencies = [
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
            usesDefaultFeatures = false;
          }
          {
            name = "sha2";
            packageId = "sha2 0.10.8";
            usesDefaultFeatures = false;
            features = [ "oid" ];
          }
        ];
        features = {
          "default" = [ "std" "pem" "u64_digit" ];
          "getrandom" = [ "rand_core/getrandom" ];
          "nightly" = [ "num-bigint/nightly" ];
          "pem" = [ "pkcs1/pem" "pkcs8/pem" ];
          "pkcs5" = [ "pkcs8/encryption" ];
          "serde" = [ "dep:serde" "num-bigint/serde" ];
          "sha1" = [ "dep:sha1" ];
          "sha2" = [ "dep:sha2" ];
          "std" = [ "digest/std" "pkcs1/std" "pkcs8/std" "rand_core/std" "signature/std" ];
          "u64_digit" = [ "num-bigint/u64_digit" ];
        };
        resolvedDefaultFeatures = [ "default" "pem" "sha2" "std" "u64_digit" ];
      };
      "rstest" = rec {
        crateName = "rstest";
        version = "0.16.0";
        edition = "2018";
        sha256 = "1pqfpj727hkn4rr7nspnaab0h74gl9yxqlb53vn9h8a7dhbjszxh";
        authors = [
          "Michele d'Amico <michele.damico@gmail.com>"
        ];
        dependencies = [
          {
            name = "futures";
            packageId = "futures";
            optional = true;
          }
          {
            name = "futures-timer";
            packageId = "futures-timer";
            optional = true;
          }
          {
            name = "rstest_macros";
            packageId = "rstest_macros";
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "rustc_version";
            packageId = "rustc_version";
          }
        ];
        features = {
          "async-timeout" = [ "dep:futures" "dep:futures-timer" "rstest_macros/async-timeout" ];
          "default" = [ "async-timeout" ];
        };
        resolvedDefaultFeatures = [ "async-timeout" "default" ];
      };
      "rstest_macros" = rec {
        crateName = "rstest_macros";
        version = "0.16.0";
        edition = "2018";
        sha256 = "1xzrgwjih87myghqzm9ncqm0449y2sf4migz6x7yc1h7mq2vaabj";
        procMacro = true;
        authors = [
          "Michele d'Amico <michele.damico@gmail.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.86";
          }
          {
            name = "quote";
            packageId = "quote 1.0.37";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            features = [ "full" "parsing" "extra-traits" "visit" "visit-mut" ];
          }
          {
            name = "unicode-ident";
            packageId = "unicode-ident";
          }
        ];
        buildDependencies = [
          {
            name = "rustc_version";
            packageId = "rustc_version";
          }
        ];
        features = {
          "default" = [ "async-timeout" ];
        };
        resolvedDefaultFeatures = [ "async-timeout" ];
      };
      "russh" = rec {
        crateName = "russh";
        version = "0.44.1";
        edition = "2018";
        sha256 = "05icvlmgkk047j25x1yvcssmrkdrlh46k2cxi6bibn4cmzgyw035";
        authors = [
          "Pierre-Étienne Meunier <pe@pijul.org>"
        ];
        dependencies = [
          {
            name = "aes";
            packageId = "aes";
          }
          {
            name = "aes-gcm";
            packageId = "aes-gcm";
          }
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "bitflags";
            packageId = "bitflags 2.6.0";
          }
          {
            name = "byteorder";
            packageId = "byteorder";
          }
          {
            name = "cbc";
            packageId = "cbc";
          }
          {
            name = "chacha20";
            packageId = "chacha20";
          }
          {
            name = "ctr";
            packageId = "ctr";
          }
          {
            name = "curve25519-dalek";
            packageId = "curve25519-dalek";
          }
          {
            name = "digest";
            packageId = "digest 0.10.7";
          }
          {
            name = "elliptic-curve";
            packageId = "elliptic-curve 0.13.8";
            features = [ "ecdh" ];
          }
          {
            name = "flate2";
            packageId = "flate2";
            optional = true;
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "generic-array";
            packageId = "generic-array";
          }
          {
            name = "hex-literal";
            packageId = "hex-literal 0.4.1";
          }
          {
            name = "hmac";
            packageId = "hmac";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "num-bigint";
            packageId = "num-bigint 0.4.6";
            features = [ "rand" ];
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "p256";
            packageId = "p256 0.13.2";
            features = [ "ecdh" ];
          }
          {
            name = "p384";
            packageId = "p384";
            features = [ "ecdh" ];
          }
          {
            name = "p521";
            packageId = "p521";
            features = [ "ecdh" ];
          }
          {
            name = "poly1305";
            packageId = "poly1305";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
            features = [ "getrandom" ];
          }
          {
            name = "russh-cryptovec";
            packageId = "russh-cryptovec";
          }
          {
            name = "russh-keys";
            packageId = "russh-keys";
          }
          {
            name = "sha1";
            packageId = "sha1";
            features = [ "oid" ];
          }
          {
            name = "sha2";
            packageId = "sha2 0.10.8";
            features = [ "oid" ];
          }
          {
            name = "ssh-encoding";
            packageId = "ssh-encoding";
          }
          {
            name = "ssh-key";
            packageId = "ssh-key";
            features = [ "ed25519" "rsa" "encryption" ];
          }
          {
            name = "subtle";
            packageId = "subtle";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "io-util" "rt-multi-thread" "time" "net" "sync" "macros" "process" ];
          }
        ];
        devDependencies = [
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "io-std" "io-util" "rt-multi-thread" "time" "net" "sync" "macros" ];
          }
        ];
        features = {
          "default" = [ "flate2" ];
          "flate2" = [ "dep:flate2" ];
          "legacy-ed25519-pkcs8-parser" = [ "russh-keys/legacy-ed25519-pkcs8-parser" ];
          "openssl" = [ "russh-keys/openssl" "dep:openssl" ];
          "vendored-openssl" = [ "openssl/vendored" "russh-keys/vendored-openssl" ];
        };
        resolvedDefaultFeatures = [ "default" "flate2" ];
      };
      "russh-cryptovec" = rec {
        crateName = "russh-cryptovec";
        version = "0.7.3";
        edition = "2018";
        sha256 = "100qwl88xz8bc6kpp18k6apbvn36yw3fx53gamk1rqjhnc52rpgs";
        libName = "russh_cryptovec";
        authors = [
          "Pierre-Étienne Meunier <pe@pijul.org>"
          "Eugeny <e@ajenti.org"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: ("windows" == target."os" or null);
            features = [ "basetsd" "minwindef" "memoryapi" ];
          }
        ];

      };
      "russh-keys" = rec {
        crateName = "russh-keys";
        version = "0.44.0";
        edition = "2018";
        sha256 = "139w84ngrn0916wrw2q560lqk2pkidnar8k55wjdskjd0bz0p37v";
        libName = "russh_keys";
        authors = [
          "Pierre-Étienne Meunier <pe@pijul.org>"
        ];
        dependencies = [
          {
            name = "aes";
            packageId = "aes";
          }
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "bcrypt-pbkdf";
            packageId = "bcrypt-pbkdf";
          }
          {
            name = "block-padding";
            packageId = "block-padding 0.3.3";
            features = [ "std" ];
          }
          {
            name = "byteorder";
            packageId = "byteorder";
          }
          {
            name = "cbc";
            packageId = "cbc";
          }
          {
            name = "ctr";
            packageId = "ctr";
          }
          {
            name = "data-encoding";
            packageId = "data-encoding";
          }
          {
            name = "der";
            packageId = "der 0.7.9";
          }
          {
            name = "digest";
            packageId = "digest 0.10.7";
          }
          {
            name = "dirs";
            packageId = "dirs 5.0.1";
          }
          {
            name = "ecdsa";
            packageId = "ecdsa 0.16.9";
          }
          {
            name = "ed25519-dalek";
            packageId = "ed25519-dalek";
            features = [ "rand_core" "pkcs8" ];
          }
          {
            name = "elliptic-curve";
            packageId = "elliptic-curve 0.13.8";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "hmac";
            packageId = "hmac";
          }
          {
            name = "inout";
            packageId = "inout";
            features = [ "std" ];
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "md5";
            packageId = "md5";
          }
          {
            name = "num-integer";
            packageId = "num-integer";
          }
          {
            name = "p256";
            packageId = "p256 0.13.2";
          }
          {
            name = "p384";
            packageId = "p384";
          }
          {
            name = "p521";
            packageId = "p521";
          }
          {
            name = "pbkdf2";
            packageId = "pbkdf2 0.11.0";
          }
          {
            name = "pkcs1";
            packageId = "pkcs1 0.7.5";
          }
          {
            name = "pkcs5";
            packageId = "pkcs5";
          }
          {
            name = "pkcs8";
            packageId = "pkcs8 0.10.2";
            features = [ "pkcs5" "encryption" ];
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
            features = [ "std" ];
          }
          {
            name = "rsa";
            packageId = "rsa 0.9.6";
          }
          {
            name = "russh-cryptovec";
            packageId = "russh-cryptovec";
          }
          {
            name = "sec1";
            packageId = "sec1 0.7.3";
            features = [ "pkcs8" ];
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "sha1";
            packageId = "sha1";
            features = [ "oid" ];
          }
          {
            name = "sha2";
            packageId = "sha2 0.10.8";
            features = [ "oid" ];
          }
          {
            name = "spki";
            packageId = "spki 0.7.3";
          }
          {
            name = "ssh-encoding";
            packageId = "ssh-encoding";
          }
          {
            name = "ssh-key";
            packageId = "ssh-key";
            features = [ "ed25519" "rsa" "encryption" ];
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "io-util" "rt-multi-thread" "time" "net" ];
          }
          {
            name = "tokio-stream";
            packageId = "tokio-stream";
            features = [ "net" ];
          }
          {
            name = "typenum";
            packageId = "typenum";
          }
          {
            name = "zeroize";
            packageId = "zeroize";
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "test-util" "macros" "process" ];
          }
        ];
        features = {
          "legacy-ed25519-pkcs8-parser" = [ "yasna" ];
          "openssl" = [ "dep:openssl" ];
          "vendored-openssl" = [ "openssl" "openssl/vendored" ];
          "yasna" = [ "dep:yasna" ];
        };
      };
      "rust-argon2" = rec {
        crateName = "rust-argon2";
        version = "1.0.0";
        edition = "2018";
        sha256 = "1fav7dbkkfqlz9349x7nd6rwhi8dwh7rixm6xhf9q0h4jk8n40dm";
        libName = "argon2";
        authors = [
          "Martijn Rijkeboer <mrr@sru-systems.com>"
        ];
        dependencies = [
          {
            name = "base64";
            packageId = "base64 0.13.1";
          }
          {
            name = "blake2b_simd";
            packageId = "blake2b_simd";
          }
          {
            name = "constant_time_eq";
            packageId = "constant_time_eq 0.1.5";
          }
          {
            name = "crossbeam-utils";
            packageId = "crossbeam-utils";
            optional = true;
          }
        ];
        features = {
          "crossbeam-utils" = [ "dep:crossbeam-utils" ];
          "default" = [ "crossbeam-utils" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "crossbeam-utils" "default" ];
      };
      "rust_decimal" = rec {
        crateName = "rust_decimal";
        version = "1.36.0";
        edition = "2021";
        sha256 = "0mgmplkpawx9kggc4v3qymmdxx71dx1qsf1lsqp2pi9w7q7di0mh";
        authors = [
          "Paul Mason <paul@form1.co.nz>"
        ];
        dependencies = [
          {
            name = "arrayvec";
            packageId = "arrayvec";
            usesDefaultFeatures = false;
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
            features = [ "i128" ];
          }
        ];
        features = {
          "borsh" = [ "dep:borsh" "std" ];
          "db-diesel-mysql" = [ "diesel/mysql" "std" ];
          "db-diesel-postgres" = [ "diesel/postgres" "std" ];
          "db-diesel2-mysql" = [ "db-diesel-mysql" ];
          "db-diesel2-postgres" = [ "db-diesel-postgres" ];
          "db-postgres" = [ "dep:bytes" "dep:postgres-types" "std" ];
          "db-tokio-postgres" = [ "dep:bytes" "dep:postgres-types" "std" ];
          "default" = [ "serde" "std" ];
          "diesel" = [ "dep:diesel" ];
          "maths-nopanic" = [ "maths" ];
          "ndarray" = [ "dep:ndarray" ];
          "proptest" = [ "dep:proptest" ];
          "rand" = [ "dep:rand" ];
          "rkyv" = [ "dep:rkyv" ];
          "rkyv-safe" = [ "rkyv/validation" ];
          "rocket-traits" = [ "dep:rocket" ];
          "rust-fuzz" = [ "dep:arbitrary" ];
          "serde" = [ "dep:serde" ];
          "serde-arbitrary-precision" = [ "serde-with-arbitrary-precision" ];
          "serde-bincode" = [ "serde-str" ];
          "serde-float" = [ "serde-with-float" ];
          "serde-str" = [ "serde-with-str" ];
          "serde-with-arbitrary-precision" = [ "serde" "serde_json/arbitrary_precision" "serde_json/std" ];
          "serde-with-float" = [ "serde" ];
          "serde-with-str" = [ "serde" ];
          "serde_json" = [ "dep:serde_json" ];
          "std" = [ "arrayvec/std" "borsh?/std" "bytes?/std" "rand?/std" "rkyv?/std" "serde?/std" "serde_json?/std" ];
          "tokio-pg" = [ "db-tokio-postgres" ];
          "tokio-postgres" = [ "dep:tokio-postgres" ];
        };
      };
      "rustc-demangle" = rec {
        crateName = "rustc-demangle";
        version = "0.1.24";
        edition = "2015";
        sha256 = "07zysaafgrkzy2rjgwqdj2a8qdpsm6zv6f5pgpk9x0lm40z9b6vi";
        libName = "rustc_demangle";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "rustc-dep-of-std" = [ "core" "compiler_builtins" ];
        };
      };
      "rustc-hash 1.1.0" = rec {
        crateName = "rustc-hash";
        version = "1.1.0";
        edition = "2015";
        sha256 = "1qkc5khrmv5pqi5l5ca9p5nl5hs742cagrndhbrlk3dhlrx3zm08";
        libName = "rustc_hash";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "rustc-hash 2.0.0" = rec {
        crateName = "rustc-hash";
        version = "2.0.0";
        edition = "2021";
        sha256 = "0lni0lf846bzrf3jvci6jaf4142n1mdqxvcpczk5ch9pfgyk8c2q";
        libName = "rustc_hash";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
          "default" = [ "std" ];
          "rand" = [ "dep:rand" "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "rustc-hex" = rec {
        crateName = "rustc-hex";
        version = "2.1.0";
        edition = "2018";
        sha256 = "1mkjy2vbn5kzg67wgngwddlk4snmd8mkjkql2dzrzzfh6ajzcx9y";
        libName = "rustc_hex";
        authors = [
          "The Rust Project Developers"
          "debris <marek.kotewicz@gmail.com>"
          "Robert Habermeier"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "rustc_version" = rec {
        crateName = "rustc_version";
        version = "0.4.1";
        edition = "2018";
        sha256 = "14lvdsmr5si5qbqzrajgb6vfn69k0sfygrvfvr2mps26xwi3mjyg";
        dependencies = [
          {
            name = "semver";
            packageId = "semver";
          }
        ];

      };
      "rusticata-macros" = rec {
        crateName = "rusticata-macros";
        version = "4.1.0";
        edition = "2018";
        sha256 = "0ch67lljmgl5pfrlb90bl5kkp2x6yby1qaxnpnd0p5g9xjkc9w7s";
        libName = "rusticata_macros";
        authors = [
          "Pierre Chifflier <chifflier@wzdftpd.net>"
        ];
        dependencies = [
          {
            name = "nom";
            packageId = "nom";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
        ];

      };
      "rustix" = rec {
        crateName = "rustix";
        version = "0.38.37";
        edition = "2021";
        sha256 = "04b8f99c2g36gyggf4aphw8742k2b1vls3364n2z493whj5pijwa";
        authors = [
          "Dan Gohman <dev@sunfishcode.online>"
          "Jakub Konka <kubkon@jakubkonka.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.6.0";
            usesDefaultFeatures = false;
          }
          {
            name = "errno";
            packageId = "errno";
            rename = "libc_errno";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: ((!(target."rustix_use_libc" or false)) && (!(target."miri" or false)) && ("linux" == target."os" or null) && ("little" == target."endian" or null) && (("arm" == target."arch" or null) || (("aarch64" == target."arch" or null) && ("64" == target."pointer_width" or null)) || ("riscv64" == target."arch" or null) || ((target."rustix_use_experimental_asm" or false) && ("powerpc64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips32r6" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64r6" == target."arch" or null)) || ("x86" == target."arch" or null) || (("x86_64" == target."arch" or null) && ("64" == target."pointer_width" or null))));
          }
          {
            name = "errno";
            packageId = "errno";
            rename = "libc_errno";
            usesDefaultFeatures = false;
            target = { target, features }: ((!(target."windows" or false)) && ((target."rustix_use_libc" or false) || (target."miri" or false) || (!(("linux" == target."os" or null) && ("little" == target."endian" or null) && (("arm" == target."arch" or null) || (("aarch64" == target."arch" or null) && ("64" == target."pointer_width" or null)) || ("riscv64" == target."arch" or null) || ((target."rustix_use_experimental_asm" or false) && ("powerpc64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips32r6" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64r6" == target."arch" or null)) || ("x86" == target."arch" or null) || (("x86_64" == target."arch" or null) && ("64" == target."pointer_width" or null)))))));
          }
          {
            name = "errno";
            packageId = "errno";
            rename = "libc_errno";
            usesDefaultFeatures = false;
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "libc";
            packageId = "libc";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: ((!(target."rustix_use_libc" or false)) && (!(target."miri" or false)) && ("linux" == target."os" or null) && ("little" == target."endian" or null) && (("arm" == target."arch" or null) || (("aarch64" == target."arch" or null) && ("64" == target."pointer_width" or null)) || ("riscv64" == target."arch" or null) || ((target."rustix_use_experimental_asm" or false) && ("powerpc64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips32r6" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64r6" == target."arch" or null)) || ("x86" == target."arch" or null) || (("x86_64" == target."arch" or null) && ("64" == target."pointer_width" or null))));
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: ((!(target."windows" or false)) && ((target."rustix_use_libc" or false) || (target."miri" or false) || (!(("linux" == target."os" or null) && ("little" == target."endian" or null) && (("arm" == target."arch" or null) || (("aarch64" == target."arch" or null) && ("64" == target."pointer_width" or null)) || ("riscv64" == target."arch" or null) || ((target."rustix_use_experimental_asm" or false) && ("powerpc64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips32r6" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64r6" == target."arch" or null)) || ("x86" == target."arch" or null) || (("x86_64" == target."arch" or null) && ("64" == target."pointer_width" or null)))))));
          }
          {
            name = "linux-raw-sys";
            packageId = "linux-raw-sys";
            usesDefaultFeatures = false;
            target = { target, features }: ((("android" == target."os" or null) || ("linux" == target."os" or null)) && ((target."rustix_use_libc" or false) || (target."miri" or false) || (!(("linux" == target."os" or null) && ("little" == target."endian" or null) && (("arm" == target."arch" or null) || (("aarch64" == target."arch" or null) && ("64" == target."pointer_width" or null)) || ("riscv64" == target."arch" or null) || ((target."rustix_use_experimental_asm" or false) && ("powerpc64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips32r6" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64r6" == target."arch" or null)) || ("x86" == target."arch" or null) || (("x86_64" == target."arch" or null) && ("64" == target."pointer_width" or null)))))));
            features = [ "general" "ioctl" "no_std" ];
          }
          {
            name = "linux-raw-sys";
            packageId = "linux-raw-sys";
            usesDefaultFeatures = false;
            target = { target, features }: ((!(target."rustix_use_libc" or false)) && (!(target."miri" or false)) && ("linux" == target."os" or null) && ("little" == target."endian" or null) && (("arm" == target."arch" or null) || (("aarch64" == target."arch" or null) && ("64" == target."pointer_width" or null)) || ("riscv64" == target."arch" or null) || ((target."rustix_use_experimental_asm" or false) && ("powerpc64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips32r6" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64r6" == target."arch" or null)) || ("x86" == target."arch" or null) || (("x86_64" == target."arch" or null) && ("64" == target."pointer_width" or null))));
            features = [ "general" "errno" "ioctl" "no_std" "elf" ];
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.52.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_Foundation" "Win32_Networking_WinSock" "Win32_NetworkManagement_IpHelper" "Win32_System_Threading" ];
          }
        ];
        devDependencies = [
          {
            name = "errno";
            packageId = "errno";
            rename = "libc_errno";
            usesDefaultFeatures = false;
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        features = {
          "all-apis" = [ "event" "fs" "io_uring" "mm" "mount" "net" "param" "pipe" "process" "procfs" "pty" "rand" "runtime" "shm" "stdio" "system" "termios" "thread" "time" ];
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "default" = [ "std" "use-libc-auxv" ];
          "io_uring" = [ "event" "fs" "net" "linux-raw-sys/io_uring" ];
          "itoa" = [ "dep:itoa" ];
          "libc" = [ "dep:libc" ];
          "libc-extra-traits" = [ "libc?/extra_traits" ];
          "libc_errno" = [ "dep:libc_errno" ];
          "linux_latest" = [ "linux_4_11" ];
          "net" = [ "linux-raw-sys/net" "linux-raw-sys/netlink" "linux-raw-sys/if_ether" "linux-raw-sys/xdp" ];
          "once_cell" = [ "dep:once_cell" ];
          "param" = [ "fs" ];
          "process" = [ "linux-raw-sys/prctl" ];
          "procfs" = [ "once_cell" "itoa" "fs" ];
          "pty" = [ "itoa" "fs" ];
          "runtime" = [ "linux-raw-sys/prctl" ];
          "rustc-dep-of-std" = [ "core" "rustc-std-workspace-alloc" "compiler_builtins" "linux-raw-sys/rustc-dep-of-std" "bitflags/rustc-dep-of-std" "compiler_builtins?/rustc-dep-of-std" ];
          "rustc-std-workspace-alloc" = [ "dep:rustc-std-workspace-alloc" ];
          "shm" = [ "fs" ];
          "std" = [ "bitflags/std" "alloc" "libc?/std" "libc_errno?/std" "libc-extra-traits" ];
          "system" = [ "linux-raw-sys/system" ];
          "thread" = [ "linux-raw-sys/prctl" ];
          "use-libc" = [ "libc_errno" "libc" "libc-extra-traits" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "fs" "libc-extra-traits" "std" "termios" "use-libc-auxv" ];
      };
      "rustls 0.21.12" = rec {
        crateName = "rustls";
        version = "0.21.12";
        edition = "2021";
        sha256 = "0gjdg2a9r81sdwkyw3n5yfbkrr6p9gyk3xr2kcsr3cs83x6s2miz";
        dependencies = [
          {
            name = "log";
            packageId = "log";
            optional = true;
          }
          {
            name = "ring";
            packageId = "ring 0.17.8";
          }
          {
            name = "rustls-webpki";
            packageId = "rustls-webpki 0.101.7";
            rename = "webpki";
            features = [ "alloc" "std" ];
          }
          {
            name = "sct";
            packageId = "sct";
          }
        ];
        devDependencies = [
          {
            name = "log";
            packageId = "log";
          }
        ];
        features = {
          "default" = [ "logging" "tls12" ];
          "log" = [ "dep:log" ];
          "logging" = [ "log" ];
          "read_buf" = [ "rustversion" ];
          "rustversion" = [ "dep:rustversion" ];
        };
        resolvedDefaultFeatures = [ "dangerous_configuration" "default" "log" "logging" "tls12" ];
      };
      "rustls 0.22.4" = rec {
        crateName = "rustls";
        version = "0.22.4";
        edition = "2021";
        sha256 = "0cl4q6w0x1cl5ldjsgbbiiqhkz6qg5vxl5dkn9wwsyxc44vzfkmz";
        dependencies = [
          {
            name = "log";
            packageId = "log";
            optional = true;
          }
          {
            name = "ring";
            packageId = "ring 0.17.8";
            optional = true;
          }
          {
            name = "rustls-pki-types";
            packageId = "rustls-pki-types";
            rename = "pki-types";
            features = [ "std" ];
          }
          {
            name = "rustls-webpki";
            packageId = "rustls-webpki 0.102.8";
            rename = "webpki";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "subtle";
            packageId = "subtle";
            usesDefaultFeatures = false;
          }
          {
            name = "zeroize";
            packageId = "zeroize";
          }
        ];
        devDependencies = [
          {
            name = "log";
            packageId = "log";
          }
        ];
        features = {
          "aws_lc_rs" = [ "dep:aws-lc-rs" "webpki/aws_lc_rs" ];
          "default" = [ "logging" "ring" "tls12" ];
          "log" = [ "dep:log" ];
          "logging" = [ "log" ];
          "read_buf" = [ "rustversion" ];
          "ring" = [ "dep:ring" "webpki/ring" ];
          "rustversion" = [ "dep:rustversion" ];
        };
        resolvedDefaultFeatures = [ "default" "log" "logging" "ring" "tls12" ];
      };
      "rustls 0.23.13" = rec {
        crateName = "rustls";
        version = "0.23.13";
        edition = "2021";
        sha256 = "1j7lf7b6s43ljf5v18cqd1698j6ah4x7h1nvd9b7x4b6fjnbmnpj";
        dependencies = [
          {
            name = "aws-lc-rs";
            packageId = "aws-lc-rs";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "aws-lc-sys" "prebuilt-nasm" ];
          }
          {
            name = "log";
            packageId = "log";
            optional = true;
          }
          {
            name = "once_cell";
            packageId = "once_cell";
            usesDefaultFeatures = false;
            features = [ "alloc" "race" ];
          }
          {
            name = "ring";
            packageId = "ring 0.17.8";
            optional = true;
          }
          {
            name = "rustls-pki-types";
            packageId = "rustls-pki-types";
            rename = "pki-types";
            features = [ "alloc" ];
          }
          {
            name = "rustls-webpki";
            packageId = "rustls-webpki 0.102.8";
            rename = "webpki";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "subtle";
            packageId = "subtle";
            usesDefaultFeatures = false;
          }
          {
            name = "zeroize";
            packageId = "zeroize";
          }
        ];
        devDependencies = [
          {
            name = "log";
            packageId = "log";
          }
        ];
        features = {
          "aws-lc-rs" = [ "aws_lc_rs" ];
          "aws_lc_rs" = [ "dep:aws-lc-rs" "webpki/aws_lc_rs" ];
          "brotli" = [ "dep:brotli" "dep:brotli-decompressor" "std" ];
          "default" = [ "aws_lc_rs" "logging" "std" "tls12" ];
          "fips" = [ "aws_lc_rs" "aws-lc-rs?/fips" ];
          "hashbrown" = [ "dep:hashbrown" ];
          "log" = [ "dep:log" ];
          "logging" = [ "log" ];
          "read_buf" = [ "rustversion" "std" ];
          "ring" = [ "dep:ring" "webpki/ring" ];
          "rustversion" = [ "dep:rustversion" ];
          "std" = [ "webpki/std" "pki-types/std" "once_cell/std" ];
          "zlib" = [ "dep:zlib-rs" ];
        };
        resolvedDefaultFeatures = [ "aws_lc_rs" "default" "log" "logging" "ring" "std" "tls12" ];
      };
      "rustls-native-certs 0.6.3" = rec {
        crateName = "rustls-native-certs";
        version = "0.6.3";
        edition = "2021";
        sha256 = "007zind70rd5rfsrkdcfm8vn09j8sg02phg9334kark6rdscxam9";
        libName = "rustls_native_certs";
        dependencies = [
          {
            name = "openssl-probe";
            packageId = "openssl-probe";
            target = { target, features }: ((target."unix" or false) && (!("macos" == target."os" or null)));
          }
          {
            name = "rustls-pemfile";
            packageId = "rustls-pemfile 1.0.4";
          }
          {
            name = "schannel";
            packageId = "schannel";
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "security-framework";
            packageId = "security-framework";
            target = { target, features }: ("macos" == target."os" or null);
          }
        ];

      };
      "rustls-native-certs 0.7.3" = rec {
        crateName = "rustls-native-certs";
        version = "0.7.3";
        edition = "2021";
        sha256 = "1r9ib5gwkfci2wbqnbh44nigvrfgxs4n1x89js82w97dxsab7gz5";
        libName = "rustls_native_certs";
        dependencies = [
          {
            name = "openssl-probe";
            packageId = "openssl-probe";
            target = { target, features }: ((target."unix" or false) && (!("macos" == target."os" or null)));
          }
          {
            name = "rustls-pemfile";
            packageId = "rustls-pemfile 2.1.3";
          }
          {
            name = "rustls-pki-types";
            packageId = "rustls-pki-types";
            rename = "pki-types";
          }
          {
            name = "schannel";
            packageId = "schannel";
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "security-framework";
            packageId = "security-framework";
            target = { target, features }: ("macos" == target."os" or null);
          }
        ];

      };
      "rustls-native-certs 0.8.0" = rec {
        crateName = "rustls-native-certs";
        version = "0.8.0";
        edition = "2021";
        sha256 = "12izz1ahwj3yr9fkd39q1w535577z9wsapsahz6jcwxyyaj1ibzw";
        libName = "rustls_native_certs";
        dependencies = [
          {
            name = "openssl-probe";
            packageId = "openssl-probe";
            target = { target, features }: ((target."unix" or false) && (!("macos" == target."os" or null)));
          }
          {
            name = "rustls-pemfile";
            packageId = "rustls-pemfile 2.1.3";
          }
          {
            name = "rustls-pki-types";
            packageId = "rustls-pki-types";
            rename = "pki-types";
          }
          {
            name = "schannel";
            packageId = "schannel";
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "security-framework";
            packageId = "security-framework";
            target = { target, features }: ("macos" == target."os" or null);
          }
        ];

      };
      "rustls-pemfile 1.0.4" = rec {
        crateName = "rustls-pemfile";
        version = "1.0.4";
        edition = "2018";
        sha256 = "1324n5bcns0rnw6vywr5agff3rwfvzphi7rmbyzwnv6glkhclx0w";
        libName = "rustls_pemfile";
        dependencies = [
          {
            name = "base64";
            packageId = "base64 0.21.7";
          }
        ];

      };
      "rustls-pemfile 2.1.3" = rec {
        crateName = "rustls-pemfile";
        version = "2.1.3";
        edition = "2018";
        sha256 = "09bl873pkibmb2da49kkbm9jlagscjvzrv257q6k01p101my2vqr";
        libName = "rustls_pemfile";
        dependencies = [
          {
            name = "base64";
            packageId = "base64 0.22.1";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "rustls-pki-types";
            packageId = "rustls-pki-types";
            rename = "pki-types";
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "base64/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "rustls-pki-types" = rec {
        crateName = "rustls-pki-types";
        version = "1.8.0";
        edition = "2021";
        sha256 = "1w6a1x8h61p5ddlnijfvj5fvs516h5xr5rw1pc0m8rgq8vk2q2pw";
        libName = "rustls_pki_types";
        features = {
          "default" = [ "alloc" ];
          "std" = [ "alloc" ];
          "web" = [ "web-time" ];
          "web-time" = [ "dep:web-time" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "rustls-platform-verifier" = rec {
        crateName = "rustls-platform-verifier";
        version = "0.3.4";
        edition = "2021";
        sha256 = "145lhjn9w5khp0fn4lagaa8qqyjyhfqn2dg6llva6qyzvy5qgfxg";
        libName = "rustls_platform_verifier";type = [ "cdylib" "rlib" ];
        authors = [
          "ComplexSpaces <complexspacescode@gmail.com>"
          "1Password"
        ];
        dependencies = [
          {
            name = "core-foundation";
            packageId = "core-foundation";
            target = { target, features }: (("macos" == target."os" or null) || ("ios" == target."os" or null) || ("tvos" == target."os" or null));
          }
          {
            name = "core-foundation-sys";
            packageId = "core-foundation-sys";
            target = { target, features }: (("macos" == target."os" or null) || ("ios" == target."os" or null) || ("tvos" == target."os" or null));
          }
          {
            name = "jni";
            packageId = "jni";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "jni";
            packageId = "jni";
            usesDefaultFeatures = false;
            target = { target, features }: ("android" == target."os" or null);
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "rustls";
            packageId = "rustls 0.23.13";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "rustls-native-certs";
            packageId = "rustls-native-certs 0.7.3";
            target = { target, features }: ((target."unix" or false) && (!("android" == target."os" or null)) && (!("macos" == target."os" or null)) && (!("ios" == target."os" or null)) && (!("tvos" == target."os" or null)) && (!("wasm32" == target."arch" or null)));
          }
          {
            name = "rustls-platform-verifier-android";
            packageId = "rustls-platform-verifier-android";
            target = { target, features }: ("android" == target."os" or null);
          }
          {
            name = "rustls-webpki";
            packageId = "rustls-webpki 0.102.8";
            rename = "webpki";
            usesDefaultFeatures = false;
            target = { target, features }: ((target."unix" or false) && (!("android" == target."os" or null)) && (!("macos" == target."os" or null)) && (!("ios" == target."os" or null)) && (!("tvos" == target."os" or null)) && (!("wasm32" == target."arch" or null)));
          }
          {
            name = "rustls-webpki";
            packageId = "rustls-webpki 0.102.8";
            rename = "webpki";
            usesDefaultFeatures = false;
            target = { target, features }: ("android" == target."os" or null);
          }
          {
            name = "security-framework";
            packageId = "security-framework";
            target = { target, features }: (("macos" == target."os" or null) || ("ios" == target."os" or null) || ("tvos" == target."os" or null));
            features = [ "OSX_10_14" ];
          }
          {
            name = "security-framework-sys";
            packageId = "security-framework-sys";
            target = { target, features }: (("macos" == target."os" or null) || ("ios" == target."os" or null) || ("tvos" == target."os" or null));
            features = [ "OSX_10_14" ];
          }
          {
            name = "webpki-roots";
            packageId = "webpki-roots 0.26.6";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: (target."windows" or false);
            features = [ "wincrypt" "winerror" ];
          }
        ];
        devDependencies = [
          {
            name = "rustls";
            packageId = "rustls 0.23.13";
            usesDefaultFeatures = false;
            features = [ "ring" ];
          }
          {
            name = "webpki-roots";
            packageId = "webpki-roots 0.26.6";
            target = {target, features}: ("freebsd" == target."os" or null);
          }
        ];
        features = {
          "android_logger" = [ "dep:android_logger" ];
          "base64" = [ "dep:base64" ];
          "cert-logging" = [ "base64" ];
          "docsrs" = [ "jni" ];
          "ffi-testing" = [ "android_logger" "rustls/ring" ];
          "jni" = [ "dep:jni" ];
        };
      };
      "rustls-platform-verifier-android" = rec {
        crateName = "rustls-platform-verifier-android";
        version = "0.1.1";
        edition = "2021";
        sha256 = "13vq6sxsgz9547xm2zbdxiw8x7ad1g8n8ax6xvxsjqszk7q6awgq";
        libName = "rustls_platform_verifier_android";

      };
      "rustls-webpki 0.101.7" = rec {
        crateName = "rustls-webpki";
        version = "0.101.7";
        edition = "2021";
        sha256 = "0rapfhpkqp75552i8r0y7f4vq7csb4k7gjjans0df73sxv8paqlb";
        libName = "webpki";
        dependencies = [
          {
            name = "ring";
            packageId = "ring 0.17.8";
            usesDefaultFeatures = false;
          }
          {
            name = "untrusted";
            packageId = "untrusted 0.9.0";
          }
        ];
        features = {
          "alloc" = [ "ring/alloc" ];
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "rustls-webpki 0.102.8" = rec {
        crateName = "rustls-webpki";
        version = "0.102.8";
        edition = "2021";
        sha256 = "1sdy8ks86b7jpabpnb2px2s7f1sq8v0nqf6fnlvwzm4vfk41pjk4";
        libName = "webpki";
        dependencies = [
          {
            name = "aws-lc-rs";
            packageId = "aws-lc-rs";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "aws-lc-sys" ];
          }
          {
            name = "ring";
            packageId = "ring 0.17.8";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "rustls-pki-types";
            packageId = "rustls-pki-types";
            rename = "pki-types";
            usesDefaultFeatures = false;
          }
          {
            name = "untrusted";
            packageId = "untrusted 0.9.0";
          }
        ];
        features = {
          "alloc" = [ "ring?/alloc" "pki-types/alloc" ];
          "aws_lc_rs" = [ "dep:aws-lc-rs" ];
          "default" = [ "std" "ring" ];
          "ring" = [ "dep:ring" ];
          "std" = [ "alloc" "pki-types/std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "aws_lc_rs" "default" "ring" "std" ];
      };
      "rustversion" = rec {
        crateName = "rustversion";
        version = "1.0.17";
        edition = "2018";
        sha256 = "1mm3fckyvb0l2209in1n2k05sws5d9mpkszbnwhq3pkq8apjhpcm";
        procMacro = true;
        build = "build/build.rs";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];

      };
      "rusty-fork" = rec {
        crateName = "rusty-fork";
        version = "0.3.0";
        edition = "2018";
        sha256 = "0kxwq5c480gg6q0j3bg4zzyfh2kwmc3v2ba94jw8ncjc8mpcqgfb";
        libName = "rusty_fork";
        authors = [
          "Jason Lingle"
        ];
        dependencies = [
          {
            name = "fnv";
            packageId = "fnv";
          }
          {
            name = "quick-error";
            packageId = "quick-error";
          }
          {
            name = "tempfile";
            packageId = "tempfile";
          }
          {
            name = "wait-timeout";
            packageId = "wait-timeout";
            optional = true;
          }
        ];
        features = {
          "default" = [ "timeout" ];
          "timeout" = [ "wait-timeout" ];
          "wait-timeout" = [ "dep:wait-timeout" ];
        };
        resolvedDefaultFeatures = [ "timeout" "wait-timeout" ];
      };
      "rustyline" = rec {
        crateName = "rustyline";
        version = "14.0.0";
        edition = "2021";
        sha256 = "0qvyckd5hbi2cf6kw4bsng6vb6rb9dzjfy24dndzszm3dn9yh0vq";
        authors = [
          "Katsu Kawakami <kkawa1570@gmail.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.6.0";
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "clipboard-win";
            packageId = "clipboard-win";
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "fd-lock";
            packageId = "fd-lock";
            optional = true;
          }
          {
            name = "home";
            packageId = "home";
            optional = true;
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "memchr";
            packageId = "memchr";
          }
          {
            name = "nix";
            packageId = "nix 0.28.0";
            usesDefaultFeatures = false;
            target = { target, features }: (target."unix" or false);
            features = [ "fs" "ioctl" "poll" "signal" "term" ];
          }
          {
            name = "radix_trie";
            packageId = "radix_trie";
            optional = true;
          }
          {
            name = "unicode-segmentation";
            packageId = "unicode-segmentation";
          }
          {
            name = "unicode-width";
            packageId = "unicode-width";
          }
          {
            name = "utf8parse";
            packageId = "utf8parse";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.52.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_Foundation" "Win32_System_Console" "Win32_Security" "Win32_System_Threading" "Win32_UI_Input_KeyboardAndMouse" ];
          }
        ];
        features = {
          "buffer-redux" = [ "dep:buffer-redux" ];
          "case_insensitive_history_search" = [ "regex" ];
          "custom-bindings" = [ "radix_trie" ];
          "default" = [ "custom-bindings" "with-dirs" "with-file-history" ];
          "derive" = [ "rustyline-derive" ];
          "fd-lock" = [ "dep:fd-lock" ];
          "home" = [ "dep:home" ];
          "radix_trie" = [ "dep:radix_trie" ];
          "regex" = [ "dep:regex" ];
          "rusqlite" = [ "dep:rusqlite" ];
          "rustyline-derive" = [ "dep:rustyline-derive" ];
          "signal-hook" = [ "dep:signal-hook" ];
          "skim" = [ "dep:skim" ];
          "termios" = [ "dep:termios" ];
          "with-dirs" = [ "home" ];
          "with-file-history" = [ "fd-lock" ];
          "with-fuzzy" = [ "skim" ];
          "with-sqlite-history" = [ "rusqlite" ];
        };
        resolvedDefaultFeatures = [ "custom-bindings" "default" "fd-lock" "home" "radix_trie" "with-dirs" "with-file-history" ];
      };
      "rustyline-derive" = rec {
        crateName = "rustyline-derive";
        version = "0.10.0";
        edition = "2018";
        sha256 = "0lfr25qdrn0awccq999d6g8m7bhsyxbkliibdpzimbzniff9bbz5";
        procMacro = true;
        libName = "rustyline_derive";
        authors = [
          "gwenn"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.86";
            usesDefaultFeatures = false;
          }
          {
            name = "quote";
            packageId = "quote 1.0.37";
            usesDefaultFeatures = false;
          }
          {
            name = "syn";
            packageId = "syn 2.0.77";
            usesDefaultFeatures = false;
            features = [ "derive" "parsing" "printing" "proc-macro" ];
          }
        ];

      };
      "ryu" = rec {
        crateName = "ryu";
        version = "1.0.18";
        edition = "2018";
        sha256 = "17xx2s8j1lln7iackzd9p0sv546vjq71i779gphjq923vjh5pjzk";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        features = {
          "no-panic" = [ "dep:no-panic" ];
        };
      };
      "salsa20" = rec {
        crateName = "salsa20";
        version = "0.10.2";
        edition = "2021";
        sha256 = "04w211x17xzny53f83p8f7cj7k2hi8zck282q5aajwqzydd2z8lp";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "cipher";
            packageId = "cipher";
          }
        ];
        devDependencies = [
          {
            name = "cipher";
            packageId = "cipher";
            features = [ "dev" ];
          }
        ];
        features = {
          "std" = [ "cipher/std" ];
          "zeroize" = [ "cipher/zeroize" ];
        };
      };
      "same-file" = rec {
        crateName = "same-file";
        version = "1.0.6";
        edition = "2018";
        sha256 = "00h5j1w87dmhnvbv9l8bic3y7xxsnjmssvifw2ayvgx9mb1ivz4k";
        libName = "same_file";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "winapi-util";
            packageId = "winapi-util";
            target = { target, features }: (target."windows" or false);
          }
        ];

      };
      "scale-info" = rec {
        crateName = "scale-info";
        version = "2.11.3";
        edition = "2021";
        sha256 = "096hkfyvhd673m6rhllqvk6ivkpnxldpda90r0n9wqlk530p187c";
        libName = "scale_info";
        authors = [
          "Parity Technologies <admin@parity.io>"
          "Centrality Developers <support@centrality.ai>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "derive_more";
            packageId = "derive_more";
            usesDefaultFeatures = false;
            features = [ "from" ];
          }
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec 3.6.12";
            rename = "scale";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "scale-info-derive";
            packageId = "scale-info-derive";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "scale-info-derive";
            packageId = "scale-info-derive";
          }
        ];
        features = {
          "bit-vec" = [ "bitvec" ];
          "bitvec" = [ "dep:bitvec" ];
          "decode" = [ "scale/full" ];
          "default" = [ "std" ];
          "derive" = [ "scale-info-derive" ];
          "docs" = [ "scale-info-derive/docs" ];
          "scale-info-derive" = [ "dep:scale-info-derive" ];
          "schema" = [ "std" "schemars" ];
          "schemars" = [ "dep:schemars" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "bitvec?/std" "scale/std" ];
        };
        resolvedDefaultFeatures = [ "derive" "scale-info-derive" ];
      };
      "scale-info-derive" = rec {
        crateName = "scale-info-derive";
        version = "2.11.3";
        edition = "2021";
        sha256 = "0qpbh5cdizdidp12d8z0yznckvwyj82jd8r2lnyp8h8r052ljd9d";
        procMacro = true;
        libName = "scale_info_derive";
        authors = [
          "Parity Technologies <admin@parity.io>"
          "Centrality Developers <support@centrality.ai>"
        ];
        dependencies = [
          {
            name = "proc-macro-crate";
            packageId = "proc-macro-crate 3.2.0";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.86";
          }
          {
            name = "quote";
            packageId = "quote 1.0.37";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            features = [ "derive" "visit" "visit-mut" "extra-traits" ];
          }
        ];
        features = {
          "default" = [ "docs" ];
        };
      };
      "schannel" = rec {
        crateName = "schannel";
        version = "0.1.24";
        edition = "2018";
        sha256 = "12wv1zwcs99rd4hnzc2fvmabvdihsvxq5780zxbxdqxnlbaszap9";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
          "Steffen Butzer <steffen.butzer@outlook.com>"
        ];
        dependencies = [
          {
            name = "windows-sys";
            packageId = "windows-sys 0.59.0";
            features = [ "Win32_Foundation" "Win32_Security_Cryptography" "Win32_Security_Authentication_Identity" "Win32_Security_Credentials" "Win32_System_Memory" ];
          }
        ];
        devDependencies = [
          {
            name = "windows-sys";
            packageId = "windows-sys 0.59.0";
            features = [ "Win32_System_SystemInformation" "Win32_System_Time" ];
          }
        ];

      };
      "scheduled-thread-pool" = rec {
        crateName = "scheduled-thread-pool";
        version = "0.2.7";
        edition = "2018";
        sha256 = "068s77f9xcpvzl70nsxk8750dzzc6f9pixajhd979815cj0ndg1w";
        libName = "scheduled_thread_pool";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
        ];
        dependencies = [
          {
            name = "parking_lot";
            packageId = "parking_lot 0.12.3";
          }
        ];

      };
      "schemars" = rec {
        crateName = "schemars";
        version = "0.8.21";
        edition = "2021";
        sha256 = "14lyx04388wgbilgcm0nl75w6359nw16glswfqv7x2rpi9329h09";
        authors = [
          "Graham Esau <gesau@hotmail.co.uk>"
        ];
        dependencies = [
          {
            name = "dyn-clone";
            packageId = "dyn-clone";
          }
          {
            name = "either";
            packageId = "either";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "schemars_derive";
            packageId = "schemars_derive";
            optional = true;
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
        ];
        features = {
          "arrayvec" = [ "arrayvec05" ];
          "arrayvec05" = [ "dep:arrayvec05" ];
          "arrayvec07" = [ "dep:arrayvec07" ];
          "bigdecimal" = [ "bigdecimal03" ];
          "bigdecimal03" = [ "dep:bigdecimal03" ];
          "bigdecimal04" = [ "dep:bigdecimal04" ];
          "bytes" = [ "dep:bytes" ];
          "chrono" = [ "dep:chrono" ];
          "default" = [ "derive" ];
          "derive" = [ "schemars_derive" ];
          "derive_json_schema" = [ "impl_json_schema" ];
          "either" = [ "dep:either" ];
          "enumset" = [ "dep:enumset" ];
          "impl_json_schema" = [ "derive" ];
          "indexmap" = [ "dep:indexmap" ];
          "indexmap1" = [ "indexmap" ];
          "indexmap2" = [ "dep:indexmap2" ];
          "preserve_order" = [ "indexmap" ];
          "raw_value" = [ "serde_json/raw_value" ];
          "rust_decimal" = [ "dep:rust_decimal" ];
          "schemars_derive" = [ "dep:schemars_derive" ];
          "semver" = [ "dep:semver" ];
          "smallvec" = [ "dep:smallvec" ];
          "smol_str" = [ "dep:smol_str" ];
          "url" = [ "dep:url" ];
          "uuid" = [ "uuid08" ];
          "uuid08" = [ "dep:uuid08" ];
          "uuid1" = [ "dep:uuid1" ];
        };
        resolvedDefaultFeatures = [ "default" "derive" "either" "schemars_derive" ];
      };
      "schemars_derive" = rec {
        crateName = "schemars_derive";
        version = "0.8.21";
        edition = "2021";
        sha256 = "03ncmrkldfmdc9skmlyysx2vqdlyyz91r5mbavw77zwaay4fbvmi";
        procMacro = true;
        authors = [
          "Graham Esau <gesau@hotmail.co.uk>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.86";
          }
          {
            name = "quote";
            packageId = "quote 1.0.37";
          }
          {
            name = "serde_derive_internals";
            packageId = "serde_derive_internals";
          }
          {
            name = "syn";
            packageId = "syn 2.0.77";
            features = [ "extra-traits" ];
          }
        ];

      };
      "scopeguard" = rec {
        crateName = "scopeguard";
        version = "1.2.0";
        edition = "2015";
        sha256 = "0jcz9sd47zlsgcnm1hdw0664krxwb5gczlif4qngj2aif8vky54l";
        authors = [
          "bluss"
        ];
        features = {
          "default" = [ "use_std" ];
        };
        resolvedDefaultFeatures = [ "default" "use_std" ];
      };
      "scrypt 0.10.0" = rec {
        crateName = "scrypt";
        version = "0.10.0";
        edition = "2021";
        sha256 = "0pglmppcl8mdzfxdv2x9dsjrwxhc1bm9zvxjibnlv59jnv9297lz";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "hmac";
            packageId = "hmac";
          }
          {
            name = "pbkdf2";
            packageId = "pbkdf2 0.11.0";
            usesDefaultFeatures = false;
          }
          {
            name = "salsa20";
            packageId = "salsa20";
            usesDefaultFeatures = false;
          }
          {
            name = "sha2";
            packageId = "sha2 0.10.8";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "simple" "std" ];
          "password-hash" = [ "dep:password-hash" ];
          "simple" = [ "password-hash" ];
          "std" = [ "password-hash/std" ];
        };
      };
      "scrypt 0.11.0" = rec {
        crateName = "scrypt";
        version = "0.11.0";
        edition = "2021";
        sha256 = "07zxfaqpns9jn0mnxm7wj3ksqsinyfpirkav1f7kc2bchs2s65h5";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "pbkdf2";
            packageId = "pbkdf2 0.12.2";
          }
          {
            name = "salsa20";
            packageId = "salsa20";
            usesDefaultFeatures = false;
          }
          {
            name = "sha2";
            packageId = "sha2 0.10.8";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "simple" "std" ];
          "password-hash" = [ "dep:password-hash" ];
          "simple" = [ "password-hash" ];
          "std" = [ "password-hash/std" ];
        };
      };
      "sct" = rec {
        crateName = "sct";
        version = "0.7.1";
        edition = "2021";
        sha256 = "056lmi2xkzdg1dbai6ha3n57s18cbip4pnmpdhyljli3m99n216s";
        authors = [
          "Joseph Birr-Pixton <jpixton@gmail.com>"
        ];
        dependencies = [
          {
            name = "ring";
            packageId = "ring 0.17.8";
          }
          {
            name = "untrusted";
            packageId = "untrusted 0.9.0";
          }
        ];

      };
      "seahash" = rec {
        crateName = "seahash";
        version = "4.1.0";
        edition = "2015";
        sha256 = "0sxsb64np6bvnppjz5hg4rqpnkczhsl8w8kf2a5lr1c08xppn40w";
        authors = [
          "ticki <ticki@users.noreply.github.com>"
          "Tom Almeida <tom@tommoa.me>"
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "sec1 0.3.0" = rec {
        crateName = "sec1";
        version = "0.3.0";
        edition = "2021";
        sha256 = "0a09lk5w3nyggpyz54m10nnlg9v8qbh6kw3v1bgla31988c4rqiv";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "base16ct";
            packageId = "base16ct 0.1.1";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "der";
            packageId = "der 0.6.1";
            optional = true;
            features = [ "oid" ];
          }
          {
            name = "generic-array";
            packageId = "generic-array";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "pkcs8";
            packageId = "pkcs8 0.9.0";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "subtle";
            packageId = "subtle";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "der/alloc" "pkcs8/alloc" "zeroize/alloc" ];
          "base16ct" = [ "dep:base16ct" ];
          "default" = [ "der" "point" ];
          "der" = [ "dep:der" ];
          "generic-array" = [ "dep:generic-array" ];
          "pem" = [ "alloc" "der/pem" "pkcs8/pem" ];
          "pkcs8" = [ "dep:pkcs8" ];
          "point" = [ "base16ct" "generic-array" ];
          "serde" = [ "serdect" ];
          "serdect" = [ "dep:serdect" ];
          "std" = [ "der/std" "alloc" ];
          "subtle" = [ "dep:subtle" ];
          "zeroize" = [ "dep:zeroize" ];
        };
        resolvedDefaultFeatures = [ "alloc" "base16ct" "default" "der" "generic-array" "pkcs8" "point" "subtle" "zeroize" ];
      };
      "sec1 0.7.3" = rec {
        crateName = "sec1";
        version = "0.7.3";
        edition = "2021";
        sha256 = "1p273j8c87pid6a1iyyc7vxbvifrw55wbxgr0dh3l8vnbxb7msfk";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "base16ct";
            packageId = "base16ct 0.2.0";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "der";
            packageId = "der 0.7.9";
            optional = true;
            features = [ "oid" ];
          }
          {
            name = "generic-array";
            packageId = "generic-array";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "pkcs8";
            packageId = "pkcs8 0.10.2";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "serdect";
            packageId = "serdect";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "subtle";
            packageId = "subtle";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "der?/alloc" "pkcs8?/alloc" "zeroize?/alloc" ];
          "default" = [ "der" "point" ];
          "der" = [ "dep:der" "zeroize" ];
          "pem" = [ "alloc" "der/pem" "pkcs8/pem" ];
          "pkcs8" = [ "dep:pkcs8" ];
          "point" = [ "dep:base16ct" "dep:generic-array" ];
          "serde" = [ "dep:serdect" ];
          "std" = [ "alloc" "der?/std" ];
          "subtle" = [ "dep:subtle" ];
          "zeroize" = [ "dep:zeroize" "der?/zeroize" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "der" "pem" "pkcs8" "point" "serde" "std" "subtle" "zeroize" ];
      };
      "secp256k1" = rec {
        crateName = "secp256k1";
        version = "0.27.0";
        edition = "2018";
        sha256 = "13wwv91qnx8lsyn891q16a6x6h46zz7m5w086pnmfyia5616p695";
        authors = [
          "Dawid Ciężarkiewicz <dpc@ucore.info>"
          "Andrew Poelstra <apoelstra@wpsoftware.net>"
        ];
        dependencies = [
          {
            name = "bitcoin_hashes";
            packageId = "bitcoin_hashes";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "secp256k1-sys";
            packageId = "secp256k1-sys";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "secp256k1-sys/alloc" ];
          "bitcoin-hashes" = [ "bitcoin_hashes" ];
          "bitcoin-hashes-std" = [ "std" "bitcoin_hashes" "bitcoin_hashes/std" ];
          "bitcoin_hashes" = [ "dep:bitcoin_hashes" ];
          "default" = [ "std" ];
          "global-context" = [ "std" ];
          "global-context-less-secure" = [ "global-context" ];
          "lowmemory" = [ "secp256k1-sys/lowmemory" ];
          "rand" = [ "dep:rand" ];
          "rand-std" = [ "std" "rand" "rand/std" "rand/std_rng" ];
          "recovery" = [ "secp256k1-sys/recovery" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "alloc" "secp256k1-sys/std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "bitcoin_hashes" "default" "global-context" "rand" "rand-std" "recovery" "std" ];
      };
      "secp256k1-sys" = rec {
        crateName = "secp256k1-sys";
        version = "0.8.1";
        edition = "2018";
        links = "rustsecp256k1_v0_8_1";
        sha256 = "0zm0kw4v8nn2p87h2zwwzpvwy4rvmg26749vfliv5gzgx6wjk8bh";
        libName = "secp256k1_sys";
        authors = [
          "Dawid Ciężarkiewicz <dpc@ucore.info>"
          "Andrew Poelstra <apoelstra@wpsoftware.net>"
          "Steven Roose <steven@stevenroose.org>"
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "recovery" "std" ];
      };
      "secrecy" = rec {
        crateName = "secrecy";
        version = "0.8.0";
        edition = "2018";
        sha256 = "07p9h2bpkkg61f1fzzdqqbf74kwv1gg095r1cdmjzzbcl17cblcv";
        authors = [
          "Tony Arcieri <tony@iqlusion.io>"
        ];
        dependencies = [
          {
            name = "zeroize";
            packageId = "zeroize";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "zeroize/alloc" ];
          "bytes" = [ "dep:bytes" ];
          "default" = [ "alloc" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" ];
      };
      "security-framework" = rec {
        crateName = "security-framework";
        version = "2.11.1";
        edition = "2021";
        sha256 = "00ldclwx78dm61v7wkach9lcx76awlrv0fdgjdwch4dmy12j4yw9";
        libName = "security_framework";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
          "Kornel <kornel@geekhood.net>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.6.0";
          }
          {
            name = "core-foundation";
            packageId = "core-foundation";
          }
          {
            name = "core-foundation-sys";
            packageId = "core-foundation-sys";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "num-bigint";
            packageId = "num-bigint 0.4.6";
            optional = true;
          }
          {
            name = "security-framework-sys";
            packageId = "security-framework-sys";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "OSX_10_10" = [ "OSX_10_9" "security-framework-sys/OSX_10_10" ];
          "OSX_10_11" = [ "OSX_10_10" "security-framework-sys/OSX_10_11" ];
          "OSX_10_12" = [ "OSX_10_11" "security-framework-sys/OSX_10_12" ];
          "OSX_10_13" = [ "OSX_10_12" "security-framework-sys/OSX_10_13" "alpn" "session-tickets" "serial-number-bigint" ];
          "OSX_10_14" = [ "OSX_10_13" "security-framework-sys/OSX_10_14" ];
          "OSX_10_15" = [ "OSX_10_14" "security-framework-sys/OSX_10_15" ];
          "OSX_10_9" = [ "security-framework-sys/OSX_10_9" ];
          "default" = [ "OSX_10_12" ];
          "log" = [ "dep:log" ];
          "serial-number-bigint" = [ "dep:num-bigint" ];
        };
        resolvedDefaultFeatures = [ "OSX_10_10" "OSX_10_11" "OSX_10_12" "OSX_10_13" "OSX_10_14" "OSX_10_9" "alpn" "default" "serial-number-bigint" "session-tickets" ];
      };
      "security-framework-sys" = rec {
        crateName = "security-framework-sys";
        version = "2.12.0";
        edition = "2021";
        sha256 = "1dml0lp9lrvvi01s011lyss5kzzsmakaamdwsxr0431jd4l2jjpa";
        libName = "security_framework_sys";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
          "Kornel <kornel@geekhood.net>"
        ];
        dependencies = [
          {
            name = "core-foundation-sys";
            packageId = "core-foundation-sys";
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        features = {
          "OSX_10_10" = [ "OSX_10_9" ];
          "OSX_10_11" = [ "OSX_10_10" ];
          "OSX_10_12" = [ "OSX_10_11" ];
          "OSX_10_13" = [ "OSX_10_12" ];
          "OSX_10_14" = [ "OSX_10_13" ];
          "OSX_10_15" = [ "OSX_10_14" ];
          "default" = [ "OSX_10_12" ];
        };
        resolvedDefaultFeatures = [ "OSX_10_10" "OSX_10_11" "OSX_10_12" "OSX_10_13" "OSX_10_14" "OSX_10_9" "default" ];
      };
      "semver" = rec {
        crateName = "semver";
        version = "1.0.23";
        edition = "2018";
        sha256 = "12wqpxfflclbq4dv8sa6gchdh92ahhwn4ci1ls22wlby3h57wsb1";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "default" "serde" "std" ];
      };
      "send_wrapper 0.4.0" = rec {
        crateName = "send_wrapper";
        version = "0.4.0";
        edition = "2015";
        sha256 = "1l7s28vfnwdbjyrrk3lx81jy4f0dcrv4iwyah2wj6vndxhqxaf7n";
        authors = [
          "Thomas Keh"
        ];

      };
      "send_wrapper 0.6.0" = rec {
        crateName = "send_wrapper";
        version = "0.6.0";
        edition = "2018";
        sha256 = "0wrxzsh9fzgkkkms621ydnz8mj30ilyq299a8cf65jn1y72hw2yd";
        authors = [
          "Thomas Keh"
        ];
        features = {
          "futures" = [ "futures-core" ];
          "futures-core" = [ "dep:futures-core" ];
        };
      };
      "seq-macro" = rec {
        crateName = "seq-macro";
        version = "0.3.5";
        edition = "2018";
        sha256 = "1d50kbaslrrd0374ivx15jg57f03y5xzil1wd2ajlvajzlkbzw53";
        procMacro = true;
        libName = "seq_macro";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];

      };
      "serde" = rec {
        crateName = "serde";
        version = "1.0.210";
        edition = "2018";
        sha256 = "0flc0z8wgax1k4j5bf2zyq48bgzyv425jkd5w0i6wbh7f8j5kqy8";
        authors = [
          "Erick Tryzelaar <erick.tryzelaar@gmail.com>"
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "serde_derive";
            packageId = "serde_derive";
            optional = true;
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
            target = { target, features }: false;
          }
        ];
        devDependencies = [
          {
            name = "serde_derive";
            packageId = "serde_derive";
          }
        ];
        features = {
          "default" = [ "std" ];
          "derive" = [ "serde_derive" ];
          "serde_derive" = [ "dep:serde_derive" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "derive" "rc" "serde_derive" "std" ];
      };
      "serde-name" = rec {
        crateName = "serde-name";
        version = "0.2.1";
        edition = "2018";
        sha256 = "1w0h2xfmd7zk178wf21kvk8minj9hqw9ra9gcjrz5r64pkmi8nrv";
        libName = "serde_name";
        authors = [
          "Mathieu Baudet <mathieu.baudet@zefchain.com>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
        ];

      };
      "serde-reflection" = rec {
        crateName = "serde-reflection";
        version = "0.4.0";
        edition = "2021";
        sha256 = "0p75cyswj2ywssj0di69885x6pwsg1kp913ril6mbzw98ak9hrsv";
        libName = "serde_reflection";
        authors = [
          "Mathieu Baudet <mathieu.baudet@zefchain.com>"
        ];
        dependencies = [
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
        ];

      };
      "serde_bytes" = rec {
        crateName = "serde_bytes";
        version = "0.11.15";
        edition = "2018";
        sha256 = "0sjwczchd9p4ak4m644jpkv4r181zr8yj14fdjll1fq6rc2caz1q";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "serde/alloc" ];
          "default" = [ "std" ];
          "std" = [ "serde/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "serde_derive" = rec {
        crateName = "serde_derive";
        version = "1.0.210";
        edition = "2015";
        sha256 = "07yzy4wafk79ps0hmbqmsqh5xjna4pm4q57wc847bb8gl3nh4f94";
        procMacro = true;
        authors = [
          "Erick Tryzelaar <erick.tryzelaar@gmail.com>"
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.86";
            usesDefaultFeatures = false;
            features = [ "proc-macro" ];
          }
          {
            name = "quote";
            packageId = "quote 1.0.37";
            usesDefaultFeatures = false;
            features = [ "proc-macro" ];
          }
          {
            name = "syn";
            packageId = "syn 2.0.77";
            usesDefaultFeatures = false;
            features = [ "clone-impls" "derive" "parsing" "printing" "proc-macro" ];
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "serde_derive_internals" = rec {
        crateName = "serde_derive_internals";
        version = "0.29.1";
        edition = "2015";
        sha256 = "04g7macx819vbnxhi52cx0nhxi56xlhrybgwybyy7fb9m4h6mlhq";
        libPath = "lib.rs";
        authors = [
          "Erick Tryzelaar <erick.tryzelaar@gmail.com>"
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.86";
            usesDefaultFeatures = false;
          }
          {
            name = "quote";
            packageId = "quote 1.0.37";
            usesDefaultFeatures = false;
          }
          {
            name = "syn";
            packageId = "syn 2.0.77";
            usesDefaultFeatures = false;
            features = [ "clone-impls" "derive" "parsing" "printing" ];
          }
        ];

      };
      "serde_json" = rec {
        crateName = "serde_json";
        version = "1.0.128";
        edition = "2021";
        sha256 = "1n43nia50ybpcfmh3gcw4lcc627qsg9nyakzwgkk9pm10xklbxbg";
        authors = [
          "Erick Tryzelaar <erick.tryzelaar@gmail.com>"
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "indexmap";
            packageId = "indexmap 2.5.0";
            optional = true;
          }
          {
            name = "itoa";
            packageId = "itoa";
          }
          {
            name = "memchr";
            packageId = "memchr";
            usesDefaultFeatures = false;
          }
          {
            name = "ryu";
            packageId = "ryu";
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
        ];
        features = {
          "alloc" = [ "serde/alloc" ];
          "default" = [ "std" ];
          "indexmap" = [ "dep:indexmap" ];
          "preserve_order" = [ "indexmap" "std" ];
          "std" = [ "memchr/std" "serde/std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "indexmap" "preserve_order" "raw_value" "std" "unbounded_depth" ];
      };
      "serde_path_to_error" = rec {
        crateName = "serde_path_to_error";
        version = "0.1.16";
        edition = "2021";
        sha256 = "19hlz2359l37ifirskpcds7sxg0gzpqvfilibs7whdys0128i6dg";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "itoa";
            packageId = "itoa";
          }
          {
            name = "serde";
            packageId = "serde";
          }
        ];

      };
      "serde_repr" = rec {
        crateName = "serde_repr";
        version = "0.1.19";
        edition = "2021";
        sha256 = "1sb4cplc33z86pzlx38234xr141wr3cmviqgssiadisgl8dlar3c";
        procMacro = true;
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.86";
          }
          {
            name = "quote";
            packageId = "quote 1.0.37";
          }
          {
            name = "syn";
            packageId = "syn 2.0.77";
          }
        ];

      };
      "serde_spanned" = rec {
        crateName = "serde_spanned";
        version = "0.6.8";
        edition = "2021";
        sha256 = "1q89g70azwi4ybilz5jb8prfpa575165lmrffd49vmcf76qpqq47";
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
        ];
        devDependencies = [
          {
            name = "serde";
            packageId = "serde";
          }
        ];
        features = {
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "serde" ];
      };
      "serde_urlencoded" = rec {
        crateName = "serde_urlencoded";
        version = "0.7.1";
        edition = "2018";
        sha256 = "1zgklbdaysj3230xivihs30qi5vkhigg323a9m62k8jwf4a1qjfk";
        authors = [
          "Anthony Ramine <n.oxyde@gmail.com>"
        ];
        dependencies = [
          {
            name = "form_urlencoded";
            packageId = "form_urlencoded";
          }
          {
            name = "itoa";
            packageId = "itoa";
          }
          {
            name = "ryu";
            packageId = "ryu";
          }
          {
            name = "serde";
            packageId = "serde";
          }
        ];

      };
      "serde_with" = rec {
        crateName = "serde_with";
        version = "3.9.0";
        edition = "2021";
        sha256 = "0mxqyh2qzq5xi8pnv9647337pz107yjv3ck7x9b229s892lwzkk9";
        authors = [
          "Jonas Bushart"
          "Marcin Kaźmierczak"
        ];
        dependencies = [
          {
            name = "base64";
            packageId = "base64 0.22.1";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "chrono";
            packageId = "chrono";
            rename = "chrono_0_4";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "serde" ];
          }
          {
            name = "hex";
            packageId = "hex";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "indexmap";
            packageId = "indexmap 1.9.3";
            rename = "indexmap_1";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "serde-1" ];
          }
          {
            name = "indexmap";
            packageId = "indexmap 2.5.0";
            rename = "indexmap_2";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "serde" ];
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "serde_with_macros";
            packageId = "serde_with_macros";
            optional = true;
          }
          {
            name = "time";
            packageId = "time";
            rename = "time_0_3";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            features = [ "preserve_order" ];
          }
        ];
        features = {
          "alloc" = [ "serde/alloc" "base64?/alloc" "chrono_0_4?/alloc" "hex?/alloc" "serde_json?/alloc" "time_0_3?/alloc" ];
          "base64" = [ "dep:base64" "alloc" ];
          "chrono" = [ "chrono_0_4" ];
          "chrono_0_4" = [ "dep:chrono_0_4" ];
          "default" = [ "std" "macros" ];
          "guide" = [ "dep:doc-comment" "dep:document-features" "macros" "std" ];
          "hashbrown_0_14" = [ "dep:hashbrown_0_14" "alloc" ];
          "hex" = [ "dep:hex" "alloc" ];
          "indexmap" = [ "indexmap_1" ];
          "indexmap_1" = [ "dep:indexmap_1" "alloc" ];
          "indexmap_2" = [ "dep:indexmap_2" "alloc" ];
          "json" = [ "dep:serde_json" "alloc" ];
          "macros" = [ "dep:serde_with_macros" ];
          "schemars_0_8" = [ "dep:schemars_0_8" "std" "serde_with_macros?/schemars_0_8" ];
          "std" = [ "alloc" "serde/std" "chrono_0_4?/clock" "chrono_0_4?/std" "indexmap_1?/std" "indexmap_2?/std" "time_0_3?/serde-well-known" "time_0_3?/std" ];
          "time_0_3" = [ "dep:time_0_3" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "macros" "std" ];
      };
      "serde_with_macros" = rec {
        crateName = "serde_with_macros";
        version = "3.9.0";
        edition = "2021";
        sha256 = "0l1kfkzj46can1rwfspmnan8shqr0prlmbaig9hp9wpl3scy9zm8";
        procMacro = true;
        authors = [
          "Jonas Bushart"
        ];
        dependencies = [
          {
            name = "darling";
            packageId = "darling 0.20.10";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.86";
          }
          {
            name = "quote";
            packageId = "quote 1.0.37";
          }
          {
            name = "syn";
            packageId = "syn 2.0.77";
            features = [ "extra-traits" "full" "parsing" ];
          }
        ];
        features = {
        };
      };
      "serde_yaml" = rec {
        crateName = "serde_yaml";
        version = "0.8.26";
        edition = "2021";
        sha256 = "06y7gxy312mink8nsnmci9cw0ykpgsdcxmayg0snmdbnnwrp92jp";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "indexmap";
            packageId = "indexmap 1.9.3";
            features = [ "std" ];
          }
          {
            name = "ryu";
            packageId = "ryu";
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "yaml-rust";
            packageId = "yaml-rust";
          }
        ];

      };
      "serdect" = rec {
        crateName = "serdect";
        version = "0.2.0";
        edition = "2021";
        sha256 = "0xw1b6acw6nd0jchzyxzr97f0s4shbcqh92iyjwln0cskshi8kx8";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "base16ct";
            packageId = "base16ct 0.2.0";
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
        ];
        features = {
          "alloc" = [ "base16ct/alloc" "serde/alloc" ];
          "default" = [ "alloc" ];
          "zeroize" = [ "dep:zeroize" ];
        };
        resolvedDefaultFeatures = [ "alloc" ];
      };
      "serial_test" = rec {
        crateName = "serial_test";
        version = "2.0.0";
        edition = "2018";
        sha256 = "0b9v0csv9wxl1gcjq99plwimxbmhgr6kzbwqyb457qh3d22xsmhf";
        authors = [
          "Tom Parker-Shemilt <palfrey@tevp.net>"
        ];
        dependencies = [
          {
            name = "dashmap";
            packageId = "dashmap";
          }
          {
            name = "futures";
            packageId = "futures";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "executor" ];
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "log";
            packageId = "log";
            optional = true;
          }
          {
            name = "parking_lot";
            packageId = "parking_lot 0.12.3";
          }
          {
            name = "serial_test_derive";
            packageId = "serial_test_derive";
          }
        ];
        features = {
          "async" = [ "futures" "serial_test_derive/async" ];
          "default" = [ "logging" "async" ];
          "docsrs" = [ "document-features" ];
          "document-features" = [ "dep:document-features" ];
          "file_locks" = [ "fslock" ];
          "fslock" = [ "dep:fslock" ];
          "futures" = [ "dep:futures" ];
          "log" = [ "dep:log" ];
          "logging" = [ "log" ];
        };
        resolvedDefaultFeatures = [ "async" "default" "futures" "log" "logging" ];
      };
      "serial_test_derive" = rec {
        crateName = "serial_test_derive";
        version = "2.0.0";
        edition = "2018";
        sha256 = "13zvd5ds76hhjn3z0axc05n15lzpxpz77jcykic8q5knhlbjklci";
        procMacro = true;
        authors = [
          "Tom Parker-Shemilt <palfrey@tevp.net>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.86";
          }
          {
            name = "quote";
            packageId = "quote 1.0.37";
          }
          {
            name = "syn";
            packageId = "syn 2.0.77";
            features = [ "full" ];
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "async" ];
      };
      "sha-1" = rec {
        crateName = "sha-1";
        version = "0.10.1";
        edition = "2018";
        sha256 = "1700fs5aiiailpd5h0ax4sgs2ngys0mqf3p4j0ry6j2p2zd8l1gm";
        libName = "sha1";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "cpufeatures";
            packageId = "cpufeatures";
            target = { target, features }: (("aarch64" == target."arch" or null) || ("x86" == target."arch" or null) || ("x86_64" == target."arch" or null));
          }
          {
            name = "digest";
            packageId = "digest 0.10.7";
          }
        ];
        devDependencies = [
          {
            name = "digest";
            packageId = "digest 0.10.7";
            features = [ "dev" ];
          }
        ];
        features = {
          "asm" = [ "sha1-asm" ];
          "default" = [ "std" ];
          "oid" = [ "digest/oid" ];
          "sha1-asm" = [ "dep:sha1-asm" ];
          "std" = [ "digest/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "sha1" = rec {
        crateName = "sha1";
        version = "0.10.6";
        edition = "2018";
        sha256 = "1fnnxlfg08xhkmwf2ahv634as30l1i3xhlhkvxflmasi5nd85gz3";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "cpufeatures";
            packageId = "cpufeatures";
            target = { target, features }: (("aarch64" == target."arch" or null) || ("x86" == target."arch" or null) || ("x86_64" == target."arch" or null));
          }
          {
            name = "digest";
            packageId = "digest 0.10.7";
          }
        ];
        devDependencies = [
          {
            name = "digest";
            packageId = "digest 0.10.7";
            features = [ "dev" ];
          }
        ];
        features = {
          "asm" = [ "sha1-asm" ];
          "default" = [ "std" ];
          "oid" = [ "digest/oid" ];
          "sha1-asm" = [ "dep:sha1-asm" ];
          "std" = [ "digest/std" ];
        };
        resolvedDefaultFeatures = [ "default" "oid" "std" ];
      };
      "sha2 0.10.8" = rec {
        crateName = "sha2";
        version = "0.10.8";
        edition = "2018";
        sha256 = "1j1x78zk9il95w9iv46dh9wm73r6xrgj32y6lzzw7bxws9dbfgbr";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "cpufeatures";
            packageId = "cpufeatures";
            target = { target, features }: (("aarch64" == target."arch" or null) || ("x86_64" == target."arch" or null) || ("x86" == target."arch" or null));
          }
          {
            name = "digest";
            packageId = "digest 0.10.7";
          }
        ];
        devDependencies = [
          {
            name = "digest";
            packageId = "digest 0.10.7";
            features = [ "dev" ];
          }
        ];
        features = {
          "asm" = [ "sha2-asm" ];
          "asm-aarch64" = [ "asm" ];
          "default" = [ "std" ];
          "oid" = [ "digest/oid" ];
          "sha2-asm" = [ "dep:sha2-asm" ];
          "std" = [ "digest/std" ];
        };
        resolvedDefaultFeatures = [ "default" "oid" "std" ];
      };
      "sha2 0.9.9" = rec {
        crateName = "sha2";
        version = "0.9.9";
        edition = "2018";
        sha256 = "006q2f0ar26xcjxqz8zsncfgz86zqa5dkwlwv03rhx1rpzhs2n2d";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "block-buffer";
            packageId = "block-buffer 0.9.0";
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "cpufeatures";
            packageId = "cpufeatures";
            target = { target, features }: (("aarch64" == target."arch" or null) || ("x86_64" == target."arch" or null) || ("x86" == target."arch" or null));
          }
          {
            name = "digest";
            packageId = "digest 0.9.0";
          }
          {
            name = "opaque-debug";
            packageId = "opaque-debug";
          }
        ];
        devDependencies = [
          {
            name = "digest";
            packageId = "digest 0.9.0";
            features = [ "dev" ];
          }
        ];
        features = {
          "asm" = [ "sha2-asm" ];
          "asm-aarch64" = [ "asm" ];
          "default" = [ "std" ];
          "sha2-asm" = [ "dep:sha2-asm" ];
          "std" = [ "digest/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "sha3 0.10.8" = rec {
        crateName = "sha3";
        version = "0.10.8";
        edition = "2018";
        sha256 = "0q5s3qlwnk8d5j34jya98j1v2p3009wdmnqdza3yydwgi8kjv1vm";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "digest";
            packageId = "digest 0.10.7";
          }
          {
            name = "keccak";
            packageId = "keccak";
          }
        ];
        devDependencies = [
          {
            name = "digest";
            packageId = "digest 0.10.7";
            features = [ "dev" ];
          }
        ];
        features = {
          "asm" = [ "keccak/asm" ];
          "default" = [ "std" ];
          "oid" = [ "digest/oid" ];
          "std" = [ "digest/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "sha3 0.9.1" = rec {
        crateName = "sha3";
        version = "0.9.1";
        edition = "2018";
        sha256 = "02d85wpvz75a0n7r2da15ikqjwzamhii11qy9gqf6pafgm0rj4gq";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "block-buffer";
            packageId = "block-buffer 0.9.0";
            features = [ "block-padding" ];
          }
          {
            name = "digest";
            packageId = "digest 0.9.0";
          }
          {
            name = "keccak";
            packageId = "keccak";
          }
          {
            name = "opaque-debug";
            packageId = "opaque-debug";
          }
        ];
        devDependencies = [
          {
            name = "digest";
            packageId = "digest 0.9.0";
            features = [ "dev" ];
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "digest/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "sharded-slab" = rec {
        crateName = "sharded-slab";
        version = "0.1.7";
        edition = "2018";
        sha256 = "1xipjr4nqsgw34k7a2cgj9zaasl2ds6jwn89886kww93d32a637l";
        libName = "sharded_slab";
        authors = [
          "Eliza Weisman <eliza@buoyant.io>"
        ];
        dependencies = [
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
        ];
        features = {
          "loom" = [ "dep:loom" ];
        };
      };
      "shared-crypto" = rec {
        crateName = "shared-crypto";
        version = "0.5.0-alpha";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/shared-crypto; }
          else ./crates/shared-crypto;
        libName = "shared_crypto";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "bcs";
            packageId = "bcs";
          }
          {
            name = "eyre";
            packageId = "eyre";
          }
          {
            name = "fastcrypto";
            packageId = "fastcrypto";
            features = [ "copy_key" ];
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" "rc" ];
          }
          {
            name = "serde_repr";
            packageId = "serde_repr";
          }
        ];

      };
      "shell-words" = rec {
        crateName = "shell-words";
        version = "1.1.0";
        edition = "2015";
        sha256 = "1plgwx8r0h5ismbbp6cp03740wmzgzhip85k5hxqrrkaddkql614";
        libName = "shell_words";
        authors = [
          "Tomasz Miąsko <tomasz.miasko@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "shellexpand" = rec {
        crateName = "shellexpand";
        version = "3.1.0";
        edition = "2018";
        sha256 = "0jz1i14ziz8gbyj71212s7dqrw6q96f25i48zkmy66fcjhxzl0ys";
        authors = [
          "Vladimir Matveev <vmatveev@citrine.cc>"
          "Ian Jackson <iwj@torproject.org>"
        ];
        dependencies = [
          {
            name = "dirs";
            packageId = "dirs 5.0.1";
            optional = true;
          }
        ];
        features = {
          "bstr" = [ "dep:bstr" ];
          "default" = [ "base-0" "tilde" ];
          "dirs" = [ "dep:dirs" ];
          "full" = [ "full-msrv-1-51" ];
          "full-msrv-1-31" = [ "base-0" "tilde" ];
          "full-msrv-1-51" = [ "full-msrv-1-31" "path" ];
          "os_str_bytes" = [ "dep:os_str_bytes" ];
          "path" = [ "bstr" "os_str_bytes" ];
          "tilde" = [ "dirs" ];
        };
        resolvedDefaultFeatures = [ "base-0" "default" "dirs" "tilde" ];
      };
      "shlex" = rec {
        crateName = "shlex";
        version = "1.3.0";
        edition = "2015";
        sha256 = "0r1y6bv26c1scpxvhg2cabimrmwgbp4p3wy6syj9n0c4s3q2znhg";
        authors = [
          "comex <comexk@gmail.com>"
          "Fenhl <fenhl@fenhl.net>"
          "Adrian Taylor <adetaylor@chromium.org>"
          "Alex Touchet <alextouchet@outlook.com>"
          "Daniel Parks <dp+git@oxidized.org>"
          "Garrett Berg <googberg@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "signal-hook" = rec {
        crateName = "signal-hook";
        version = "0.3.17";
        edition = "2018";
        sha256 = "0098nsah04spqf3n8niirmfym4wsdgjl57c78kmzijlq8xymh8c6";
        libName = "signal_hook";
        authors = [
          "Michal 'vorner' Vaner <vorner@vorner.cz>"
          "Thomas Himmelstoss <thimm@posteo.de>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "signal-hook-registry";
            packageId = "signal-hook-registry";
          }
        ];
        features = {
          "cc" = [ "dep:cc" ];
          "default" = [ "channel" "iterator" ];
          "extended-siginfo" = [ "channel" "iterator" "extended-siginfo-raw" ];
          "extended-siginfo-raw" = [ "cc" ];
          "iterator" = [ "channel" ];
        };
        resolvedDefaultFeatures = [ "channel" "default" "iterator" ];
      };
      "signal-hook-mio" = rec {
        crateName = "signal-hook-mio";
        version = "0.2.4";
        edition = "2018";
        sha256 = "1k8pl9aafiadr4czsg8zal9b4jdk6kq5985p90i19jc5sh31mnrl";
        libName = "signal_hook_mio";
        authors = [
          "Michal 'vorner' Vaner <vorner@vorner.cz>"
          "Thomas Himmelstoss <thimm@posteo.de>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "mio";
            packageId = "mio 0.8.11";
            rename = "mio-0_8";
            optional = true;
            features = [ "net" "os-ext" ];
          }
          {
            name = "signal-hook";
            packageId = "signal-hook";
          }
        ];
        features = {
          "mio-0_6" = [ "dep:mio-0_6" ];
          "mio-0_7" = [ "dep:mio-0_7" ];
          "mio-0_8" = [ "dep:mio-0_8" ];
          "mio-1_0" = [ "dep:mio-1_0" ];
          "mio-uds" = [ "dep:mio-uds" ];
          "support-v0_6" = [ "mio-0_6" "mio-uds" ];
          "support-v0_7" = [ "mio-0_7" ];
          "support-v0_8" = [ "mio-0_8" ];
          "support-v1_0" = [ "mio-1_0" ];
        };
        resolvedDefaultFeatures = [ "mio-0_8" "support-v0_8" ];
      };
      "signal-hook-registry" = rec {
        crateName = "signal-hook-registry";
        version = "1.4.2";
        edition = "2015";
        sha256 = "1cb5akgq8ajnd5spyn587srvs4n26ryq0p78nswffwhv46sf1sd9";
        libName = "signal_hook_registry";
        authors = [
          "Michal 'vorner' Vaner <vorner@vorner.cz>"
          "Masaki Hara <ackie.h.gmai@gmail.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
        ];

      };
      "signature 1.6.4" = rec {
        crateName = "signature";
        version = "1.6.4";
        edition = "2021";
        sha256 = "0z3xg405pg827g6hfdprnszsdqkkbrsfx7f1dl04nv9g7cxks8vl";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "digest";
            packageId = "digest 0.10.7";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "derive-preview" = [ "digest-preview" "signature_derive" ];
          "digest" = [ "dep:digest" ];
          "digest-preview" = [ "digest" ];
          "rand-preview" = [ "rand_core" ];
          "rand_core" = [ "dep:rand_core" ];
          "signature_derive" = [ "dep:signature_derive" ];
        };
        resolvedDefaultFeatures = [ "default" "digest" "digest-preview" "hazmat-preview" "rand-preview" "rand_core" "std" ];
      };
      "signature 2.2.0" = rec {
        crateName = "signature";
        version = "2.2.0";
        edition = "2021";
        sha256 = "1pi9hd5vqfr3q3k49k37z06p7gs5si0in32qia4mmr1dancr6m3p";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "digest";
            packageId = "digest 0.10.7";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "derive" = [ "dep:derive" ];
          "digest" = [ "dep:digest" ];
          "rand_core" = [ "dep:rand_core" ];
          "std" = [ "alloc" "rand_core?/std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "digest" "rand_core" "std" ];
      };
      "simd-adler32" = rec {
        crateName = "simd-adler32";
        version = "0.3.7";
        edition = "2018";
        sha256 = "1zkq40c3iajcnr5936gjp9jjh1lpzhy44p3dq3fiw75iwr1w2vfn";
        libName = "simd_adler32";
        authors = [
          "Marvin Countryman <me@maar.vin>"
        ];
        features = {
          "default" = [ "std" "const-generics" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "similar" = rec {
        crateName = "similar";
        version = "2.6.0";
        edition = "2018";
        sha256 = "0vk89dx2mmjp81pmszsa1s3mpzvbiy4krvfbq3s3mc3k27wd9q8x";
        authors = [
          "Armin Ronacher <armin.ronacher@active-4.com>"
          "Pierre-Étienne Meunier <pe@pijul.org>"
          "Brandon Williams <bwilliams.eng@gmail.com>"
        ];
        features = {
          "bstr" = [ "dep:bstr" ];
          "bytes" = [ "bstr" "text" ];
          "default" = [ "text" ];
          "inline" = [ "text" ];
          "serde" = [ "dep:serde" ];
          "unicode" = [ "text" "unicode-segmentation" "bstr?/unicode" "bstr?/std" ];
          "unicode-segmentation" = [ "dep:unicode-segmentation" ];
        };
        resolvedDefaultFeatures = [ "default" "inline" "text" ];
      };
      "simple-server-timing-header" = rec {
        crateName = "simple-server-timing-header";
        version = "0.1.1";
        edition = "2021";
        sha256 = "0vh82k18a2c32gj30633hlasv25l0k8llnj37l98x6sww0cqkrqn";
        libName = "simple_server_timing_header";
        authors = [
          "Joep Meindertsma <joep@ontola.io>"
        ];

      };
      "simple_asn1" = rec {
        crateName = "simple_asn1";
        version = "0.6.2";
        edition = "2018";
        sha256 = "11d0l3l7lppzr1wxhvsbmjmw6s2vy3v7b8ygz500z4di9qhfbi5d";
        authors = [
          "Adam Wick <awick@uhsure.com>"
        ];
        dependencies = [
          {
            name = "num-bigint";
            packageId = "num-bigint 0.4.6";
            usesDefaultFeatures = false;
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
          {
            name = "thiserror";
            packageId = "thiserror";
            usesDefaultFeatures = false;
          }
          {
            name = "time";
            packageId = "time";
            usesDefaultFeatures = false;
            features = [ "formatting" "macros" "parsing" ];
          }
        ];
        devDependencies = [
          {
            name = "time";
            packageId = "time";
            usesDefaultFeatures = false;
            features = [ "formatting" "macros" "parsing" "quickcheck" ];
          }
        ];

      };
      "simplelog" = rec {
        crateName = "simplelog";
        version = "0.9.0";
        edition = "2018";
        sha256 = "087pr7n3z7myaxi0ay430bsjj6xddpwspz1ssi8v5a8lk3bgzh2b";
        authors = [
          "Drakulix <github@drakulix.de>"
        ];
        dependencies = [
          {
            name = "chrono";
            packageId = "chrono";
          }
          {
            name = "log";
            packageId = "log";
            features = [ "std" ];
          }
          {
            name = "termcolor";
            packageId = "termcolor";
            optional = true;
          }
        ];
        features = {
          "default" = [ "termcolor" ];
          "termcolor" = [ "dep:termcolor" ];
        };
        resolvedDefaultFeatures = [ "default" "termcolor" ];
      };
      "simulacrum" = rec {
        crateName = "simulacrum";
        version = "0.5.0-alpha";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/simulacrum; }
          else ./crates/simulacrum;
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "bcs";
            packageId = "bcs";
          }
          {
            name = "fastcrypto";
            packageId = "fastcrypto";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "iota-config";
            packageId = "iota-config";
          }
          {
            name = "iota-execution";
            packageId = "iota-execution";
          }
          {
            name = "iota-framework";
            packageId = "iota-framework";
          }
          {
            name = "iota-genesis-builder";
            packageId = "iota-genesis-builder";
          }
          {
            name = "iota-keys";
            packageId = "iota-keys";
          }
          {
            name = "iota-protocol-config";
            packageId = "iota-protocol-config";
          }
          {
            name = "iota-storage";
            packageId = "iota-storage";
          }
          {
            name = "iota-swarm-config";
            packageId = "iota-swarm-config";
          }
          {
            name = "iota-transaction-checks";
            packageId = "iota-transaction-checks";
          }
          {
            name = "iota-types";
            packageId = "iota-types";
          }
          {
            name = "move-binary-format";
            packageId = "move-binary-format";
          }
          {
            name = "move-bytecode-utils";
            packageId = "move-bytecode-utils";
          }
          {
            name = "move-core-types";
            packageId = "move-core-types";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "prometheus";
            packageId = "prometheus";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" "rc" ];
          }
          {
            name = "shared-crypto";
            packageId = "shared-crypto";
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
        ];
        devDependencies = [
          {
            name = "iota-types";
            packageId = "iota-types";
            features = [ "test-utils" ];
          }
        ];

      };
      "siphasher" = rec {
        crateName = "siphasher";
        version = "0.3.11";
        edition = "2018";
        sha256 = "03axamhmwsrmh0psdw3gf7c0zc4fyl5yjxfifz9qfka6yhkqid9q";
        authors = [
          "Frank Denis <github@pureftpd.org>"
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
          "serde_json" = [ "dep:serde_json" ];
          "serde_no_std" = [ "serde/alloc" ];
          "serde_std" = [ "std" "serde/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "sized-chunks" = rec {
        crateName = "sized-chunks";
        version = "0.6.5";
        edition = "2018";
        sha256 = "07ix5fsdnpf2xsb0k5rbiwlmsicm2237fcx7blirp9p7pljr5mhn";
        libName = "sized_chunks";
        authors = [
          "Bodil Stokke <bodil@bodil.org>"
        ];
        dependencies = [
          {
            name = "bitmaps";
            packageId = "bitmaps";
          }
          {
            name = "typenum";
            packageId = "typenum";
          }
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "array-ops" = [ "dep:array-ops" ];
          "default" = [ "std" ];
          "refpool" = [ "dep:refpool" ];
          "ringbuffer" = [ "array-ops" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "slab" = rec {
        crateName = "slab";
        version = "0.4.9";
        edition = "2018";
        sha256 = "0rxvsgir0qw5lkycrqgb1cxsvxzjv9bmx73bk5y42svnzfba94lg";
        authors = [
          "Carl Lerche <me@carllerche.com>"
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "slip10_ed25519" = rec {
        crateName = "slip10_ed25519";
        version = "0.1.3";
        edition = "2018";
        sha256 = "16nwm67ng8vrfpf2iicfg6nkbx54hx70hs916h563y8lpwlgzq2b";
        authors = [
          "Alan Evans <thealanevans@gmail.com>"
        ];
        dependencies = [
          {
            name = "hmac-sha512";
            packageId = "hmac-sha512";
          }
        ];

      };
      "smallvec" = rec {
        crateName = "smallvec";
        version = "1.13.2";
        edition = "2018";
        sha256 = "0rsw5samawl3wsw6glrsb127rx6sh89a8wyikicw6dkdcjd1lpiw";
        authors = [
          "The Servo Project Developers"
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "const_new" = [ "const_generics" ];
          "drain_keep_rest" = [ "drain_filter" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "const_generics" "const_new" ];
      };
      "smawk" = rec {
        crateName = "smawk";
        version = "0.3.2";
        edition = "2021";
        sha256 = "0344z1la39incggwn6nl45k8cbw2x10mr5j0qz85cdz9np0qihxp";
        authors = [
          "Martin Geisler <martin@geisler.net>"
        ];
        features = {
          "ndarray" = [ "dep:ndarray" ];
        };
      };
      "snafu 0.7.5" = rec {
        crateName = "snafu";
        version = "0.7.5";
        edition = "2018";
        sha256 = "1mj2j2gfbf8mm1hr02zrbrqrh2zp01f61xgkx0lpln2w0ankgpp4";
        authors = [
          "Jake Goulding <jake.goulding@gmail.com>"
        ];
        dependencies = [
          {
            name = "doc-comment";
            packageId = "doc-comment";
            usesDefaultFeatures = false;
          }
          {
            name = "snafu-derive";
            packageId = "snafu-derive 0.7.5";
          }
        ];
        features = {
          "backtrace" = [ "dep:backtrace" ];
          "backtraces" = [ "std" "backtrace" ];
          "backtraces-impl-backtrace-crate" = [ "backtraces" ];
          "default" = [ "std" "rust_1_46" ];
          "futures" = [ "futures-core-crate" "pin-project" ];
          "futures-core-crate" = [ "dep:futures-core-crate" ];
          "futures-crate" = [ "dep:futures-crate" ];
          "internal-dev-dependencies" = [ "futures-crate" ];
          "pin-project" = [ "dep:pin-project" ];
          "rust_1_39" = [ "snafu-derive/rust_1_39" ];
          "rust_1_46" = [ "rust_1_39" "snafu-derive/rust_1_46" ];
          "rust_1_61" = [ "rust_1_46" "snafu-derive/rust_1_61" ];
          "unstable-backtraces-impl-std" = [ "backtraces-impl-std" "snafu-derive/unstable-backtraces-impl-std" ];
          "unstable-provider-api" = [ "snafu-derive/unstable-provider-api" ];
        };
        resolvedDefaultFeatures = [ "default" "rust_1_39" "rust_1_46" "std" ];
      };
      "snafu 0.8.5" = rec {
        crateName = "snafu";
        version = "0.8.5";
        edition = "2018";
        sha256 = "06ahz9g4f6475rspfcay8512x776wpxc205rizzc6a9abv492f12";
        authors = [
          "Jake Goulding <jake.goulding@gmail.com>"
        ];
        dependencies = [
          {
            name = "snafu-derive";
            packageId = "snafu-derive 0.8.5";
          }
        ];
        features = {
          "backtrace" = [ "dep:backtrace" ];
          "backtraces-impl-backtrace-crate" = [ "backtrace" ];
          "default" = [ "std" "rust_1_65" ];
          "futures" = [ "futures-core-crate" "pin-project" ];
          "futures-core-crate" = [ "dep:futures-core-crate" ];
          "futures-crate" = [ "dep:futures-crate" ];
          "internal-dev-dependencies" = [ "futures-crate" ];
          "pin-project" = [ "dep:pin-project" ];
          "rust_1_61" = [ "snafu-derive/rust_1_61" ];
          "rust_1_65" = [ "rust_1_61" ];
          "rust_1_81" = [ "rust_1_65" ];
          "unstable-provider-api" = [ "snafu-derive/unstable-provider-api" ];
        };
        resolvedDefaultFeatures = [ "rust_1_61" "std" ];
      };
      "snafu-derive 0.7.5" = rec {
        crateName = "snafu-derive";
        version = "0.7.5";
        edition = "2018";
        sha256 = "1gzy9rzggs090zf7hfvgp4lm1glrmg9qzh796686jnq7bxk7j04r";
        procMacro = true;
        libName = "snafu_derive";
        authors = [
          "Jake Goulding <jake.goulding@gmail.com>"
        ];
        dependencies = [
          {
            name = "heck";
            packageId = "heck 0.4.1";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.86";
          }
          {
            name = "quote";
            packageId = "quote 1.0.37";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            features = [ "full" ];
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "rust_1_39" "rust_1_46" ];
      };
      "snafu-derive 0.8.5" = rec {
        crateName = "snafu-derive";
        version = "0.8.5";
        edition = "2018";
        sha256 = "05zr38bcngn8ha4mfi7lr2pqqfysjhwhxvk9lz57xzkzjavwdhq3";
        procMacro = true;
        libName = "snafu_derive";
        authors = [
          "Jake Goulding <jake.goulding@gmail.com>"
        ];
        dependencies = [
          {
            name = "heck";
            packageId = "heck 0.5.0";
            usesDefaultFeatures = false;
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.86";
          }
          {
            name = "quote";
            packageId = "quote 1.0.37";
          }
          {
            name = "syn";
            packageId = "syn 2.0.77";
            features = [ "full" ];
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "rust_1_61" ];
      };
      "snap" = rec {
        crateName = "snap";
        version = "1.1.1";
        edition = "2018";
        sha256 = "0fxw80m831l76a5zxcwmz2aq7mcwc1pp345pnljl4cv1kbxnfsqv";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];

      };
      "snowflake-api" = rec {
        crateName = "snowflake-api";
        version = "0.10.0";
        edition = "2021";
        sha256 = "15wccwpqkhw3j0fqv1j94ab9bgz3dfjg4rj2kv6rzm8928glrmqx";
        libName = "snowflake_api";
        authors = [
          "Andrew Korzhuev <korzhuev@andrusha.me>"
        ];
        dependencies = [
          {
            name = "arrow";
            packageId = "arrow";
          }
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "base64";
            packageId = "base64 0.22.1";
          }
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "glob";
            packageId = "glob";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "object_store";
            packageId = "object_store 0.11.0";
            features = [ "aws" ];
          }
          {
            name = "regex";
            packageId = "regex";
          }
          {
            name = "reqwest";
            packageId = "reqwest 0.12.7";
            usesDefaultFeatures = false;
            features = [ "gzip" "json" "rustls-tls" ];
          }
          {
            name = "reqwest-middleware";
            packageId = "reqwest-middleware";
            features = [ "json" ];
          }
          {
            name = "reqwest-retry";
            packageId = "reqwest-retry";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "snowflake-jwt";
            packageId = "snowflake-jwt";
            optional = true;
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "macros" "rt-multi-thread" ];
          }
          {
            name = "url";
            packageId = "url";
          }
          {
            name = "uuid";
            packageId = "uuid 1.10.0";
            features = [ "v4" ];
          }
        ];
        devDependencies = [
          {
            name = "arrow";
            packageId = "arrow";
            features = [ "prettyprint" ];
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "macros" "rt-multi-thread" ];
          }
        ];
        features = {
          "all" = [ "cert-auth" "polars" ];
          "cert-auth" = [ "dep:snowflake-jwt" ];
          "default" = [ "cert-auth" ];
          "polars" = [ "dep:polars-core" "dep:polars-io" ];
        };
        resolvedDefaultFeatures = [ "cert-auth" "default" ];
      };
      "snowflake-jwt" = rec {
        crateName = "snowflake-jwt";
        version = "0.3.1";
        edition = "2021";
        sha256 = "1z9r8ynzmvil5fcahhdg2ahfij3iqxg0frmi47l00x5v3240q71g";
        libName = "snowflake_jwt";
        authors = [
          "Andrew Korzhuev <korzhuev@andrusha.me>"
          "Artem Semenov <hi@artps.org>"
        ];
        dependencies = [
          {
            name = "base64";
            packageId = "base64 0.22.1";
          }
          {
            name = "jsonwebtoken";
            packageId = "jsonwebtoken 9.3.0";
          }
          {
            name = "rsa";
            packageId = "rsa 0.9.6";
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "sha2";
            packageId = "sha2 0.10.8";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "time";
            packageId = "time";
          }
        ];

      };
      "socket2" = rec {
        crateName = "socket2";
        version = "0.5.7";
        edition = "2021";
        sha256 = "070r941wbq76xpy039an4pyiy3rfj7mp7pvibf1rcri9njq5wc6f";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
          "Thomas de Zeeuw <thomasdezeeuw@gmail.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.52.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_Foundation" "Win32_Networking_WinSock" "Win32_System_IO" "Win32_System_Threading" "Win32_System_WindowsProgramming" ];
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "all" ];
      };
      "soketto" = rec {
        crateName = "soketto";
        version = "0.8.0";
        edition = "2021";
        sha256 = "0lxvz4kq13bcqb8m62fvrrby7q0clj9hz68wf1bhih9parcqqiip";
        authors = [
          "Parity Technologies <admin@parity.io>"
          "Jason Ozias <jason.g.ozias@gmail.com>"
        ];
        dependencies = [
          {
            name = "base64";
            packageId = "base64 0.22.1";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "bytes";
            packageId = "bytes";
            usesDefaultFeatures = false;
          }
          {
            name = "futures";
            packageId = "futures";
            usesDefaultFeatures = false;
            features = [ "bilock" "std" "unstable" ];
          }
          {
            name = "http";
            packageId = "http 1.1.0";
            optional = true;
          }
          {
            name = "httparse";
            packageId = "httparse";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "log";
            packageId = "log";
            usesDefaultFeatures = false;
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
            usesDefaultFeatures = false;
            features = [ "std" "std_rng" ];
          }
          {
            name = "sha1";
            packageId = "sha1";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "deflate" = [ "flate2" ];
          "flate2" = [ "dep:flate2" ];
          "http" = [ "dep:http" ];
        };
        resolvedDefaultFeatures = [ "default" "http" ];
      };
      "solang-parser" = rec {
        crateName = "solang-parser";
        version = "0.3.3";
        edition = "2021";
        sha256 = "09jvia8g1qap64nn50w80maisfjwf7sbvw4jfmqm9cglb4fcw9f4";
        libName = "solang_parser";
        authors = [
          "Sean Young <sean@mess.org>"
          "Lucas Steuernagel <lucas.tnagel@gmail.com>"
          "Cyrill Leutwiler <bigcyrill@hotmail.com>"
        ];
        dependencies = [
          {
            name = "itertools";
            packageId = "itertools 0.11.0";
          }
          {
            name = "lalrpop-util";
            packageId = "lalrpop-util";
          }
          {
            name = "phf";
            packageId = "phf";
            features = [ "macros" ];
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "unicode-xid";
            packageId = "unicode-xid 0.2.6";
          }
        ];
        buildDependencies = [
          {
            name = "lalrpop";
            packageId = "lalrpop";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "pt-serde" = [ "serde" ];
          "serde" = [ "dep:serde" ];
        };
      };
      "spin 0.5.2" = rec {
        crateName = "spin";
        version = "0.5.2";
        edition = "2015";
        sha256 = "0b84m6dbzrwf2kxylnw82d3dr8w06av7rfkr8s85fb5f43rwyqvf";
        authors = [
          "Mathijs van de Nes <git@mathijs.vd-nes.nl>"
          "John Ericson <git@JohnEricson.me>"
        ];

      };
      "spin 0.9.8" = rec {
        crateName = "spin";
        version = "0.9.8";
        edition = "2015";
        sha256 = "0rvam5r0p3a6qhc18scqpvpgb3ckzyqxpgdfyjnghh8ja7byi039";
        authors = [
          "Mathijs van de Nes <git@mathijs.vd-nes.nl>"
          "John Ericson <git@JohnEricson.me>"
          "Joshua Barretto <joshua.s.barretto@gmail.com>"
        ];
        features = {
          "barrier" = [ "mutex" ];
          "default" = [ "lock_api" "mutex" "spin_mutex" "rwlock" "once" "lazy" "barrier" ];
          "fair_mutex" = [ "mutex" ];
          "lazy" = [ "once" ];
          "lock_api" = [ "lock_api_crate" ];
          "lock_api_crate" = [ "dep:lock_api_crate" ];
          "portable-atomic" = [ "dep:portable-atomic" ];
          "portable_atomic" = [ "portable-atomic" ];
          "spin_mutex" = [ "mutex" ];
          "ticket_mutex" = [ "mutex" ];
          "use_ticket_mutex" = [ "mutex" "ticket_mutex" ];
        };
        resolvedDefaultFeatures = [ "mutex" "once" "spin_mutex" ];
      };
      "spinning_top" = rec {
        crateName = "spinning_top";
        version = "0.3.0";
        edition = "2018";
        sha256 = "001kjbiz1gg111rsqxc4pq9a1izx7wshkk38f69h1dbgf4fjsvfr";
        authors = [
          "Philipp Oppermann <dev@phil-opp.com>"
        ];
        dependencies = [
          {
            name = "lock_api";
            packageId = "lock_api";
          }
        ];
        features = {
          "arc_lock" = [ "lock_api/arc_lock" ];
          "owning_ref" = [ "lock_api/owning_ref" ];
        };
      };
      "spki 0.6.0" = rec {
        crateName = "spki";
        version = "0.6.0";
        edition = "2021";
        sha256 = "0ar1ldkl7svp8l3gfw2hyiiph7n2nqynjnjgdv1pscvsmjxh5kv7";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "base64ct";
            packageId = "base64ct";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "der";
            packageId = "der 0.6.1";
            features = [ "oid" ];
          }
        ];
        features = {
          "alloc" = [ "base64ct/alloc" "der/alloc" ];
          "base64ct" = [ "dep:base64ct" ];
          "fingerprint" = [ "sha2" ];
          "pem" = [ "alloc" "der/pem" ];
          "sha2" = [ "dep:sha2" ];
          "std" = [ "der/std" "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "base64ct" "pem" "std" ];
      };
      "spki 0.7.3" = rec {
        crateName = "spki";
        version = "0.7.3";
        edition = "2021";
        sha256 = "17fj8k5fmx4w9mp27l970clrh5qa7r5sjdvbsln987xhb34dc7nr";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "base64ct";
            packageId = "base64ct";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "der";
            packageId = "der 0.7.9";
            features = [ "oid" ];
          }
        ];
        features = {
          "alloc" = [ "base64ct?/alloc" "der/alloc" ];
          "arbitrary" = [ "std" "dep:arbitrary" "der/arbitrary" ];
          "base64" = [ "dep:base64ct" ];
          "fingerprint" = [ "sha2" ];
          "pem" = [ "alloc" "der/pem" ];
          "sha2" = [ "dep:sha2" ];
          "std" = [ "der/std" "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "pem" "std" ];
      };
      "ssh-cipher" = rec {
        crateName = "ssh-cipher";
        version = "0.2.0";
        edition = "2021";
        sha256 = "0kvq113x9fcy2jcxp00xk472zxm8d9zxxz2vyqx3rlzh88ki7b6a";
        libName = "ssh_cipher";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "aes";
            packageId = "aes";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "aes-gcm";
            packageId = "aes-gcm";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "aes" ];
          }
          {
            name = "cbc";
            packageId = "cbc";
            optional = true;
          }
          {
            name = "chacha20";
            packageId = "chacha20";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "cipher";
            packageId = "cipher";
          }
          {
            name = "ctr";
            packageId = "ctr";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "poly1305";
            packageId = "poly1305";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "ssh-encoding";
            packageId = "ssh-encoding";
            rename = "encoding";
          }
          {
            name = "subtle";
            packageId = "subtle";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "aes-cbc" = [ "dep:aes" "dep:cbc" ];
          "aes-ctr" = [ "dep:aes" "dep:ctr" ];
          "aes-gcm" = [ "dep:aes" "dep:aes-gcm" ];
          "chacha20poly1305" = [ "dep:chacha20" "dep:poly1305" "dep:subtle" ];
          "tdes" = [ "dep:des" "dep:cbc" ];
        };
        resolvedDefaultFeatures = [ "aes-cbc" "aes-ctr" "aes-gcm" "chacha20poly1305" ];
      };
      "ssh-encoding" = rec {
        crateName = "ssh-encoding";
        version = "0.2.0";
        edition = "2021";
        sha256 = "05aavlhk68vm60vbw8lcgx1p5wry367ck8niij7af221xywl54pb";
        libName = "ssh_encoding";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "base64ct";
            packageId = "base64ct";
            rename = "base64";
            optional = true;
          }
          {
            name = "pem-rfc7468";
            packageId = "pem-rfc7468 0.7.0";
            rename = "pem";
            optional = true;
          }
          {
            name = "sha2";
            packageId = "sha2 0.10.8";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "base64?/alloc" "pem?/alloc" ];
          "base64" = [ "dep:base64" ];
          "bytes" = [ "alloc" "dep:bytes" ];
          "pem" = [ "base64" "dep:pem" ];
          "sha2" = [ "dep:sha2" ];
          "std" = [ "alloc" "base64?/std" "pem?/std" "sha2?/std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "base64" "pem" "sha2" "std" ];
      };
      "ssh-key" = rec {
        crateName = "ssh-key";
        version = "0.6.6";
        edition = "2021";
        sha256 = "1z5sxiv5qk0ld9k3zhy0m1063d5zmq84vkzl0rjbn66gh1m3d6ya";
        libName = "ssh_key";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "bcrypt-pbkdf";
            packageId = "bcrypt-pbkdf";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "ed25519-dalek";
            packageId = "ed25519-dalek";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "num-bigint-dig";
            packageId = "num-bigint-dig";
            rename = "bigint";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "p256";
            packageId = "p256 0.13.2";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "ecdsa" ];
          }
          {
            name = "p384";
            packageId = "p384";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "ecdsa" ];
          }
          {
            name = "p521";
            packageId = "p521";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "ecdsa" "getrandom" ];
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "rsa";
            packageId = "rsa 0.9.6";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "sha2" ];
          }
          {
            name = "sec1";
            packageId = "sec1 0.7.3";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "point" ];
          }
          {
            name = "sha2";
            packageId = "sha2 0.10.8";
            usesDefaultFeatures = false;
          }
          {
            name = "signature";
            packageId = "signature 2.2.0";
            usesDefaultFeatures = false;
          }
          {
            name = "ssh-cipher";
            packageId = "ssh-cipher";
            rename = "cipher";
          }
          {
            name = "ssh-encoding";
            packageId = "ssh-encoding";
            rename = "encoding";
            features = [ "base64" "pem" "sha2" ];
          }
          {
            name = "subtle";
            packageId = "subtle";
            usesDefaultFeatures = false;
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "encoding/alloc" "signature/alloc" "zeroize/alloc" ];
          "crypto" = [ "ed25519" "p256" "p384" "p521" "rsa" ];
          "default" = [ "ecdsa" "rand_core" "std" ];
          "dsa" = [ "dep:bigint" "dep:dsa" "dep:sha1" "alloc" "signature/rand_core" ];
          "ecdsa" = [ "dep:sec1" ];
          "ed25519" = [ "dep:ed25519-dalek" "rand_core" ];
          "encryption" = [ "dep:bcrypt-pbkdf" "alloc" "cipher/aes-cbc" "cipher/aes-ctr" "cipher/aes-gcm" "cipher/chacha20poly1305" "rand_core" ];
          "getrandom" = [ "rand_core/getrandom" ];
          "p256" = [ "dep:p256" "ecdsa" ];
          "p384" = [ "dep:p384" "ecdsa" ];
          "p521" = [ "dep:p521" "ecdsa" ];
          "rand_core" = [ "dep:rand_core" ];
          "rsa" = [ "dep:bigint" "dep:rsa" "alloc" "rand_core" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "alloc" "encoding/std" "p256?/std" "p384?/std" "p521?/std" "rsa?/std" "sec1?/std" "signature/std" ];
          "tdes" = [ "cipher/tdes" "encryption" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "ecdsa" "ed25519" "encryption" "rand_core" "rsa" "std" ];
      };
      "stable_deref_trait" = rec {
        crateName = "stable_deref_trait";
        version = "1.2.0";
        edition = "2015";
        sha256 = "1lxjr8q2n534b2lhkxd6l6wcddzjvnksi58zv11f9y0jjmr15wd8";
        authors = [
          "Robert Grosse <n210241048576@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "stacker" = rec {
        crateName = "stacker";
        version = "0.1.17";
        edition = "2015";
        sha256 = "0yya93mkaxidcxcc1jhfvb58xpmnp4ikyyqsmyc5xnxbalyqi73r";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
          "Simonas Kazlauskas <stacker@kazlauskas.me>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "psm";
            packageId = "psm";
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.59.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_System_Memory" "Win32_System_Threading" "Win32_Foundation" ];
          }
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
          }
        ];

      };
      "static_assertions" = rec {
        crateName = "static_assertions";
        version = "1.1.0";
        edition = "2015";
        sha256 = "0gsl6xmw10gvn3zs1rv99laj5ig7ylffnh71f9l34js4nr4r7sx2";
        authors = [
          "Nikolai Vazquez"
        ];
        features = {
        };
      };
      "static_assertions_next" = rec {
        crateName = "static_assertions_next";
        version = "1.1.2";
        edition = "2021";
        sha256 = "0rn7c362606jj1lp3ff3vsicjmpr2x1qra9zd25rlpjrh98sxgnp";
        authors = [
          "Nikolai Vazquez"
        ];
        features = {
          "proc" = [ "proc_static_assertions_next" ];
          "proc_static_assertions_next" = [ "dep:proc_static_assertions_next" ];
        };
      };
      "string_cache" = rec {
        crateName = "string_cache";
        version = "0.8.7";
        edition = "2018";
        sha256 = "0fr90a54ibsrnfjq5la77yjd641g6vqv8f1v3pmpbxa2cbkkh4gr";
        authors = [
          "The Servo Project Developers"
        ];
        dependencies = [
          {
            name = "new_debug_unreachable";
            packageId = "new_debug_unreachable";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "parking_lot";
            packageId = "parking_lot 0.12.3";
          }
          {
            name = "phf_shared";
            packageId = "phf_shared 0.10.0";
          }
          {
            name = "precomputed-hash";
            packageId = "precomputed-hash";
          }
        ];
        features = {
          "default" = [ "serde_support" ];
          "serde" = [ "dep:serde" ];
          "serde_support" = [ "serde" ];
        };
      };
      "stronghold-derive" = rec {
        crateName = "stronghold-derive";
        version = "1.0.0";
        edition = "2021";
        sha256 = "0bkcfvxidjcisx57z2nwiqayma2a3xlc90avz2i0ak3jqhixnd98";
        procMacro = true;
        libName = "stronghold_derive";
        authors = [
          "IOTA Stiftung"
          "tensor-programming <tensordeveloper@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.86";
          }
          {
            name = "quote";
            packageId = "quote 1.0.37";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            features = [ "parsing" "full" "extra-traits" "proc-macro" ];
          }
        ];

      };
      "stronghold-runtime" = rec {
        crateName = "stronghold-runtime";
        version = "2.0.1";
        edition = "2021";
        sha256 = "1prx5w6sr4l9xzzr6awrsak8vj82vllf3429bymzvkjh2k2prnqq";
        libName = "runtime";
        authors = [
          "IOTA Stiftung"
          "Alexandre Dang <alexandre.dang@iota.org"
        ];
        dependencies = [
          {
            name = "dirs";
            packageId = "dirs 4.0.0";
          }
          {
            name = "iota-crypto";
            packageId = "iota-crypto";
            usesDefaultFeatures = false;
            features = [ "blake2b" ];
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "libsodium-sys-stable";
            packageId = "libsodium-sys-stable";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "nix";
            packageId = "nix 0.24.3";
            target = { target, features }: (("linux" == target."os" or null) || ("macos" == target."os" or null));
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
            rename = "random";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "windows";
            packageId = "windows 0.36.1";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_System_Memory" "Win32_System_SystemInformation" "Win32_System_Diagnostics_Debug" "Win32_Foundation" "Win32_Security" ];
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            usesDefaultFeatures = false;
            features = [ "alloc" "zeroize_derive" ];
          }
        ];

      };
      "stronghold-utils" = rec {
        crateName = "stronghold-utils";
        version = "1.0.0";
        edition = "2021";
        sha256 = "1mjy8y99g5lbylj9ybar5mgmh8ba3jyrvr36gwz1apmgk1422043";
        libName = "stronghold_utils";
        authors = [
          "IOTA Stiftung"
          "tensor-programming <tensordeveloper@gmail.com>"
        ];
        dependencies = [
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "stronghold-derive";
            packageId = "stronghold-derive";
          }
        ];

      };
      "stronghold_engine" = rec {
        crateName = "stronghold_engine";
        version = "2.0.1";
        edition = "2021";
        sha256 = "05c678gxsps3qb68fyd9jwpv7zdnqqpbnq7qlxqxsmz588f3gmrg";
        libName = "engine";
        authors = [
          "IOTA Stiftung"
          "tensorprogramming <tensordeveloper@gmail.com>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "dirs-next";
            packageId = "dirs-next";
          }
          {
            name = "hex";
            packageId = "hex";
          }
          {
            name = "iota-crypto";
            packageId = "iota-crypto";
            usesDefaultFeatures = false;
            features = [ "age" "pbkdf2" "random" "chacha" "hmac" "sha" "x25519" "blake2b" "std" ];
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "paste";
            packageId = "paste";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "stronghold-runtime";
            packageId = "stronghold-runtime";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            features = [ "zeroize_derive" ];
          }
        ];
        features = {
          "digest" = [ "dep:digest" ];
        };
      };
      "strsim 0.10.0" = rec {
        crateName = "strsim";
        version = "0.10.0";
        edition = "2015";
        sha256 = "08s69r4rcrahwnickvi0kq49z524ci50capybln83mg6b473qivk";
        authors = [
          "Danny Guo <danny@dannyguo.com>"
        ];

      };
      "strsim 0.11.1" = rec {
        crateName = "strsim";
        version = "0.11.1";
        edition = "2015";
        sha256 = "0kzvqlw8hxqb7y598w1s0hxlnmi84sg5vsipp3yg5na5d1rvba3x";
        authors = [
          "Danny Guo <danny@dannyguo.com>"
          "maxbachmann <oss@maxbachmann.de>"
        ];

      };
      "strum 0.24.1" = rec {
        crateName = "strum";
        version = "0.24.1";
        edition = "2018";
        sha256 = "0gz6cjhlps5idwasznklxdh2zsas6mxf99vr0n27j876q12n0gh6";
        authors = [
          "Peter Glotfelty <peter.glotfelty@microsoft.com>"
        ];
        features = {
          "default" = [ "std" ];
          "derive" = [ "strum_macros" ];
          "phf" = [ "dep:phf" ];
          "strum_macros" = [ "dep:strum_macros" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "strum 0.25.0" = rec {
        crateName = "strum";
        version = "0.25.0";
        edition = "2018";
        sha256 = "09g1q55ms8vax1z0mxlbva3vm8n2r1179kfvbccnkjcidzm58399";
        authors = [
          "Peter Glotfelty <peter.glotfelty@microsoft.com>"
        ];
        dependencies = [
          {
            name = "strum_macros";
            packageId = "strum_macros 0.25.3";
            optional = true;
          }
        ];
        devDependencies = [
          {
            name = "strum_macros";
            packageId = "strum_macros 0.25.3";
          }
        ];
        features = {
          "default" = [ "std" ];
          "derive" = [ "strum_macros" ];
          "phf" = [ "dep:phf" ];
          "strum_macros" = [ "dep:strum_macros" ];
        };
        resolvedDefaultFeatures = [ "default" "derive" "std" "strum_macros" ];
      };
      "strum 0.26.3" = rec {
        crateName = "strum";
        version = "0.26.3";
        edition = "2018";
        sha256 = "01lgl6jvrf4j28v5kmx9bp480ygf1nhvac8b4p7rcj9hxw50zv4g";
        authors = [
          "Peter Glotfelty <peter.glotfelty@microsoft.com>"
        ];
        dependencies = [
          {
            name = "strum_macros";
            packageId = "strum_macros 0.26.4";
            optional = true;
          }
        ];
        devDependencies = [
          {
            name = "strum_macros";
            packageId = "strum_macros 0.26.4";
          }
        ];
        features = {
          "default" = [ "std" ];
          "derive" = [ "strum_macros" ];
          "phf" = [ "dep:phf" ];
          "strum_macros" = [ "dep:strum_macros" ];
        };
        resolvedDefaultFeatures = [ "default" "derive" "std" "strum_macros" ];
      };
      "strum_macros 0.24.3" = rec {
        crateName = "strum_macros";
        version = "0.24.3";
        edition = "2018";
        sha256 = "0naxz2y38kwq5wgirmia64vvf6qhwy8j367rw966n62gsbh5nf0y";
        procMacro = true;
        authors = [
          "Peter Glotfelty <peter.glotfelty@microsoft.com>"
        ];
        dependencies = [
          {
            name = "heck";
            packageId = "heck 0.4.1";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.86";
          }
          {
            name = "quote";
            packageId = "quote 1.0.37";
          }
          {
            name = "rustversion";
            packageId = "rustversion";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            features = [ "parsing" "extra-traits" ];
          }
        ];

      };
      "strum_macros 0.25.3" = rec {
        crateName = "strum_macros";
        version = "0.25.3";
        edition = "2018";
        sha256 = "184y62g474zqb2f7n16x3ghvlyjbh50viw32p9w9l5lwmjlizp13";
        procMacro = true;
        authors = [
          "Peter Glotfelty <peter.glotfelty@microsoft.com>"
        ];
        dependencies = [
          {
            name = "heck";
            packageId = "heck 0.4.1";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.86";
          }
          {
            name = "quote";
            packageId = "quote 1.0.37";
          }
          {
            name = "rustversion";
            packageId = "rustversion";
          }
          {
            name = "syn";
            packageId = "syn 2.0.77";
            features = [ "parsing" "extra-traits" ];
          }
        ];

      };
      "strum_macros 0.26.4" = rec {
        crateName = "strum_macros";
        version = "0.26.4";
        edition = "2018";
        sha256 = "1gl1wmq24b8md527cpyd5bw9rkbqldd7k1h38kf5ajd2ln2ywssc";
        procMacro = true;
        authors = [
          "Peter Glotfelty <peter.glotfelty@microsoft.com>"
        ];
        dependencies = [
          {
            name = "heck";
            packageId = "heck 0.5.0";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.86";
          }
          {
            name = "quote";
            packageId = "quote 1.0.37";
          }
          {
            name = "rustversion";
            packageId = "rustversion";
          }
          {
            name = "syn";
            packageId = "syn 2.0.77";
            features = [ "parsing" "extra-traits" ];
          }
        ];

      };
      "subprocess" = rec {
        crateName = "subprocess";
        version = "0.2.9";
        edition = "2018";
        crateBin = [];
        sha256 = "11k0dzvgg8g4id4gas1aavblj43687kcbn26qlvadpc1c298cbhc";
        authors = [
          "Hrvoje Nikšić <hniksic@gmail.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: (target."windows" or false);
            features = [ "std" "handleapi" "namedpipeapi" "processenv" "synchapi" "winerror" "processthreadsapi" "winbase" ];
          }
        ];

      };
      "subtle" = rec {
        crateName = "subtle";
        version = "2.6.1";
        edition = "2018";
        sha256 = "14ijxaymghbl1p0wql9cib5zlwiina7kall6w7g89csprkgbvhhk";
        authors = [
          "Isis Lovecruft <isis@patternsinthevoid.net>"
          "Henry de Valence <hdevalence@hdevalence.ca>"
        ];
        features = {
          "default" = [ "std" "i128" ];
        };
        resolvedDefaultFeatures = [ "default" "i128" "std" ];
      };
      "subtle-ng" = rec {
        crateName = "subtle-ng";
        version = "2.5.0";
        edition = "2015";
        sha256 = "0hj1wp8xl64bjhbvlfffmllqy7wdw2b505f32gn3qqic4vmpcikk";
        libName = "subtle_ng";
        authors = [
          "Isis Lovecruft <isis@patternsinthevoid.net>"
          "Henry de Valence <hdevalence@hdevalence.ca>"
        ];
        features = {
          "default" = [ "std" "i128" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "supports-color" = rec {
        crateName = "supports-color";
        version = "3.0.1";
        edition = "2018";
        sha256 = "0xssmhv74f10024wy645200nfhzgprm0bb80r4k6kj91rxd30xc7";
        libName = "supports_color";
        authors = [
          "Kat Marchán <kzm@zkat.tech>"
        ];
        dependencies = [
          {
            name = "is_ci";
            packageId = "is_ci";
          }
        ];

      };
      "supports-hyperlinks" = rec {
        crateName = "supports-hyperlinks";
        version = "3.0.0";
        edition = "2021";
        sha256 = "1vh4wjflrpa0vadfirzn57glk1wwrdfxkxwgyqzmy7q4d18iw2ic";
        libName = "supports_hyperlinks";
        authors = [
          "Kat Marchán <kzm@zkat.tech>"
        ];

      };
      "supports-unicode" = rec {
        crateName = "supports-unicode";
        version = "3.0.0";
        edition = "2018";
        sha256 = "1qpc344453x3ai4k9iygxnbk6lr2nw5jflj8ns5q3dbcmwq1lh5p";
        libName = "supports_unicode";
        authors = [
          "Kat Marchán <kzm@zkat.tech>"
        ];

      };
      "svm-rs" = rec {
        crateName = "svm-rs";
        version = "0.3.5";
        edition = "2021";
        crateBin = [];
        sha256 = "1957va9r01slgw9wvrdqn4gc09aydan8wi92ayfwk82zzsm7na8i";
        libName = "svm_lib";
        authors = [
          "Rohit Narurkar <rohit.narurkar@protonmail.com>"
        ];
        dependencies = [
          {
            name = "dirs";
            packageId = "dirs 5.0.1";
          }
          {
            name = "fs2";
            packageId = "fs2";
          }
          {
            name = "hex";
            packageId = "hex";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "reqwest";
            packageId = "reqwest 0.11.27";
            usesDefaultFeatures = false;
            features = [ "json" ];
          }
          {
            name = "semver";
            packageId = "semver";
            features = [ "serde" ];
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "sha2";
            packageId = "sha2 0.10.8";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "url";
            packageId = "url";
          }
          {
            name = "zip";
            packageId = "zip 0.6.6";
            target = { target, features }: (("windows" == target."os" or null) && ("x86_64" == target."arch" or null));
          }
        ];
        buildDependencies = [
          {
            name = "dirs";
            packageId = "dirs 5.0.1";
          }
        ];
        features = {
          "anyhow" = [ "dep:anyhow" ];
          "blocking" = [ "reqwest/blocking" ];
          "clap" = [ "dep:clap" ];
          "cli" = [ "anyhow" "clap" "console" "dialoguer" "indicatif" "itertools" "tokio" ];
          "console" = [ "dep:console" ];
          "default" = [ "rustls" "cli" "solc" ];
          "dialoguer" = [ "dep:dialoguer" ];
          "indicatif" = [ "dep:indicatif" ];
          "itertools" = [ "dep:itertools" ];
          "openssl" = [ "reqwest/native-tls" ];
          "rustls" = [ "reqwest/rustls-tls" ];
          "solc" = [ "anyhow" ];
          "tokio" = [ "dep:tokio" ];
        };
        resolvedDefaultFeatures = [ "blocking" "rustls" ];
      };
      "symbolic-common" = rec {
        crateName = "symbolic-common";
        version = "12.11.1";
        edition = "2021";
        sha256 = "0zhnk9m93s9l9vn4f40b39ih6zm2qx76m2av8a94z2pi8729gpwz";
        libName = "symbolic_common";
        authors = [
          "Armin Ronacher <armin.ronacher@active-4.com>"
          "Jan Michael Auer <mail@jauer.org>"
        ];
        dependencies = [
          {
            name = "debugid";
            packageId = "debugid";
          }
          {
            name = "memmap2";
            packageId = "memmap2";
          }
          {
            name = "stable_deref_trait";
            packageId = "stable_deref_trait";
          }
          {
            name = "uuid";
            packageId = "uuid 1.10.0";
          }
        ];
        features = {
          "serde" = [ "dep:serde" "debugid/serde" ];
        };
      };
      "symbolic-demangle" = rec {
        crateName = "symbolic-demangle";
        version = "12.11.1";
        edition = "2021";
        sha256 = "1spa6k8xd5400s62408xn5lm77ka7b9n2gxv3wyyb5wy29mwx3mw";
        libName = "symbolic_demangle";
        authors = [
          "Armin Ronacher <armin.ronacher@active-4.com>"
          "Jan Michael Auer <mail@jauer.org>"
        ];
        dependencies = [
          {
            name = "cpp_demangle";
            packageId = "cpp_demangle";
            optional = true;
          }
          {
            name = "rustc-demangle";
            packageId = "rustc-demangle";
            optional = true;
          }
          {
            name = "symbolic-common";
            packageId = "symbolic-common";
          }
        ];
        features = {
          "cc" = [ "dep:cc" ];
          "cpp" = [ "cpp_demangle" ];
          "cpp_demangle" = [ "dep:cpp_demangle" ];
          "default" = [ "cpp" "msvc" "rust" "swift" ];
          "msvc" = [ "msvc-demangler" ];
          "msvc-demangler" = [ "dep:msvc-demangler" ];
          "rust" = [ "rustc-demangle" ];
          "rustc-demangle" = [ "dep:rustc-demangle" ];
          "swift" = [ "cc" ];
        };
        resolvedDefaultFeatures = [ "cpp" "cpp_demangle" "rust" "rustc-demangle" ];
      };
      "syn 0.15.44" = rec {
        crateName = "syn";
        version = "0.15.44";
        edition = "2015";
        sha256 = "1id5g6x6zihv3j7hwrw3m1jp636bg8dpi671r7zy3jvpkavb794w";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2 0.4.30";
            usesDefaultFeatures = false;
          }
          {
            name = "quote";
            packageId = "quote 0.6.13";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "unicode-xid";
            packageId = "unicode-xid 0.1.0";
          }
        ];
        features = {
          "default" = [ "derive" "parsing" "printing" "clone-impls" "proc-macro" ];
          "printing" = [ "quote" ];
          "proc-macro" = [ "proc-macro2/proc-macro" "quote/proc-macro" ];
          "quote" = [ "dep:quote" ];
        };
        resolvedDefaultFeatures = [ "clone-impls" "default" "derive" "extra-traits" "full" "parsing" "printing" "proc-macro" "quote" "visit" ];
      };
      "syn 1.0.109" = rec {
        crateName = "syn";
        version = "1.0.109";
        edition = "2018";
        sha256 = "0ds2if4600bd59wsv7jjgfkayfzy3hnazs394kz6zdkmna8l3dkj";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.86";
            usesDefaultFeatures = false;
          }
          {
            name = "quote";
            packageId = "quote 1.0.37";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "unicode-ident";
            packageId = "unicode-ident";
          }
        ];
        features = {
          "default" = [ "derive" "parsing" "printing" "clone-impls" "proc-macro" ];
          "printing" = [ "quote" ];
          "proc-macro" = [ "proc-macro2/proc-macro" "quote/proc-macro" ];
          "quote" = [ "dep:quote" ];
          "test" = [ "syn-test-suite/all-features" ];
        };
        resolvedDefaultFeatures = [ "clone-impls" "default" "derive" "extra-traits" "fold" "full" "parsing" "printing" "proc-macro" "quote" "visit" "visit-mut" ];
      };
      "syn 2.0.77" = rec {
        crateName = "syn";
        version = "2.0.77";
        edition = "2021";
        sha256 = "1vbkwfp9ymmi0fsyyjsqfvnv7gm8vjgl4pzprbk7p3pxc7gvqdcz";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.86";
            usesDefaultFeatures = false;
          }
          {
            name = "quote";
            packageId = "quote 1.0.37";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "unicode-ident";
            packageId = "unicode-ident";
          }
        ];
        features = {
          "default" = [ "derive" "parsing" "printing" "clone-impls" "proc-macro" ];
          "printing" = [ "dep:quote" ];
          "proc-macro" = [ "proc-macro2/proc-macro" "quote?/proc-macro" ];
          "test" = [ "syn-test-suite/all-features" ];
        };
        resolvedDefaultFeatures = [ "clone-impls" "default" "derive" "extra-traits" "fold" "full" "parsing" "printing" "proc-macro" "visit" "visit-mut" ];
      };
      "sync_wrapper 0.1.2" = rec {
        crateName = "sync_wrapper";
        version = "0.1.2";
        edition = "2018";
        sha256 = "0q01lyj0gr9a93n10nxsn8lwbzq97jqd6b768x17c8f7v7gccir0";
        authors = [
          "Actyx AG <developer@actyx.io>"
        ];
        features = {
          "futures" = [ "futures-core" ];
          "futures-core" = [ "dep:futures-core" ];
        };
      };
      "sync_wrapper 1.0.1" = rec {
        crateName = "sync_wrapper";
        version = "1.0.1";
        edition = "2018";
        sha256 = "150k6lwvr4nl237ngsz8fj5j78k712m4bggrfyjsidllraz5l1m7";
        authors = [
          "Actyx AG <developer@actyx.io>"
        ];
        dependencies = [
          {
            name = "futures-core";
            packageId = "futures-core";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "futures" = [ "futures-core" ];
          "futures-core" = [ "dep:futures-core" ];
        };
        resolvedDefaultFeatures = [ "futures" "futures-core" ];
      };
      "synstructure" = rec {
        crateName = "synstructure";
        version = "0.12.6";
        edition = "2018";
        sha256 = "03r1lydbf3japnlpc4wka7y90pmz1i0danaj3f9a7b431akdlszk";
        authors = [
          "Nika Layzell <nika@thelayzells.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.86";
            usesDefaultFeatures = false;
          }
          {
            name = "quote";
            packageId = "quote 1.0.37";
            usesDefaultFeatures = false;
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            usesDefaultFeatures = false;
            features = [ "derive" "parsing" "printing" "clone-impls" "visit" "extra-traits" ];
          }
          {
            name = "unicode-xid";
            packageId = "unicode-xid 0.2.6";
          }
        ];
        features = {
          "default" = [ "proc-macro" ];
          "proc-macro" = [ "proc-macro2/proc-macro" "syn/proc-macro" "quote/proc-macro" ];
        };
        resolvedDefaultFeatures = [ "default" "proc-macro" ];
      };
      "sysinfo" = rec {
        crateName = "sysinfo";
        version = "0.31.4";
        edition = "2021";
        sha256 = "1gm1d4pxwnx4gmh6kwawchv8v8djb7y0a3qvbsq09cwrhx7vwp9m";
        authors = [
          "Guillaume Gomez <guillaume1.gomez@gmail.com>"
        ];
        dependencies = [
          {
            name = "core-foundation-sys";
            packageId = "core-foundation-sys";
            target = { target, features }: (("macos" == target."os" or null) || ("ios" == target."os" or null));
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (!(("unknown" == target."os" or null) || ("wasm32" == target."arch" or null)));
          }
          {
            name = "memchr";
            packageId = "memchr";
            optional = true;
          }
          {
            name = "ntapi";
            packageId = "ntapi";
            optional = true;
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "rayon";
            packageId = "rayon";
            optional = true;
          }
          {
            name = "windows";
            packageId = "windows 0.57.0";
            optional = true;
            target = { target, features }: (target."windows" or false);
          }
        ];
        features = {
          "apple-app-store" = [ "apple-sandbox" ];
          "c-interface" = [ "default" ];
          "component" = [ "windows/Win32_Foundation" "windows/Win32_Security" "windows/Win32_System_Com" "windows/Win32_System_Rpc" "windows/Win32_System_Variant" "windows/Win32_System_Wmi" ];
          "debug" = [ "libc/extra_traits" ];
          "default" = [ "component" "disk" "network" "system" "user" "multithread" ];
          "disk" = [ "windows/Win32_Foundation" "windows/Win32_Storage_FileSystem" "windows/Win32_Security" "windows/Win32_System_IO" "windows/Win32_System_Ioctl" "windows/Win32_System_WindowsProgramming" ];
          "multithread" = [ "dep:rayon" ];
          "network" = [ "windows/Win32_Foundation" "windows/Win32_NetworkManagement_IpHelper" "windows/Win32_NetworkManagement_Ndis" "windows/Win32_Networking_WinSock" ];
          "serde" = [ "dep:serde" ];
          "system" = [ "windows/Win32_Foundation" "windows/Wdk_System_SystemInformation" "windows/Wdk_System_SystemServices" "windows/Wdk_System_Threading" "windows/Win32_Security_Authorization" "windows/Win32_System_Diagnostics_Debug" "windows/Win32_System_Kernel" "windows/Win32_System_Memory" "windows/Win32_System_Performance" "windows/Win32_System_Power" "windows/Win32_System_ProcessStatus" "windows/Win32_System_Registry" "windows/Win32_System_RemoteDesktop" "windows/Win32_System_SystemInformation" "windows/Win32_System_SystemServices" "windows/Win32_System_Threading" "windows/Win32_UI_Shell" "dep:ntapi" "dep:memchr" ];
          "user" = [ "windows/Win32_Foundation" "windows/Win32_NetworkManagement_NetManagement" "windows/Win32_Security" "windows/Win32_Security_Authentication_Identity" "windows/Win32_Security_Authorization" ];
          "windows" = [ "dep:windows" ];
        };
        resolvedDefaultFeatures = [ "component" "default" "disk" "multithread" "network" "system" "user" "windows" ];
      };
      "system-configuration" = rec {
        crateName = "system-configuration";
        version = "0.5.1";
        edition = "2021";
        sha256 = "1rz0r30xn7fiyqay2dvzfy56cvaa3km74hnbz2d72p97bkf3lfms";
        libName = "system_configuration";
        authors = [
          "Mullvad VPN"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 1.3.2";
          }
          {
            name = "core-foundation";
            packageId = "core-foundation";
          }
          {
            name = "system-configuration-sys";
            packageId = "system-configuration-sys";
          }
        ];

      };
      "system-configuration-sys" = rec {
        crateName = "system-configuration-sys";
        version = "0.5.0";
        edition = "2021";
        sha256 = "1jckxvdr37bay3i9v52izgy52dg690x5xfg3hd394sv2xf4b2px7";
        libName = "system_configuration_sys";
        authors = [
          "Mullvad VPN"
        ];
        dependencies = [
          {
            name = "core-foundation-sys";
            packageId = "core-foundation-sys";
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];

      };
      "tabled" = rec {
        crateName = "tabled";
        version = "0.12.2";
        edition = "2018";
        sha256 = "19llyndhffjvw3rlw2g66pc9ycvm5kdqxx617q37d5fd5189mrhc";
        authors = [
          "Maxim Zhiburt <zhiburt@gmail.com>"
        ];
        dependencies = [
          {
            name = "papergrid";
            packageId = "papergrid";
            usesDefaultFeatures = false;
          }
          {
            name = "tabled_derive";
            packageId = "tabled_derive";
            optional = true;
          }
          {
            name = "unicode-width";
            packageId = "unicode-width";
          }
        ];
        features = {
          "ansi-str" = [ "dep:ansi-str" ];
          "ansitok" = [ "dep:ansitok" ];
          "color" = [ "papergrid/color" "ansi-str" "ansitok" "std" ];
          "default" = [ "derive" "macros" ];
          "derive" = [ "tabled_derive" "std" ];
          "macros" = [ "std" ];
          "std" = [ "papergrid/std" ];
          "tabled_derive" = [ "dep:tabled_derive" ];
        };
        resolvedDefaultFeatures = [ "default" "derive" "macros" "std" "tabled_derive" ];
      };
      "tabled_derive" = rec {
        crateName = "tabled_derive";
        version = "0.6.0";
        edition = "2018";
        sha256 = "1r1z7qj37h1x4nyqbxq9jvbd713qvgpjlf1w18pz1x2lifh8ixlr";
        procMacro = true;
        authors = [
          "Maxim Zhiburt <zhiburt@gmail.com>"
        ];
        dependencies = [
          {
            name = "heck";
            packageId = "heck 0.4.1";
          }
          {
            name = "proc-macro-error";
            packageId = "proc-macro-error";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.86";
          }
          {
            name = "quote";
            packageId = "quote 1.0.37";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
          }
        ];

      };
      "tagptr" = rec {
        crateName = "tagptr";
        version = "0.2.0";
        edition = "2018";
        sha256 = "05r4mwvlsclx1ayj65hpzjv3dn4wpi8j4xm695vydccf9k7r683v";
        authors = [
          "Oliver Giersch"
        ];

      };
      "tap" = rec {
        crateName = "tap";
        version = "1.0.1";
        edition = "2015";
        sha256 = "0sc3gl4nldqpvyhqi3bbd0l9k7fngrcl4zs47n314nqqk4bpx4sm";
        authors = [
          "Elliott Linder <elliott.darfink@gmail.com>"
          "myrrlyn <self@myrrlyn.dev>"
        ];

      };
      "tar" = rec {
        crateName = "tar";
        version = "0.4.42";
        edition = "2021";
        sha256 = "0820y2jdzx77i1m7r5rxwv8ks1mb2ynnkxn6axmy1dgd786w9xjg";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "filetime";
            packageId = "filetime";
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "xattr";
            packageId = "xattr";
            optional = true;
            target = { target, features }: (target."unix" or false);
          }
        ];
        features = {
          "default" = [ "xattr" ];
          "xattr" = [ "dep:xattr" ];
        };
        resolvedDefaultFeatures = [ "default" "xattr" ];
      };
      "telemetry-subscribers" = rec {
        crateName = "telemetry-subscribers";
        version = "0.5.0-alpha";
        edition = "2021";
        crateBin = [
          {
            name = "import-trace";
            path = "src/bin/import-trace.rs";
            requiredFeatures = [ ];
          }
        ];
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/telemetry-subscribers; }
          else ./crates/telemetry-subscribers;
        libName = "telemetry_subscribers";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "atomic_float";
            packageId = "atomic_float";
          }
          {
            name = "bytes";
            packageId = "bytes";
            features = [ "serde" ];
          }
          {
            name = "bytes-varint";
            packageId = "bytes-varint";
          }
          {
            name = "clap";
            packageId = "clap";
            features = [ "derive" "wrap_help" ];
          }
          {
            name = "console-subscriber";
            packageId = "console-subscriber";
            optional = true;
          }
          {
            name = "crossterm";
            packageId = "crossterm 0.25.0";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "opentelemetry";
            packageId = "opentelemetry 0.24.0";
          }
          {
            name = "opentelemetry-otlp";
            packageId = "opentelemetry-otlp";
            features = [ "grpc-tonic" ];
          }
          {
            name = "opentelemetry-proto";
            packageId = "opentelemetry-proto";
          }
          {
            name = "opentelemetry_sdk";
            packageId = "opentelemetry_sdk";
            features = [ "rt-tokio" ];
          }
          {
            name = "prometheus";
            packageId = "prometheus";
          }
          {
            name = "prost";
            packageId = "prost";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "full" ];
          }
          {
            name = "tonic";
            packageId = "tonic";
            features = [ "transport" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "tracing-appender";
            packageId = "tracing-appender";
          }
          {
            name = "tracing-opentelemetry";
            packageId = "tracing-opentelemetry";
          }
          {
            name = "tracing-subscriber";
            packageId = "tracing-subscriber";
            usesDefaultFeatures = false;
            features = [ "std" "smallvec" "fmt" "ansi" "time" "json" "registry" "env-filter" ];
          }
        ];
        devDependencies = [
          {
            name = "camino";
            packageId = "camino";
          }
        ];
        features = {
          "console-subscriber" = [ "dep:console-subscriber" ];
          "tokio-console" = [ "console-subscriber" ];
        };
        resolvedDefaultFeatures = [ "console-subscriber" "default" "tokio-console" ];
      };
      "tempfile" = rec {
        crateName = "tempfile";
        version = "3.12.0";
        edition = "2021";
        sha256 = "0r3sm3323crr50ranvask8z4qb3x5zfqxs1mrzab1swlqz8cvjq4";
        authors = [
          "Steven Allen <steven@stebalien.com>"
          "The Rust Project Developers"
          "Ashley Mannix <ashleymannix@live.com.au>"
          "Jason White <me@jasonwhite.io>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "fastrand";
            packageId = "fastrand";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "rustix";
            packageId = "rustix";
            target = { target, features }: ((target."unix" or false) || ("wasi" == target."os" or null));
            features = [ "fs" ];
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.59.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_Storage_FileSystem" "Win32_Foundation" ];
          }
        ];
        features = {
        };
      };
      "term" = rec {
        crateName = "term";
        version = "0.7.0";
        edition = "2018";
        sha256 = "07xzxmg7dbhlirpyfq09v7cfb9gxn0077sqqvszgjvyrjnngi7f5";
        authors = [
          "The Rust Project Developers"
          "Steven Allen"
        ];
        dependencies = [
          {
            name = "dirs-next";
            packageId = "dirs-next";
          }
          {
            name = "rustversion";
            packageId = "rustversion";
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: (target."windows" or false);
            features = [ "consoleapi" "wincon" "handleapi" "fileapi" ];
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "termcolor" = rec {
        crateName = "termcolor";
        version = "1.1.3";
        edition = "2018";
        sha256 = "0mbpflskhnz3jf312k50vn0hqbql8ga2rk0k79pkgchip4q4vcms";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "winapi-util";
            packageId = "winapi-util";
            target = { target, features }: (target."windows" or false);
          }
        ];

      };
      "terminal_size" = rec {
        crateName = "terminal_size";
        version = "0.3.0";
        edition = "2021";
        sha256 = "1xqdzdjq77smg41z67vg3qwrcilf1zf5330gdrgm22lyghmvzgi1";
        authors = [
          "Andrew Chin <achin@eminence32.net>"
        ];
        dependencies = [
          {
            name = "rustix";
            packageId = "rustix";
            target = { target, features }: (!(target."windows" or false));
            features = [ "termios" ];
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.48.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_Foundation" "Win32_System_Console" ];
          }
        ];

      };
      "termtree" = rec {
        crateName = "termtree";
        version = "0.4.1";
        edition = "2018";
        sha256 = "0xkal5l2r3r9p9j90x35qy4npbdwxz4gskvbijs6msymaangas9k";

      };
      "test-cluster" = rec {
        crateName = "test-cluster";
        version = "0.5.0-alpha";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/test-cluster; }
          else ./crates/test-cluster;
        libName = "test_cluster";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "bcs";
            packageId = "bcs";
          }
          {
            name = "fastcrypto";
            packageId = "fastcrypto";
          }
          {
            name = "fastcrypto-zkp";
            packageId = "fastcrypto-zkp";
            rename = "fastcrypto-zkp";
            target = { target, features }: (target."msim" or false);
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "iota-bridge";
            packageId = "iota-bridge";
          }
          {
            name = "iota-config";
            packageId = "iota-config";
          }
          {
            name = "iota-core";
            packageId = "iota-core";
            features = [ "test-utils" ];
          }
          {
            name = "iota-framework";
            packageId = "iota-framework";
          }
          {
            name = "iota-genesis-builder";
            packageId = "iota-genesis-builder";
          }
          {
            name = "iota-json-rpc";
            packageId = "iota-json-rpc";
          }
          {
            name = "iota-json-rpc-api";
            packageId = "iota-json-rpc-api";
          }
          {
            name = "iota-json-rpc-types";
            packageId = "iota-json-rpc-types";
          }
          {
            name = "iota-keys";
            packageId = "iota-keys";
          }
          {
            name = "iota-node";
            packageId = "iota-node";
          }
          {
            name = "iota-protocol-config";
            packageId = "iota-protocol-config";
          }
          {
            name = "iota-sdk";
            packageId = "iota-sdk 0.5.0-alpha";
          }
          {
            name = "iota-simulator";
            packageId = "iota-simulator";
            target = { target, features }: (target."msim" or false);
          }
          {
            name = "iota-swarm";
            packageId = "iota-swarm";
          }
          {
            name = "iota-swarm-config";
            packageId = "iota-swarm-config";
          }
          {
            name = "iota-test-transaction-builder";
            packageId = "iota-test-transaction-builder";
          }
          {
            name = "iota-types";
            packageId = "iota-types";
            features = [ "test-utils" ];
          }
          {
            name = "jsonrpsee";
            packageId = "jsonrpsee";
            features = [ "server" "macros" "client" "ws-client" "http-client" ];
          }
          {
            name = "move-binary-format";
            packageId = "move-binary-format";
          }
          {
            name = "prometheus";
            packageId = "prometheus";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "full" "tracing" "test-util" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
        ];
        devDependencies = [
          {
            name = "iota-json-rpc-api";
            packageId = "iota-json-rpc-api";
          }
          {
            name = "iota-macros";
            packageId = "iota-macros";
          }
          {
            name = "iota-metrics";
            packageId = "iota-metrics";
          }
        ];

      };
      "test-fuzz" = rec {
        crateName = "test-fuzz";
        version = "3.1.0";
        edition = "2018";
        sha256 = "1kwilza9nv40m52826i7n5k1wja8sdsrjm807zk2c7qvc56qhzl5";
        libName = "test_fuzz";
        authors = [
          "Samuel E. Moelius III <sam@moeli.us>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "test-fuzz-internal";
            packageId = "test-fuzz-internal";
            rename = "internal";
          }
          {
            name = "test-fuzz-macro";
            packageId = "test-fuzz-macro";
          }
          {
            name = "test-fuzz-runtime";
            packageId = "test-fuzz-runtime";
            rename = "runtime";
          }
        ];
        features = {
          "__persistent" = [ "afl" "test-fuzz-macro/__persistent" ];
          "afl" = [ "dep:afl" ];
          "auto_concretize" = [ "internal/__auto_concretize" "test-fuzz-macro/__auto_concretize" ];
          "serde_bincode" = [ "internal/__serde_bincode" "runtime/__serde_bincode" "test-fuzz-macro/__serde_bincode" ];
          "serde_cbor" = [ "internal/__serde_cbor" "runtime/__serde_cbor" "test-fuzz-macro/__serde_cbor" ];
          "serde_cbor4ii" = [ "internal/__serde_cbor4ii" "runtime/__serde_cbor4ii" "test-fuzz-macro/__serde_cbor4ii" ];
        };
      };
      "test-fuzz-internal" = rec {
        crateName = "test-fuzz-internal";
        version = "3.1.0";
        edition = "2018";
        sha256 = "1qa48zvvj25ng4jv8sladyv3mykg87n9c31s3w8v4214asy3pns8";
        libName = "test_fuzz_internal";
        authors = [
          "Samuel E. Moelius III <sam@moeli.us>"
        ];
        dependencies = [
          {
            name = "cargo_metadata";
            packageId = "cargo_metadata 0.15.4";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.86";
          }
          {
            name = "quote";
            packageId = "quote 1.0.37";
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "strum_macros";
            packageId = "strum_macros 0.24.3";
          }
        ];
        features = {
        };
      };
      "test-fuzz-macro" = rec {
        crateName = "test-fuzz-macro";
        version = "3.1.0";
        edition = "2018";
        sha256 = "1028np3yyfc2s83v9lawyrxih4g9qpwkkia501frqyvw0xfd0z71";
        procMacro = true;
        libName = "test_fuzz_macro";
        authors = [
          "Samuel E. Moelius III <sam@moeli.us>"
        ];
        dependencies = [
          {
            name = "darling";
            packageId = "darling 0.20.10";
          }
          {
            name = "if_chain";
            packageId = "if_chain";
          }
          {
            name = "itertools";
            packageId = "itertools 0.10.5";
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.86";
          }
          {
            name = "quote";
            packageId = "quote 1.0.37";
          }
          {
            name = "subprocess";
            packageId = "subprocess";
          }
          {
            name = "syn";
            packageId = "syn 2.0.77";
            features = [ "full" "parsing" "visit" "visit-mut" ];
          }
          {
            name = "test-fuzz-internal";
            packageId = "test-fuzz-internal";
            rename = "internal";
          }
          {
            name = "toolchain_find";
            packageId = "toolchain_find";
          }
        ];
        features = {
          "__serde_bincode" = [ "internal/__serde_bincode" ];
          "__serde_cbor" = [ "internal/__serde_cbor" ];
          "__serde_cbor4ii" = [ "internal/__serde_cbor4ii" ];
        };
      };
      "test-fuzz-runtime" = rec {
        crateName = "test-fuzz-runtime";
        version = "3.1.0";
        edition = "2018";
        sha256 = "0gaia602x9r4mm25xrx7g64ip0ipgqrd4pv4f5makl92r8l8gmjk";
        libName = "test_fuzz_runtime";
        authors = [
          "Samuel E. Moelius III <sam@moeli.us>"
        ];
        dependencies = [
          {
            name = "bincode";
            packageId = "bincode";
          }
          {
            name = "hex";
            packageId = "hex";
          }
          {
            name = "num-traits";
            packageId = "num-traits";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "sha-1";
            packageId = "sha-1";
          }
          {
            name = "test-fuzz-internal";
            packageId = "test-fuzz-internal";
            rename = "internal";
          }
        ];
        features = {
          "__serde_cbor" = [ "serde_cbor" ];
          "__serde_cbor4ii" = [ "cbor4ii" ];
          "cbor4ii" = [ "dep:cbor4ii" ];
          "serde_cbor" = [ "dep:serde_cbor" ];
        };
      };
      "textwrap" = rec {
        crateName = "textwrap";
        version = "0.16.1";
        edition = "2021";
        sha256 = "1fgqn3mg9gdbjxwfxl76fg0qiq53w3mk4hdh1x40jylnz39k9m13";
        authors = [
          "Martin Geisler <martin@geisler.net>"
        ];
        dependencies = [
          {
            name = "smawk";
            packageId = "smawk";
            optional = true;
          }
          {
            name = "unicode-linebreak";
            packageId = "unicode-linebreak";
            optional = true;
          }
          {
            name = "unicode-width";
            packageId = "unicode-width";
            optional = true;
          }
        ];
        features = {
          "default" = [ "unicode-linebreak" "unicode-width" "smawk" ];
          "hyphenation" = [ "dep:hyphenation" ];
          "smawk" = [ "dep:smawk" ];
          "terminal_size" = [ "dep:terminal_size" ];
          "unicode-linebreak" = [ "dep:unicode-linebreak" ];
          "unicode-width" = [ "dep:unicode-width" ];
        };
        resolvedDefaultFeatures = [ "default" "smawk" "unicode-linebreak" "unicode-width" ];
      };
      "thiserror" = rec {
        crateName = "thiserror";
        version = "1.0.64";
        edition = "2021";
        sha256 = "114s8lmssxl0c2480s671am88vzlasbaikxbvfv8pyqrq6mzh2nm";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "thiserror-impl";
            packageId = "thiserror-impl";
          }
        ];

      };
      "thiserror-impl" = rec {
        crateName = "thiserror-impl";
        version = "1.0.64";
        edition = "2021";
        sha256 = "1hvzmjx9iamln854l74qyhs0jl2pg3hhqzpqm9p8gszmf9v4x408";
        procMacro = true;
        libName = "thiserror_impl";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.86";
          }
          {
            name = "quote";
            packageId = "quote 1.0.37";
          }
          {
            name = "syn";
            packageId = "syn 2.0.77";
          }
        ];

      };
      "thread_local" = rec {
        crateName = "thread_local";
        version = "1.1.8";
        edition = "2021";
        sha256 = "173i5lyjh011gsimk21np9jn8al18rxsrkjli20a7b8ks2xgk7lb";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
        ];
        features = {
        };
      };
      "threadpool" = rec {
        crateName = "threadpool";
        version = "1.8.1";
        edition = "2015";
        sha256 = "1amgfyzvynbm8pacniivzq9r0fh3chhs7kijic81j76l6c5ycl6h";
        authors = [
          "The Rust Project Developers"
          "Corey Farwell <coreyf@rwell.org>"
          "Stefan Schindler <dns2utf8@estada.ch>"
        ];
        dependencies = [
          {
            name = "num_cpus";
            packageId = "num_cpus";
          }
        ];

      };
      "thrift" = rec {
        crateName = "thrift";
        version = "0.17.0";
        edition = "2018";
        sha256 = "02cydaqqlp25ri19y3ixi77a7nd85fwvbfn4fp0qpakzzj2vqm3y";
        authors = [
          "Apache Thrift Developers <dev@thrift.apache.org>"
        ];
        dependencies = [
          {
            name = "byteorder";
            packageId = "byteorder";
          }
          {
            name = "integer-encoding";
            packageId = "integer-encoding";
          }
          {
            name = "ordered-float";
            packageId = "ordered-float";
          }
        ];
        features = {
          "default" = [ "server" ];
          "log" = [ "dep:log" ];
          "server" = [ "threadpool" "log" ];
          "threadpool" = [ "dep:threadpool" ];
        };
      };
      "time" = rec {
        crateName = "time";
        version = "0.3.36";
        edition = "2021";
        sha256 = "11g8hdpahgrf1wwl2rpsg5nxq3aj7ri6xr672v4qcij6cgjqizax";
        authors = [
          "Jacob Pratt <open-source@jhpratt.dev>"
          "Time contributors"
        ];
        dependencies = [
          {
            name = "deranged";
            packageId = "deranged";
            usesDefaultFeatures = false;
            features = [ "powerfmt" ];
          }
          {
            name = "itoa";
            packageId = "itoa";
            optional = true;
          }
          {
            name = "libc";
            packageId = "libc";
            optional = true;
            target = { target, features }: (builtins.elem "unix" target."family");
          }
          {
            name = "num-conv";
            packageId = "num-conv";
          }
          {
            name = "num_threads";
            packageId = "num_threads";
            optional = true;
            target = { target, features }: (builtins.elem "unix" target."family");
          }
          {
            name = "powerfmt";
            packageId = "powerfmt";
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "time-core";
            packageId = "time-core";
          }
          {
            name = "time-macros";
            packageId = "time-macros";
            optional = true;
          }
        ];
        devDependencies = [
          {
            name = "num-conv";
            packageId = "num-conv";
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "time-macros";
            packageId = "time-macros";
          }
        ];
        features = {
          "alloc" = [ "serde?/alloc" ];
          "default" = [ "std" ];
          "formatting" = [ "dep:itoa" "std" "time-macros?/formatting" ];
          "large-dates" = [ "time-macros?/large-dates" ];
          "local-offset" = [ "std" "dep:libc" "dep:num_threads" ];
          "macros" = [ "dep:time-macros" ];
          "parsing" = [ "time-macros?/parsing" ];
          "quickcheck" = [ "dep:quickcheck" "alloc" "deranged/quickcheck" ];
          "rand" = [ "dep:rand" "deranged/rand" ];
          "serde" = [ "dep:serde" "time-macros?/serde" "deranged/serde" ];
          "serde-human-readable" = [ "serde" "formatting" "parsing" ];
          "serde-well-known" = [ "serde" "formatting" "parsing" ];
          "std" = [ "alloc" "deranged/std" ];
          "wasm-bindgen" = [ "dep:js-sys" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "formatting" "local-offset" "macros" "parsing" "serde" "serde-well-known" "std" ];
      };
      "time-core" = rec {
        crateName = "time-core";
        version = "0.1.2";
        edition = "2021";
        sha256 = "1wx3qizcihw6z151hywfzzyd1y5dl804ydyxci6qm07vbakpr4pg";
        libName = "time_core";
        authors = [
          "Jacob Pratt <open-source@jhpratt.dev>"
          "Time contributors"
        ];

      };
      "time-macros" = rec {
        crateName = "time-macros";
        version = "0.2.18";
        edition = "2021";
        sha256 = "1kqwxvfh2jkpg38fy673d6danh1bhcmmbsmffww3mphgail2l99z";
        procMacro = true;
        libName = "time_macros";
        authors = [
          "Jacob Pratt <open-source@jhpratt.dev>"
          "Time contributors"
        ];
        dependencies = [
          {
            name = "num-conv";
            packageId = "num-conv";
          }
          {
            name = "time-core";
            packageId = "time-core";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "formatting" "parsing" "serde" ];
      };
      "tiny-bip39" = rec {
        crateName = "tiny-bip39";
        version = "1.0.0";
        edition = "2018";
        sha256 = "0q98iv3wgbd41wyxxd5is8sddi53k9ary45rbi5fi8dmb39r9k32";
        libName = "bip39";
        authors = [
          "Stephen Oliver <steve@infincia.com>"
          "Maciej Hirsz <hello@maciej.codes>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "hmac";
            packageId = "hmac";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "pbkdf2";
            packageId = "pbkdf2 0.11.0";
            usesDefaultFeatures = false;
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "rustc-hash";
            packageId = "rustc-hash 1.1.0";
          }
          {
            name = "sha2";
            packageId = "sha2 0.10.8";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "unicode-normalization";
            packageId = "unicode-normalization";
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            features = [ "zeroize_derive" ];
          }
        ];
        features = {
          "default" = [ "chinese-simplified" "chinese-traditional" "french" "italian" "japanese" "korean" "spanish" ];
        };
        resolvedDefaultFeatures = [ "chinese-simplified" "chinese-traditional" "default" "french" "italian" "japanese" "korean" "spanish" ];
      };
      "tiny-keccak" = rec {
        crateName = "tiny-keccak";
        version = "2.0.2";
        edition = "2018";
        sha256 = "0dq2x0hjffmixgyf6xv9wgsbcxkd65ld0wrfqmagji8a829kg79c";
        libName = "tiny_keccak";
        authors = [
          "debris <marek.kotewicz@gmail.com>"
        ];
        dependencies = [
          {
            name = "crunchy";
            packageId = "crunchy";
          }
        ];
        features = {
          "fips202" = [ "keccak" "shake" "sha3" ];
          "kmac" = [ "cshake" ];
          "parallel_hash" = [ "cshake" ];
          "sp800" = [ "cshake" "kmac" "tuple_hash" ];
          "tuple_hash" = [ "cshake" ];
        };
        resolvedDefaultFeatures = [ "default" "keccak" "sha3" "shake" ];
      };
      "tinytemplate" = rec {
        crateName = "tinytemplate";
        version = "1.2.1";
        edition = "2015";
        sha256 = "1g5n77cqkdh9hy75zdb01adxn45mkh9y40wdr7l68xpz35gnnkdy";
        authors = [
          "Brook Heisler <brookheisler@gmail.com>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
        ];

      };
      "tinyvec" = rec {
        crateName = "tinyvec";
        version = "1.8.0";
        edition = "2018";
        sha256 = "0f5rf6a2wzyv6w4jmfga9iw7rp9fp5gf4d604xgjsf3d9wgqhpj4";
        authors = [
          "Lokathor <zefria@gmail.com>"
        ];
        dependencies = [
          {
            name = "tinyvec_macros";
            packageId = "tinyvec_macros";
            optional = true;
          }
        ];
        features = {
          "alloc" = [ "tinyvec_macros" ];
          "arbitrary" = [ "dep:arbitrary" ];
          "real_blackbox" = [ "criterion/real_blackbox" ];
          "rustc_1_57" = [ "rustc_1_55" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "alloc" ];
          "tinyvec_macros" = [ "dep:tinyvec_macros" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "grab_spare_slice" "std" "tinyvec_macros" ];
      };
      "tinyvec_macros" = rec {
        crateName = "tinyvec_macros";
        version = "0.1.1";
        edition = "2018";
        sha256 = "081gag86208sc3y6sdkshgw3vysm5d34p431dzw0bshz66ncng0z";
        authors = [
          "Soveu <marx.tomasz@gmail.com>"
        ];

      };
      "tokio" = rec {
        crateName = "tokio";
        version = "1.39.2";
        edition = "2021";
        sha256 = "1cb7yhba7nnf00cylcywk7rai5kkdb8b4jzwrc26zgbqqwdzp96s";
        authors = [
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "backtrace";
            packageId = "backtrace";
            target = { target, features }: (target."tokio_taskdump" or false);
          }
          {
            name = "bytes";
            packageId = "bytes";
            optional = true;
          }
          {
            name = "libc";
            packageId = "libc";
            optional = true;
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "mio";
            packageId = "mio 1.0.2";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "parking_lot";
            packageId = "parking_lot 0.12.3";
            optional = true;
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "tokio-macros";
            packageId = "registry+https://github.com/rust-lang/crates.io-index#tokio-macros@2.4.0";
            optional = true;
          }
          {
            name = "signal-hook-registry";
            packageId = "signal-hook-registry";
            optional = true;
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "socket2";
            packageId = "socket2";
            optional = true;
            target = { target, features }: (!(builtins.elem "wasm" target."family"));
            features = [ "all" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: (target."tokio_unstable" or false);
            features = [ "std" ];
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.52.0";
            optional = true;
            target = { target, features }: (target."windows" or false);
          }
        ];
        devDependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = {target, features}: (target."unix" or false);
          }
          {
            name = "socket2";
            packageId = "socket2";
            target = {target, features}: (!(builtins.elem "wasm" target."family"));
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.52.0";
            target = {target, features}: (target."windows" or false);
            features = [ "Win32_Foundation" "Win32_Security_Authorization" ];
          }
        ];
        features = {
          "bytes" = [ "dep:bytes" ];
          "full" = [ "fs" "io-util" "io-std" "macros" "net" "parking_lot" "process" "rt" "rt-multi-thread" "signal" "sync" "time" ];
          "io-util" = [ "bytes" ];
          "libc" = [ "dep:libc" ];
          "macros" = [ "tokio-macros" ];
          "mio" = [ "dep:mio" ];
          "net" = [ "libc" "mio/os-poll" "mio/os-ext" "mio/net" "socket2" "windows-sys/Win32_Foundation" "windows-sys/Win32_Security" "windows-sys/Win32_Storage_FileSystem" "windows-sys/Win32_System_Pipes" "windows-sys/Win32_System_SystemServices" ];
          "parking_lot" = [ "dep:parking_lot" ];
          "process" = [ "bytes" "libc" "mio/os-poll" "mio/os-ext" "mio/net" "signal-hook-registry" "windows-sys/Win32_Foundation" "windows-sys/Win32_System_Threading" "windows-sys/Win32_System_WindowsProgramming" ];
          "rt-multi-thread" = [ "rt" ];
          "signal" = [ "libc" "mio/os-poll" "mio/net" "mio/os-ext" "signal-hook-registry" "windows-sys/Win32_Foundation" "windows-sys/Win32_System_Console" ];
          "signal-hook-registry" = [ "dep:signal-hook-registry" ];
          "socket2" = [ "dep:socket2" ];
          "test-util" = [ "rt" "sync" "time" ];
          "tokio-macros" = [ "dep:tokio-macros" ];
          "tracing" = [ "dep:tracing" ];
          "windows-sys" = [ "dep:windows-sys" ];
        };
        resolvedDefaultFeatures = [ "bytes" "default" "fs" "full" "io-std" "io-util" "libc" "macros" "mio" "net" "parking_lot" "process" "rt" "rt-multi-thread" "signal" "signal-hook-registry" "socket2" "sync" "test-util" "time" "tokio-macros" "tracing" "windows-sys" ];
      };
      "tokio-rustls 0.24.1" = rec {
        crateName = "tokio-rustls";
        version = "0.24.1";
        edition = "2018";
        sha256 = "10bhibg57mqir7xjhb2xmf24xgfpx6fzpyw720a4ih8a737jg0y2";
        libName = "tokio_rustls";
        dependencies = [
          {
            name = "rustls";
            packageId = "rustls 0.21.12";
            usesDefaultFeatures = false;
          }
          {
            name = "tokio";
            packageId = "tokio";
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "full" ];
          }
        ];
        features = {
          "dangerous_configuration" = [ "rustls/dangerous_configuration" ];
          "default" = [ "logging" "tls12" ];
          "logging" = [ "rustls/logging" ];
          "secret_extraction" = [ "rustls/secret_extraction" ];
          "tls12" = [ "rustls/tls12" ];
        };
        resolvedDefaultFeatures = [ "default" "logging" "tls12" ];
      };
      "tokio-rustls 0.26.0" = rec {
        crateName = "tokio-rustls";
        version = "0.26.0";
        edition = "2021";
        sha256 = "1m00czrmk8x7pdjnz10a3da3i1d0sdf9j9vfp5dnk5ss1q6w8yqc";
        libName = "tokio_rustls";
        dependencies = [
          {
            name = "rustls";
            packageId = "rustls 0.23.13";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "rustls-pki-types";
            packageId = "rustls-pki-types";
            rename = "pki-types";
          }
          {
            name = "tokio";
            packageId = "tokio";
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "full" ];
          }
        ];
        features = {
          "aws-lc-rs" = [ "aws_lc_rs" ];
          "aws_lc_rs" = [ "rustls/aws_lc_rs" ];
          "default" = [ "logging" "tls12" "aws_lc_rs" ];
          "fips" = [ "rustls/fips" ];
          "logging" = [ "rustls/logging" ];
          "ring" = [ "rustls/ring" ];
          "tls12" = [ "rustls/tls12" ];
        };
        resolvedDefaultFeatures = [ "logging" "ring" "tls12" ];
      };
      "tokio-stream" = rec {
        crateName = "tokio-stream";
        version = "0.1.16";
        edition = "2021";
        sha256 = "1wc65gprcsyzqlr0k091glswy96kph90i32gffi4ksyh03hnqkjg";
        libName = "tokio_stream";
        authors = [
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "futures-core";
            packageId = "futures-core";
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "sync" ];
          }
          {
            name = "tokio-util";
            packageId = "tokio-util 0.7.12";
            optional = true;
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "full" "test-util" ];
          }
        ];
        features = {
          "default" = [ "time" ];
          "fs" = [ "tokio/fs" ];
          "full" = [ "time" "net" "io-util" "fs" "sync" "signal" ];
          "io-util" = [ "tokio/io-util" ];
          "net" = [ "tokio/net" ];
          "signal" = [ "tokio/signal" ];
          "sync" = [ "tokio/sync" "tokio-util" ];
          "time" = [ "tokio/time" ];
          "tokio-util" = [ "dep:tokio-util" ];
        };
        resolvedDefaultFeatures = [ "default" "net" "sync" "time" "tokio-util" ];
      };
      "tokio-tungstenite 0.20.1" = rec {
        crateName = "tokio-tungstenite";
        version = "0.20.1";
        edition = "2018";
        sha256 = "0v1v24l27hxi5hlchs7hfd5rgzi167x0ygbw220nvq0w5b5msb91";
        libName = "tokio_tungstenite";
        authors = [
          "Daniel Abramov <dabramov@snapview.de>"
          "Alexey Galakhov <agalakhov@snapview.de>"
        ];
        dependencies = [
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
            features = [ "sink" "std" ];
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "rustls";
            packageId = "rustls 0.21.12";
            optional = true;
          }
          {
            name = "tokio";
            packageId = "tokio";
            usesDefaultFeatures = false;
            features = [ "io-util" ];
          }
          {
            name = "tokio-rustls";
            packageId = "tokio-rustls 0.24.1";
            optional = true;
          }
          {
            name = "tungstenite";
            packageId = "tungstenite 0.20.1";
            usesDefaultFeatures = false;
          }
          {
            name = "webpki-roots";
            packageId = "webpki-roots 0.25.4";
            optional = true;
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            usesDefaultFeatures = false;
            features = [ "io-std" "macros" "net" "rt-multi-thread" "time" ];
          }
        ];
        features = {
          "__rustls-tls" = [ "rustls" "tokio-rustls" "stream" "tungstenite/__rustls-tls" "handshake" ];
          "connect" = [ "stream" "tokio/net" "handshake" ];
          "default" = [ "connect" "handshake" ];
          "handshake" = [ "tungstenite/handshake" ];
          "native-tls" = [ "native-tls-crate" "tokio-native-tls" "stream" "tungstenite/native-tls" "handshake" ];
          "native-tls-crate" = [ "dep:native-tls-crate" ];
          "native-tls-vendored" = [ "native-tls" "native-tls-crate/vendored" "tungstenite/native-tls-vendored" ];
          "rustls" = [ "dep:rustls" ];
          "rustls-native-certs" = [ "dep:rustls-native-certs" ];
          "rustls-tls-native-roots" = [ "__rustls-tls" "rustls-native-certs" ];
          "rustls-tls-webpki-roots" = [ "__rustls-tls" "webpki-roots" ];
          "tokio-native-tls" = [ "dep:tokio-native-tls" ];
          "tokio-rustls" = [ "dep:tokio-rustls" ];
          "webpki-roots" = [ "dep:webpki-roots" ];
        };
        resolvedDefaultFeatures = [ "__rustls-tls" "connect" "handshake" "rustls" "rustls-tls-webpki-roots" "stream" "tokio-rustls" "webpki-roots" ];
      };
      "tokio-tungstenite 0.23.1" = rec {
        crateName = "tokio-tungstenite";
        version = "0.23.1";
        edition = "2018";
        sha256 = "1k9ijv208hsps5qhq2ii2cl8lwik7lpasssfy6m9016irr09b666";
        libName = "tokio_tungstenite";
        authors = [
          "Daniel Abramov <dabramov@snapview.de>"
          "Alexey Galakhov <agalakhov@snapview.de>"
        ];
        dependencies = [
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
            features = [ "sink" "std" ];
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "tokio";
            packageId = "tokio";
            usesDefaultFeatures = false;
            features = [ "io-util" ];
          }
          {
            name = "tungstenite";
            packageId = "tungstenite 0.23.0";
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            usesDefaultFeatures = false;
            features = [ "io-std" "macros" "net" "rt-multi-thread" "time" ];
          }
        ];
        features = {
          "__rustls-tls" = [ "rustls" "rustls-pki-types" "tokio-rustls" "stream" "tungstenite/__rustls-tls" "handshake" ];
          "connect" = [ "stream" "tokio/net" "handshake" ];
          "default" = [ "connect" "handshake" ];
          "handshake" = [ "tungstenite/handshake" ];
          "native-tls" = [ "native-tls-crate" "tokio-native-tls" "stream" "tungstenite/native-tls" "handshake" ];
          "native-tls-crate" = [ "dep:native-tls-crate" ];
          "native-tls-vendored" = [ "native-tls" "native-tls-crate/vendored" "tungstenite/native-tls-vendored" ];
          "rustls" = [ "dep:rustls" ];
          "rustls-native-certs" = [ "dep:rustls-native-certs" ];
          "rustls-pki-types" = [ "dep:rustls-pki-types" ];
          "rustls-tls-native-roots" = [ "__rustls-tls" "rustls-native-certs" ];
          "rustls-tls-webpki-roots" = [ "__rustls-tls" "webpki-roots" ];
          "tokio-native-tls" = [ "dep:tokio-native-tls" ];
          "tokio-rustls" = [ "dep:tokio-rustls" ];
          "url" = [ "tungstenite/url" ];
          "webpki-roots" = [ "dep:webpki-roots" ];
        };
        resolvedDefaultFeatures = [ "connect" "default" "handshake" "stream" ];
      };
      "tokio-util 0.7.11" = rec {
        crateName = "tokio-util";
        version = "0.7.11";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "ssh://git@github.com/iotaledger/tokio-madsim-fork.git";
          rev = "e34a35287024b341db16139a402508aaea8ec955";
          sha256 = "0p0djsx0r02hlhsws3hjmsg2p5xhk31166kc4mginaynvv8b6rp5";
        };
        libName = "tokio_util";
        authors = [
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "futures-core";
            packageId = "futures-core";
          }
          {
            name = "futures-io";
            packageId = "futures-io";
            optional = true;
          }
          {
            name = "futures-sink";
            packageId = "futures-sink";
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            optional = true;
          }
          {
            name = "hashbrown";
            packageId = "hashbrown 0.14.5";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: (target."tokio_unstable" or false);
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "real_tokio";
            packageId = "real_tokio";
            rename = "tokio";
            features = [ "sync" ];
          }
          {
            name = "slab";
            packageId = "slab";
            optional = true;
          }
        ];
        devDependencies = [
          {
            name = "real_tokio";
            packageId = "real_tokio";
            rename = "tokio";
            features = [ "full" ];
          }
        ];
        features = {
          "__docs_rs" = [ "futures-util" ];
          "compat" = [ "futures-io" ];
          "full" = [ "codec" "compat" "io-util" "time" "net" "rt" ];
          "futures-io" = [ "dep:futures-io" ];
          "futures-util" = [ "dep:futures-util" ];
          "hashbrown" = [ "dep:hashbrown" ];
          "io-util" = [ "io" "tokio/rt" "tokio/io-util" ];
          "net" = [ "tokio/net" ];
          "rt" = [ "tokio/rt" "tokio/sync" "futures-util" "hashbrown" ];
          "slab" = [ "dep:slab" ];
          "time" = [ "tokio/time" "slab" ];
          "tracing" = [ "dep:tracing" ];
        };
        resolvedDefaultFeatures = [ "codec" "compat" "default" "full" "futures-io" "futures-util" "hashbrown" "io" "io-util" "net" "rt" "slab" "time" ];
      };
      "tokio-util 0.7.12" = rec {
        crateName = "tokio-util";
        version = "0.7.12";
        edition = "2021";
        sha256 = "0spc0g4irbnf2flgag22gfii87avqzibwfm0si0d1g0k9ijw7rv1";
        libName = "tokio_util";
        authors = [
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "futures-core";
            packageId = "futures-core";
          }
          {
            name = "futures-io";
            packageId = "futures-io";
            optional = true;
          }
          {
            name = "futures-sink";
            packageId = "futures-sink";
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            optional = true;
          }
          {
            name = "hashbrown";
            packageId = "hashbrown 0.14.5";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: (target."tokio_unstable" or false);
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "sync" ];
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "full" ];
          }
        ];
        features = {
          "__docs_rs" = [ "futures-util" ];
          "compat" = [ "futures-io" ];
          "full" = [ "codec" "compat" "io-util" "time" "net" "rt" ];
          "futures-io" = [ "dep:futures-io" ];
          "futures-util" = [ "dep:futures-util" ];
          "hashbrown" = [ "dep:hashbrown" ];
          "io-util" = [ "io" "tokio/rt" "tokio/io-util" ];
          "net" = [ "tokio/net" ];
          "rt" = [ "tokio/rt" "tokio/sync" "futures-util" "hashbrown" ];
          "slab" = [ "dep:slab" ];
          "time" = [ "tokio/time" "slab" ];
          "tracing" = [ "dep:tracing" ];
        };
        resolvedDefaultFeatures = [ "codec" "compat" "default" "futures-io" "futures-util" "hashbrown" "io" "rt" ];
      };
      "toml 0.5.11" = rec {
        crateName = "toml";
        version = "0.5.11";
        edition = "2018";
        sha256 = "0d2266nx8b3n22c7k24x4428z6di8n83a9n466jm7a2hipfz1xzl";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
          }
        ];
        features = {
          "indexmap" = [ "dep:indexmap" ];
          "preserve_order" = [ "indexmap" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "toml 0.7.8" = rec {
        crateName = "toml";
        version = "0.7.8";
        edition = "2021";
        sha256 = "0mr2dpmzw4ndvzpnnli2dprcx61pdk62fq4mzw0b6zb27ffycyfx";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "indexmap";
            packageId = "indexmap 2.5.0";
            optional = true;
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "serde_spanned";
            packageId = "serde_spanned";
            features = [ "serde" ];
          }
          {
            name = "toml_datetime";
            packageId = "toml_datetime";
            features = [ "serde" ];
          }
          {
            name = "toml_edit";
            packageId = "toml_edit 0.19.15";
            optional = true;
            features = [ "serde" ];
          }
        ];
        devDependencies = [
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
        ];
        features = {
          "default" = [ "parse" "display" ];
          "display" = [ "dep:toml_edit" ];
          "indexmap" = [ "dep:indexmap" ];
          "parse" = [ "dep:toml_edit" ];
          "preserve_order" = [ "indexmap" ];
        };
        resolvedDefaultFeatures = [ "default" "display" "indexmap" "parse" "preserve_order" ];
      };
      "toml 0.8.19" = rec {
        crateName = "toml";
        version = "0.8.19";
        edition = "2021";
        sha256 = "0knjd3mkxyb87qcs2dark3qkpadidap3frqfj5nqvhpxwfc1zvd1";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "serde_spanned";
            packageId = "serde_spanned";
            features = [ "serde" ];
          }
          {
            name = "toml_datetime";
            packageId = "toml_datetime";
            features = [ "serde" ];
          }
          {
            name = "toml_edit";
            packageId = "toml_edit 0.22.22";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "serde" ];
          }
        ];
        devDependencies = [
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
        ];
        features = {
          "default" = [ "parse" "display" ];
          "display" = [ "dep:toml_edit" "toml_edit?/display" ];
          "indexmap" = [ "dep:indexmap" ];
          "parse" = [ "dep:toml_edit" "toml_edit?/parse" ];
          "preserve_order" = [ "indexmap" ];
        };
        resolvedDefaultFeatures = [ "default" "display" "parse" ];
      };
      "toml_datetime" = rec {
        crateName = "toml_datetime";
        version = "0.6.8";
        edition = "2021";
        sha256 = "0hgv7v9g35d7y9r2afic58jvlwnf73vgd1mz2k8gihlgrf73bmqd";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
        ];
        features = {
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "serde" ];
      };
      "toml_edit 0.14.4" = rec {
        crateName = "toml_edit";
        version = "0.14.4";
        edition = "2018";
        sha256 = "07xmklks4ldf8r9ban47zvq2s0csq43ja0dcjs43yi7j8ip2axjk";
        authors = [
          "Andronik Ordian <write@reusable.software>"
          "Ed Page <eopage@gmail.com>"
        ];
        dependencies = [
          {
            name = "combine";
            packageId = "combine";
          }
          {
            name = "indexmap";
            packageId = "indexmap 1.9.3";
          }
          {
            name = "itertools";
            packageId = "itertools 0.10.5";
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            features = [ "derive" ];
          }
        ];
        features = {
          "easy" = [ "serde" ];
          "kstring" = [ "dep:kstring" ];
          "perf" = [ "kstring" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "default" "easy" "serde" ];
      };
      "toml_edit 0.19.15" = rec {
        crateName = "toml_edit";
        version = "0.19.15";
        edition = "2021";
        sha256 = "08bl7rp5g6jwmfpad9s8jpw8wjrciadpnbaswgywpr9hv9qbfnqv";
        authors = [
          "Andronik Ordian <write@reusable.software>"
          "Ed Page <eopage@gmail.com>"
        ];
        dependencies = [
          {
            name = "indexmap";
            packageId = "indexmap 2.5.0";
            features = [ "std" ];
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
          {
            name = "serde_spanned";
            packageId = "serde_spanned";
            optional = true;
            features = [ "serde" ];
          }
          {
            name = "toml_datetime";
            packageId = "toml_datetime";
          }
          {
            name = "winnow";
            packageId = "winnow 0.5.40";
          }
        ];
        features = {
          "perf" = [ "dep:kstring" ];
          "serde" = [ "dep:serde" "toml_datetime/serde" "dep:serde_spanned" ];
        };
        resolvedDefaultFeatures = [ "default" "serde" ];
      };
      "toml_edit 0.22.22" = rec {
        crateName = "toml_edit";
        version = "0.22.22";
        edition = "2021";
        sha256 = "1xf7sxfzmnc45f75x302qrn5aph52vc8w226v59yhrm211i8vr2a";
        authors = [
          "Andronik Ordian <write@reusable.software>"
          "Ed Page <eopage@gmail.com>"
        ];
        dependencies = [
          {
            name = "indexmap";
            packageId = "indexmap 2.5.0";
            features = [ "std" ];
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
          {
            name = "serde_spanned";
            packageId = "serde_spanned";
            optional = true;
            features = [ "serde" ];
          }
          {
            name = "toml_datetime";
            packageId = "toml_datetime";
          }
          {
            name = "winnow";
            packageId = "winnow 0.6.20";
            optional = true;
          }
        ];
        features = {
          "default" = [ "parse" "display" ];
          "parse" = [ "dep:winnow" ];
          "perf" = [ "dep:kstring" ];
          "serde" = [ "dep:serde" "toml_datetime/serde" "dep:serde_spanned" ];
        };
        resolvedDefaultFeatures = [ "default" "display" "parse" "serde" ];
      };
      "tonic" = rec {
        crateName = "tonic";
        version = "0.12.3";
        edition = "2021";
        sha256 = "0ljd1lfjpw0vrm5wbv15x6nq2i38llsanls5rkzmdn2n0wrmnz47";
        authors = [
          "Lucio Franco <luciofranco14@gmail.com>"
        ];
        dependencies = [
          {
            name = "async-stream";
            packageId = "async-stream";
            optional = true;
          }
          {
            name = "async-trait";
            packageId = "async-trait";
            optional = true;
          }
          {
            name = "axum";
            packageId = "axum";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "base64";
            packageId = "base64 0.22.1";
          }
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "h2";
            packageId = "h2 0.4.6";
            optional = true;
          }
          {
            name = "http";
            packageId = "http 1.1.0";
          }
          {
            name = "http-body";
            packageId = "http-body 1.0.1";
          }
          {
            name = "http-body-util";
            packageId = "http-body-util";
          }
          {
            name = "hyper";
            packageId = "hyper 1.4.1";
            optional = true;
            features = [ "http1" "http2" ];
          }
          {
            name = "hyper-timeout";
            packageId = "hyper-timeout";
            optional = true;
          }
          {
            name = "hyper-util";
            packageId = "hyper-util";
            optional = true;
            features = [ "tokio" ];
          }
          {
            name = "percent-encoding";
            packageId = "percent-encoding";
          }
          {
            name = "pin-project";
            packageId = "pin-project";
          }
          {
            name = "prost";
            packageId = "prost";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "socket2";
            packageId = "socket2";
            optional = true;
            features = [ "all" ];
          }
          {
            name = "tokio";
            packageId = "tokio";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "tokio-stream";
            packageId = "tokio-stream";
            usesDefaultFeatures = false;
          }
          {
            name = "tower";
            packageId = "tower 0.4.13";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "tower-layer";
            packageId = "tower-layer";
          }
          {
            name = "tower-service";
            packageId = "tower-service";
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "rt" "macros" ];
          }
          {
            name = "tower";
            packageId = "tower 0.4.13";
            features = [ "full" ];
          }
        ];
        features = {
          "channel" = [ "dep:hyper" "hyper?/client" "dep:hyper-util" "hyper-util?/client-legacy" "dep:tower" "tower?/balance" "tower?/buffer" "tower?/discover" "tower?/limit" "tower?/util" "dep:tokio" "tokio?/time" "dep:hyper-timeout" ];
          "codegen" = [ "dep:async-trait" ];
          "default" = [ "transport" "codegen" "prost" ];
          "gzip" = [ "dep:flate2" ];
          "prost" = [ "dep:prost" ];
          "router" = [ "dep:axum" "dep:tower" "tower?/util" ];
          "server" = [ "router" "dep:async-stream" "dep:h2" "dep:hyper" "hyper?/server" "dep:hyper-util" "hyper-util?/service" "hyper-util?/server-auto" "dep:socket2" "dep:tokio" "tokio?/macros" "tokio?/net" "tokio?/time" "tokio-stream/net" "dep:tower" "tower?/util" "tower?/limit" ];
          "tls" = [ "dep:rustls-pemfile" "dep:tokio-rustls" "dep:tokio" "tokio?/rt" "tokio?/macros" ];
          "tls-native-roots" = [ "tls" "channel" "dep:rustls-native-certs" ];
          "tls-roots" = [ "tls-native-roots" ];
          "tls-webpki-roots" = [ "tls" "channel" "dep:webpki-roots" ];
          "transport" = [ "server" "channel" ];
          "zstd" = [ "dep:zstd" ];
        };
        resolvedDefaultFeatures = [ "channel" "codegen" "default" "prost" "router" "server" "transport" ];
      };
      "tonic-build" = rec {
        crateName = "tonic-build";
        version = "0.12.2";
        edition = "2021";
        sha256 = "0rwaxvsx4rld1ncmcih0bvmg8k8ah4r1ccyjwgbnn4shfa3yhkpy";
        libName = "tonic_build";
        authors = [
          "Lucio Franco <luciofranco14@gmail.com>"
        ];
        dependencies = [
          {
            name = "prettyplease";
            packageId = "prettyplease";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.86";
          }
          {
            name = "prost-build";
            packageId = "prost-build";
            optional = true;
          }
          {
            name = "quote";
            packageId = "quote 1.0.37";
          }
          {
            name = "syn";
            packageId = "syn 2.0.77";
          }
        ];
        features = {
          "cleanup-markdown" = [ "prost" "prost-build/cleanup-markdown" ];
          "default" = [ "transport" "prost" ];
          "prost" = [ "prost-build" ];
          "prost-build" = [ "dep:prost-build" ];
        };
        resolvedDefaultFeatures = [ "default" "prost" "prost-build" "transport" ];
      };
      "tonic-health" = rec {
        crateName = "tonic-health";
        version = "0.12.2";
        edition = "2021";
        sha256 = "19xm66ban6w8gjybqhp4ra3zz9pnqfjis3j95dmy5fh6yzk382pc";
        libName = "tonic_health";
        authors = [
          "James Nugent <james@jen20.com>"
        ];
        dependencies = [
          {
            name = "async-stream";
            packageId = "async-stream";
          }
          {
            name = "prost";
            packageId = "prost";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "sync" ];
          }
          {
            name = "tokio-stream";
            packageId = "tokio-stream";
          }
          {
            name = "tonic";
            packageId = "tonic";
            usesDefaultFeatures = false;
            features = [ "codegen" "prost" ];
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "rt-multi-thread" "macros" ];
          }
          {
            name = "tokio-stream";
            packageId = "tokio-stream";
          }
        ];
        features = {
          "default" = [ "transport" ];
        };
        resolvedDefaultFeatures = [ "default" "transport" ];
      };
      "toolchain_find" = rec {
        crateName = "toolchain_find";
        version = "0.3.0";
        edition = "2018";
        sha256 = "1v8k64hqbp3r144jwafqqykxj83481xkv9x60krnyy4d9rn7937s";
        authors = [
          "Garrett Squire <github@garrettsquire.com>"
        ];
        dependencies = [
          {
            name = "home";
            packageId = "home";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "regex";
            packageId = "regex";
          }
          {
            name = "semver";
            packageId = "semver";
          }
          {
            name = "walkdir";
            packageId = "walkdir";
          }
        ];

      };
      "tower 0.4.13" = rec {
        crateName = "tower";
        version = "0.4.13";
        edition = "2018";
        sha256 = "073wncyqav4sak1p755hf6vl66njgfc1z1g1di9rxx3cvvh9pymq";
        authors = [
          "Tower Maintainers <team@tower-rs.com>"
        ];
        dependencies = [
          {
            name = "futures-core";
            packageId = "futures-core";
            optional = true;
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "hdrhistogram";
            packageId = "hdrhistogram";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "indexmap";
            packageId = "indexmap 1.9.3";
            optional = true;
          }
          {
            name = "pin-project";
            packageId = "pin-project";
            optional = true;
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
            optional = true;
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
            optional = true;
            features = [ "small_rng" ];
          }
          {
            name = "slab";
            packageId = "slab";
            optional = true;
          }
          {
            name = "tokio";
            packageId = "tokio";
            optional = true;
            features = [ "sync" ];
          }
          {
            name = "tokio-util";
            packageId = "tokio-util 0.7.12";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "tower-layer";
            packageId = "tower-layer";
          }
          {
            name = "tower-service";
            packageId = "tower-service";
          }
          {
            name = "tracing";
            packageId = "tracing";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
        ];
        devDependencies = [
          {
            name = "hdrhistogram";
            packageId = "hdrhistogram";
            usesDefaultFeatures = false;
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "macros" "sync" "test-util" "rt-multi-thread" ];
          }
        ];
        features = {
          "__common" = [ "futures-core" "pin-project-lite" ];
          "balance" = [ "discover" "load" "ready-cache" "make" "rand" "slab" ];
          "buffer" = [ "__common" "tokio/sync" "tokio/rt" "tokio-util" "tracing" ];
          "default" = [ "log" ];
          "discover" = [ "__common" ];
          "filter" = [ "__common" "futures-util" ];
          "full" = [ "balance" "buffer" "discover" "filter" "hedge" "limit" "load" "load-shed" "make" "ready-cache" "reconnect" "retry" "spawn-ready" "steer" "timeout" "util" ];
          "futures-core" = [ "dep:futures-core" ];
          "futures-util" = [ "dep:futures-util" ];
          "hdrhistogram" = [ "dep:hdrhistogram" ];
          "hedge" = [ "util" "filter" "futures-util" "hdrhistogram" "tokio/time" "tracing" ];
          "indexmap" = [ "dep:indexmap" ];
          "limit" = [ "__common" "tokio/time" "tokio/sync" "tokio-util" "tracing" ];
          "load" = [ "__common" "tokio/time" "tracing" ];
          "load-shed" = [ "__common" ];
          "log" = [ "tracing/log" ];
          "make" = [ "futures-util" "pin-project-lite" "tokio/io-std" ];
          "pin-project" = [ "dep:pin-project" ];
          "pin-project-lite" = [ "dep:pin-project-lite" ];
          "rand" = [ "dep:rand" ];
          "ready-cache" = [ "futures-core" "futures-util" "indexmap" "tokio/sync" "tracing" "pin-project-lite" ];
          "reconnect" = [ "make" "tokio/io-std" "tracing" ];
          "retry" = [ "__common" "tokio/time" ];
          "slab" = [ "dep:slab" ];
          "spawn-ready" = [ "__common" "futures-util" "tokio/sync" "tokio/rt" "util" "tracing" ];
          "timeout" = [ "pin-project-lite" "tokio/time" ];
          "tokio" = [ "dep:tokio" ];
          "tokio-stream" = [ "dep:tokio-stream" ];
          "tokio-util" = [ "dep:tokio-util" ];
          "tracing" = [ "dep:tracing" ];
          "util" = [ "__common" "futures-util" "pin-project" ];
        };
        resolvedDefaultFeatures = [ "__common" "balance" "buffer" "default" "discover" "filter" "full" "futures-core" "futures-util" "hdrhistogram" "hedge" "indexmap" "limit" "load" "load-shed" "log" "make" "pin-project" "pin-project-lite" "rand" "ready-cache" "reconnect" "retry" "slab" "spawn-ready" "steer" "timeout" "tokio" "tokio-util" "tracing" "util" ];
      };
      "tower 0.5.1" = rec {
        crateName = "tower";
        version = "0.5.1";
        edition = "2018";
        sha256 = "0kvbp97bhb4sk24vhihcz74ngn0i4ygxqikmxndgng3w926r6wr8";
        authors = [
          "Tower Maintainers <team@tower-rs.com>"
        ];
        dependencies = [
          {
            name = "futures-core";
            packageId = "futures-core";
            optional = true;
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
            optional = true;
          }
          {
            name = "sync_wrapper";
            packageId = "sync_wrapper 0.1.2";
            optional = true;
          }
          {
            name = "tokio";
            packageId = "tokio";
            optional = true;
            features = [ "sync" ];
          }
          {
            name = "tower-layer";
            packageId = "tower-layer";
          }
          {
            name = "tower-service";
            packageId = "tower-service";
          }
          {
            name = "tracing";
            packageId = "tracing";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
        ];
        devDependencies = [
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "macros" "sync" "test-util" "rt-multi-thread" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
        ];
        features = {
          "__common" = [ "futures-core" "pin-project-lite" ];
          "balance" = [ "discover" "load" "ready-cache" "make" "slab" "util" ];
          "buffer" = [ "__common" "tokio/sync" "tokio/rt" "tokio-util" "tracing" ];
          "discover" = [ "__common" ];
          "filter" = [ "__common" "futures-util" ];
          "full" = [ "balance" "buffer" "discover" "filter" "hedge" "limit" "load" "load-shed" "make" "ready-cache" "reconnect" "retry" "spawn-ready" "steer" "timeout" "util" ];
          "futures-core" = [ "dep:futures-core" ];
          "futures-util" = [ "dep:futures-util" ];
          "hdrhistogram" = [ "dep:hdrhistogram" ];
          "hedge" = [ "util" "filter" "futures-util" "hdrhistogram" "tokio/time" "tracing" ];
          "indexmap" = [ "dep:indexmap" ];
          "limit" = [ "__common" "tokio/time" "tokio/sync" "tokio-util" "tracing" ];
          "load" = [ "__common" "tokio/time" "tracing" ];
          "load-shed" = [ "__common" ];
          "log" = [ "tracing/log" ];
          "make" = [ "futures-util" "pin-project-lite" "tokio/io-std" ];
          "pin-project-lite" = [ "dep:pin-project-lite" ];
          "ready-cache" = [ "futures-core" "futures-util" "indexmap" "tokio/sync" "tracing" "pin-project-lite" ];
          "reconnect" = [ "make" "tokio/io-std" "tracing" ];
          "retry" = [ "__common" "tokio/time" "util" ];
          "slab" = [ "dep:slab" ];
          "spawn-ready" = [ "__common" "futures-util" "tokio/sync" "tokio/rt" "util" "tracing" ];
          "sync_wrapper" = [ "dep:sync_wrapper" ];
          "timeout" = [ "pin-project-lite" "tokio/time" ];
          "tokio" = [ "dep:tokio" ];
          "tokio-stream" = [ "dep:tokio-stream" ];
          "tokio-util" = [ "dep:tokio-util" ];
          "tracing" = [ "dep:tracing" ];
          "util" = [ "__common" "futures-util" "pin-project-lite" "sync_wrapper" ];
        };
        resolvedDefaultFeatures = [ "__common" "futures-core" "futures-util" "log" "make" "pin-project-lite" "sync_wrapper" "tokio" "tracing" "util" ];
      };
      "tower-http" = rec {
        crateName = "tower-http";
        version = "0.5.2";
        edition = "2018";
        sha256 = "1xakj3x0anp55gjqibiwvzma5iz0w9pcjsr7qk97sx4qm4sd970y";
        libName = "tower_http";
        authors = [
          "Tower Maintainers <team@tower-rs.com>"
        ];
        dependencies = [
          {
            name = "async-compression";
            packageId = "async-compression";
            optional = true;
            features = [ "tokio" ];
          }
          {
            name = "base64";
            packageId = "base64 0.21.7";
            optional = true;
          }
          {
            name = "bitflags";
            packageId = "bitflags 2.6.0";
          }
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "futures-core";
            packageId = "futures-core";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "http";
            packageId = "http 1.1.0";
          }
          {
            name = "http-body";
            packageId = "http-body 1.0.1";
          }
          {
            name = "http-body-util";
            packageId = "http-body-util";
          }
          {
            name = "http-range-header";
            packageId = "http-range-header";
            optional = true;
          }
          {
            name = "httpdate";
            packageId = "httpdate";
            optional = true;
          }
          {
            name = "iri-string";
            packageId = "iri-string";
            optional = true;
          }
          {
            name = "mime";
            packageId = "mime";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "mime_guess";
            packageId = "mime_guess";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "percent-encoding";
            packageId = "percent-encoding";
            optional = true;
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "tokio";
            packageId = "tokio";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "tokio-util";
            packageId = "tokio-util 0.7.12";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "io" ];
          }
          {
            name = "tower";
            packageId = "tower 0.4.13";
            optional = true;
          }
          {
            name = "tower-layer";
            packageId = "tower-layer";
          }
          {
            name = "tower-service";
            packageId = "tower-service";
          }
          {
            name = "tracing";
            packageId = "tracing";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "uuid";
            packageId = "uuid 1.10.0";
            optional = true;
            features = [ "v4" ];
          }
        ];
        devDependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "futures-util";
            packageId = "futures-util";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "full" ];
          }
          {
            name = "tower";
            packageId = "tower 0.4.13";
            features = [ "buffer" "util" "retry" "make" "timeout" ];
          }
          {
            name = "uuid";
            packageId = "uuid 1.10.0";
            features = [ "v4" ];
          }
        ];
        features = {
          "async-compression" = [ "dep:async-compression" ];
          "auth" = [ "base64" "validate-request" ];
          "base64" = [ "dep:base64" ];
          "catch-panic" = [ "tracing" "futures-util/std" ];
          "compression-br" = [ "async-compression/brotli" "futures-core" "tokio-util" "tokio" ];
          "compression-deflate" = [ "async-compression/zlib" "futures-core" "tokio-util" "tokio" ];
          "compression-full" = [ "compression-br" "compression-deflate" "compression-gzip" "compression-zstd" ];
          "compression-gzip" = [ "async-compression/gzip" "futures-core" "tokio-util" "tokio" ];
          "compression-zstd" = [ "async-compression/zstd" "futures-core" "tokio-util" "tokio" ];
          "decompression-br" = [ "async-compression/brotli" "futures-core" "tokio-util" "tokio" ];
          "decompression-deflate" = [ "async-compression/zlib" "futures-core" "tokio-util" "tokio" ];
          "decompression-full" = [ "decompression-br" "decompression-deflate" "decompression-gzip" "decompression-zstd" ];
          "decompression-gzip" = [ "async-compression/gzip" "futures-core" "tokio-util" "tokio" ];
          "decompression-zstd" = [ "async-compression/zstd" "futures-core" "tokio-util" "tokio" ];
          "follow-redirect" = [ "futures-util" "iri-string" "tower/util" ];
          "fs" = [ "futures-util" "tokio/fs" "tokio-util/io" "tokio/io-util" "dep:http-range-header" "mime_guess" "mime" "percent-encoding" "httpdate" "set-status" "futures-util/alloc" "tracing" ];
          "full" = [ "add-extension" "auth" "catch-panic" "compression-full" "cors" "decompression-full" "follow-redirect" "fs" "limit" "map-request-body" "map-response-body" "metrics" "normalize-path" "propagate-header" "redirect" "request-id" "sensitive-headers" "set-header" "set-status" "timeout" "trace" "util" "validate-request" ];
          "futures-core" = [ "dep:futures-core" ];
          "futures-util" = [ "dep:futures-util" ];
          "httpdate" = [ "dep:httpdate" ];
          "iri-string" = [ "dep:iri-string" ];
          "metrics" = [ "tokio/time" ];
          "mime" = [ "dep:mime" ];
          "mime_guess" = [ "dep:mime_guess" ];
          "percent-encoding" = [ "dep:percent-encoding" ];
          "request-id" = [ "uuid" ];
          "timeout" = [ "tokio/time" ];
          "tokio" = [ "dep:tokio" ];
          "tokio-util" = [ "dep:tokio-util" ];
          "tower" = [ "dep:tower" ];
          "trace" = [ "tracing" ];
          "tracing" = [ "dep:tracing" ];
          "util" = [ "tower" ];
          "uuid" = [ "dep:uuid" ];
          "validate-request" = [ "mime" ];
        };
        resolvedDefaultFeatures = [ "add-extension" "async-compression" "auth" "base64" "catch-panic" "compression-br" "compression-deflate" "compression-full" "compression-gzip" "compression-zstd" "cors" "decompression-br" "decompression-deflate" "decompression-full" "decompression-gzip" "decompression-zstd" "default" "follow-redirect" "fs" "full" "futures-core" "futures-util" "httpdate" "iri-string" "limit" "map-request-body" "map-response-body" "metrics" "mime" "mime_guess" "normalize-path" "percent-encoding" "propagate-header" "redirect" "request-id" "sensitive-headers" "set-header" "set-status" "timeout" "tokio" "tokio-util" "tower" "trace" "tracing" "util" "uuid" "validate-request" ];
      };
      "tower-layer" = rec {
        crateName = "tower-layer";
        version = "0.3.3";
        edition = "2018";
        sha256 = "03kq92fdzxin51w8iqix06dcfgydyvx7yr6izjq0p626v9n2l70j";
        libName = "tower_layer";
        authors = [
          "Tower Maintainers <team@tower-rs.com>"
        ];

      };
      "tower-service" = rec {
        crateName = "tower-service";
        version = "0.3.3";
        edition = "2018";
        sha256 = "1hzfkvkci33ra94xjx64vv3pp0sq346w06fpkcdwjcid7zhvdycd";
        libName = "tower_service";
        authors = [
          "Tower Maintainers <team@tower-rs.com>"
        ];

      };
      "tracing" = rec {
        crateName = "tracing";
        version = "0.1.40";
        edition = "2018";
        sha256 = "1vv48dac9zgj9650pg2b4d0j3w6f3x9gbggf43scq5hrlysklln3";
        authors = [
          "Eliza Weisman <eliza@buoyant.io>"
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "log";
            packageId = "log";
            optional = true;
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "tracing-attributes";
            packageId = "tracing-attributes";
            optional = true;
          }
          {
            name = "tracing-core";
            packageId = "tracing-core";
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "log";
            packageId = "log";
          }
        ];
        features = {
          "attributes" = [ "tracing-attributes" ];
          "default" = [ "std" "attributes" ];
          "log" = [ "dep:log" ];
          "log-always" = [ "log" ];
          "std" = [ "tracing-core/std" ];
          "tracing-attributes" = [ "dep:tracing-attributes" ];
          "valuable" = [ "tracing-core/valuable" ];
        };
        resolvedDefaultFeatures = [ "attributes" "default" "log" "std" "tracing-attributes" ];
      };
      "tracing-appender" = rec {
        crateName = "tracing-appender";
        version = "0.2.3";
        edition = "2018";
        sha256 = "1kq69qyjvb4dxch5c9zgii6cqhy9nkk81z0r4pj3y2nc537fhrim";
        libName = "tracing_appender";
        authors = [
          "Zeki Sherif <zekshi@amazon.com>"
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "crossbeam-channel";
            packageId = "crossbeam-channel";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "time";
            packageId = "time";
            usesDefaultFeatures = false;
            features = [ "formatting" "parsing" ];
          }
          {
            name = "tracing-subscriber";
            packageId = "tracing-subscriber";
            usesDefaultFeatures = false;
            features = [ "fmt" "std" ];
          }
        ];
        features = {
          "parking_lot" = [ "dep:parking_lot" ];
        };
      };
      "tracing-attributes" = rec {
        crateName = "tracing-attributes";
        version = "0.1.27";
        edition = "2018";
        sha256 = "1rvb5dn9z6d0xdj14r403z0af0bbaqhg02hq4jc97g5wds6lqw1l";
        procMacro = true;
        libName = "tracing_attributes";
        authors = [
          "Tokio Contributors <team@tokio.rs>"
          "Eliza Weisman <eliza@buoyant.io>"
          "David Barsky <dbarsky@amazon.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.86";
          }
          {
            name = "quote";
            packageId = "quote 1.0.37";
          }
          {
            name = "syn";
            packageId = "syn 2.0.77";
            usesDefaultFeatures = false;
            features = [ "full" "parsing" "printing" "visit-mut" "clone-impls" "extra-traits" "proc-macro" ];
          }
        ];
        features = {
        };
      };
      "tracing-core" = rec {
        crateName = "tracing-core";
        version = "0.1.32";
        edition = "2018";
        sha256 = "0m5aglin3cdwxpvbg6kz0r9r0k31j48n0kcfwsp6l49z26k3svf0";
        libName = "tracing_core";
        authors = [
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "once_cell";
            packageId = "once_cell";
            optional = true;
          }
          {
            name = "valuable";
            packageId = "valuable";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: (target."tracing_unstable" or false);
          }
        ];
        features = {
          "default" = [ "std" "valuable/std" ];
          "once_cell" = [ "dep:once_cell" ];
          "std" = [ "once_cell" ];
          "valuable" = [ "dep:valuable" ];
        };
        resolvedDefaultFeatures = [ "default" "once_cell" "std" "valuable" ];
      };
      "tracing-error" = rec {
        crateName = "tracing-error";
        version = "0.2.0";
        edition = "2018";
        sha256 = "0vi0rns7r8iny2milg0kikz1mhgcl9wz5clpy1vi4jrq1wffr1nn";
        libName = "tracing_error";
        authors = [
          "Eliza Weisman <eliza@buoyant.io>"
          "Jane Lusby <jlusby@yaah.dev>"
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "tracing";
            packageId = "tracing";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "tracing-subscriber";
            packageId = "tracing-subscriber";
            usesDefaultFeatures = false;
            features = [ "registry" "fmt" ];
          }
        ];
        features = {
          "default" = [ "traced-error" ];
        };
        resolvedDefaultFeatures = [ "default" "traced-error" ];
      };
      "tracing-futures" = rec {
        crateName = "tracing-futures";
        version = "0.2.5";
        edition = "2018";
        sha256 = "1wimg0iwa2ldq7xv98lvivvf3q9ykfminig8r1bs0ig22np9bl4p";
        libName = "tracing_futures";
        authors = [
          "Eliza Weisman <eliza@buoyant.io>"
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "futures";
            packageId = "futures";
            optional = true;
          }
          {
            name = "futures-task";
            packageId = "futures-task";
            optional = true;
          }
          {
            name = "pin-project";
            packageId = "pin-project";
            optional = true;
          }
          {
            name = "tracing";
            packageId = "tracing";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std-future" "std" ];
          "futures" = [ "dep:futures" ];
          "futures-01" = [ "futures_01" "std" ];
          "futures-03" = [ "std-future" "futures" "futures-task" "std" ];
          "futures-task" = [ "dep:futures-task" ];
          "futures_01" = [ "dep:futures_01" ];
          "pin-project" = [ "dep:pin-project" ];
          "std" = [ "tracing/std" ];
          "std-future" = [ "pin-project" ];
          "tokio" = [ "dep:tokio" ];
          "tokio-executor" = [ "dep:tokio-executor" ];
        };
        resolvedDefaultFeatures = [ "default" "futures" "futures-03" "futures-task" "pin-project" "std" "std-future" ];
      };
      "tracing-log" = rec {
        crateName = "tracing-log";
        version = "0.2.0";
        edition = "2018";
        sha256 = "1hs77z026k730ij1a9dhahzrl0s073gfa2hm5p0fbl0b80gmz1gf";
        libName = "tracing_log";
        authors = [
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "tracing-core";
            packageId = "tracing-core";
          }
        ];
        features = {
          "ahash" = [ "dep:ahash" ];
          "default" = [ "log-tracer" "std" ];
          "interest-cache" = [ "lru" "ahash" ];
          "lru" = [ "dep:lru" ];
          "std" = [ "log/std" ];
        };
        resolvedDefaultFeatures = [ "log-tracer" "std" ];
      };
      "tracing-opentelemetry" = rec {
        crateName = "tracing-opentelemetry";
        version = "0.25.0";
        edition = "2021";
        sha256 = "0fzzhpcxngnxra56cxmslr5y6k0f1b4ghqv9vz41p4kxvba4wy59";
        libName = "tracing_opentelemetry";
        dependencies = [
          {
            name = "js-sys";
            packageId = "js-sys";
            target = { target, features }: (("wasm32" == target."arch" or null) && (!("wasi" == target."os" or null)));
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "opentelemetry";
            packageId = "opentelemetry 0.24.0";
            usesDefaultFeatures = false;
            features = [ "trace" ];
          }
          {
            name = "opentelemetry_sdk";
            packageId = "opentelemetry_sdk";
            usesDefaultFeatures = false;
            features = [ "trace" ];
          }
          {
            name = "smallvec";
            packageId = "smallvec";
            optional = true;
          }
          {
            name = "tracing";
            packageId = "tracing";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "tracing-core";
            packageId = "tracing-core";
          }
          {
            name = "tracing-log";
            packageId = "tracing-log";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "tracing-subscriber";
            packageId = "tracing-subscriber";
            usesDefaultFeatures = false;
            features = [ "registry" "std" ];
          }
          {
            name = "web-time";
            packageId = "web-time";
            target = { target, features }: (("wasm32" == target."arch" or null) && (!("wasi" == target."os" or null)));
          }
        ];
        devDependencies = [
          {
            name = "opentelemetry";
            packageId = "opentelemetry 0.24.0";
            features = [ "trace" "metrics" ];
          }
          {
            name = "opentelemetry_sdk";
            packageId = "opentelemetry_sdk";
            usesDefaultFeatures = false;
            features = [ "trace" "rt-tokio" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
            usesDefaultFeatures = false;
            features = [ "std" "attributes" ];
          }
          {
            name = "tracing-subscriber";
            packageId = "tracing-subscriber";
            usesDefaultFeatures = false;
            features = [ "registry" "std" "fmt" ];
          }
        ];
        features = {
          "async-trait" = [ "dep:async-trait" ];
          "default" = [ "tracing-log" "metrics" ];
          "futures-util" = [ "dep:futures-util" ];
          "lazy_static" = [ "dep:lazy_static" ];
          "metrics" = [ "opentelemetry/metrics" "opentelemetry_sdk/metrics" "smallvec" ];
          "metrics_gauge_unstable" = [ "opentelemetry/otel_unstable" ];
          "smallvec" = [ "dep:smallvec" ];
          "thiserror" = [ "dep:thiserror" ];
          "tracing-log" = [ "dep:tracing-log" ];
        };
        resolvedDefaultFeatures = [ "default" "metrics" "smallvec" "tracing-log" ];
      };
      "tracing-serde" = rec {
        crateName = "tracing-serde";
        version = "0.1.3";
        edition = "2018";
        sha256 = "1qfr0va69djvxqvjrx4vqq7p6myy414lx4w1f6amcn0hfwqj2sxw";
        libName = "tracing_serde";
        authors = [
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "tracing-core";
            packageId = "tracing-core";
          }
        ];
        features = {
          "valuable" = [ "valuable_crate" "valuable-serde" "tracing-core/valuable" ];
          "valuable-serde" = [ "dep:valuable-serde" ];
          "valuable_crate" = [ "dep:valuable_crate" ];
        };
      };
      "tracing-subscriber" = rec {
        crateName = "tracing-subscriber";
        version = "0.3.18";
        edition = "2018";
        sha256 = "12vs1bwk4kig1l2qqjbbn2nm5amwiqmkcmnznylzmnfvjy6083xd";
        libName = "tracing_subscriber";
        authors = [
          "Eliza Weisman <eliza@buoyant.io>"
          "David Barsky <me@davidbarsky.com>"
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "matchers";
            packageId = "matchers";
            optional = true;
          }
          {
            name = "nu-ansi-term";
            packageId = "nu-ansi-term";
            optional = true;
          }
          {
            name = "once_cell";
            packageId = "once_cell";
            optional = true;
          }
          {
            name = "regex";
            packageId = "regex";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "std" "unicode-case" "unicode-perl" ];
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            optional = true;
          }
          {
            name = "sharded-slab";
            packageId = "sharded-slab";
            optional = true;
          }
          {
            name = "smallvec";
            packageId = "smallvec";
            optional = true;
          }
          {
            name = "thread_local";
            packageId = "thread_local";
            optional = true;
          }
          {
            name = "time";
            packageId = "time";
            optional = true;
            features = [ "formatting" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "tracing-core";
            packageId = "tracing-core";
            usesDefaultFeatures = false;
          }
          {
            name = "tracing-log";
            packageId = "tracing-log";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "log-tracer" "std" ];
          }
          {
            name = "tracing-serde";
            packageId = "tracing-serde";
            optional = true;
          }
        ];
        devDependencies = [
          {
            name = "regex";
            packageId = "regex";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "time";
            packageId = "time";
            features = [ "formatting" "macros" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "tracing-log";
            packageId = "tracing-log";
          }
        ];
        features = {
          "ansi" = [ "fmt" "nu-ansi-term" ];
          "chrono" = [ "dep:chrono" ];
          "default" = [ "smallvec" "fmt" "ansi" "tracing-log" "std" ];
          "env-filter" = [ "matchers" "regex" "once_cell" "tracing" "std" "thread_local" ];
          "fmt" = [ "registry" "std" ];
          "json" = [ "tracing-serde" "serde" "serde_json" ];
          "local-time" = [ "time/local-offset" ];
          "matchers" = [ "dep:matchers" ];
          "nu-ansi-term" = [ "dep:nu-ansi-term" ];
          "once_cell" = [ "dep:once_cell" ];
          "parking_lot" = [ "dep:parking_lot" ];
          "regex" = [ "dep:regex" ];
          "registry" = [ "sharded-slab" "thread_local" "std" ];
          "serde" = [ "dep:serde" ];
          "serde_json" = [ "dep:serde_json" ];
          "sharded-slab" = [ "dep:sharded-slab" ];
          "smallvec" = [ "dep:smallvec" ];
          "std" = [ "alloc" "tracing-core/std" ];
          "thread_local" = [ "dep:thread_local" ];
          "time" = [ "dep:time" ];
          "tracing" = [ "dep:tracing" ];
          "tracing-log" = [ "dep:tracing-log" ];
          "tracing-serde" = [ "dep:tracing-serde" ];
          "valuable" = [ "tracing-core/valuable" "valuable_crate" "valuable-serde" "tracing-serde/valuable" ];
          "valuable-serde" = [ "dep:valuable-serde" ];
          "valuable_crate" = [ "dep:valuable_crate" ];
        };
        resolvedDefaultFeatures = [ "alloc" "ansi" "default" "env-filter" "fmt" "json" "matchers" "nu-ansi-term" "once_cell" "regex" "registry" "serde" "serde_json" "sharded-slab" "smallvec" "std" "thread_local" "time" "tracing" "tracing-log" "tracing-serde" ];
      };
      "trait-set" = rec {
        crateName = "trait-set";
        version = "0.3.0";
        edition = "2018";
        sha256 = "09b6afmx2z5p2jjxlm4i36n4k3vynihnk5ym41y6sk5lkaf2x7mp";
        procMacro = true;
        libName = "trait_set";
        authors = [
          "Igor Aleksanov <popzxc@yandex.ru>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.86";
          }
          {
            name = "quote";
            packageId = "quote 1.0.37";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
          }
        ];

      };
      "transaction-fuzzer" = rec {
        crateName = "transaction-fuzzer";
        version = "0.5.0-alpha";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/transaction-fuzzer; }
          else ./crates/transaction-fuzzer;
        libName = "transaction_fuzzer";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "iota-core";
            packageId = "iota-core";
            features = [ "test-utils" ];
          }
          {
            name = "iota-move-build";
            packageId = "iota-move-build";
          }
          {
            name = "iota-protocol-config";
            packageId = "iota-protocol-config";
          }
          {
            name = "iota-types";
            packageId = "iota-types";
            features = [ "fuzzing" ];
          }
          {
            name = "move-core-types";
            packageId = "move-core-types";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "proptest";
            packageId = "proptest";
          }
          {
            name = "proptest-derive";
            packageId = "proptest-derive";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "full" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
        ];
        devDependencies = [
          {
            name = "iota-types";
            packageId = "iota-types";
            features = [ "test-utils" ];
          }
        ];

      };
      "treeline" = rec {
        crateName = "treeline";
        version = "0.1.0";
        edition = "2015";
        sha256 = "0hcdgyk5xzcx2ylm0fr9czzs9cjznm7l9q5qz51qi97i82r43xx7";
        authors = [
          "softprops <d.tangren@gmail.com>"
        ];

      };
      "triomphe" = rec {
        crateName = "triomphe";
        version = "0.1.11";
        edition = "2015";
        sha256 = "1crf71hndy3fc68x8v4aikkdjynp4n5sdhq28sck8x7frx8bd7l5";
        authors = [
          "The Servo Project Developers"
        ];
        features = {
          "arc-swap" = [ "dep:arc-swap" ];
          "default" = [ "serde" "stable_deref_trait" "std" ];
          "serde" = [ "dep:serde" ];
          "stable_deref_trait" = [ "dep:stable_deref_trait" ];
          "unsize" = [ "dep:unsize" ];
        };
      };
      "try-lock" = rec {
        crateName = "try-lock";
        version = "0.2.5";
        edition = "2015";
        sha256 = "0jqijrrvm1pyq34zn1jmy2vihd4jcrjlvsh4alkjahhssjnsn8g4";
        libName = "try_lock";
        authors = [
          "Sean McArthur <sean@seanmonstar.com>"
        ];

      };
      "ttl_cache" = rec {
        crateName = "ttl_cache";
        version = "0.5.1";
        edition = "2015";
        sha256 = "0sh9jajbl9nb6g4yx31i2j5c8q0lvypcwrgfnq88f5ph4q2qk2a1";
        authors = [
          "Stu Small <stuart.alan.small@gmail.com>"
        ];
        dependencies = [
          {
            name = "linked-hash-map";
            packageId = "linked-hash-map";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "tui" = rec {
        crateName = "tui";
        version = "0.19.0";
        edition = "2021";
        sha256 = "1ldswnqgmdkd2fkislyh1amd6rmnbx3s8b97k9j7w03lsv5jdpfc";
        authors = [
          "Florian Dehau <work@fdehau.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 1.3.2";
          }
          {
            name = "cassowary";
            packageId = "cassowary";
          }
          {
            name = "crossterm";
            packageId = "crossterm 0.25.0";
            optional = true;
          }
          {
            name = "unicode-segmentation";
            packageId = "unicode-segmentation";
          }
          {
            name = "unicode-width";
            packageId = "unicode-width";
          }
        ];
        features = {
          "crossterm" = [ "dep:crossterm" ];
          "default" = [ "crossterm" ];
          "serde" = [ "dep:serde" ];
          "termion" = [ "dep:termion" ];
        };
        resolvedDefaultFeatures = [ "crossterm" "default" ];
      };
      "tungstenite 0.20.1" = rec {
        crateName = "tungstenite";
        version = "0.20.1";
        edition = "2018";
        sha256 = "1fbgcv3h4h1bhhf5sqbwqsp7jnc44bi4m41sgmhzdsk2zl8aqgcy";
        authors = [
          "Alexey Galakhov"
          "Daniel Abramov"
        ];
        dependencies = [
          {
            name = "byteorder";
            packageId = "byteorder";
          }
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "data-encoding";
            packageId = "data-encoding";
            optional = true;
          }
          {
            name = "http";
            packageId = "http 0.2.12";
            optional = true;
          }
          {
            name = "httparse";
            packageId = "httparse";
            optional = true;
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "rustls";
            packageId = "rustls 0.21.12";
            optional = true;
          }
          {
            name = "sha1";
            packageId = "sha1";
            optional = true;
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "url";
            packageId = "url";
            optional = true;
          }
          {
            name = "utf-8";
            packageId = "utf-8";
          }
        ];
        devDependencies = [
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
        ];
        features = {
          "__rustls-tls" = [ "rustls" ];
          "data-encoding" = [ "dep:data-encoding" ];
          "default" = [ "handshake" ];
          "handshake" = [ "data-encoding" "http" "httparse" "sha1" "url" ];
          "http" = [ "dep:http" ];
          "httparse" = [ "dep:httparse" ];
          "native-tls" = [ "native-tls-crate" ];
          "native-tls-crate" = [ "dep:native-tls-crate" ];
          "native-tls-vendored" = [ "native-tls" "native-tls-crate/vendored" ];
          "rustls" = [ "dep:rustls" ];
          "rustls-native-certs" = [ "dep:rustls-native-certs" ];
          "rustls-tls-native-roots" = [ "__rustls-tls" "rustls-native-certs" ];
          "rustls-tls-webpki-roots" = [ "__rustls-tls" "webpki-roots" ];
          "sha1" = [ "dep:sha1" ];
          "url" = [ "dep:url" ];
          "webpki-roots" = [ "dep:webpki-roots" ];
        };
        resolvedDefaultFeatures = [ "__rustls-tls" "data-encoding" "handshake" "http" "httparse" "rustls" "sha1" "url" ];
      };
      "tungstenite 0.23.0" = rec {
        crateName = "tungstenite";
        version = "0.23.0";
        edition = "2018";
        sha256 = "1j6rxlcdky8lrwkl1qsyvnmlr38033vch11vsi7rklkywkhjqbkf";
        authors = [
          "Alexey Galakhov"
          "Daniel Abramov"
        ];
        dependencies = [
          {
            name = "byteorder";
            packageId = "byteorder";
          }
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "data-encoding";
            packageId = "data-encoding";
            optional = true;
          }
          {
            name = "http";
            packageId = "http 1.1.0";
            optional = true;
          }
          {
            name = "httparse";
            packageId = "httparse";
            optional = true;
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "sha1";
            packageId = "sha1";
            optional = true;
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "utf-8";
            packageId = "utf-8";
          }
        ];
        devDependencies = [
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
        ];
        features = {
          "__rustls-tls" = [ "rustls" "rustls-pki-types" ];
          "data-encoding" = [ "dep:data-encoding" ];
          "default" = [ "handshake" ];
          "handshake" = [ "data-encoding" "http" "httparse" "sha1" ];
          "http" = [ "dep:http" ];
          "httparse" = [ "dep:httparse" ];
          "native-tls" = [ "native-tls-crate" ];
          "native-tls-crate" = [ "dep:native-tls-crate" ];
          "native-tls-vendored" = [ "native-tls" "native-tls-crate/vendored" ];
          "rustls" = [ "dep:rustls" ];
          "rustls-native-certs" = [ "dep:rustls-native-certs" ];
          "rustls-pki-types" = [ "dep:rustls-pki-types" ];
          "rustls-tls-native-roots" = [ "__rustls-tls" "rustls-native-certs" ];
          "rustls-tls-webpki-roots" = [ "__rustls-tls" "webpki-roots" ];
          "sha1" = [ "dep:sha1" ];
          "url" = [ "dep:url" ];
          "webpki-roots" = [ "dep:webpki-roots" ];
        };
        resolvedDefaultFeatures = [ "data-encoding" "handshake" "http" "httparse" "sha1" ];
      };
      "twox-hash" = rec {
        crateName = "twox-hash";
        version = "1.6.3";
        edition = "2018";
        crateBin = [];
        sha256 = "0xgn72j36a270l5ls1jk88n7bmq2dhlfkbhdh5554hbagjsydzlp";
        libName = "twox_hash";
        authors = [
          "Jake Goulding <jake.goulding@gmail.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
            usesDefaultFeatures = false;
          }
          {
            name = "rand";
            packageId = "rand 0.7.3";
            optional = true;
          }
          {
            name = "static_assertions";
            packageId = "static_assertions";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "digest" = [ "dep:digest" ];
          "digest_0_10" = [ "dep:digest_0_10" ];
          "digest_0_9" = [ "dep:digest_0_9" ];
          "rand" = [ "dep:rand" ];
          "serde" = [ "dep:serde" ];
          "serialize" = [ "serde" ];
          "std" = [ "rand" ];
        };
        resolvedDefaultFeatures = [ "default" "rand" "std" ];
      };
      "typed-store" = rec {
        crateName = "typed-store";
        version = "0.5.0-alpha";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/typed-store; }
          else ./crates/typed-store;
        libName = "typed_store";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "bcs";
            packageId = "bcs";
          }
          {
            name = "bincode";
            packageId = "bincode";
          }
          {
            name = "collectable";
            packageId = "collectable";
          }
          {
            name = "eyre";
            packageId = "eyre";
          }
          {
            name = "fdlimit";
            packageId = "fdlimit";
          }
          {
            name = "hdrhistogram";
            packageId = "hdrhistogram";
          }
          {
            name = "iota-macros";
            packageId = "iota-macros";
          }
          {
            name = "itertools";
            packageId = "itertools 0.13.0";
          }
          {
            name = "msim";
            packageId = "msim";
            rename = "msim";
            target = { target, features }: (target."msim" or false);
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "ouroboros";
            packageId = "ouroboros 0.18.4";
          }
          {
            name = "prometheus";
            packageId = "prometheus";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "rocksdb";
            packageId = "rocksdb";
            usesDefaultFeatures = false;
            features = [ "snappy" "lz4" "zstd" "zlib" "multi-threaded-cf" ];
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" "rc" ];
          }
          {
            name = "tap";
            packageId = "tap";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "full" "test-util" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "typed-store-derive";
            packageId = "typed-store-derive";
          }
          {
            name = "typed-store-error";
            packageId = "typed-store-error";
          }
        ];
        devDependencies = [
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "rstest";
            packageId = "rstest";
          }
          {
            name = "tempfile";
            packageId = "tempfile";
          }
          {
            name = "uint";
            packageId = "uint";
          }
        ];

      };
      "typed-store-derive" = rec {
        crateName = "typed-store-derive";
        version = "0.5.0-alpha";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/typed-store-derive; }
          else ./crates/typed-store-derive;
        procMacro = true;
        libName = "typed_store_derive";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "itertools";
            packageId = "itertools 0.13.0";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.86";
          }
          {
            name = "quote";
            packageId = "quote 1.0.37";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            features = [ "full" "derive" "extra-traits" ];
          }
        ];

      };
      "typed-store-error" = rec {
        crateName = "typed-store-error";
        version = "0.5.0-alpha";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/typed-store-error; }
          else ./crates/typed-store-error;
        libName = "typed_store_error";
        authors = [
          "IOTA Foundation <info@iota.org>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" "rc" ];
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
        ];

      };
      "typed-store-workspace-hack" = rec {
        crateName = "typed-store-workspace-hack";
        version = "0.5.0-alpha";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/typed-store-workspace-hack; }
          else ./crates/typed-store-workspace-hack;
        libName = "typed_store_workspace_hack";
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            features = [ "extra_traits" ];
          }
          {
            name = "memchr";
            packageId = "memchr";
          }
        ];
        buildDependencies = [
          {
            name = "libc";
            packageId = "libc";
            features = [ "extra_traits" ];
          }
          {
            name = "memchr";
            packageId = "memchr";
          }
        ];

      };
      "typenum" = rec {
        crateName = "typenum";
        version = "1.17.0";
        edition = "2018";
        sha256 = "09dqxv69m9lj9zvv6xw5vxaqx15ps0vxyy5myg33i0kbqvq0pzs2";
        build = "build/main.rs";
        authors = [
          "Paho Lurie-Gregg <paho@paholg.com>"
          "Andre Bogus <bogusandre@gmail.com>"
        ];
        features = {
          "scale-info" = [ "dep:scale-info" ];
          "scale_info" = [ "scale-info/derive" ];
        };
      };
      "typeshare" = rec {
        crateName = "typeshare";
        version = "1.0.3";
        edition = "2021";
        sha256 = "11riglm8incm0vq7ciyd907w1sc6frfn7h7ab0yp8bkcnycp7w84";
        dependencies = [
          {
            name = "chrono";
            packageId = "chrono";
            usesDefaultFeatures = false;
            features = [ "clock" "std" "wasmbind" ];
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "typeshare-annotation";
            packageId = "typeshare-annotation";
          }
        ];

      };
      "typeshare-annotation" = rec {
        crateName = "typeshare-annotation";
        version = "1.0.4";
        edition = "2021";
        sha256 = "0kx38ah6638pkqq5cac7nmvbg6x43v7fj5jgibla4lj8fv1dc5d6";
        procMacro = true;
        libName = "typeshare_annotation";
        dependencies = [
          {
            name = "quote";
            packageId = "quote 1.0.37";
          }
          {
            name = "syn";
            packageId = "syn 2.0.77";
            features = [ "parsing" "proc-macro" ];
          }
        ];

      };
      "ucd-trie" = rec {
        crateName = "ucd-trie";
        version = "0.1.6";
        edition = "2021";
        sha256 = "1ff4yfksirqs37ybin9aw71aa5gva00hw7jdxbw8w668zy964r7d";
        libName = "ucd_trie";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "uint" = rec {
        crateName = "uint";
        version = "0.9.5";
        edition = "2021";
        sha256 = "0ljb2q0waadsr56w6j5wwchwibby8bbsf09wnv54zc2k5jx4pxkn";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "byteorder";
            packageId = "byteorder";
            usesDefaultFeatures = false;
          }
          {
            name = "crunchy";
            packageId = "crunchy";
            usesDefaultFeatures = false;
          }
          {
            name = "hex";
            packageId = "hex";
            usesDefaultFeatures = false;
          }
          {
            name = "static_assertions";
            packageId = "static_assertions";
          }
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "default" = [ "std" ];
          "quickcheck" = [ "dep:quickcheck" ];
          "std" = [ "byteorder/std" "crunchy/std" "hex/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "unarray" = rec {
        crateName = "unarray";
        version = "0.1.4";
        edition = "2018";
        sha256 = "154smf048k84prsdgh09nkm2n0w0336v84jd4zikyn6v6jrqbspa";

      };
      "unescape" = rec {
        crateName = "unescape";
        version = "0.1.0";
        edition = "2015";
        sha256 = "0vlgws15n4kz8xq4igzr1f80nbiyr838k687hn6ly8a36an7vffc";
        authors = [
          "Saghm Rossi <saghmrossi@gmail.com>"
        ];

      };
      "unicase" = rec {
        crateName = "unicase";
        version = "2.7.0";
        edition = "2015";
        sha256 = "12gd74j79f94k4clxpf06l99wiv4p30wjr0qm04ihqk9zgdd9lpp";
        authors = [
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        buildDependencies = [
          {
            name = "version_check";
            packageId = "version_check";
          }
        ];
        features = {
        };
      };
      "unicode-bidi" = rec {
        crateName = "unicode-bidi";
        version = "0.3.15";
        edition = "2018";
        sha256 = "0xcdxm7h0ydyprwpcbh436rbs6s6lph7f3gr527lzgv6lw053y88";
        libName = "unicode_bidi";
        authors = [
          "The Servo Project Developers"
        ];
        features = {
          "default" = [ "std" "hardcoded-data" ];
          "flame" = [ "dep:flame" ];
          "flame_it" = [ "flame" "flamer" ];
          "flamer" = [ "dep:flamer" ];
          "serde" = [ "dep:serde" ];
          "with_serde" = [ "serde" ];
        };
        resolvedDefaultFeatures = [ "hardcoded-data" "std" ];
      };
      "unicode-ident" = rec {
        crateName = "unicode-ident";
        version = "1.0.13";
        edition = "2018";
        sha256 = "1zm1xylzsdfvm2a5ib9li3g5pp7qnkv4amhspydvgbmd9k6mc6z9";
        libName = "unicode_ident";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];

      };
      "unicode-linebreak" = rec {
        crateName = "unicode-linebreak";
        version = "0.1.5";
        edition = "2021";
        sha256 = "07spj2hh3daajg335m4wdav6nfkl0f6c0q72lc37blr97hych29v";
        libName = "unicode_linebreak";
        authors = [
          "Axel Forsman <axelsfor@gmail.com>"
        ];

      };
      "unicode-normalization" = rec {
        crateName = "unicode-normalization";
        version = "0.1.24";
        edition = "2018";
        sha256 = "0mnrk809z3ix1wspcqy97ld5wxdb31f3xz6nsvg5qcv289ycjcsh";
        libName = "unicode_normalization";
        authors = [
          "kwantam <kwantam@gmail.com>"
          "Manish Goregaokar <manishsmail@gmail.com>"
        ];
        dependencies = [
          {
            name = "tinyvec";
            packageId = "tinyvec";
            features = [ "alloc" ];
          }
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "unicode-segmentation" = rec {
        crateName = "unicode-segmentation";
        version = "1.12.0";
        edition = "2018";
        sha256 = "14qla2jfx74yyb9ds3d2mpwpa4l4lzb9z57c6d2ba511458z5k7n";
        libName = "unicode_segmentation";
        authors = [
          "kwantam <kwantam@gmail.com>"
          "Manish Goregaokar <manishsmail@gmail.com>"
        ];
        features = {
        };
      };
      "unicode-width" = rec {
        crateName = "unicode-width";
        version = "0.1.14";
        edition = "2021";
        sha256 = "1bzn2zv0gp8xxbxbhifw778a7fc93pa6a1kj24jgg9msj07f7mkx";
        libName = "unicode_width";
        authors = [
          "kwantam <kwantam@gmail.com>"
          "Manish Goregaokar <manishsmail@gmail.com>"
        ];
        features = {
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "default" = [ "cjk" ];
          "rustc-dep-of-std" = [ "std" "core" "compiler_builtins" ];
          "std" = [ "dep:std" ];
        };
        resolvedDefaultFeatures = [ "cjk" "default" ];
      };
      "unicode-xid 0.1.0" = rec {
        crateName = "unicode-xid";
        version = "0.1.0";
        edition = "2015";
        sha256 = "1z57lqh4s18rr4x0j4fw4fmp9hf9346h0kmdgqsqx0fhjr3k0wpw";
        libName = "unicode_xid";
        authors = [
          "erick.tryzelaar <erick.tryzelaar@gmail.com>"
          "kwantam <kwantam@gmail.com>"
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "unicode-xid 0.2.6" = rec {
        crateName = "unicode-xid";
        version = "0.2.6";
        edition = "2015";
        sha256 = "0lzqaky89fq0bcrh6jj6bhlz37scfd8c7dsj5dq7y32if56c1hgb";
        libName = "unicode_xid";
        authors = [
          "erick.tryzelaar <erick.tryzelaar@gmail.com>"
          "kwantam <kwantam@gmail.com>"
          "Manish Goregaokar <manishsmail@gmail.com>"
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "universal-hash" = rec {
        crateName = "universal-hash";
        version = "0.5.1";
        edition = "2021";
        sha256 = "1sh79x677zkncasa95wz05b36134822w6qxmi1ck05fwi33f47gw";
        libName = "universal_hash";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "crypto-common";
            packageId = "crypto-common";
          }
          {
            name = "subtle";
            packageId = "subtle";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "std" = [ "crypto-common/std" ];
        };
      };
      "unsigned-varint" = rec {
        crateName = "unsigned-varint";
        version = "0.7.2";
        edition = "2018";
        sha256 = "018iai89m508xasxxcdfxnnr80vk5ixgjszc9i817w7i95ysg2b8";
        libName = "unsigned_varint";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        features = {
          "asynchronous-codec" = [ "dep:asynchronous-codec" ];
          "asynchronous_codec" = [ "std" "bytes" "asynchronous-codec" ];
          "bytes" = [ "dep:bytes" ];
          "codec" = [ "std" "bytes" "tokio-util" ];
          "futures" = [ "std" "futures-io" "futures-util" ];
          "futures-io" = [ "dep:futures-io" ];
          "futures-util" = [ "dep:futures-util" ];
          "nom" = [ "dep:nom" ];
          "tokio-util" = [ "dep:tokio-util" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "untrusted 0.7.1" = rec {
        crateName = "untrusted";
        version = "0.7.1";
        edition = "2018";
        sha256 = "0jkbqaj9d3v5a91pp3wp9mffvng1nhycx6sh4qkdd9qyr62ccmm1";
        libPath = "src/untrusted.rs";
        authors = [
          "Brian Smith <brian@briansmith.org>"
        ];

      };
      "untrusted 0.9.0" = rec {
        crateName = "untrusted";
        version = "0.9.0";
        edition = "2018";
        sha256 = "1ha7ib98vkc538x0z60gfn0fc5whqdd85mb87dvisdcaifi6vjwf";
        authors = [
          "Brian Smith <brian@briansmith.org>"
        ];

      };
      "ureq" = rec {
        crateName = "ureq";
        version = "2.10.1";
        edition = "2018";
        sha256 = "0jkgjllj1flrsv55q0bhbn7kmb03bxsm8iq5yxrk7gi5g2swckxp";
        authors = [
          "Martin Algesten <martin@algesten.se>"
          "Jacob Hoffman-Andrews <ureq@hoffman-andrews.com>"
        ];
        dependencies = [
          {
            name = "base64";
            packageId = "base64 0.22.1";
          }
          {
            name = "flate2";
            packageId = "flate2";
            optional = true;
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "rustls";
            packageId = "rustls 0.23.13";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "ring" "logging" "std" "tls12" ];
          }
          {
            name = "rustls-pki-types";
            packageId = "rustls-pki-types";
            optional = true;
          }
          {
            name = "url";
            packageId = "url";
          }
          {
            name = "webpki-roots";
            packageId = "webpki-roots 0.26.6";
            optional = true;
          }
        ];
        devDependencies = [
          {
            name = "rustls";
            packageId = "rustls 0.23.13";
            usesDefaultFeatures = false;
            features = [ "std" "ring" ];
          }
        ];
        features = {
          "brotli" = [ "dep:brotli-decompressor" ];
          "charset" = [ "dep:encoding_rs" ];
          "cookies" = [ "dep:cookie" "dep:cookie_store" ];
          "default" = [ "tls" "gzip" ];
          "gzip" = [ "dep:flate2" ];
          "http-crate" = [ "dep:http" ];
          "http-interop" = [ "dep:http-02" ];
          "json" = [ "dep:serde" "dep:serde_json" ];
          "native-certs" = [ "dep:rustls-native-certs" ];
          "native-tls" = [ "dep:native-tls" ];
          "socks-proxy" = [ "dep:socks" ];
          "testdeps" = [ "dep:hootbin" ];
          "tls" = [ "dep:webpki-roots" "dep:rustls" "dep:rustls-pki-types" ];
        };
        resolvedDefaultFeatures = [ "default" "gzip" "tls" ];
      };
      "url" = rec {
        crateName = "url";
        version = "2.5.2";
        edition = "2018";
        sha256 = "0v2dx50mx7xzl9454cl5qmpjnhkbahmn59gd3apyipbgyyylsy12";
        authors = [
          "The rust-url developers"
        ];
        dependencies = [
          {
            name = "form_urlencoded";
            packageId = "form_urlencoded";
          }
          {
            name = "idna";
            packageId = "idna";
          }
          {
            name = "percent-encoding";
            packageId = "percent-encoding";
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            features = [ "derive" ];
          }
        ];
        devDependencies = [
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
        ];
        features = {
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "default" "serde" ];
      };
      "urlencoding" = rec {
        crateName = "urlencoding";
        version = "2.1.3";
        edition = "2021";
        sha256 = "1nj99jp37k47n0hvaz5fvz7z6jd0sb4ppvfy3nphr1zbnyixpy6s";
        authors = [
          "Kornel <kornel@geekhood.net>"
          "Bertram Truong <b@bertramtruong.com>"
        ];

      };
      "utf-8" = rec {
        crateName = "utf-8";
        version = "0.7.6";
        edition = "2015";
        sha256 = "1a9ns3fvgird0snjkd3wbdhwd3zdpc2h5gpyybrfr6ra5pkqxk09";
        libName = "utf8";
        authors = [
          "Simon Sapin <simon.sapin@exyr.org>"
        ];

      };
      "utf8parse" = rec {
        crateName = "utf8parse";
        version = "0.2.2";
        edition = "2018";
        sha256 = "088807qwjq46azicqwbhlmzwrbkz7l4hpw43sdkdyyk524vdxaq6";
        authors = [
          "Joe Wilm <joe@jwilm.com>"
          "Christian Duerr <contact@christianduerr.com>"
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "uuid 0.8.2" = rec {
        crateName = "uuid";
        version = "0.8.2";
        edition = "2018";
        sha256 = "1dy4ldcp7rnzjy56dxh7d2sgrcvn4q77y0a8r0a48946h66zjp5w";
        authors = [
          "Ashley Mannix<ashleymannix@live.com.au>"
          "Christopher Armstrong"
          "Dylan DPC<dylan.dpc@gmail.com>"
          "Hunar Roop Kahlon<hunar.roop@gmail.com>"
        ];
        dependencies = [
          {
            name = "getrandom";
            packageId = "getrandom 0.2.15";
            optional = true;
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "getrandom" = [ "dep:getrandom" ];
          "guid" = [ "winapi" ];
          "md5" = [ "dep:md5" ];
          "serde" = [ "dep:serde" ];
          "sha1" = [ "dep:sha1" ];
          "slog" = [ "dep:slog" ];
          "stdweb" = [ "getrandom" "getrandom/js" ];
          "v3" = [ "md5" ];
          "v4" = [ "getrandom" ];
          "v5" = [ "sha1" ];
          "wasm-bindgen" = [ "getrandom" "getrandom/js" ];
          "winapi" = [ "dep:winapi" ];
        };
        resolvedDefaultFeatures = [ "default" "getrandom" "serde" "std" "v4" ];
      };
      "uuid 1.10.0" = rec {
        crateName = "uuid";
        version = "1.10.0";
        edition = "2018";
        sha256 = "0503gvp08dh5mnm3f0ffqgisj6x3mbs53dmnn1lm19pga43a1pw1";
        authors = [
          "Ashley Mannix<ashleymannix@live.com.au>"
          "Dylan DPC<dylan.dpc@gmail.com>"
          "Hunar Roop Kahlon<hunar.roop@gmail.com>"
        ];
        dependencies = [
          {
            name = "getrandom";
            packageId = "getrandom 0.2.15";
            optional = true;
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
            optional = true;
          }
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "atomic" = [ "dep:atomic" ];
          "borsh" = [ "dep:borsh" "dep:borsh-derive" ];
          "bytemuck" = [ "dep:bytemuck" ];
          "default" = [ "std" ];
          "fast-rng" = [ "rng" "dep:rand" ];
          "js" = [ "dep:wasm-bindgen" "getrandom?/js" ];
          "macro-diagnostics" = [ "dep:uuid-macro-internal" ];
          "md5" = [ "dep:md-5" ];
          "rng" = [ "dep:getrandom" ];
          "serde" = [ "dep:serde" ];
          "sha1" = [ "dep:sha1_smol" ];
          "slog" = [ "dep:slog" ];
          "v1" = [ "atomic" ];
          "v3" = [ "md5" ];
          "v4" = [ "rng" ];
          "v5" = [ "sha1" ];
          "v6" = [ "atomic" ];
          "v7" = [ "rng" ];
          "zerocopy" = [ "dep:zerocopy" ];
        };
        resolvedDefaultFeatures = [ "default" "fast-rng" "rng" "std" "v4" ];
      };
      "valuable" = rec {
        crateName = "valuable";
        version = "0.1.0";
        edition = "2018";
        sha256 = "0v9gp3nkjbl30z0fd56d8mx7w1csk86wwjhfjhr400wh9mfpw2w3";
        features = {
          "default" = [ "std" ];
          "derive" = [ "valuable-derive" ];
          "std" = [ "alloc" ];
          "valuable-derive" = [ "dep:valuable-derive" ];
        };
        resolvedDefaultFeatures = [ "alloc" "std" ];
      };
      "variant_count" = rec {
        crateName = "variant_count";
        version = "1.1.0";
        edition = "2018";
        sha256 = "095i0s2cjxq2lwf1fcxgi82rq9ri8wixxx5bj8ll4qy41bwgmqma";
        procMacro = true;
        authors = [
          "Alexander Mescheryakov <freecoder.xx@gmail.com>"
        ];
        dependencies = [
          {
            name = "quote";
            packageId = "quote 1.0.37";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
          }
        ];

      };
      "vcpkg" = rec {
        crateName = "vcpkg";
        version = "0.2.15";
        edition = "2015";
        sha256 = "09i4nf5y8lig6xgj3f7fyrvzd3nlaw4znrihw8psidvv5yk4xkdc";
        authors = [
          "Jim McGrath <jimmc2@gmail.com>"
        ];

      };
      "version_check" = rec {
        crateName = "version_check";
        version = "0.9.5";
        edition = "2015";
        sha256 = "0nhhi4i5x89gm911azqbn7avs9mdacw2i3vcz3cnmz3mv4rqz4hb";
        authors = [
          "Sergio Benitez <sb@sergio.bz>"
        ];

      };
      "versions" = rec {
        crateName = "versions";
        version = "4.1.0";
        edition = "2021";
        sha256 = "1lv50vzdp8jfd4n6zmaasqyindj2ny8pd80j758zp4ymggcy35zf";
        authors = [
          "Colin Woodbury <colin@fosskers.ca>"
        ];
        dependencies = [
          {
            name = "itertools";
            packageId = "itertools 0.10.5";
          }
          {
            name = "nom";
            packageId = "nom";
          }
        ];
        features = {
          "serde" = [ "dep:serde" ];
        };
      };
      "vfs" = rec {
        crateName = "vfs";
        version = "0.10.0";
        edition = "2021";
        sha256 = "0bafyyzcrb31na1h3wagxsyxp105ngjfxm95k70ikb8vzhnfjkrf";
        authors = [
          "Manuel Woelker <github@manuel.woelker.org>"
        ];
        features = {
          "async-recursion" = [ "dep:async-recursion" ];
          "async-std" = [ "dep:async-std" ];
          "async-trait" = [ "dep:async-trait" ];
          "async-vfs" = [ "tokio" "async-std" "async-trait" "futures" "async-recursion" ];
          "embedded-fs" = [ "rust-embed" "rust-embed-impl" ];
          "futures" = [ "dep:futures" ];
          "rust-embed" = [ "dep:rust-embed" ];
          "rust-embed-impl" = [ "dep:rust-embed-impl" ];
          "tokio" = [ "dep:tokio" ];
        };
      };
      "vsimd" = rec {
        crateName = "vsimd";
        version = "0.8.0";
        edition = "2021";
        sha256 = "0r4wn54jxb12r0x023r5yxcrqk785akmbddqkcafz9fm03584c2w";
        features = {
          "detect" = [ "std" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "detect" "std" ];
      };
      "wait-timeout" = rec {
        crateName = "wait-timeout";
        version = "0.2.0";
        edition = "2015";
        crateBin = [];
        sha256 = "1xpkk0j5l9pfmjfh1pi0i89invlavfrd9av5xp0zhxgb29dhy84z";
        libName = "wait_timeout";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."unix" or false);
          }
        ];

      };
      "walkdir" = rec {
        crateName = "walkdir";
        version = "2.5.0";
        edition = "2018";
        sha256 = "0jsy7a710qv8gld5957ybrnc07gavppp963gs32xk4ag8130jy99";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "same-file";
            packageId = "same-file";
          }
          {
            name = "winapi-util";
            packageId = "winapi-util";
            target = { target, features }: (target."windows" or false);
          }
        ];

      };
      "want" = rec {
        crateName = "want";
        version = "0.3.1";
        edition = "2018";
        sha256 = "03hbfrnvqqdchb5kgxyavb9jabwza0dmh2vw5kg0dq8rxl57d9xz";
        authors = [
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "try-lock";
            packageId = "try-lock";
          }
        ];

      };
      "wasi 0.11.0+wasi-snapshot-preview1" = rec {
        crateName = "wasi";
        version = "0.11.0+wasi-snapshot-preview1";
        edition = "2018";
        sha256 = "08z4hxwkpdpalxjps1ai9y7ihin26y9f476i53dv98v45gkqg3cw";
        authors = [
          "The Cranelift Project Developers"
        ];
        features = {
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "default" = [ "std" ];
          "rustc-dep-of-std" = [ "compiler_builtins" "core" "rustc-std-workspace-alloc" ];
          "rustc-std-workspace-alloc" = [ "dep:rustc-std-workspace-alloc" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "wasi 0.9.0+wasi-snapshot-preview1" = rec {
        crateName = "wasi";
        version = "0.9.0+wasi-snapshot-preview1";
        edition = "2018";
        sha256 = "06g5v3vrdapfzvfq662cij7v8a1flwr2my45nnncdv2galrdzkfc";
        authors = [
          "The Cranelift Project Developers"
        ];
        features = {
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "default" = [ "std" ];
          "rustc-dep-of-std" = [ "compiler_builtins" "core" "rustc-std-workspace-alloc" ];
          "rustc-std-workspace-alloc" = [ "dep:rustc-std-workspace-alloc" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "wasite" = rec {
        crateName = "wasite";
        version = "0.1.0";
        edition = "2018";
        sha256 = "0nw5h9nmcl4fyf4j5d4mfdjfgvwi1cakpi349wc4zrr59wxxinmq";

      };
      "wasm-bindgen" = rec {
        crateName = "wasm-bindgen";
        version = "0.2.93";
        edition = "2021";
        sha256 = "1dfr7pka5kwvky2fx82m9d060p842hc5fyyw8igryikcdb0xybm8";
        libName = "wasm_bindgen";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "wasm-bindgen-macro";
            packageId = "wasm-bindgen-macro";
          }
        ];
        features = {
          "default" = [ "spans" "std" ];
          "enable-interning" = [ "std" ];
          "serde" = [ "dep:serde" ];
          "serde-serialize" = [ "serde" "serde_json" "std" ];
          "serde_json" = [ "dep:serde_json" ];
          "spans" = [ "wasm-bindgen-macro/spans" ];
          "strict-macro" = [ "wasm-bindgen-macro/strict-macro" ];
          "xxx_debug_only_print_generated_code" = [ "wasm-bindgen-macro/xxx_debug_only_print_generated_code" ];
        };
        resolvedDefaultFeatures = [ "default" "spans" "std" ];
      };
      "wasm-bindgen-backend" = rec {
        crateName = "wasm-bindgen-backend";
        version = "0.2.93";
        edition = "2021";
        sha256 = "0yypblaf94rdgqs5xw97499xfwgs1096yx026d6h88v563d9dqwx";
        libName = "wasm_bindgen_backend";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "bumpalo";
            packageId = "bumpalo";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.86";
          }
          {
            name = "quote";
            packageId = "quote 1.0.37";
          }
          {
            name = "syn";
            packageId = "syn 2.0.77";
            features = [ "full" ];
          }
          {
            name = "wasm-bindgen-shared";
            packageId = "wasm-bindgen-shared";
          }
        ];
        features = {
          "extra-traits" = [ "syn/extra-traits" ];
        };
        resolvedDefaultFeatures = [ "spans" ];
      };
      "wasm-bindgen-futures" = rec {
        crateName = "wasm-bindgen-futures";
        version = "0.4.43";
        edition = "2021";
        sha256 = "1vf8kmaj95xn5893y1bdlav47y5niq85q5bms9pfj8d6cc7k1sb1";
        libName = "wasm_bindgen_futures";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "js-sys";
            packageId = "js-sys";
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
          }
          {
            name = "web-sys";
            packageId = "web-sys";
            target = { target, features }: (builtins.elem "atomics" targetFeatures);
            features = [ "MessageEvent" "Worker" ];
          }
        ];
        features = {
          "futures-core" = [ "dep:futures-core" ];
          "futures-core-03-stream" = [ "futures-core" ];
        };
      };
      "wasm-bindgen-macro" = rec {
        crateName = "wasm-bindgen-macro";
        version = "0.2.93";
        edition = "2021";
        sha256 = "1kycd1xfx4d9xzqknvzbiqhwb5fzvjqrrn88x692q1vblj8lqp2q";
        procMacro = true;
        libName = "wasm_bindgen_macro";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "quote";
            packageId = "quote 1.0.37";
          }
          {
            name = "wasm-bindgen-macro-support";
            packageId = "wasm-bindgen-macro-support";
          }
        ];
        features = {
          "spans" = [ "wasm-bindgen-macro-support/spans" ];
          "strict-macro" = [ "wasm-bindgen-macro-support/strict-macro" ];
        };
        resolvedDefaultFeatures = [ "spans" ];
      };
      "wasm-bindgen-macro-support" = rec {
        crateName = "wasm-bindgen-macro-support";
        version = "0.2.93";
        edition = "2021";
        sha256 = "0dp8w6jmw44srym6l752nkr3hkplyw38a2fxz5f3j1ch9p3l1hxg";
        libName = "wasm_bindgen_macro_support";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.86";
          }
          {
            name = "quote";
            packageId = "quote 1.0.37";
          }
          {
            name = "syn";
            packageId = "syn 2.0.77";
            features = [ "visit" "full" ];
          }
          {
            name = "wasm-bindgen-backend";
            packageId = "wasm-bindgen-backend";
          }
          {
            name = "wasm-bindgen-shared";
            packageId = "wasm-bindgen-shared";
          }
        ];
        features = {
          "extra-traits" = [ "syn/extra-traits" ];
          "spans" = [ "wasm-bindgen-backend/spans" ];
        };
        resolvedDefaultFeatures = [ "spans" ];
      };
      "wasm-bindgen-shared" = rec {
        crateName = "wasm-bindgen-shared";
        version = "0.2.93";
        edition = "2021";
        links = "wasm_bindgen";
        sha256 = "1104bny0hv40jfap3hp8jhs0q4ya244qcrvql39i38xlghq0lan6";
        libName = "wasm_bindgen_shared";
        authors = [
          "The wasm-bindgen Developers"
        ];

      };
      "wasm-streams" = rec {
        crateName = "wasm-streams";
        version = "0.4.0";
        edition = "2021";
        sha256 = "0ad17c59xb8fffsnbrqbyqz93hb66nzxhizpii31icb31g4w8pdn";
        libName = "wasm_streams";type = [ "cdylib" "rlib" ];
        authors = [
          "Mattias Buelens <mattias@buelens.com>"
        ];
        dependencies = [
          {
            name = "futures-util";
            packageId = "futures-util";
            features = [ "io" "sink" ];
          }
          {
            name = "js-sys";
            packageId = "js-sys";
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
          }
          {
            name = "wasm-bindgen-futures";
            packageId = "wasm-bindgen-futures";
          }
          {
            name = "web-sys";
            packageId = "web-sys";
            features = [ "AbortSignal" "QueuingStrategy" "ReadableStream" "ReadableStreamType" "ReadableWritablePair" "ReadableStreamByobReader" "ReadableStreamReaderMode" "ReadableStreamReadResult" "ReadableStreamByobRequest" "ReadableStreamDefaultReader" "ReadableByteStreamController" "ReadableStreamGetReaderOptions" "ReadableStreamDefaultController" "StreamPipeOptions" "TransformStream" "TransformStreamDefaultController" "Transformer" "UnderlyingSink" "UnderlyingSource" "WritableStream" "WritableStreamDefaultController" "WritableStreamDefaultWriter" ];
          }
        ];
        devDependencies = [
          {
            name = "web-sys";
            packageId = "web-sys";
            features = [ "console" "AbortSignal" "Response" "ReadableStream" "Window" ];
          }
        ];

      };
      "wasm-timer" = rec {
        crateName = "wasm-timer";
        version = "0.2.5";
        edition = "2018";
        sha256 = "0zsyijv3wgj9p4q47a4awla8j4kw33jd7da2fsd1wml0nh6wn3my";
        libName = "wasm_timer";
        authors = [
          "Pierre Krieger <pierre.krieger1708@gmail.com>"
        ];
        dependencies = [
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "js-sys";
            packageId = "js-sys";
            target = { target, features }: (("wasm32" == target."arch" or null) && ("unknown" == target."os" or null));
          }
          {
            name = "parking_lot";
            packageId = "parking_lot 0.11.2";
          }
          {
            name = "pin-utils";
            packageId = "pin-utils";
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            target = { target, features }: (("wasm32" == target."arch" or null) && ("unknown" == target."os" or null));
          }
          {
            name = "wasm-bindgen-futures";
            packageId = "wasm-bindgen-futures";
            target = { target, features }: (("wasm32" == target."arch" or null) && ("unknown" == target."os" or null));
          }
          {
            name = "web-sys";
            packageId = "web-sys";
            target = { target, features }: (("wasm32" == target."arch" or null) && ("unknown" == target."os" or null));
            features = [ "Performance" "Window" ];
          }
        ];

      };
      "web-sys" = rec {
        crateName = "web-sys";
        version = "0.3.70";
        edition = "2021";
        sha256 = "1h1jspkqnrx1iybwhwhc3qq8c8fn4hy5jcf0wxjry4mxv6pymz96";
        libName = "web_sys";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "js-sys";
            packageId = "js-sys";
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
          }
        ];
        features = {
          "AbortSignal" = [ "EventTarget" ];
          "AnalyserNode" = [ "AudioNode" "EventTarget" ];
          "Animation" = [ "EventTarget" ];
          "AnimationEvent" = [ "Event" ];
          "AnimationPlaybackEvent" = [ "Event" ];
          "Attr" = [ "EventTarget" "Node" ];
          "AudioBufferSourceNode" = [ "AudioNode" "AudioScheduledSourceNode" "EventTarget" ];
          "AudioContext" = [ "BaseAudioContext" "EventTarget" ];
          "AudioDestinationNode" = [ "AudioNode" "EventTarget" ];
          "AudioNode" = [ "EventTarget" ];
          "AudioProcessingEvent" = [ "Event" ];
          "AudioScheduledSourceNode" = [ "AudioNode" "EventTarget" ];
          "AudioStreamTrack" = [ "EventTarget" "MediaStreamTrack" ];
          "AudioTrackList" = [ "EventTarget" ];
          "AudioWorklet" = [ "Worklet" ];
          "AudioWorkletGlobalScope" = [ "WorkletGlobalScope" ];
          "AudioWorkletNode" = [ "AudioNode" "EventTarget" ];
          "AuthenticatorAssertionResponse" = [ "AuthenticatorResponse" ];
          "AuthenticatorAttestationResponse" = [ "AuthenticatorResponse" ];
          "BaseAudioContext" = [ "EventTarget" ];
          "BatteryManager" = [ "EventTarget" ];
          "BeforeUnloadEvent" = [ "Event" ];
          "BiquadFilterNode" = [ "AudioNode" "EventTarget" ];
          "BlobEvent" = [ "Event" ];
          "Bluetooth" = [ "EventTarget" ];
          "BluetoothAdvertisingEvent" = [ "Event" ];
          "BluetoothDevice" = [ "EventTarget" ];
          "BluetoothPermissionResult" = [ "EventTarget" "PermissionStatus" ];
          "BluetoothRemoteGattCharacteristic" = [ "EventTarget" ];
          "BluetoothRemoteGattService" = [ "EventTarget" ];
          "BroadcastChannel" = [ "EventTarget" ];
          "CanvasCaptureMediaStream" = [ "EventTarget" "MediaStream" ];
          "CanvasCaptureMediaStreamTrack" = [ "EventTarget" "MediaStreamTrack" ];
          "CdataSection" = [ "CharacterData" "EventTarget" "Node" "Text" ];
          "ChannelMergerNode" = [ "AudioNode" "EventTarget" ];
          "ChannelSplitterNode" = [ "AudioNode" "EventTarget" ];
          "CharacterData" = [ "EventTarget" "Node" ];
          "ChromeWorker" = [ "EventTarget" "Worker" ];
          "Clipboard" = [ "EventTarget" ];
          "ClipboardEvent" = [ "Event" ];
          "CloseEvent" = [ "Event" ];
          "Comment" = [ "CharacterData" "EventTarget" "Node" ];
          "CompositionEvent" = [ "Event" "UiEvent" ];
          "ConstantSourceNode" = [ "AudioNode" "AudioScheduledSourceNode" "EventTarget" ];
          "ConvolverNode" = [ "AudioNode" "EventTarget" ];
          "CssAnimation" = [ "Animation" "EventTarget" ];
          "CssConditionRule" = [ "CssGroupingRule" "CssRule" ];
          "CssCounterStyleRule" = [ "CssRule" ];
          "CssFontFaceRule" = [ "CssRule" ];
          "CssFontFeatureValuesRule" = [ "CssRule" ];
          "CssGroupingRule" = [ "CssRule" ];
          "CssImportRule" = [ "CssRule" ];
          "CssKeyframeRule" = [ "CssRule" ];
          "CssKeyframesRule" = [ "CssRule" ];
          "CssMediaRule" = [ "CssConditionRule" "CssGroupingRule" "CssRule" ];
          "CssNamespaceRule" = [ "CssRule" ];
          "CssPageRule" = [ "CssRule" ];
          "CssStyleRule" = [ "CssRule" ];
          "CssStyleSheet" = [ "StyleSheet" ];
          "CssSupportsRule" = [ "CssConditionRule" "CssGroupingRule" "CssRule" ];
          "CssTransition" = [ "Animation" "EventTarget" ];
          "CustomEvent" = [ "Event" ];
          "DedicatedWorkerGlobalScope" = [ "EventTarget" "WorkerGlobalScope" ];
          "DelayNode" = [ "AudioNode" "EventTarget" ];
          "DeviceLightEvent" = [ "Event" ];
          "DeviceMotionEvent" = [ "Event" ];
          "DeviceOrientationEvent" = [ "Event" ];
          "DeviceProximityEvent" = [ "Event" ];
          "Document" = [ "EventTarget" "Node" ];
          "DocumentFragment" = [ "EventTarget" "Node" ];
          "DocumentTimeline" = [ "AnimationTimeline" ];
          "DocumentType" = [ "EventTarget" "Node" ];
          "DomMatrix" = [ "DomMatrixReadOnly" ];
          "DomPoint" = [ "DomPointReadOnly" ];
          "DomRect" = [ "DomRectReadOnly" ];
          "DomRequest" = [ "EventTarget" ];
          "DragEvent" = [ "Event" "MouseEvent" "UiEvent" ];
          "DynamicsCompressorNode" = [ "AudioNode" "EventTarget" ];
          "Element" = [ "EventTarget" "Node" ];
          "ErrorEvent" = [ "Event" ];
          "EventSource" = [ "EventTarget" ];
          "ExtendableEvent" = [ "Event" ];
          "ExtendableMessageEvent" = [ "Event" "ExtendableEvent" ];
          "FetchEvent" = [ "Event" "ExtendableEvent" ];
          "FetchObserver" = [ "EventTarget" ];
          "File" = [ "Blob" ];
          "FileReader" = [ "EventTarget" ];
          "FileSystemDirectoryEntry" = [ "FileSystemEntry" ];
          "FileSystemDirectoryHandle" = [ "FileSystemHandle" ];
          "FileSystemFileEntry" = [ "FileSystemEntry" ];
          "FileSystemFileHandle" = [ "FileSystemHandle" ];
          "FileSystemWritableFileStream" = [ "WritableStream" ];
          "FocusEvent" = [ "Event" "UiEvent" ];
          "FontFaceSet" = [ "EventTarget" ];
          "FontFaceSetLoadEvent" = [ "Event" ];
          "GainNode" = [ "AudioNode" "EventTarget" ];
          "GamepadAxisMoveEvent" = [ "Event" "GamepadEvent" ];
          "GamepadButtonEvent" = [ "Event" "GamepadEvent" ];
          "GamepadEvent" = [ "Event" ];
          "GpuDevice" = [ "EventTarget" ];
          "GpuInternalError" = [ "GpuError" ];
          "GpuOutOfMemoryError" = [ "GpuError" ];
          "GpuPipelineError" = [ "DomException" ];
          "GpuUncapturedErrorEvent" = [ "Event" ];
          "GpuValidationError" = [ "GpuError" ];
          "HashChangeEvent" = [ "Event" ];
          "Hid" = [ "EventTarget" ];
          "HidConnectionEvent" = [ "Event" ];
          "HidDevice" = [ "EventTarget" ];
          "HidInputReportEvent" = [ "Event" ];
          "HtmlAnchorElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlAreaElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlAudioElement" = [ "Element" "EventTarget" "HtmlElement" "HtmlMediaElement" "Node" ];
          "HtmlBaseElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlBodyElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlBrElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlButtonElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlCanvasElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlDListElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlDataElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlDataListElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlDetailsElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlDialogElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlDirectoryElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlDivElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlDocument" = [ "Document" "EventTarget" "Node" ];
          "HtmlElement" = [ "Element" "EventTarget" "Node" ];
          "HtmlEmbedElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlFieldSetElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlFontElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlFormControlsCollection" = [ "HtmlCollection" ];
          "HtmlFormElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlFrameElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlFrameSetElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlHeadElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlHeadingElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlHrElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlHtmlElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlIFrameElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlImageElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlInputElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlLabelElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlLegendElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlLiElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlLinkElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlMapElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlMediaElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlMenuElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlMenuItemElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlMetaElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlMeterElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlModElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlOListElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlObjectElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlOptGroupElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlOptionElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlOptionsCollection" = [ "HtmlCollection" ];
          "HtmlOutputElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlParagraphElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlParamElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlPictureElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlPreElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlProgressElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlQuoteElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlScriptElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlSelectElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlSlotElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlSourceElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlSpanElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlStyleElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlTableCaptionElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlTableCellElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlTableColElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlTableElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlTableRowElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlTableSectionElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlTemplateElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlTextAreaElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlTimeElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlTitleElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlTrackElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlUListElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlUnknownElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlVideoElement" = [ "Element" "EventTarget" "HtmlElement" "HtmlMediaElement" "Node" ];
          "IdbCursorWithValue" = [ "IdbCursor" ];
          "IdbDatabase" = [ "EventTarget" ];
          "IdbFileHandle" = [ "EventTarget" ];
          "IdbFileRequest" = [ "DomRequest" "EventTarget" ];
          "IdbLocaleAwareKeyRange" = [ "IdbKeyRange" ];
          "IdbMutableFile" = [ "EventTarget" ];
          "IdbOpenDbRequest" = [ "EventTarget" "IdbRequest" ];
          "IdbRequest" = [ "EventTarget" ];
          "IdbTransaction" = [ "EventTarget" ];
          "IdbVersionChangeEvent" = [ "Event" ];
          "IirFilterNode" = [ "AudioNode" "EventTarget" ];
          "ImageCaptureErrorEvent" = [ "Event" ];
          "ImageTrack" = [ "EventTarget" ];
          "InputDeviceInfo" = [ "MediaDeviceInfo" ];
          "InputEvent" = [ "Event" "UiEvent" ];
          "KeyboardEvent" = [ "Event" "UiEvent" ];
          "KeyframeEffect" = [ "AnimationEffect" ];
          "LocalMediaStream" = [ "EventTarget" "MediaStream" ];
          "MediaDevices" = [ "EventTarget" ];
          "MediaElementAudioSourceNode" = [ "AudioNode" "EventTarget" ];
          "MediaEncryptedEvent" = [ "Event" ];
          "MediaKeyError" = [ "Event" ];
          "MediaKeyMessageEvent" = [ "Event" ];
          "MediaKeySession" = [ "EventTarget" ];
          "MediaQueryList" = [ "EventTarget" ];
          "MediaQueryListEvent" = [ "Event" ];
          "MediaRecorder" = [ "EventTarget" ];
          "MediaRecorderErrorEvent" = [ "Event" ];
          "MediaSource" = [ "EventTarget" ];
          "MediaStream" = [ "EventTarget" ];
          "MediaStreamAudioDestinationNode" = [ "AudioNode" "EventTarget" ];
          "MediaStreamAudioSourceNode" = [ "AudioNode" "EventTarget" ];
          "MediaStreamEvent" = [ "Event" ];
          "MediaStreamTrack" = [ "EventTarget" ];
          "MediaStreamTrackEvent" = [ "Event" ];
          "MediaStreamTrackGenerator" = [ "EventTarget" "MediaStreamTrack" ];
          "MessageEvent" = [ "Event" ];
          "MessagePort" = [ "EventTarget" ];
          "MidiAccess" = [ "EventTarget" ];
          "MidiConnectionEvent" = [ "Event" ];
          "MidiInput" = [ "EventTarget" "MidiPort" ];
          "MidiMessageEvent" = [ "Event" ];
          "MidiOutput" = [ "EventTarget" "MidiPort" ];
          "MidiPort" = [ "EventTarget" ];
          "MouseEvent" = [ "Event" "UiEvent" ];
          "MouseScrollEvent" = [ "Event" "MouseEvent" "UiEvent" ];
          "MutationEvent" = [ "Event" ];
          "NetworkInformation" = [ "EventTarget" ];
          "Node" = [ "EventTarget" ];
          "Notification" = [ "EventTarget" ];
          "NotificationEvent" = [ "Event" "ExtendableEvent" ];
          "OfflineAudioCompletionEvent" = [ "Event" ];
          "OfflineAudioContext" = [ "BaseAudioContext" "EventTarget" ];
          "OfflineResourceList" = [ "EventTarget" ];
          "OffscreenCanvas" = [ "EventTarget" ];
          "OscillatorNode" = [ "AudioNode" "AudioScheduledSourceNode" "EventTarget" ];
          "PageTransitionEvent" = [ "Event" ];
          "PaintWorkletGlobalScope" = [ "WorkletGlobalScope" ];
          "PannerNode" = [ "AudioNode" "EventTarget" ];
          "PaymentMethodChangeEvent" = [ "Event" "PaymentRequestUpdateEvent" ];
          "PaymentRequestUpdateEvent" = [ "Event" ];
          "Performance" = [ "EventTarget" ];
          "PerformanceMark" = [ "PerformanceEntry" ];
          "PerformanceMeasure" = [ "PerformanceEntry" ];
          "PerformanceNavigationTiming" = [ "PerformanceEntry" "PerformanceResourceTiming" ];
          "PerformanceResourceTiming" = [ "PerformanceEntry" ];
          "PermissionStatus" = [ "EventTarget" ];
          "PointerEvent" = [ "Event" "MouseEvent" "UiEvent" ];
          "PopStateEvent" = [ "Event" ];
          "PopupBlockedEvent" = [ "Event" ];
          "PresentationAvailability" = [ "EventTarget" ];
          "PresentationConnection" = [ "EventTarget" ];
          "PresentationConnectionAvailableEvent" = [ "Event" ];
          "PresentationConnectionCloseEvent" = [ "Event" ];
          "PresentationConnectionList" = [ "EventTarget" ];
          "PresentationRequest" = [ "EventTarget" ];
          "ProcessingInstruction" = [ "CharacterData" "EventTarget" "Node" ];
          "ProgressEvent" = [ "Event" ];
          "PromiseRejectionEvent" = [ "Event" ];
          "PublicKeyCredential" = [ "Credential" ];
          "PushEvent" = [ "Event" "ExtendableEvent" ];
          "RadioNodeList" = [ "NodeList" ];
          "RtcDataChannel" = [ "EventTarget" ];
          "RtcDataChannelEvent" = [ "Event" ];
          "RtcPeerConnection" = [ "EventTarget" ];
          "RtcPeerConnectionIceErrorEvent" = [ "Event" ];
          "RtcPeerConnectionIceEvent" = [ "Event" ];
          "RtcTrackEvent" = [ "Event" ];
          "RtcdtmfSender" = [ "EventTarget" ];
          "RtcdtmfToneChangeEvent" = [ "Event" ];
          "Screen" = [ "EventTarget" ];
          "ScreenOrientation" = [ "EventTarget" ];
          "ScriptProcessorNode" = [ "AudioNode" "EventTarget" ];
          "ScrollAreaEvent" = [ "Event" "UiEvent" ];
          "SecurityPolicyViolationEvent" = [ "Event" ];
          "Serial" = [ "EventTarget" ];
          "SerialPort" = [ "EventTarget" ];
          "ServiceWorker" = [ "EventTarget" ];
          "ServiceWorkerContainer" = [ "EventTarget" ];
          "ServiceWorkerGlobalScope" = [ "EventTarget" "WorkerGlobalScope" ];
          "ServiceWorkerRegistration" = [ "EventTarget" ];
          "ShadowRoot" = [ "DocumentFragment" "EventTarget" "Node" ];
          "SharedWorker" = [ "EventTarget" ];
          "SharedWorkerGlobalScope" = [ "EventTarget" "WorkerGlobalScope" ];
          "SourceBuffer" = [ "EventTarget" ];
          "SourceBufferList" = [ "EventTarget" ];
          "SpeechRecognition" = [ "EventTarget" ];
          "SpeechRecognitionError" = [ "Event" ];
          "SpeechRecognitionEvent" = [ "Event" ];
          "SpeechSynthesis" = [ "EventTarget" ];
          "SpeechSynthesisErrorEvent" = [ "Event" "SpeechSynthesisEvent" ];
          "SpeechSynthesisEvent" = [ "Event" ];
          "SpeechSynthesisUtterance" = [ "EventTarget" ];
          "StereoPannerNode" = [ "AudioNode" "EventTarget" ];
          "StorageEvent" = [ "Event" ];
          "SubmitEvent" = [ "Event" ];
          "SvgAnimateElement" = [ "Element" "EventTarget" "Node" "SvgAnimationElement" "SvgElement" ];
          "SvgAnimateMotionElement" = [ "Element" "EventTarget" "Node" "SvgAnimationElement" "SvgElement" ];
          "SvgAnimateTransformElement" = [ "Element" "EventTarget" "Node" "SvgAnimationElement" "SvgElement" ];
          "SvgAnimationElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgCircleElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGeometryElement" "SvgGraphicsElement" ];
          "SvgClipPathElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgComponentTransferFunctionElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgDefsElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" ];
          "SvgDescElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgElement" = [ "Element" "EventTarget" "Node" ];
          "SvgEllipseElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGeometryElement" "SvgGraphicsElement" ];
          "SvgFilterElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgForeignObjectElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" ];
          "SvgGeometryElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" ];
          "SvgGradientElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgGraphicsElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgImageElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" ];
          "SvgLineElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGeometryElement" "SvgGraphicsElement" ];
          "SvgLinearGradientElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGradientElement" ];
          "SvgMarkerElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgMaskElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgMetadataElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgPathElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGeometryElement" "SvgGraphicsElement" ];
          "SvgPathSegArcAbs" = [ "SvgPathSeg" ];
          "SvgPathSegArcRel" = [ "SvgPathSeg" ];
          "SvgPathSegClosePath" = [ "SvgPathSeg" ];
          "SvgPathSegCurvetoCubicAbs" = [ "SvgPathSeg" ];
          "SvgPathSegCurvetoCubicRel" = [ "SvgPathSeg" ];
          "SvgPathSegCurvetoCubicSmoothAbs" = [ "SvgPathSeg" ];
          "SvgPathSegCurvetoCubicSmoothRel" = [ "SvgPathSeg" ];
          "SvgPathSegCurvetoQuadraticAbs" = [ "SvgPathSeg" ];
          "SvgPathSegCurvetoQuadraticRel" = [ "SvgPathSeg" ];
          "SvgPathSegCurvetoQuadraticSmoothAbs" = [ "SvgPathSeg" ];
          "SvgPathSegCurvetoQuadraticSmoothRel" = [ "SvgPathSeg" ];
          "SvgPathSegLinetoAbs" = [ "SvgPathSeg" ];
          "SvgPathSegLinetoHorizontalAbs" = [ "SvgPathSeg" ];
          "SvgPathSegLinetoHorizontalRel" = [ "SvgPathSeg" ];
          "SvgPathSegLinetoRel" = [ "SvgPathSeg" ];
          "SvgPathSegLinetoVerticalAbs" = [ "SvgPathSeg" ];
          "SvgPathSegLinetoVerticalRel" = [ "SvgPathSeg" ];
          "SvgPathSegMovetoAbs" = [ "SvgPathSeg" ];
          "SvgPathSegMovetoRel" = [ "SvgPathSeg" ];
          "SvgPatternElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgPolygonElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGeometryElement" "SvgGraphicsElement" ];
          "SvgPolylineElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGeometryElement" "SvgGraphicsElement" ];
          "SvgRadialGradientElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGradientElement" ];
          "SvgRectElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGeometryElement" "SvgGraphicsElement" ];
          "SvgScriptElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgSetElement" = [ "Element" "EventTarget" "Node" "SvgAnimationElement" "SvgElement" ];
          "SvgStopElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgStyleElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgSwitchElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" ];
          "SvgSymbolElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgTextContentElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" ];
          "SvgTextElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" "SvgTextContentElement" "SvgTextPositioningElement" ];
          "SvgTextPathElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" "SvgTextContentElement" ];
          "SvgTextPositioningElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" "SvgTextContentElement" ];
          "SvgTitleElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgUseElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" ];
          "SvgViewElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgaElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" ];
          "SvgfeBlendElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeColorMatrixElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeComponentTransferElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeCompositeElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeConvolveMatrixElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeDiffuseLightingElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeDisplacementMapElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeDistantLightElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeDropShadowElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeFloodElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeFuncAElement" = [ "Element" "EventTarget" "Node" "SvgComponentTransferFunctionElement" "SvgElement" ];
          "SvgfeFuncBElement" = [ "Element" "EventTarget" "Node" "SvgComponentTransferFunctionElement" "SvgElement" ];
          "SvgfeFuncGElement" = [ "Element" "EventTarget" "Node" "SvgComponentTransferFunctionElement" "SvgElement" ];
          "SvgfeFuncRElement" = [ "Element" "EventTarget" "Node" "SvgComponentTransferFunctionElement" "SvgElement" ];
          "SvgfeGaussianBlurElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeImageElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeMergeElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeMergeNodeElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeMorphologyElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeOffsetElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfePointLightElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeSpecularLightingElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeSpotLightElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeTileElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeTurbulenceElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvggElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" ];
          "SvgmPathElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgsvgElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" ];
          "SvgtSpanElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" "SvgTextContentElement" "SvgTextPositioningElement" ];
          "TaskController" = [ "AbortController" ];
          "TaskPriorityChangeEvent" = [ "Event" ];
          "TaskSignal" = [ "AbortSignal" "EventTarget" ];
          "TcpServerSocket" = [ "EventTarget" ];
          "TcpServerSocketEvent" = [ "Event" ];
          "TcpSocket" = [ "EventTarget" ];
          "TcpSocketErrorEvent" = [ "Event" ];
          "TcpSocketEvent" = [ "Event" ];
          "Text" = [ "CharacterData" "EventTarget" "Node" ];
          "TextTrack" = [ "EventTarget" ];
          "TextTrackCue" = [ "EventTarget" ];
          "TextTrackList" = [ "EventTarget" ];
          "TimeEvent" = [ "Event" ];
          "ToggleEvent" = [ "Event" ];
          "TouchEvent" = [ "Event" "UiEvent" ];
          "TrackEvent" = [ "Event" ];
          "TransitionEvent" = [ "Event" ];
          "UiEvent" = [ "Event" ];
          "Usb" = [ "EventTarget" ];
          "UsbConnectionEvent" = [ "Event" ];
          "UsbPermissionResult" = [ "EventTarget" "PermissionStatus" ];
          "UserProximityEvent" = [ "Event" ];
          "ValueEvent" = [ "Event" ];
          "VideoStreamTrack" = [ "EventTarget" "MediaStreamTrack" ];
          "VideoTrackList" = [ "EventTarget" ];
          "VisualViewport" = [ "EventTarget" ];
          "VrDisplay" = [ "EventTarget" ];
          "VttCue" = [ "EventTarget" "TextTrackCue" ];
          "WakeLockSentinel" = [ "EventTarget" ];
          "WaveShaperNode" = [ "AudioNode" "EventTarget" ];
          "WebGlContextEvent" = [ "Event" ];
          "WebKitCssMatrix" = [ "DomMatrix" "DomMatrixReadOnly" ];
          "WebSocket" = [ "EventTarget" ];
          "WebTransportError" = [ "DomException" ];
          "WebTransportReceiveStream" = [ "ReadableStream" ];
          "WebTransportSendStream" = [ "WritableStream" ];
          "WheelEvent" = [ "Event" "MouseEvent" "UiEvent" ];
          "Window" = [ "EventTarget" ];
          "WindowClient" = [ "Client" ];
          "Worker" = [ "EventTarget" ];
          "WorkerDebuggerGlobalScope" = [ "EventTarget" ];
          "WorkerGlobalScope" = [ "EventTarget" ];
          "XmlDocument" = [ "Document" "EventTarget" "Node" ];
          "XmlHttpRequest" = [ "EventTarget" "XmlHttpRequestEventTarget" ];
          "XmlHttpRequestEventTarget" = [ "EventTarget" ];
          "XmlHttpRequestUpload" = [ "EventTarget" "XmlHttpRequestEventTarget" ];
          "XrBoundedReferenceSpace" = [ "EventTarget" "XrReferenceSpace" "XrSpace" ];
          "XrInputSourceEvent" = [ "Event" ];
          "XrInputSourcesChangeEvent" = [ "Event" ];
          "XrJointPose" = [ "XrPose" ];
          "XrJointSpace" = [ "EventTarget" "XrSpace" ];
          "XrLayer" = [ "EventTarget" ];
          "XrPermissionStatus" = [ "EventTarget" "PermissionStatus" ];
          "XrReferenceSpace" = [ "EventTarget" "XrSpace" ];
          "XrReferenceSpaceEvent" = [ "Event" ];
          "XrSession" = [ "EventTarget" ];
          "XrSessionEvent" = [ "Event" ];
          "XrSpace" = [ "EventTarget" ];
          "XrSystem" = [ "EventTarget" ];
          "XrViewerPose" = [ "XrPose" ];
          "XrWebGlLayer" = [ "EventTarget" "XrLayer" ];
        };
        resolvedDefaultFeatures = [ "AbortController" "AbortSignal" "AddEventListenerOptions" "BinaryType" "Blob" "BlobPropertyBag" "CanvasRenderingContext2d" "CloseEvent" "CloseEventInit" "Crypto" "Document" "DomException" "DomRect" "DomRectReadOnly" "Element" "ErrorEvent" "Event" "EventTarget" "File" "FileReader" "FormData" "Headers" "History" "HtmlCanvasElement" "HtmlElement" "HtmlHeadElement" "Location" "MessageEvent" "Navigator" "Node" "Performance" "PerformanceTiming" "ProgressEvent" "QueuingStrategy" "ReadableByteStreamController" "ReadableStream" "ReadableStreamByobReader" "ReadableStreamByobRequest" "ReadableStreamDefaultController" "ReadableStreamDefaultReader" "ReadableStreamGetReaderOptions" "ReadableStreamReadResult" "ReadableStreamReaderMode" "ReadableStreamType" "ReadableWritablePair" "Request" "RequestCredentials" "RequestInit" "RequestMode" "Response" "ServiceWorkerGlobalScope" "StreamPipeOptions" "TransformStream" "TransformStreamDefaultController" "Transformer" "UnderlyingSink" "UnderlyingSource" "WebSocket" "Window" "Worker" "WorkerGlobalScope" "WritableStream" "WritableStreamDefaultController" "WritableStreamDefaultWriter" "console" ];
      };
      "web-time" = rec {
        crateName = "web-time";
        version = "1.1.0";
        edition = "2021";
        sha256 = "1fx05yqx83dhx628wb70fyy10yjfq1jpl20qfqhdkymi13rq0ras";
        libName = "web_time";
        dependencies = [
          {
            name = "js-sys";
            packageId = "js-sys";
            target = { target, features }: ((builtins.elem "wasm" target."family") && ("unknown" == target."os" or null));
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            usesDefaultFeatures = false;
            target = { target, features }: ((builtins.elem "wasm" target."family") && ("unknown" == target."os" or null));
          }
        ];
        features = {
          "serde" = [ "dep:serde" ];
        };
      };
      "webpki-roots 0.25.4" = rec {
        crateName = "webpki-roots";
        version = "0.25.4";
        edition = "2018";
        sha256 = "1qgqa615gc1cgklls4bkjp9jv9pvv3jnl82lc6wd7dkximywa82z";
        libName = "webpki_roots";

      };
      "webpki-roots 0.26.6" = rec {
        crateName = "webpki-roots";
        version = "0.26.6";
        edition = "2018";
        sha256 = "0n5985cgqrzm2a1si6rii5jrp3z7y3cfizgy9lfqywbpy6znf744";
        libName = "webpki_roots";
        dependencies = [
          {
            name = "rustls-pki-types";
            packageId = "rustls-pki-types";
            rename = "pki-types";
            usesDefaultFeatures = false;
          }
        ];

      };
      "which" = rec {
        crateName = "which";
        version = "4.4.2";
        edition = "2021";
        sha256 = "1ixzmx3svsv5hbdvd8vdhd3qwvf6ns8jdpif1wmwsy10k90j9fl7";
        authors = [
          "Harry Fei <tiziyuanfang@gmail.com>"
        ];
        dependencies = [
          {
            name = "either";
            packageId = "either";
          }
          {
            name = "home";
            packageId = "home";
            target = { target, features }: ((target."windows" or false) || (target."unix" or false) || ("redox" == target."os" or null));
          }
          {
            name = "once_cell";
            packageId = "once_cell";
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "rustix";
            packageId = "rustix";
            usesDefaultFeatures = false;
            features = [ "fs" "std" ];
          }
        ];
        features = {
          "regex" = [ "dep:regex" ];
        };
      };
      "whoami" = rec {
        crateName = "whoami";
        version = "1.5.2";
        edition = "2018";
        sha256 = "0vdvm6sga4v9515l6glqqfnmzp246nq66dd09cw5ri4fyn3mnb9p";
        dependencies = [
          {
            name = "redox_syscall";
            packageId = "redox_syscall 0.5.6";
            target = { target, features }: (("redox" == target."os" or null) && (!("wasm32" == target."arch" or null)));
          }
          {
            name = "wasite";
            packageId = "wasite";
            target = { target, features }: (("wasm32" == target."arch" or null) && ("wasi" == target."os" or null));
          }
          {
            name = "web-sys";
            packageId = "web-sys";
            optional = true;
            target = { target, features }: (("wasm32" == target."arch" or null) && (!("wasi" == target."os" or null)) && (!(target."daku" or false)));
            features = [ "Navigator" "Document" "Window" "Location" ];
          }
        ];
        features = {
          "default" = [ "web" ];
          "web" = [ "web-sys" ];
          "web-sys" = [ "dep:web-sys" ];
        };
        resolvedDefaultFeatures = [ "default" "web" "web-sys" ];
      };
      "widestring" = rec {
        crateName = "widestring";
        version = "0.5.1";
        edition = "2018";
        sha256 = "10qrilijh1qzw362mvd4nsz3vv32dxx530vk41hkcx8hah22z20p";
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "winapi" = rec {
        crateName = "winapi";
        version = "0.3.9";
        edition = "2015";
        sha256 = "06gl025x418lchw1wxj64ycr7gha83m44cjr5sarhynd9xkrm0sw";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];
        dependencies = [
          {
            name = "winapi-i686-pc-windows-gnu";
            packageId = "winapi-i686-pc-windows-gnu";
            target = { target, features }: (pkgs.rust.lib.toRustTarget stdenv.hostPlatform == "i686-pc-windows-gnu");
          }
          {
            name = "winapi-x86_64-pc-windows-gnu";
            packageId = "winapi-x86_64-pc-windows-gnu";
            target = { target, features }: (pkgs.rust.lib.toRustTarget stdenv.hostPlatform == "x86_64-pc-windows-gnu");
          }
        ];
        features = {
          "debug" = [ "impl-debug" ];
        };
        resolvedDefaultFeatures = [ "basetsd" "cfg" "consoleapi" "errhandlingapi" "evntrace" "fileapi" "handleapi" "impl-default" "in6addr" "inaddr" "knownfolders" "libloaderapi" "memoryapi" "minwinbase" "minwindef" "namedpipeapi" "ntsecapi" "ntstatus" "objbase" "processenv" "processthreadsapi" "profileapi" "psapi" "shlobj" "std" "synchapi" "winbase" "wincon" "wincrypt" "windef" "winerror" "winioctl" "winnt" "winuser" "wtypesbase" ];
      };
      "winapi-i686-pc-windows-gnu" = rec {
        crateName = "winapi-i686-pc-windows-gnu";
        version = "0.4.0";
        edition = "2015";
        sha256 = "1dmpa6mvcvzz16zg6d5vrfy4bxgg541wxrcip7cnshi06v38ffxc";
        libName = "winapi_i686_pc_windows_gnu";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];

      };
      "winapi-util" = rec {
        crateName = "winapi-util";
        version = "0.1.9";
        edition = "2021";
        sha256 = "1fqhkcl9scd230cnfj8apfficpf5c9vhwnk4yy9xfc1sw69iq8ng";
        libName = "winapi_util";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "windows-sys";
            packageId = "windows-sys 0.59.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_Foundation" "Win32_Storage_FileSystem" "Win32_System_Console" "Win32_System_SystemInformation" ];
          }
        ];

      };
      "winapi-x86_64-pc-windows-gnu" = rec {
        crateName = "winapi-x86_64-pc-windows-gnu";
        version = "0.4.0";
        edition = "2015";
        sha256 = "0gqq64czqb64kskjryj8isp62m2sgvx25yyj3kpc2myh85w24bki";
        libName = "winapi_x86_64_pc_windows_gnu";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];

      };
      "windows 0.36.1" = rec {
        crateName = "windows";
        version = "0.36.1";
        edition = "2018";
        sha256 = "101c932pj65zw70l17fz09yka5g29a6ibn1gxfq6kcvn66l9ffz5";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows_aarch64_msvc";
            packageId = "windows_aarch64_msvc 0.36.1";
            target = { target, features }: (pkgs.rust.lib.toRustTarget stdenv.hostPlatform == "aarch64-pc-windows-msvc");
          }
          {
            name = "windows_aarch64_msvc";
            packageId = "windows_aarch64_msvc 0.36.1";
            target = { target, features }: (pkgs.rust.lib.toRustTarget stdenv.hostPlatform == "aarch64-uwp-windows-msvc");
          }
          {
            name = "windows_i686_gnu";
            packageId = "windows_i686_gnu 0.36.1";
            target = { target, features }: (pkgs.rust.lib.toRustTarget stdenv.hostPlatform == "i686-pc-windows-gnu");
          }
          {
            name = "windows_i686_gnu";
            packageId = "windows_i686_gnu 0.36.1";
            target = { target, features }: (pkgs.rust.lib.toRustTarget stdenv.hostPlatform == "i686-uwp-windows-gnu");
          }
          {
            name = "windows_i686_msvc";
            packageId = "windows_i686_msvc 0.36.1";
            target = { target, features }: (pkgs.rust.lib.toRustTarget stdenv.hostPlatform == "i686-pc-windows-msvc");
          }
          {
            name = "windows_i686_msvc";
            packageId = "windows_i686_msvc 0.36.1";
            target = { target, features }: (pkgs.rust.lib.toRustTarget stdenv.hostPlatform == "i686-uwp-windows-msvc");
          }
          {
            name = "windows_x86_64_gnu";
            packageId = "windows_x86_64_gnu 0.36.1";
            target = { target, features }: (pkgs.rust.lib.toRustTarget stdenv.hostPlatform == "x86_64-pc-windows-gnu");
          }
          {
            name = "windows_x86_64_gnu";
            packageId = "windows_x86_64_gnu 0.36.1";
            target = { target, features }: (pkgs.rust.lib.toRustTarget stdenv.hostPlatform == "x86_64-uwp-windows-gnu");
          }
          {
            name = "windows_x86_64_msvc";
            packageId = "windows_x86_64_msvc 0.36.1";
            target = { target, features }: (pkgs.rust.lib.toRustTarget stdenv.hostPlatform == "x86_64-pc-windows-msvc");
          }
          {
            name = "windows_x86_64_msvc";
            packageId = "windows_x86_64_msvc 0.36.1";
            target = { target, features }: (pkgs.rust.lib.toRustTarget stdenv.hostPlatform == "x86_64-uwp-windows-msvc");
          }
        ];
        features = {
          "AI_MachineLearning" = [ "AI" ];
          "AI_MachineLearning_Preview" = [ "AI_MachineLearning" ];
          "ApplicationModel_Activation" = [ "ApplicationModel" ];
          "ApplicationModel_AppExtensions" = [ "ApplicationModel" ];
          "ApplicationModel_AppService" = [ "ApplicationModel" ];
          "ApplicationModel_Appointments" = [ "ApplicationModel" ];
          "ApplicationModel_Appointments_AppointmentsProvider" = [ "ApplicationModel_Appointments" ];
          "ApplicationModel_Appointments_DataProvider" = [ "ApplicationModel_Appointments" ];
          "ApplicationModel_Background" = [ "ApplicationModel" ];
          "ApplicationModel_Calls" = [ "ApplicationModel" ];
          "ApplicationModel_Calls_Background" = [ "ApplicationModel_Calls" ];
          "ApplicationModel_Calls_Provider" = [ "ApplicationModel_Calls" ];
          "ApplicationModel_Chat" = [ "ApplicationModel" ];
          "ApplicationModel_CommunicationBlocking" = [ "ApplicationModel" ];
          "ApplicationModel_Contacts" = [ "ApplicationModel" ];
          "ApplicationModel_Contacts_DataProvider" = [ "ApplicationModel_Contacts" ];
          "ApplicationModel_Contacts_Provider" = [ "ApplicationModel_Contacts" ];
          "ApplicationModel_ConversationalAgent" = [ "ApplicationModel" ];
          "ApplicationModel_Core" = [ "ApplicationModel" ];
          "ApplicationModel_DataTransfer" = [ "ApplicationModel" ];
          "ApplicationModel_DataTransfer_DragDrop" = [ "ApplicationModel_DataTransfer" ];
          "ApplicationModel_DataTransfer_DragDrop_Core" = [ "ApplicationModel_DataTransfer_DragDrop" ];
          "ApplicationModel_DataTransfer_ShareTarget" = [ "ApplicationModel_DataTransfer" ];
          "ApplicationModel_Email" = [ "ApplicationModel" ];
          "ApplicationModel_Email_DataProvider" = [ "ApplicationModel_Email" ];
          "ApplicationModel_ExtendedExecution" = [ "ApplicationModel" ];
          "ApplicationModel_ExtendedExecution_Foreground" = [ "ApplicationModel_ExtendedExecution" ];
          "ApplicationModel_Holographic" = [ "ApplicationModel" ];
          "ApplicationModel_LockScreen" = [ "ApplicationModel" ];
          "ApplicationModel_Payments" = [ "ApplicationModel" ];
          "ApplicationModel_Payments_Provider" = [ "ApplicationModel_Payments" ];
          "ApplicationModel_Preview" = [ "ApplicationModel" ];
          "ApplicationModel_Preview_Holographic" = [ "ApplicationModel_Preview" ];
          "ApplicationModel_Preview_InkWorkspace" = [ "ApplicationModel_Preview" ];
          "ApplicationModel_Preview_Notes" = [ "ApplicationModel_Preview" ];
          "ApplicationModel_Resources" = [ "ApplicationModel" ];
          "ApplicationModel_Resources_Core" = [ "ApplicationModel_Resources" ];
          "ApplicationModel_Resources_Management" = [ "ApplicationModel_Resources" ];
          "ApplicationModel_Search" = [ "ApplicationModel" ];
          "ApplicationModel_Search_Core" = [ "ApplicationModel_Search" ];
          "ApplicationModel_SocialInfo" = [ "ApplicationModel" ];
          "ApplicationModel_SocialInfo_Provider" = [ "ApplicationModel_SocialInfo" ];
          "ApplicationModel_Store" = [ "ApplicationModel" ];
          "ApplicationModel_Store_LicenseManagement" = [ "ApplicationModel_Store" ];
          "ApplicationModel_Store_Preview" = [ "ApplicationModel_Store" ];
          "ApplicationModel_Store_Preview_InstallControl" = [ "ApplicationModel_Store_Preview" ];
          "ApplicationModel_UserActivities" = [ "ApplicationModel" ];
          "ApplicationModel_UserActivities_Core" = [ "ApplicationModel_UserActivities" ];
          "ApplicationModel_UserDataAccounts" = [ "ApplicationModel" ];
          "ApplicationModel_UserDataAccounts_Provider" = [ "ApplicationModel_UserDataAccounts" ];
          "ApplicationModel_UserDataAccounts_SystemAccess" = [ "ApplicationModel_UserDataAccounts" ];
          "ApplicationModel_UserDataTasks" = [ "ApplicationModel" ];
          "ApplicationModel_UserDataTasks_DataProvider" = [ "ApplicationModel_UserDataTasks" ];
          "ApplicationModel_VoiceCommands" = [ "ApplicationModel" ];
          "ApplicationModel_Wallet" = [ "ApplicationModel" ];
          "ApplicationModel_Wallet_System" = [ "ApplicationModel_Wallet" ];
          "Data_Html" = [ "Data" ];
          "Data_Json" = [ "Data" ];
          "Data_Pdf" = [ "Data" ];
          "Data_Text" = [ "Data" ];
          "Data_Xml" = [ "Data" ];
          "Data_Xml_Dom" = [ "Data_Xml" ];
          "Data_Xml_Xsl" = [ "Data_Xml" ];
          "Devices_Adc" = [ "Devices" ];
          "Devices_Adc_Provider" = [ "Devices_Adc" ];
          "Devices_AllJoyn" = [ "Devices" ];
          "Devices_Background" = [ "Devices" ];
          "Devices_Bluetooth" = [ "Devices" ];
          "Devices_Bluetooth_Advertisement" = [ "Devices_Bluetooth" ];
          "Devices_Bluetooth_Background" = [ "Devices_Bluetooth" ];
          "Devices_Bluetooth_GenericAttributeProfile" = [ "Devices_Bluetooth" ];
          "Devices_Bluetooth_Rfcomm" = [ "Devices_Bluetooth" ];
          "Devices_Custom" = [ "Devices" ];
          "Devices_Display" = [ "Devices" ];
          "Devices_Display_Core" = [ "Devices_Display" ];
          "Devices_Enumeration" = [ "Devices" ];
          "Devices_Enumeration_Pnp" = [ "Devices_Enumeration" ];
          "Devices_Geolocation" = [ "Devices" ];
          "Devices_Geolocation_Geofencing" = [ "Devices_Geolocation" ];
          "Devices_Gpio" = [ "Devices" ];
          "Devices_Gpio_Provider" = [ "Devices_Gpio" ];
          "Devices_Haptics" = [ "Devices" ];
          "Devices_HumanInterfaceDevice" = [ "Devices" ];
          "Devices_I2c" = [ "Devices" ];
          "Devices_I2c_Provider" = [ "Devices_I2c" ];
          "Devices_Input" = [ "Devices" ];
          "Devices_Input_Preview" = [ "Devices_Input" ];
          "Devices_Lights" = [ "Devices" ];
          "Devices_Lights_Effects" = [ "Devices_Lights" ];
          "Devices_Midi" = [ "Devices" ];
          "Devices_Perception" = [ "Devices" ];
          "Devices_Perception_Provider" = [ "Devices_Perception" ];
          "Devices_PointOfService" = [ "Devices" ];
          "Devices_PointOfService_Provider" = [ "Devices_PointOfService" ];
          "Devices_Portable" = [ "Devices" ];
          "Devices_Power" = [ "Devices" ];
          "Devices_Printers" = [ "Devices" ];
          "Devices_Printers_Extensions" = [ "Devices_Printers" ];
          "Devices_Pwm" = [ "Devices" ];
          "Devices_Pwm_Provider" = [ "Devices_Pwm" ];
          "Devices_Radios" = [ "Devices" ];
          "Devices_Scanners" = [ "Devices" ];
          "Devices_Sensors" = [ "Devices" ];
          "Devices_Sensors_Custom" = [ "Devices_Sensors" ];
          "Devices_SerialCommunication" = [ "Devices" ];
          "Devices_SmartCards" = [ "Devices" ];
          "Devices_Sms" = [ "Devices" ];
          "Devices_Spi" = [ "Devices" ];
          "Devices_Spi_Provider" = [ "Devices_Spi" ];
          "Devices_Usb" = [ "Devices" ];
          "Devices_WiFi" = [ "Devices" ];
          "Devices_WiFiDirect" = [ "Devices" ];
          "Devices_WiFiDirect_Services" = [ "Devices_WiFiDirect" ];
          "Embedded_DeviceLockdown" = [ "Embedded" ];
          "Foundation_Collections" = [ "Foundation" ];
          "Foundation_Diagnostics" = [ "Foundation" ];
          "Foundation_Metadata" = [ "Foundation" ];
          "Foundation_Numerics" = [ "Foundation" ];
          "Gaming_Input" = [ "Gaming" ];
          "Gaming_Input_Custom" = [ "Gaming_Input" ];
          "Gaming_Input_ForceFeedback" = [ "Gaming_Input" ];
          "Gaming_Input_Preview" = [ "Gaming_Input" ];
          "Gaming_Preview" = [ "Gaming" ];
          "Gaming_Preview_GamesEnumeration" = [ "Gaming_Preview" ];
          "Gaming_UI" = [ "Gaming" ];
          "Gaming_XboxLive" = [ "Gaming" ];
          "Gaming_XboxLive_Storage" = [ "Gaming_XboxLive" ];
          "Globalization_Collation" = [ "Globalization" ];
          "Globalization_DateTimeFormatting" = [ "Globalization" ];
          "Globalization_Fonts" = [ "Globalization" ];
          "Globalization_NumberFormatting" = [ "Globalization" ];
          "Globalization_PhoneNumberFormatting" = [ "Globalization" ];
          "Graphics_Capture" = [ "Graphics" ];
          "Graphics_DirectX" = [ "Graphics" ];
          "Graphics_DirectX_Direct3D11" = [ "Graphics_DirectX" ];
          "Graphics_Display" = [ "Graphics" ];
          "Graphics_Display_Core" = [ "Graphics_Display" ];
          "Graphics_Effects" = [ "Graphics" ];
          "Graphics_Holographic" = [ "Graphics" ];
          "Graphics_Imaging" = [ "Graphics" ];
          "Graphics_Printing" = [ "Graphics" ];
          "Graphics_Printing3D" = [ "Graphics" ];
          "Graphics_Printing_OptionDetails" = [ "Graphics_Printing" ];
          "Graphics_Printing_PrintSupport" = [ "Graphics_Printing" ];
          "Graphics_Printing_PrintTicket" = [ "Graphics_Printing" ];
          "Graphics_Printing_Workflow" = [ "Graphics_Printing" ];
          "Management_Core" = [ "Management" ];
          "Management_Deployment" = [ "Management" ];
          "Management_Deployment_Preview" = [ "Management_Deployment" ];
          "Management_Policies" = [ "Management" ];
          "Management_Update" = [ "Management" ];
          "Management_Workplace" = [ "Management" ];
          "Media_AppBroadcasting" = [ "Media" ];
          "Media_AppRecording" = [ "Media" ];
          "Media_Audio" = [ "Media" ];
          "Media_Capture" = [ "Media" ];
          "Media_Capture_Core" = [ "Media_Capture" ];
          "Media_Capture_Frames" = [ "Media_Capture" ];
          "Media_Casting" = [ "Media" ];
          "Media_ClosedCaptioning" = [ "Media" ];
          "Media_ContentRestrictions" = [ "Media" ];
          "Media_Control" = [ "Media" ];
          "Media_Core" = [ "Media" ];
          "Media_Core_Preview" = [ "Media_Core" ];
          "Media_Devices" = [ "Media" ];
          "Media_Devices_Core" = [ "Media_Devices" ];
          "Media_DialProtocol" = [ "Media" ];
          "Media_Editing" = [ "Media" ];
          "Media_Effects" = [ "Media" ];
          "Media_FaceAnalysis" = [ "Media" ];
          "Media_Import" = [ "Media" ];
          "Media_MediaProperties" = [ "Media" ];
          "Media_Miracast" = [ "Media" ];
          "Media_Ocr" = [ "Media" ];
          "Media_PlayTo" = [ "Media" ];
          "Media_Playback" = [ "Media" ];
          "Media_Playlists" = [ "Media" ];
          "Media_Protection" = [ "Media" ];
          "Media_Protection_PlayReady" = [ "Media_Protection" ];
          "Media_Render" = [ "Media" ];
          "Media_SpeechRecognition" = [ "Media" ];
          "Media_SpeechSynthesis" = [ "Media" ];
          "Media_Streaming" = [ "Media" ];
          "Media_Streaming_Adaptive" = [ "Media_Streaming" ];
          "Media_Transcoding" = [ "Media" ];
          "Networking_BackgroundTransfer" = [ "Networking" ];
          "Networking_Connectivity" = [ "Networking" ];
          "Networking_NetworkOperators" = [ "Networking" ];
          "Networking_Proximity" = [ "Networking" ];
          "Networking_PushNotifications" = [ "Networking" ];
          "Networking_ServiceDiscovery" = [ "Networking" ];
          "Networking_ServiceDiscovery_Dnssd" = [ "Networking_ServiceDiscovery" ];
          "Networking_Sockets" = [ "Networking" ];
          "Networking_Vpn" = [ "Networking" ];
          "Networking_XboxLive" = [ "Networking" ];
          "Perception_Automation" = [ "Perception" ];
          "Perception_Automation_Core" = [ "Perception_Automation" ];
          "Perception_People" = [ "Perception" ];
          "Perception_Spatial" = [ "Perception" ];
          "Perception_Spatial_Preview" = [ "Perception_Spatial" ];
          "Perception_Spatial_Surfaces" = [ "Perception_Spatial" ];
          "Phone_ApplicationModel" = [ "Phone" ];
          "Phone_Devices" = [ "Phone" ];
          "Phone_Devices_Notification" = [ "Phone_Devices" ];
          "Phone_Devices_Power" = [ "Phone_Devices" ];
          "Phone_Management" = [ "Phone" ];
          "Phone_Management_Deployment" = [ "Phone_Management" ];
          "Phone_Media" = [ "Phone" ];
          "Phone_Media_Devices" = [ "Phone_Media" ];
          "Phone_Notification" = [ "Phone" ];
          "Phone_Notification_Management" = [ "Phone_Notification" ];
          "Phone_PersonalInformation" = [ "Phone" ];
          "Phone_PersonalInformation_Provisioning" = [ "Phone_PersonalInformation" ];
          "Phone_Speech" = [ "Phone" ];
          "Phone_Speech_Recognition" = [ "Phone_Speech" ];
          "Phone_StartScreen" = [ "Phone" ];
          "Phone_System" = [ "Phone" ];
          "Phone_System_Power" = [ "Phone_System" ];
          "Phone_System_Profile" = [ "Phone_System" ];
          "Phone_System_UserProfile" = [ "Phone_System" ];
          "Phone_System_UserProfile_GameServices" = [ "Phone_System_UserProfile" ];
          "Phone_System_UserProfile_GameServices_Core" = [ "Phone_System_UserProfile_GameServices" ];
          "Phone_UI" = [ "Phone" ];
          "Phone_UI_Input" = [ "Phone_UI" ];
          "Security_Authentication" = [ "Security" ];
          "Security_Authentication_Identity" = [ "Security_Authentication" ];
          "Security_Authentication_Identity_Core" = [ "Security_Authentication_Identity" ];
          "Security_Authentication_Identity_Provider" = [ "Security_Authentication_Identity" ];
          "Security_Authentication_OnlineId" = [ "Security_Authentication" ];
          "Security_Authentication_Web" = [ "Security_Authentication" ];
          "Security_Authentication_Web_Core" = [ "Security_Authentication_Web" ];
          "Security_Authentication_Web_Provider" = [ "Security_Authentication_Web" ];
          "Security_Authorization" = [ "Security" ];
          "Security_Authorization_AppCapabilityAccess" = [ "Security_Authorization" ];
          "Security_Credentials" = [ "Security" ];
          "Security_Credentials_UI" = [ "Security_Credentials" ];
          "Security_Cryptography" = [ "Security" ];
          "Security_Cryptography_Certificates" = [ "Security_Cryptography" ];
          "Security_Cryptography_Core" = [ "Security_Cryptography" ];
          "Security_Cryptography_DataProtection" = [ "Security_Cryptography" ];
          "Security_DataProtection" = [ "Security" ];
          "Security_EnterpriseData" = [ "Security" ];
          "Security_ExchangeActiveSyncProvisioning" = [ "Security" ];
          "Security_Isolation" = [ "Security" ];
          "Services_Cortana" = [ "Services" ];
          "Services_Maps" = [ "Services" ];
          "Services_Maps_Guidance" = [ "Services_Maps" ];
          "Services_Maps_LocalSearch" = [ "Services_Maps" ];
          "Services_Maps_OfflineMaps" = [ "Services_Maps" ];
          "Services_Store" = [ "Services" ];
          "Services_TargetedContent" = [ "Services" ];
          "Storage_AccessCache" = [ "Storage" ];
          "Storage_BulkAccess" = [ "Storage" ];
          "Storage_Compression" = [ "Storage" ];
          "Storage_FileProperties" = [ "Storage" ];
          "Storage_Pickers" = [ "Storage" ];
          "Storage_Pickers_Provider" = [ "Storage_Pickers" ];
          "Storage_Provider" = [ "Storage" ];
          "Storage_Search" = [ "Storage" ];
          "Storage_Streams" = [ "Storage" ];
          "System_Diagnostics" = [ "System" ];
          "System_Diagnostics_DevicePortal" = [ "System_Diagnostics" ];
          "System_Diagnostics_Telemetry" = [ "System_Diagnostics" ];
          "System_Diagnostics_TraceReporting" = [ "System_Diagnostics" ];
          "System_Display" = [ "System" ];
          "System_Implementation" = [ "System" ];
          "System_Implementation_FileExplorer" = [ "System_Implementation" ];
          "System_Inventory" = [ "System" ];
          "System_Power" = [ "System" ];
          "System_Power_Diagnostics" = [ "System_Power" ];
          "System_Preview" = [ "System" ];
          "System_Profile" = [ "System" ];
          "System_Profile_SystemManufacturers" = [ "System_Profile" ];
          "System_RemoteDesktop" = [ "System" ];
          "System_RemoteDesktop_Input" = [ "System_RemoteDesktop" ];
          "System_RemoteSystems" = [ "System" ];
          "System_Threading" = [ "System" ];
          "System_Threading_Core" = [ "System_Threading" ];
          "System_Update" = [ "System" ];
          "System_UserProfile" = [ "System" ];
          "UI_Accessibility" = [ "UI" ];
          "UI_ApplicationSettings" = [ "UI" ];
          "UI_Composition" = [ "UI" ];
          "UI_Composition_Core" = [ "UI_Composition" ];
          "UI_Composition_Desktop" = [ "UI_Composition" ];
          "UI_Composition_Diagnostics" = [ "UI_Composition" ];
          "UI_Composition_Effects" = [ "UI_Composition" ];
          "UI_Composition_Interactions" = [ "UI_Composition" ];
          "UI_Composition_Scenes" = [ "UI_Composition" ];
          "UI_Core" = [ "UI" ];
          "UI_Core_AnimationMetrics" = [ "UI_Core" ];
          "UI_Core_Preview" = [ "UI_Core" ];
          "UI_Input" = [ "UI" ];
          "UI_Input_Core" = [ "UI_Input" ];
          "UI_Input_Inking" = [ "UI_Input" ];
          "UI_Input_Inking_Analysis" = [ "UI_Input_Inking" ];
          "UI_Input_Inking_Core" = [ "UI_Input_Inking" ];
          "UI_Input_Inking_Preview" = [ "UI_Input_Inking" ];
          "UI_Input_Preview" = [ "UI_Input" ];
          "UI_Input_Preview_Injection" = [ "UI_Input_Preview" ];
          "UI_Input_Spatial" = [ "UI_Input" ];
          "UI_Notifications" = [ "UI" ];
          "UI_Notifications_Management" = [ "UI_Notifications" ];
          "UI_Popups" = [ "UI" ];
          "UI_Shell" = [ "UI" ];
          "UI_StartScreen" = [ "UI" ];
          "UI_Text" = [ "UI" ];
          "UI_Text_Core" = [ "UI_Text" ];
          "UI_UIAutomation" = [ "UI" ];
          "UI_UIAutomation_Core" = [ "UI_UIAutomation" ];
          "UI_ViewManagement" = [ "UI" ];
          "UI_ViewManagement_Core" = [ "UI_ViewManagement" ];
          "UI_WebUI" = [ "UI" ];
          "UI_WebUI_Core" = [ "UI_WebUI" ];
          "UI_WindowManagement" = [ "UI" ];
          "UI_WindowManagement_Preview" = [ "UI_WindowManagement" ];
          "UI_Xaml" = [ "UI" ];
          "UI_Xaml_Automation" = [ "UI_Xaml" ];
          "UI_Xaml_Automation_Peers" = [ "UI_Xaml_Automation" ];
          "UI_Xaml_Automation_Provider" = [ "UI_Xaml_Automation" ];
          "UI_Xaml_Automation_Text" = [ "UI_Xaml_Automation" ];
          "UI_Xaml_Controls" = [ "UI_Xaml" ];
          "UI_Xaml_Controls_Maps" = [ "UI_Xaml_Controls" ];
          "UI_Xaml_Controls_Primitives" = [ "UI_Xaml_Controls" ];
          "UI_Xaml_Core" = [ "UI_Xaml" ];
          "UI_Xaml_Core_Direct" = [ "UI_Xaml_Core" ];
          "UI_Xaml_Data" = [ "UI_Xaml" ];
          "UI_Xaml_Documents" = [ "UI_Xaml" ];
          "UI_Xaml_Hosting" = [ "UI_Xaml" ];
          "UI_Xaml_Input" = [ "UI_Xaml" ];
          "UI_Xaml_Interop" = [ "UI_Xaml" ];
          "UI_Xaml_Markup" = [ "UI_Xaml" ];
          "UI_Xaml_Media" = [ "UI_Xaml" ];
          "UI_Xaml_Media_Animation" = [ "UI_Xaml_Media" ];
          "UI_Xaml_Media_Imaging" = [ "UI_Xaml_Media" ];
          "UI_Xaml_Media_Media3D" = [ "UI_Xaml_Media" ];
          "UI_Xaml_Navigation" = [ "UI_Xaml" ];
          "UI_Xaml_Printing" = [ "UI_Xaml" ];
          "UI_Xaml_Resources" = [ "UI_Xaml" ];
          "UI_Xaml_Shapes" = [ "UI_Xaml" ];
          "Web_AtomPub" = [ "Web" ];
          "Web_Http" = [ "Web" ];
          "Web_Http_Diagnostics" = [ "Web_Http" ];
          "Web_Http_Filters" = [ "Web_Http" ];
          "Web_Http_Headers" = [ "Web_Http" ];
          "Web_Syndication" = [ "Web" ];
          "Web_UI" = [ "Web" ];
          "Web_UI_Interop" = [ "Web_UI" ];
          "Win32_AI" = [ "Win32" ];
          "Win32_AI_MachineLearning" = [ "Win32_AI" ];
          "Win32_AI_MachineLearning_DirectML" = [ "Win32_AI_MachineLearning" ];
          "Win32_AI_MachineLearning_WinML" = [ "Win32_AI_MachineLearning" ];
          "Win32_Data" = [ "Win32" ];
          "Win32_Data_HtmlHelp" = [ "Win32_Data" ];
          "Win32_Data_RightsManagement" = [ "Win32_Data" ];
          "Win32_Data_Xml" = [ "Win32_Data" ];
          "Win32_Data_Xml_MsXml" = [ "Win32_Data_Xml" ];
          "Win32_Data_Xml_XmlLite" = [ "Win32_Data_Xml" ];
          "Win32_Devices" = [ "Win32" ];
          "Win32_Devices_AllJoyn" = [ "Win32_Devices" ];
          "Win32_Devices_BiometricFramework" = [ "Win32_Devices" ];
          "Win32_Devices_Bluetooth" = [ "Win32_Devices" ];
          "Win32_Devices_Communication" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceAccess" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceAndDriverInstallation" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceQuery" = [ "Win32_Devices" ];
          "Win32_Devices_Display" = [ "Win32_Devices" ];
          "Win32_Devices_Enumeration" = [ "Win32_Devices" ];
          "Win32_Devices_Enumeration_Pnp" = [ "Win32_Devices_Enumeration" ];
          "Win32_Devices_Fax" = [ "Win32_Devices" ];
          "Win32_Devices_FunctionDiscovery" = [ "Win32_Devices" ];
          "Win32_Devices_Geolocation" = [ "Win32_Devices" ];
          "Win32_Devices_HumanInterfaceDevice" = [ "Win32_Devices" ];
          "Win32_Devices_ImageAcquisition" = [ "Win32_Devices" ];
          "Win32_Devices_PortableDevices" = [ "Win32_Devices" ];
          "Win32_Devices_Properties" = [ "Win32_Devices" ];
          "Win32_Devices_Pwm" = [ "Win32_Devices" ];
          "Win32_Devices_Sensors" = [ "Win32_Devices" ];
          "Win32_Devices_SerialCommunication" = [ "Win32_Devices" ];
          "Win32_Devices_Tapi" = [ "Win32_Devices" ];
          "Win32_Devices_Usb" = [ "Win32_Devices" ];
          "Win32_Devices_WebServicesOnDevices" = [ "Win32_Devices" ];
          "Win32_Foundation" = [ "Win32" ];
          "Win32_Gaming" = [ "Win32" ];
          "Win32_Globalization" = [ "Win32" ];
          "Win32_Graphics" = [ "Win32" ];
          "Win32_Graphics_CompositionSwapchain" = [ "Win32_Graphics" ];
          "Win32_Graphics_DXCore" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct2D" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct2D_Common" = [ "Win32_Graphics_Direct2D" ];
          "Win32_Graphics_Direct3D" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct3D10" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct3D11" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct3D11on12" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct3D12" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct3D9" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct3D9on12" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct3D_Dxc" = [ "Win32_Graphics_Direct3D" ];
          "Win32_Graphics_Direct3D_Fxc" = [ "Win32_Graphics_Direct3D" ];
          "Win32_Graphics_DirectComposition" = [ "Win32_Graphics" ];
          "Win32_Graphics_DirectDraw" = [ "Win32_Graphics" ];
          "Win32_Graphics_DirectManipulation" = [ "Win32_Graphics" ];
          "Win32_Graphics_DirectWrite" = [ "Win32_Graphics" ];
          "Win32_Graphics_Dwm" = [ "Win32_Graphics" ];
          "Win32_Graphics_Dxgi" = [ "Win32_Graphics" ];
          "Win32_Graphics_Dxgi_Common" = [ "Win32_Graphics_Dxgi" ];
          "Win32_Graphics_Gdi" = [ "Win32_Graphics" ];
          "Win32_Graphics_Hlsl" = [ "Win32_Graphics" ];
          "Win32_Graphics_Imaging" = [ "Win32_Graphics" ];
          "Win32_Graphics_Imaging_D2D" = [ "Win32_Graphics_Imaging" ];
          "Win32_Graphics_OpenGL" = [ "Win32_Graphics" ];
          "Win32_Graphics_Printing" = [ "Win32_Graphics" ];
          "Win32_Graphics_Printing_PrintTicket" = [ "Win32_Graphics_Printing" ];
          "Win32_Management" = [ "Win32" ];
          "Win32_Management_MobileDeviceManagementRegistration" = [ "Win32_Management" ];
          "Win32_Media" = [ "Win32" ];
          "Win32_Media_Audio" = [ "Win32_Media" ];
          "Win32_Media_Audio_Apo" = [ "Win32_Media_Audio" ];
          "Win32_Media_Audio_DirectMusic" = [ "Win32_Media_Audio" ];
          "Win32_Media_Audio_DirectSound" = [ "Win32_Media_Audio" ];
          "Win32_Media_Audio_Endpoints" = [ "Win32_Media_Audio" ];
          "Win32_Media_Audio_XAudio2" = [ "Win32_Media_Audio" ];
          "Win32_Media_DeviceManager" = [ "Win32_Media" ];
          "Win32_Media_DirectShow" = [ "Win32_Media" ];
          "Win32_Media_DirectShow_Xml" = [ "Win32_Media_DirectShow" ];
          "Win32_Media_DxMediaObjects" = [ "Win32_Media" ];
          "Win32_Media_KernelStreaming" = [ "Win32_Media" ];
          "Win32_Media_LibrarySharingServices" = [ "Win32_Media" ];
          "Win32_Media_MediaFoundation" = [ "Win32_Media" ];
          "Win32_Media_MediaPlayer" = [ "Win32_Media" ];
          "Win32_Media_Multimedia" = [ "Win32_Media" ];
          "Win32_Media_PictureAcquisition" = [ "Win32_Media" ];
          "Win32_Media_Speech" = [ "Win32_Media" ];
          "Win32_Media_Streaming" = [ "Win32_Media" ];
          "Win32_Media_WindowsMediaFormat" = [ "Win32_Media" ];
          "Win32_NetworkManagement" = [ "Win32" ];
          "Win32_NetworkManagement_Dhcp" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Dns" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_InternetConnectionWizard" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_IpHelper" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_MobileBroadband" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Multicast" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Ndis" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetBios" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetManagement" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetShell" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetworkDiagnosticsFramework" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetworkPolicyServer" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_P2P" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_QoS" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Rras" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Snmp" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WNet" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WebDav" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WiFi" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsConnectNow" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsConnectionManager" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsFilteringPlatform" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsFirewall" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsNetworkVirtualization" = [ "Win32_NetworkManagement" ];
          "Win32_Networking" = [ "Win32" ];
          "Win32_Networking_ActiveDirectory" = [ "Win32_Networking" ];
          "Win32_Networking_BackgroundIntelligentTransferService" = [ "Win32_Networking" ];
          "Win32_Networking_Clustering" = [ "Win32_Networking" ];
          "Win32_Networking_HttpServer" = [ "Win32_Networking" ];
          "Win32_Networking_Ldap" = [ "Win32_Networking" ];
          "Win32_Networking_NetworkListManager" = [ "Win32_Networking" ];
          "Win32_Networking_RemoteDifferentialCompression" = [ "Win32_Networking" ];
          "Win32_Networking_WebSocket" = [ "Win32_Networking" ];
          "Win32_Networking_WinHttp" = [ "Win32_Networking" ];
          "Win32_Networking_WinInet" = [ "Win32_Networking" ];
          "Win32_Networking_WinSock" = [ "Win32_Networking" ];
          "Win32_Networking_WindowsWebServices" = [ "Win32_Networking" ];
          "Win32_Security" = [ "Win32" ];
          "Win32_Security_AppLocker" = [ "Win32_Security" ];
          "Win32_Security_Authentication" = [ "Win32_Security" ];
          "Win32_Security_Authentication_Identity" = [ "Win32_Security_Authentication" ];
          "Win32_Security_Authentication_Identity_Provider" = [ "Win32_Security_Authentication_Identity" ];
          "Win32_Security_Authorization" = [ "Win32_Security" ];
          "Win32_Security_Authorization_UI" = [ "Win32_Security_Authorization" ];
          "Win32_Security_ConfigurationSnapin" = [ "Win32_Security" ];
          "Win32_Security_Credentials" = [ "Win32_Security" ];
          "Win32_Security_Cryptography" = [ "Win32_Security" ];
          "Win32_Security_Cryptography_Catalog" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_Certificates" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_Sip" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_UI" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_DiagnosticDataQuery" = [ "Win32_Security" ];
          "Win32_Security_DirectoryServices" = [ "Win32_Security" ];
          "Win32_Security_EnterpriseData" = [ "Win32_Security" ];
          "Win32_Security_ExtensibleAuthenticationProtocol" = [ "Win32_Security" ];
          "Win32_Security_Isolation" = [ "Win32_Security" ];
          "Win32_Security_LicenseProtection" = [ "Win32_Security" ];
          "Win32_Security_NetworkAccessProtection" = [ "Win32_Security" ];
          "Win32_Security_Tpm" = [ "Win32_Security" ];
          "Win32_Security_WinTrust" = [ "Win32_Security" ];
          "Win32_Security_WinWlx" = [ "Win32_Security" ];
          "Win32_Storage" = [ "Win32" ];
          "Win32_Storage_Cabinets" = [ "Win32_Storage" ];
          "Win32_Storage_CloudFilters" = [ "Win32_Storage" ];
          "Win32_Storage_Compression" = [ "Win32_Storage" ];
          "Win32_Storage_DataDeduplication" = [ "Win32_Storage" ];
          "Win32_Storage_DistributedFileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_EnhancedStorage" = [ "Win32_Storage" ];
          "Win32_Storage_FileHistory" = [ "Win32_Storage" ];
          "Win32_Storage_FileServerResourceManager" = [ "Win32_Storage" ];
          "Win32_Storage_FileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_Imapi" = [ "Win32_Storage" ];
          "Win32_Storage_IndexServer" = [ "Win32_Storage" ];
          "Win32_Storage_InstallableFileSystems" = [ "Win32_Storage" ];
          "Win32_Storage_IscsiDisc" = [ "Win32_Storage" ];
          "Win32_Storage_Jet" = [ "Win32_Storage" ];
          "Win32_Storage_OfflineFiles" = [ "Win32_Storage" ];
          "Win32_Storage_OperationRecorder" = [ "Win32_Storage" ];
          "Win32_Storage_Packaging" = [ "Win32_Storage" ];
          "Win32_Storage_Packaging_Appx" = [ "Win32_Storage_Packaging" ];
          "Win32_Storage_Packaging_Opc" = [ "Win32_Storage_Packaging" ];
          "Win32_Storage_ProjectedFileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_StructuredStorage" = [ "Win32_Storage" ];
          "Win32_Storage_Vhd" = [ "Win32_Storage" ];
          "Win32_Storage_VirtualDiskService" = [ "Win32_Storage" ];
          "Win32_Storage_Vss" = [ "Win32_Storage" ];
          "Win32_Storage_Xps" = [ "Win32_Storage" ];
          "Win32_Storage_Xps_Printing" = [ "Win32_Storage_Xps" ];
          "Win32_System" = [ "Win32" ];
          "Win32_System_AddressBook" = [ "Win32_System" ];
          "Win32_System_Antimalware" = [ "Win32_System" ];
          "Win32_System_ApplicationInstallationAndServicing" = [ "Win32_System" ];
          "Win32_System_ApplicationVerifier" = [ "Win32_System" ];
          "Win32_System_AssessmentTool" = [ "Win32_System" ];
          "Win32_System_Com" = [ "Win32_System" ];
          "Win32_System_Com_CallObj" = [ "Win32_System_Com" ];
          "Win32_System_Com_ChannelCredentials" = [ "Win32_System_Com" ];
          "Win32_System_Com_Events" = [ "Win32_System_Com" ];
          "Win32_System_Com_Marshal" = [ "Win32_System_Com" ];
          "Win32_System_Com_StructuredStorage" = [ "Win32_System_Com" ];
          "Win32_System_Com_UI" = [ "Win32_System_Com" ];
          "Win32_System_Com_Urlmon" = [ "Win32_System_Com" ];
          "Win32_System_ComponentServices" = [ "Win32_System" ];
          "Win32_System_Console" = [ "Win32_System" ];
          "Win32_System_Contacts" = [ "Win32_System" ];
          "Win32_System_CorrelationVector" = [ "Win32_System" ];
          "Win32_System_DataExchange" = [ "Win32_System" ];
          "Win32_System_DeploymentServices" = [ "Win32_System" ];
          "Win32_System_DesktopSharing" = [ "Win32_System" ];
          "Win32_System_DeveloperLicensing" = [ "Win32_System" ];
          "Win32_System_Diagnostics" = [ "Win32_System" ];
          "Win32_System_Diagnostics_Ceip" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_Debug" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_Debug_WebApp" = [ "Win32_System_Diagnostics_Debug" ];
          "Win32_System_Diagnostics_Etw" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ProcessSnapshotting" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ToolHelp" = [ "Win32_System_Diagnostics" ];
          "Win32_System_DistributedTransactionCoordinator" = [ "Win32_System" ];
          "Win32_System_Environment" = [ "Win32_System" ];
          "Win32_System_ErrorReporting" = [ "Win32_System" ];
          "Win32_System_EventCollector" = [ "Win32_System" ];
          "Win32_System_EventLog" = [ "Win32_System" ];
          "Win32_System_EventNotificationService" = [ "Win32_System" ];
          "Win32_System_GroupPolicy" = [ "Win32_System" ];
          "Win32_System_HostCompute" = [ "Win32_System" ];
          "Win32_System_HostComputeNetwork" = [ "Win32_System" ];
          "Win32_System_HostComputeSystem" = [ "Win32_System" ];
          "Win32_System_Hypervisor" = [ "Win32_System" ];
          "Win32_System_IO" = [ "Win32_System" ];
          "Win32_System_Iis" = [ "Win32_System" ];
          "Win32_System_Ioctl" = [ "Win32_System" ];
          "Win32_System_JobObjects" = [ "Win32_System" ];
          "Win32_System_Js" = [ "Win32_System" ];
          "Win32_System_Kernel" = [ "Win32_System" ];
          "Win32_System_LibraryLoader" = [ "Win32_System" ];
          "Win32_System_Mailslots" = [ "Win32_System" ];
          "Win32_System_Mapi" = [ "Win32_System" ];
          "Win32_System_Memory" = [ "Win32_System" ];
          "Win32_System_Memory_NonVolatile" = [ "Win32_System_Memory" ];
          "Win32_System_MessageQueuing" = [ "Win32_System" ];
          "Win32_System_MixedReality" = [ "Win32_System" ];
          "Win32_System_Mmc" = [ "Win32_System" ];
          "Win32_System_Ole" = [ "Win32_System" ];
          "Win32_System_ParentalControls" = [ "Win32_System" ];
          "Win32_System_PasswordManagement" = [ "Win32_System" ];
          "Win32_System_Performance" = [ "Win32_System" ];
          "Win32_System_Performance_HardwareCounterProfiling" = [ "Win32_System_Performance" ];
          "Win32_System_Pipes" = [ "Win32_System" ];
          "Win32_System_Power" = [ "Win32_System" ];
          "Win32_System_ProcessStatus" = [ "Win32_System" ];
          "Win32_System_RealTimeCommunications" = [ "Win32_System" ];
          "Win32_System_Recovery" = [ "Win32_System" ];
          "Win32_System_Registry" = [ "Win32_System" ];
          "Win32_System_RemoteAssistance" = [ "Win32_System" ];
          "Win32_System_RemoteDesktop" = [ "Win32_System" ];
          "Win32_System_RemoteManagement" = [ "Win32_System" ];
          "Win32_System_RestartManager" = [ "Win32_System" ];
          "Win32_System_Restore" = [ "Win32_System" ];
          "Win32_System_Rpc" = [ "Win32_System" ];
          "Win32_System_Search" = [ "Win32_System" ];
          "Win32_System_Search_Common" = [ "Win32_System_Search" ];
          "Win32_System_SecurityCenter" = [ "Win32_System" ];
          "Win32_System_ServerBackup" = [ "Win32_System" ];
          "Win32_System_Services" = [ "Win32_System" ];
          "Win32_System_SettingsManagementInfrastructure" = [ "Win32_System" ];
          "Win32_System_SetupAndMigration" = [ "Win32_System" ];
          "Win32_System_Shutdown" = [ "Win32_System" ];
          "Win32_System_SideShow" = [ "Win32_System" ];
          "Win32_System_StationsAndDesktops" = [ "Win32_System" ];
          "Win32_System_SubsystemForLinux" = [ "Win32_System" ];
          "Win32_System_SystemInformation" = [ "Win32_System" ];
          "Win32_System_SystemServices" = [ "Win32_System" ];
          "Win32_System_TaskScheduler" = [ "Win32_System" ];
          "Win32_System_Threading" = [ "Win32_System" ];
          "Win32_System_Time" = [ "Win32_System" ];
          "Win32_System_TpmBaseServices" = [ "Win32_System" ];
          "Win32_System_TransactionServer" = [ "Win32_System" ];
          "Win32_System_UpdateAgent" = [ "Win32_System" ];
          "Win32_System_UpdateAssessment" = [ "Win32_System" ];
          "Win32_System_UserAccessLogging" = [ "Win32_System" ];
          "Win32_System_VirtualDosMachines" = [ "Win32_System" ];
          "Win32_System_WinRT" = [ "Win32_System" ];
          "Win32_System_WinRT_AllJoyn" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Composition" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_CoreInputView" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Direct3D11" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Display" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Graphics" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Graphics_Capture" = [ "Win32_System_WinRT_Graphics" ];
          "Win32_System_WinRT_Graphics_Direct2D" = [ "Win32_System_WinRT_Graphics" ];
          "Win32_System_WinRT_Graphics_Imaging" = [ "Win32_System_WinRT_Graphics" ];
          "Win32_System_WinRT_Holographic" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Isolation" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_ML" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Media" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Pdf" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Printing" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Shell" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Storage" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Xaml" = [ "Win32_System_WinRT" ];
          "Win32_System_WindowsProgramming" = [ "Win32_System" ];
          "Win32_System_WindowsSync" = [ "Win32_System" ];
          "Win32_System_Wmi" = [ "Win32_System" ];
          "Win32_UI" = [ "Win32" ];
          "Win32_UI_Accessibility" = [ "Win32_UI" ];
          "Win32_UI_Animation" = [ "Win32_UI" ];
          "Win32_UI_ColorSystem" = [ "Win32_UI" ];
          "Win32_UI_Controls" = [ "Win32_UI" ];
          "Win32_UI_Controls_Dialogs" = [ "Win32_UI_Controls" ];
          "Win32_UI_Controls_RichEdit" = [ "Win32_UI_Controls" ];
          "Win32_UI_HiDpi" = [ "Win32_UI" ];
          "Win32_UI_Input" = [ "Win32_UI" ];
          "Win32_UI_Input_Ime" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Ink" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_KeyboardAndMouse" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Pointer" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Radial" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Touch" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_XboxController" = [ "Win32_UI_Input" ];
          "Win32_UI_InteractionContext" = [ "Win32_UI" ];
          "Win32_UI_LegacyWindowsEnvironmentFeatures" = [ "Win32_UI" ];
          "Win32_UI_Magnification" = [ "Win32_UI" ];
          "Win32_UI_Notifications" = [ "Win32_UI" ];
          "Win32_UI_Ribbon" = [ "Win32_UI" ];
          "Win32_UI_Shell" = [ "Win32_UI" ];
          "Win32_UI_Shell_Common" = [ "Win32_UI_Shell" ];
          "Win32_UI_Shell_PropertiesSystem" = [ "Win32_UI_Shell" ];
          "Win32_UI_TabletPC" = [ "Win32_UI" ];
          "Win32_UI_TextServices" = [ "Win32_UI" ];
          "Win32_UI_WindowsAndMessaging" = [ "Win32_UI" ];
          "Win32_UI_Wpf" = [ "Win32_UI" ];
          "Win32_UI_Xaml" = [ "Win32_UI" ];
          "Win32_UI_Xaml_Diagnostics" = [ "Win32_UI_Xaml" ];
          "Win32_Web" = [ "Win32" ];
          "Win32_Web_MsHtml" = [ "Win32_Web" ];
          "implement" = [ "windows-implement" ];
          "interface" = [ "windows-interface" ];
          "windows-implement" = [ "dep:windows-implement" ];
          "windows-interface" = [ "dep:windows-interface" ];
        };
        resolvedDefaultFeatures = [ "Win32" "Win32_Foundation" "Win32_Security" "Win32_System" "Win32_System_Diagnostics" "Win32_System_Diagnostics_Debug" "Win32_System_Memory" "Win32_System_SystemInformation" "default" ];
      };
      "windows 0.57.0" = rec {
        crateName = "windows";
        version = "0.57.0";
        edition = "2021";
        sha256 = "0hqid10bqvxa3pbpgvrh2cilf950lxsd9zqfv3rldc73v2s2qd0j";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows-core";
            packageId = "windows-core 0.57.0";
          }
          {
            name = "windows-targets";
            packageId = "windows-targets 0.52.6";
          }
        ];
        features = {
          "AI" = [ "Foundation" ];
          "AI_MachineLearning" = [ "AI" ];
          "ApplicationModel" = [ "Foundation" ];
          "ApplicationModel_Activation" = [ "ApplicationModel" ];
          "ApplicationModel_AppExtensions" = [ "ApplicationModel" ];
          "ApplicationModel_AppService" = [ "ApplicationModel" ];
          "ApplicationModel_Appointments" = [ "ApplicationModel" ];
          "ApplicationModel_Appointments_AppointmentsProvider" = [ "ApplicationModel_Appointments" ];
          "ApplicationModel_Appointments_DataProvider" = [ "ApplicationModel_Appointments" ];
          "ApplicationModel_Background" = [ "ApplicationModel" ];
          "ApplicationModel_Calls" = [ "ApplicationModel" ];
          "ApplicationModel_Calls_Background" = [ "ApplicationModel_Calls" ];
          "ApplicationModel_Calls_Provider" = [ "ApplicationModel_Calls" ];
          "ApplicationModel_Chat" = [ "ApplicationModel" ];
          "ApplicationModel_CommunicationBlocking" = [ "ApplicationModel" ];
          "ApplicationModel_Contacts" = [ "ApplicationModel" ];
          "ApplicationModel_Contacts_DataProvider" = [ "ApplicationModel_Contacts" ];
          "ApplicationModel_Contacts_Provider" = [ "ApplicationModel_Contacts" ];
          "ApplicationModel_ConversationalAgent" = [ "ApplicationModel" ];
          "ApplicationModel_Core" = [ "ApplicationModel" ];
          "ApplicationModel_DataTransfer" = [ "ApplicationModel" ];
          "ApplicationModel_DataTransfer_DragDrop" = [ "ApplicationModel_DataTransfer" ];
          "ApplicationModel_DataTransfer_DragDrop_Core" = [ "ApplicationModel_DataTransfer_DragDrop" ];
          "ApplicationModel_DataTransfer_ShareTarget" = [ "ApplicationModel_DataTransfer" ];
          "ApplicationModel_Email" = [ "ApplicationModel" ];
          "ApplicationModel_Email_DataProvider" = [ "ApplicationModel_Email" ];
          "ApplicationModel_ExtendedExecution" = [ "ApplicationModel" ];
          "ApplicationModel_ExtendedExecution_Foreground" = [ "ApplicationModel_ExtendedExecution" ];
          "ApplicationModel_Holographic" = [ "ApplicationModel" ];
          "ApplicationModel_LockScreen" = [ "ApplicationModel" ];
          "ApplicationModel_Payments" = [ "ApplicationModel" ];
          "ApplicationModel_Payments_Provider" = [ "ApplicationModel_Payments" ];
          "ApplicationModel_Preview" = [ "ApplicationModel" ];
          "ApplicationModel_Preview_Holographic" = [ "ApplicationModel_Preview" ];
          "ApplicationModel_Preview_InkWorkspace" = [ "ApplicationModel_Preview" ];
          "ApplicationModel_Preview_Notes" = [ "ApplicationModel_Preview" ];
          "ApplicationModel_Resources" = [ "ApplicationModel" ];
          "ApplicationModel_Resources_Core" = [ "ApplicationModel_Resources" ];
          "ApplicationModel_Resources_Management" = [ "ApplicationModel_Resources" ];
          "ApplicationModel_Search" = [ "ApplicationModel" ];
          "ApplicationModel_Search_Core" = [ "ApplicationModel_Search" ];
          "ApplicationModel_UserActivities" = [ "ApplicationModel" ];
          "ApplicationModel_UserActivities_Core" = [ "ApplicationModel_UserActivities" ];
          "ApplicationModel_UserDataAccounts" = [ "ApplicationModel" ];
          "ApplicationModel_UserDataAccounts_Provider" = [ "ApplicationModel_UserDataAccounts" ];
          "ApplicationModel_UserDataAccounts_SystemAccess" = [ "ApplicationModel_UserDataAccounts" ];
          "ApplicationModel_UserDataTasks" = [ "ApplicationModel" ];
          "ApplicationModel_UserDataTasks_DataProvider" = [ "ApplicationModel_UserDataTasks" ];
          "ApplicationModel_VoiceCommands" = [ "ApplicationModel" ];
          "ApplicationModel_Wallet" = [ "ApplicationModel" ];
          "ApplicationModel_Wallet_System" = [ "ApplicationModel_Wallet" ];
          "Data" = [ "Foundation" ];
          "Data_Html" = [ "Data" ];
          "Data_Json" = [ "Data" ];
          "Data_Pdf" = [ "Data" ];
          "Data_Text" = [ "Data" ];
          "Data_Xml" = [ "Data" ];
          "Data_Xml_Dom" = [ "Data_Xml" ];
          "Data_Xml_Xsl" = [ "Data_Xml" ];
          "Devices" = [ "Foundation" ];
          "Devices_Adc" = [ "Devices" ];
          "Devices_Adc_Provider" = [ "Devices_Adc" ];
          "Devices_Background" = [ "Devices" ];
          "Devices_Bluetooth" = [ "Devices" ];
          "Devices_Bluetooth_Advertisement" = [ "Devices_Bluetooth" ];
          "Devices_Bluetooth_Background" = [ "Devices_Bluetooth" ];
          "Devices_Bluetooth_GenericAttributeProfile" = [ "Devices_Bluetooth" ];
          "Devices_Bluetooth_Rfcomm" = [ "Devices_Bluetooth" ];
          "Devices_Custom" = [ "Devices" ];
          "Devices_Display" = [ "Devices" ];
          "Devices_Display_Core" = [ "Devices_Display" ];
          "Devices_Enumeration" = [ "Devices" ];
          "Devices_Enumeration_Pnp" = [ "Devices_Enumeration" ];
          "Devices_Geolocation" = [ "Devices" ];
          "Devices_Geolocation_Geofencing" = [ "Devices_Geolocation" ];
          "Devices_Geolocation_Provider" = [ "Devices_Geolocation" ];
          "Devices_Gpio" = [ "Devices" ];
          "Devices_Gpio_Provider" = [ "Devices_Gpio" ];
          "Devices_Haptics" = [ "Devices" ];
          "Devices_HumanInterfaceDevice" = [ "Devices" ];
          "Devices_I2c" = [ "Devices" ];
          "Devices_I2c_Provider" = [ "Devices_I2c" ];
          "Devices_Input" = [ "Devices" ];
          "Devices_Input_Preview" = [ "Devices_Input" ];
          "Devices_Lights" = [ "Devices" ];
          "Devices_Lights_Effects" = [ "Devices_Lights" ];
          "Devices_Midi" = [ "Devices" ];
          "Devices_PointOfService" = [ "Devices" ];
          "Devices_PointOfService_Provider" = [ "Devices_PointOfService" ];
          "Devices_Portable" = [ "Devices" ];
          "Devices_Power" = [ "Devices" ];
          "Devices_Printers" = [ "Devices" ];
          "Devices_Printers_Extensions" = [ "Devices_Printers" ];
          "Devices_Pwm" = [ "Devices" ];
          "Devices_Pwm_Provider" = [ "Devices_Pwm" ];
          "Devices_Radios" = [ "Devices" ];
          "Devices_Scanners" = [ "Devices" ];
          "Devices_Sensors" = [ "Devices" ];
          "Devices_Sensors_Custom" = [ "Devices_Sensors" ];
          "Devices_SerialCommunication" = [ "Devices" ];
          "Devices_SmartCards" = [ "Devices" ];
          "Devices_Sms" = [ "Devices" ];
          "Devices_Spi" = [ "Devices" ];
          "Devices_Spi_Provider" = [ "Devices_Spi" ];
          "Devices_Usb" = [ "Devices" ];
          "Devices_WiFi" = [ "Devices" ];
          "Devices_WiFiDirect" = [ "Devices" ];
          "Devices_WiFiDirect_Services" = [ "Devices_WiFiDirect" ];
          "Embedded" = [ "Foundation" ];
          "Embedded_DeviceLockdown" = [ "Embedded" ];
          "Foundation_Collections" = [ "Foundation" ];
          "Foundation_Diagnostics" = [ "Foundation" ];
          "Foundation_Metadata" = [ "Foundation" ];
          "Foundation_Numerics" = [ "Foundation" ];
          "Gaming" = [ "Foundation" ];
          "Gaming_Input" = [ "Gaming" ];
          "Gaming_Input_Custom" = [ "Gaming_Input" ];
          "Gaming_Input_ForceFeedback" = [ "Gaming_Input" ];
          "Gaming_Input_Preview" = [ "Gaming_Input" ];
          "Gaming_Preview" = [ "Gaming" ];
          "Gaming_Preview_GamesEnumeration" = [ "Gaming_Preview" ];
          "Gaming_UI" = [ "Gaming" ];
          "Gaming_XboxLive" = [ "Gaming" ];
          "Gaming_XboxLive_Storage" = [ "Gaming_XboxLive" ];
          "Globalization" = [ "Foundation" ];
          "Globalization_Collation" = [ "Globalization" ];
          "Globalization_DateTimeFormatting" = [ "Globalization" ];
          "Globalization_Fonts" = [ "Globalization" ];
          "Globalization_NumberFormatting" = [ "Globalization" ];
          "Globalization_PhoneNumberFormatting" = [ "Globalization" ];
          "Graphics" = [ "Foundation" ];
          "Graphics_Capture" = [ "Graphics" ];
          "Graphics_DirectX" = [ "Graphics" ];
          "Graphics_DirectX_Direct3D11" = [ "Graphics_DirectX" ];
          "Graphics_Display" = [ "Graphics" ];
          "Graphics_Display_Core" = [ "Graphics_Display" ];
          "Graphics_Effects" = [ "Graphics" ];
          "Graphics_Holographic" = [ "Graphics" ];
          "Graphics_Imaging" = [ "Graphics" ];
          "Graphics_Printing" = [ "Graphics" ];
          "Graphics_Printing3D" = [ "Graphics" ];
          "Graphics_Printing_OptionDetails" = [ "Graphics_Printing" ];
          "Graphics_Printing_PrintSupport" = [ "Graphics_Printing" ];
          "Graphics_Printing_PrintTicket" = [ "Graphics_Printing" ];
          "Graphics_Printing_Workflow" = [ "Graphics_Printing" ];
          "Management" = [ "Foundation" ];
          "Management_Core" = [ "Management" ];
          "Management_Deployment" = [ "Management" ];
          "Management_Deployment_Preview" = [ "Management_Deployment" ];
          "Management_Policies" = [ "Management" ];
          "Management_Update" = [ "Management" ];
          "Management_Workplace" = [ "Management" ];
          "Media" = [ "Foundation" ];
          "Media_AppBroadcasting" = [ "Media" ];
          "Media_AppRecording" = [ "Media" ];
          "Media_Audio" = [ "Media" ];
          "Media_Capture" = [ "Media" ];
          "Media_Capture_Core" = [ "Media_Capture" ];
          "Media_Capture_Frames" = [ "Media_Capture" ];
          "Media_Casting" = [ "Media" ];
          "Media_ClosedCaptioning" = [ "Media" ];
          "Media_ContentRestrictions" = [ "Media" ];
          "Media_Control" = [ "Media" ];
          "Media_Core" = [ "Media" ];
          "Media_Core_Preview" = [ "Media_Core" ];
          "Media_Devices" = [ "Media" ];
          "Media_Devices_Core" = [ "Media_Devices" ];
          "Media_DialProtocol" = [ "Media" ];
          "Media_Editing" = [ "Media" ];
          "Media_Effects" = [ "Media" ];
          "Media_FaceAnalysis" = [ "Media" ];
          "Media_Import" = [ "Media" ];
          "Media_MediaProperties" = [ "Media" ];
          "Media_Miracast" = [ "Media" ];
          "Media_Ocr" = [ "Media" ];
          "Media_PlayTo" = [ "Media" ];
          "Media_Playback" = [ "Media" ];
          "Media_Playlists" = [ "Media" ];
          "Media_Protection" = [ "Media" ];
          "Media_Protection_PlayReady" = [ "Media_Protection" ];
          "Media_Render" = [ "Media" ];
          "Media_SpeechRecognition" = [ "Media" ];
          "Media_SpeechSynthesis" = [ "Media" ];
          "Media_Streaming" = [ "Media" ];
          "Media_Streaming_Adaptive" = [ "Media_Streaming" ];
          "Media_Transcoding" = [ "Media" ];
          "Networking" = [ "Foundation" ];
          "Networking_BackgroundTransfer" = [ "Networking" ];
          "Networking_Connectivity" = [ "Networking" ];
          "Networking_NetworkOperators" = [ "Networking" ];
          "Networking_Proximity" = [ "Networking" ];
          "Networking_PushNotifications" = [ "Networking" ];
          "Networking_ServiceDiscovery" = [ "Networking" ];
          "Networking_ServiceDiscovery_Dnssd" = [ "Networking_ServiceDiscovery" ];
          "Networking_Sockets" = [ "Networking" ];
          "Networking_Vpn" = [ "Networking" ];
          "Networking_XboxLive" = [ "Networking" ];
          "Perception" = [ "Foundation" ];
          "Perception_Automation" = [ "Perception" ];
          "Perception_Automation_Core" = [ "Perception_Automation" ];
          "Perception_People" = [ "Perception" ];
          "Perception_Spatial" = [ "Perception" ];
          "Perception_Spatial_Preview" = [ "Perception_Spatial" ];
          "Perception_Spatial_Surfaces" = [ "Perception_Spatial" ];
          "Phone" = [ "Foundation" ];
          "Phone_ApplicationModel" = [ "Phone" ];
          "Phone_Devices" = [ "Phone" ];
          "Phone_Devices_Notification" = [ "Phone_Devices" ];
          "Phone_Devices_Power" = [ "Phone_Devices" ];
          "Phone_Management" = [ "Phone" ];
          "Phone_Management_Deployment" = [ "Phone_Management" ];
          "Phone_Media" = [ "Phone" ];
          "Phone_Media_Devices" = [ "Phone_Media" ];
          "Phone_Notification" = [ "Phone" ];
          "Phone_Notification_Management" = [ "Phone_Notification" ];
          "Phone_PersonalInformation" = [ "Phone" ];
          "Phone_PersonalInformation_Provisioning" = [ "Phone_PersonalInformation" ];
          "Phone_Speech" = [ "Phone" ];
          "Phone_Speech_Recognition" = [ "Phone_Speech" ];
          "Phone_StartScreen" = [ "Phone" ];
          "Phone_System" = [ "Phone" ];
          "Phone_System_Power" = [ "Phone_System" ];
          "Phone_System_Profile" = [ "Phone_System" ];
          "Phone_System_UserProfile" = [ "Phone_System" ];
          "Phone_System_UserProfile_GameServices" = [ "Phone_System_UserProfile" ];
          "Phone_System_UserProfile_GameServices_Core" = [ "Phone_System_UserProfile_GameServices" ];
          "Phone_UI" = [ "Phone" ];
          "Phone_UI_Input" = [ "Phone_UI" ];
          "Security" = [ "Foundation" ];
          "Security_Authentication" = [ "Security" ];
          "Security_Authentication_Identity" = [ "Security_Authentication" ];
          "Security_Authentication_Identity_Core" = [ "Security_Authentication_Identity" ];
          "Security_Authentication_OnlineId" = [ "Security_Authentication" ];
          "Security_Authentication_Web" = [ "Security_Authentication" ];
          "Security_Authentication_Web_Core" = [ "Security_Authentication_Web" ];
          "Security_Authentication_Web_Provider" = [ "Security_Authentication_Web" ];
          "Security_Authorization" = [ "Security" ];
          "Security_Authorization_AppCapabilityAccess" = [ "Security_Authorization" ];
          "Security_Credentials" = [ "Security" ];
          "Security_Credentials_UI" = [ "Security_Credentials" ];
          "Security_Cryptography" = [ "Security" ];
          "Security_Cryptography_Certificates" = [ "Security_Cryptography" ];
          "Security_Cryptography_Core" = [ "Security_Cryptography" ];
          "Security_Cryptography_DataProtection" = [ "Security_Cryptography" ];
          "Security_DataProtection" = [ "Security" ];
          "Security_EnterpriseData" = [ "Security" ];
          "Security_ExchangeActiveSyncProvisioning" = [ "Security" ];
          "Security_Isolation" = [ "Security" ];
          "Services" = [ "Foundation" ];
          "Services_Maps" = [ "Services" ];
          "Services_Maps_Guidance" = [ "Services_Maps" ];
          "Services_Maps_LocalSearch" = [ "Services_Maps" ];
          "Services_Maps_OfflineMaps" = [ "Services_Maps" ];
          "Services_Store" = [ "Services" ];
          "Services_TargetedContent" = [ "Services" ];
          "Storage" = [ "Foundation" ];
          "Storage_AccessCache" = [ "Storage" ];
          "Storage_BulkAccess" = [ "Storage" ];
          "Storage_Compression" = [ "Storage" ];
          "Storage_FileProperties" = [ "Storage" ];
          "Storage_Pickers" = [ "Storage" ];
          "Storage_Pickers_Provider" = [ "Storage_Pickers" ];
          "Storage_Provider" = [ "Storage" ];
          "Storage_Search" = [ "Storage" ];
          "Storage_Streams" = [ "Storage" ];
          "System" = [ "Foundation" ];
          "System_Diagnostics" = [ "System" ];
          "System_Diagnostics_DevicePortal" = [ "System_Diagnostics" ];
          "System_Diagnostics_Telemetry" = [ "System_Diagnostics" ];
          "System_Diagnostics_TraceReporting" = [ "System_Diagnostics" ];
          "System_Display" = [ "System" ];
          "System_Implementation" = [ "System" ];
          "System_Implementation_FileExplorer" = [ "System_Implementation" ];
          "System_Inventory" = [ "System" ];
          "System_Power" = [ "System" ];
          "System_Profile" = [ "System" ];
          "System_Profile_SystemManufacturers" = [ "System_Profile" ];
          "System_RemoteDesktop" = [ "System" ];
          "System_RemoteDesktop_Input" = [ "System_RemoteDesktop" ];
          "System_RemoteDesktop_Provider" = [ "System_RemoteDesktop" ];
          "System_RemoteSystems" = [ "System" ];
          "System_Threading" = [ "System" ];
          "System_Threading_Core" = [ "System_Threading" ];
          "System_Update" = [ "System" ];
          "System_UserProfile" = [ "System" ];
          "UI" = [ "Foundation" ];
          "UI_Accessibility" = [ "UI" ];
          "UI_ApplicationSettings" = [ "UI" ];
          "UI_Composition" = [ "UI" ];
          "UI_Composition_Core" = [ "UI_Composition" ];
          "UI_Composition_Desktop" = [ "UI_Composition" ];
          "UI_Composition_Diagnostics" = [ "UI_Composition" ];
          "UI_Composition_Effects" = [ "UI_Composition" ];
          "UI_Composition_Interactions" = [ "UI_Composition" ];
          "UI_Composition_Scenes" = [ "UI_Composition" ];
          "UI_Core" = [ "UI" ];
          "UI_Core_AnimationMetrics" = [ "UI_Core" ];
          "UI_Core_Preview" = [ "UI_Core" ];
          "UI_Input" = [ "UI" ];
          "UI_Input_Core" = [ "UI_Input" ];
          "UI_Input_Inking" = [ "UI_Input" ];
          "UI_Input_Inking_Analysis" = [ "UI_Input_Inking" ];
          "UI_Input_Inking_Core" = [ "UI_Input_Inking" ];
          "UI_Input_Inking_Preview" = [ "UI_Input_Inking" ];
          "UI_Input_Preview" = [ "UI_Input" ];
          "UI_Input_Preview_Injection" = [ "UI_Input_Preview" ];
          "UI_Input_Spatial" = [ "UI_Input" ];
          "UI_Notifications" = [ "UI" ];
          "UI_Notifications_Management" = [ "UI_Notifications" ];
          "UI_Notifications_Preview" = [ "UI_Notifications" ];
          "UI_Popups" = [ "UI" ];
          "UI_Shell" = [ "UI" ];
          "UI_StartScreen" = [ "UI" ];
          "UI_Text" = [ "UI" ];
          "UI_Text_Core" = [ "UI_Text" ];
          "UI_UIAutomation" = [ "UI" ];
          "UI_UIAutomation_Core" = [ "UI_UIAutomation" ];
          "UI_ViewManagement" = [ "UI" ];
          "UI_ViewManagement_Core" = [ "UI_ViewManagement" ];
          "UI_WebUI" = [ "UI" ];
          "UI_WebUI_Core" = [ "UI_WebUI" ];
          "UI_WindowManagement" = [ "UI" ];
          "UI_WindowManagement_Preview" = [ "UI_WindowManagement" ];
          "Wdk" = [ "Win32_Foundation" ];
          "Wdk_Devices" = [ "Wdk" ];
          "Wdk_Devices_HumanInterfaceDevice" = [ "Wdk_Devices" ];
          "Wdk_Foundation" = [ "Wdk" ];
          "Wdk_Graphics" = [ "Wdk" ];
          "Wdk_Graphics_Direct3D" = [ "Wdk_Graphics" ];
          "Wdk_NetworkManagement" = [ "Wdk" ];
          "Wdk_NetworkManagement_Ndis" = [ "Wdk_NetworkManagement" ];
          "Wdk_NetworkManagement_WindowsFilteringPlatform" = [ "Wdk_NetworkManagement" ];
          "Wdk_Storage" = [ "Wdk" ];
          "Wdk_Storage_FileSystem" = [ "Wdk_Storage" ];
          "Wdk_Storage_FileSystem_Minifilters" = [ "Wdk_Storage_FileSystem" ];
          "Wdk_System" = [ "Wdk" ];
          "Wdk_System_IO" = [ "Wdk_System" ];
          "Wdk_System_OfflineRegistry" = [ "Wdk_System" ];
          "Wdk_System_Registry" = [ "Wdk_System" ];
          "Wdk_System_SystemInformation" = [ "Wdk_System" ];
          "Wdk_System_SystemServices" = [ "Wdk_System" ];
          "Wdk_System_Threading" = [ "Wdk_System" ];
          "Web" = [ "Foundation" ];
          "Web_AtomPub" = [ "Web" ];
          "Web_Http" = [ "Web" ];
          "Web_Http_Diagnostics" = [ "Web_Http" ];
          "Web_Http_Filters" = [ "Web_Http" ];
          "Web_Http_Headers" = [ "Web_Http" ];
          "Web_Syndication" = [ "Web" ];
          "Web_UI" = [ "Web" ];
          "Web_UI_Interop" = [ "Web_UI" ];
          "Win32" = [ "Win32_Foundation" ];
          "Win32_AI" = [ "Win32" ];
          "Win32_AI_MachineLearning" = [ "Win32_AI" ];
          "Win32_AI_MachineLearning_DirectML" = [ "Win32_AI_MachineLearning" ];
          "Win32_AI_MachineLearning_WinML" = [ "Win32_AI_MachineLearning" ];
          "Win32_Data" = [ "Win32" ];
          "Win32_Data_HtmlHelp" = [ "Win32_Data" ];
          "Win32_Data_RightsManagement" = [ "Win32_Data" ];
          "Win32_Data_Xml" = [ "Win32_Data" ];
          "Win32_Data_Xml_MsXml" = [ "Win32_Data_Xml" ];
          "Win32_Data_Xml_XmlLite" = [ "Win32_Data_Xml" ];
          "Win32_Devices" = [ "Win32" ];
          "Win32_Devices_AllJoyn" = [ "Win32_Devices" ];
          "Win32_Devices_BiometricFramework" = [ "Win32_Devices" ];
          "Win32_Devices_Bluetooth" = [ "Win32_Devices" ];
          "Win32_Devices_Communication" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceAccess" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceAndDriverInstallation" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceQuery" = [ "Win32_Devices" ];
          "Win32_Devices_Display" = [ "Win32_Devices" ];
          "Win32_Devices_Enumeration" = [ "Win32_Devices" ];
          "Win32_Devices_Enumeration_Pnp" = [ "Win32_Devices_Enumeration" ];
          "Win32_Devices_Fax" = [ "Win32_Devices" ];
          "Win32_Devices_FunctionDiscovery" = [ "Win32_Devices" ];
          "Win32_Devices_Geolocation" = [ "Win32_Devices" ];
          "Win32_Devices_HumanInterfaceDevice" = [ "Win32_Devices" ];
          "Win32_Devices_ImageAcquisition" = [ "Win32_Devices" ];
          "Win32_Devices_PortableDevices" = [ "Win32_Devices" ];
          "Win32_Devices_Properties" = [ "Win32_Devices" ];
          "Win32_Devices_Pwm" = [ "Win32_Devices" ];
          "Win32_Devices_Sensors" = [ "Win32_Devices" ];
          "Win32_Devices_SerialCommunication" = [ "Win32_Devices" ];
          "Win32_Devices_Tapi" = [ "Win32_Devices" ];
          "Win32_Devices_Usb" = [ "Win32_Devices" ];
          "Win32_Devices_WebServicesOnDevices" = [ "Win32_Devices" ];
          "Win32_Foundation" = [ "Win32" ];
          "Win32_Gaming" = [ "Win32" ];
          "Win32_Globalization" = [ "Win32" ];
          "Win32_Graphics" = [ "Win32" ];
          "Win32_Graphics_CompositionSwapchain" = [ "Win32_Graphics" ];
          "Win32_Graphics_DXCore" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct2D" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct2D_Common" = [ "Win32_Graphics_Direct2D" ];
          "Win32_Graphics_Direct3D" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct3D10" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct3D11" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct3D11on12" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct3D12" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct3D9" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct3D9on12" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct3D_Dxc" = [ "Win32_Graphics_Direct3D" ];
          "Win32_Graphics_Direct3D_Fxc" = [ "Win32_Graphics_Direct3D" ];
          "Win32_Graphics_DirectComposition" = [ "Win32_Graphics" ];
          "Win32_Graphics_DirectDraw" = [ "Win32_Graphics" ];
          "Win32_Graphics_DirectManipulation" = [ "Win32_Graphics" ];
          "Win32_Graphics_DirectWrite" = [ "Win32_Graphics" ];
          "Win32_Graphics_Dwm" = [ "Win32_Graphics" ];
          "Win32_Graphics_Dxgi" = [ "Win32_Graphics" ];
          "Win32_Graphics_Dxgi_Common" = [ "Win32_Graphics_Dxgi" ];
          "Win32_Graphics_Gdi" = [ "Win32_Graphics" ];
          "Win32_Graphics_GdiPlus" = [ "Win32_Graphics" ];
          "Win32_Graphics_Hlsl" = [ "Win32_Graphics" ];
          "Win32_Graphics_Imaging" = [ "Win32_Graphics" ];
          "Win32_Graphics_Imaging_D2D" = [ "Win32_Graphics_Imaging" ];
          "Win32_Graphics_OpenGL" = [ "Win32_Graphics" ];
          "Win32_Graphics_Printing" = [ "Win32_Graphics" ];
          "Win32_Graphics_Printing_PrintTicket" = [ "Win32_Graphics_Printing" ];
          "Win32_Management" = [ "Win32" ];
          "Win32_Management_MobileDeviceManagementRegistration" = [ "Win32_Management" ];
          "Win32_Media" = [ "Win32" ];
          "Win32_Media_Audio" = [ "Win32_Media" ];
          "Win32_Media_Audio_Apo" = [ "Win32_Media_Audio" ];
          "Win32_Media_Audio_DirectMusic" = [ "Win32_Media_Audio" ];
          "Win32_Media_Audio_DirectSound" = [ "Win32_Media_Audio" ];
          "Win32_Media_Audio_Endpoints" = [ "Win32_Media_Audio" ];
          "Win32_Media_Audio_XAudio2" = [ "Win32_Media_Audio" ];
          "Win32_Media_DeviceManager" = [ "Win32_Media" ];
          "Win32_Media_DirectShow" = [ "Win32_Media" ];
          "Win32_Media_DirectShow_Tv" = [ "Win32_Media_DirectShow" ];
          "Win32_Media_DirectShow_Xml" = [ "Win32_Media_DirectShow" ];
          "Win32_Media_DxMediaObjects" = [ "Win32_Media" ];
          "Win32_Media_KernelStreaming" = [ "Win32_Media" ];
          "Win32_Media_LibrarySharingServices" = [ "Win32_Media" ];
          "Win32_Media_MediaFoundation" = [ "Win32_Media" ];
          "Win32_Media_MediaPlayer" = [ "Win32_Media" ];
          "Win32_Media_Multimedia" = [ "Win32_Media" ];
          "Win32_Media_PictureAcquisition" = [ "Win32_Media" ];
          "Win32_Media_Speech" = [ "Win32_Media" ];
          "Win32_Media_Streaming" = [ "Win32_Media" ];
          "Win32_Media_WindowsMediaFormat" = [ "Win32_Media" ];
          "Win32_NetworkManagement" = [ "Win32" ];
          "Win32_NetworkManagement_Dhcp" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Dns" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_InternetConnectionWizard" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_IpHelper" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_MobileBroadband" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Multicast" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Ndis" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetBios" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetManagement" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetShell" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetworkDiagnosticsFramework" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetworkPolicyServer" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_P2P" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_QoS" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Rras" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Snmp" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WNet" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WebDav" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WiFi" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsConnectNow" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsConnectionManager" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsFilteringPlatform" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsFirewall" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsNetworkVirtualization" = [ "Win32_NetworkManagement" ];
          "Win32_Networking" = [ "Win32" ];
          "Win32_Networking_ActiveDirectory" = [ "Win32_Networking" ];
          "Win32_Networking_BackgroundIntelligentTransferService" = [ "Win32_Networking" ];
          "Win32_Networking_Clustering" = [ "Win32_Networking" ];
          "Win32_Networking_HttpServer" = [ "Win32_Networking" ];
          "Win32_Networking_Ldap" = [ "Win32_Networking" ];
          "Win32_Networking_NetworkListManager" = [ "Win32_Networking" ];
          "Win32_Networking_RemoteDifferentialCompression" = [ "Win32_Networking" ];
          "Win32_Networking_WebSocket" = [ "Win32_Networking" ];
          "Win32_Networking_WinHttp" = [ "Win32_Networking" ];
          "Win32_Networking_WinInet" = [ "Win32_Networking" ];
          "Win32_Networking_WinSock" = [ "Win32_Networking" ];
          "Win32_Networking_WindowsWebServices" = [ "Win32_Networking" ];
          "Win32_Security" = [ "Win32" ];
          "Win32_Security_AppLocker" = [ "Win32_Security" ];
          "Win32_Security_Authentication" = [ "Win32_Security" ];
          "Win32_Security_Authentication_Identity" = [ "Win32_Security_Authentication" ];
          "Win32_Security_Authentication_Identity_Provider" = [ "Win32_Security_Authentication_Identity" ];
          "Win32_Security_Authorization" = [ "Win32_Security" ];
          "Win32_Security_Authorization_UI" = [ "Win32_Security_Authorization" ];
          "Win32_Security_ConfigurationSnapin" = [ "Win32_Security" ];
          "Win32_Security_Credentials" = [ "Win32_Security" ];
          "Win32_Security_Cryptography" = [ "Win32_Security" ];
          "Win32_Security_Cryptography_Catalog" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_Certificates" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_Sip" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_UI" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_DiagnosticDataQuery" = [ "Win32_Security" ];
          "Win32_Security_DirectoryServices" = [ "Win32_Security" ];
          "Win32_Security_EnterpriseData" = [ "Win32_Security" ];
          "Win32_Security_ExtensibleAuthenticationProtocol" = [ "Win32_Security" ];
          "Win32_Security_Isolation" = [ "Win32_Security" ];
          "Win32_Security_LicenseProtection" = [ "Win32_Security" ];
          "Win32_Security_NetworkAccessProtection" = [ "Win32_Security" ];
          "Win32_Security_Tpm" = [ "Win32_Security" ];
          "Win32_Security_WinTrust" = [ "Win32_Security" ];
          "Win32_Security_WinWlx" = [ "Win32_Security" ];
          "Win32_Storage" = [ "Win32" ];
          "Win32_Storage_Cabinets" = [ "Win32_Storage" ];
          "Win32_Storage_CloudFilters" = [ "Win32_Storage" ];
          "Win32_Storage_Compression" = [ "Win32_Storage" ];
          "Win32_Storage_DataDeduplication" = [ "Win32_Storage" ];
          "Win32_Storage_DistributedFileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_EnhancedStorage" = [ "Win32_Storage" ];
          "Win32_Storage_FileHistory" = [ "Win32_Storage" ];
          "Win32_Storage_FileServerResourceManager" = [ "Win32_Storage" ];
          "Win32_Storage_FileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_Imapi" = [ "Win32_Storage" ];
          "Win32_Storage_IndexServer" = [ "Win32_Storage" ];
          "Win32_Storage_InstallableFileSystems" = [ "Win32_Storage" ];
          "Win32_Storage_IscsiDisc" = [ "Win32_Storage" ];
          "Win32_Storage_Jet" = [ "Win32_Storage" ];
          "Win32_Storage_Nvme" = [ "Win32_Storage" ];
          "Win32_Storage_OfflineFiles" = [ "Win32_Storage" ];
          "Win32_Storage_OperationRecorder" = [ "Win32_Storage" ];
          "Win32_Storage_Packaging" = [ "Win32_Storage" ];
          "Win32_Storage_Packaging_Appx" = [ "Win32_Storage_Packaging" ];
          "Win32_Storage_Packaging_Opc" = [ "Win32_Storage_Packaging" ];
          "Win32_Storage_ProjectedFileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_StructuredStorage" = [ "Win32_Storage" ];
          "Win32_Storage_Vhd" = [ "Win32_Storage" ];
          "Win32_Storage_VirtualDiskService" = [ "Win32_Storage" ];
          "Win32_Storage_Vss" = [ "Win32_Storage" ];
          "Win32_Storage_Xps" = [ "Win32_Storage" ];
          "Win32_Storage_Xps_Printing" = [ "Win32_Storage_Xps" ];
          "Win32_System" = [ "Win32" ];
          "Win32_System_AddressBook" = [ "Win32_System" ];
          "Win32_System_Antimalware" = [ "Win32_System" ];
          "Win32_System_ApplicationInstallationAndServicing" = [ "Win32_System" ];
          "Win32_System_ApplicationVerifier" = [ "Win32_System" ];
          "Win32_System_AssessmentTool" = [ "Win32_System" ];
          "Win32_System_ClrHosting" = [ "Win32_System" ];
          "Win32_System_Com" = [ "Win32_System" ];
          "Win32_System_Com_CallObj" = [ "Win32_System_Com" ];
          "Win32_System_Com_ChannelCredentials" = [ "Win32_System_Com" ];
          "Win32_System_Com_Events" = [ "Win32_System_Com" ];
          "Win32_System_Com_Marshal" = [ "Win32_System_Com" ];
          "Win32_System_Com_StructuredStorage" = [ "Win32_System_Com" ];
          "Win32_System_Com_UI" = [ "Win32_System_Com" ];
          "Win32_System_Com_Urlmon" = [ "Win32_System_Com" ];
          "Win32_System_ComponentServices" = [ "Win32_System" ];
          "Win32_System_Console" = [ "Win32_System" ];
          "Win32_System_Contacts" = [ "Win32_System" ];
          "Win32_System_CorrelationVector" = [ "Win32_System" ];
          "Win32_System_DataExchange" = [ "Win32_System" ];
          "Win32_System_DeploymentServices" = [ "Win32_System" ];
          "Win32_System_DesktopSharing" = [ "Win32_System" ];
          "Win32_System_DeveloperLicensing" = [ "Win32_System" ];
          "Win32_System_Diagnostics" = [ "Win32_System" ];
          "Win32_System_Diagnostics_Ceip" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ClrProfiling" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_Debug" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_Debug_ActiveScript" = [ "Win32_System_Diagnostics_Debug" ];
          "Win32_System_Diagnostics_Debug_Extensions" = [ "Win32_System_Diagnostics_Debug" ];
          "Win32_System_Diagnostics_Etw" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ProcessSnapshotting" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ToolHelp" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_TraceLogging" = [ "Win32_System_Diagnostics" ];
          "Win32_System_DistributedTransactionCoordinator" = [ "Win32_System" ];
          "Win32_System_Environment" = [ "Win32_System" ];
          "Win32_System_ErrorReporting" = [ "Win32_System" ];
          "Win32_System_EventCollector" = [ "Win32_System" ];
          "Win32_System_EventLog" = [ "Win32_System" ];
          "Win32_System_EventNotificationService" = [ "Win32_System" ];
          "Win32_System_GroupPolicy" = [ "Win32_System" ];
          "Win32_System_HostCompute" = [ "Win32_System" ];
          "Win32_System_HostComputeNetwork" = [ "Win32_System" ];
          "Win32_System_HostComputeSystem" = [ "Win32_System" ];
          "Win32_System_Hypervisor" = [ "Win32_System" ];
          "Win32_System_IO" = [ "Win32_System" ];
          "Win32_System_Iis" = [ "Win32_System" ];
          "Win32_System_Ioctl" = [ "Win32_System" ];
          "Win32_System_JobObjects" = [ "Win32_System" ];
          "Win32_System_Js" = [ "Win32_System" ];
          "Win32_System_Kernel" = [ "Win32_System" ];
          "Win32_System_LibraryLoader" = [ "Win32_System" ];
          "Win32_System_Mailslots" = [ "Win32_System" ];
          "Win32_System_Mapi" = [ "Win32_System" ];
          "Win32_System_Memory" = [ "Win32_System" ];
          "Win32_System_Memory_NonVolatile" = [ "Win32_System_Memory" ];
          "Win32_System_MessageQueuing" = [ "Win32_System" ];
          "Win32_System_MixedReality" = [ "Win32_System" ];
          "Win32_System_Mmc" = [ "Win32_System" ];
          "Win32_System_Ole" = [ "Win32_System" ];
          "Win32_System_ParentalControls" = [ "Win32_System" ];
          "Win32_System_PasswordManagement" = [ "Win32_System" ];
          "Win32_System_Performance" = [ "Win32_System" ];
          "Win32_System_Performance_HardwareCounterProfiling" = [ "Win32_System_Performance" ];
          "Win32_System_Pipes" = [ "Win32_System" ];
          "Win32_System_Power" = [ "Win32_System" ];
          "Win32_System_ProcessStatus" = [ "Win32_System" ];
          "Win32_System_RealTimeCommunications" = [ "Win32_System" ];
          "Win32_System_Recovery" = [ "Win32_System" ];
          "Win32_System_Registry" = [ "Win32_System" ];
          "Win32_System_RemoteAssistance" = [ "Win32_System" ];
          "Win32_System_RemoteDesktop" = [ "Win32_System" ];
          "Win32_System_RemoteManagement" = [ "Win32_System" ];
          "Win32_System_RestartManager" = [ "Win32_System" ];
          "Win32_System_Restore" = [ "Win32_System" ];
          "Win32_System_Rpc" = [ "Win32_System" ];
          "Win32_System_Search" = [ "Win32_System" ];
          "Win32_System_Search_Common" = [ "Win32_System_Search" ];
          "Win32_System_SecurityCenter" = [ "Win32_System" ];
          "Win32_System_ServerBackup" = [ "Win32_System" ];
          "Win32_System_Services" = [ "Win32_System" ];
          "Win32_System_SettingsManagementInfrastructure" = [ "Win32_System" ];
          "Win32_System_SetupAndMigration" = [ "Win32_System" ];
          "Win32_System_Shutdown" = [ "Win32_System" ];
          "Win32_System_SideShow" = [ "Win32_System" ];
          "Win32_System_StationsAndDesktops" = [ "Win32_System" ];
          "Win32_System_SubsystemForLinux" = [ "Win32_System" ];
          "Win32_System_SystemInformation" = [ "Win32_System" ];
          "Win32_System_SystemServices" = [ "Win32_System" ];
          "Win32_System_TaskScheduler" = [ "Win32_System" ];
          "Win32_System_Threading" = [ "Win32_System" ];
          "Win32_System_Time" = [ "Win32_System" ];
          "Win32_System_TpmBaseServices" = [ "Win32_System" ];
          "Win32_System_TransactionServer" = [ "Win32_System" ];
          "Win32_System_UpdateAgent" = [ "Win32_System" ];
          "Win32_System_UpdateAssessment" = [ "Win32_System" ];
          "Win32_System_UserAccessLogging" = [ "Win32_System" ];
          "Win32_System_Variant" = [ "Win32_System" ];
          "Win32_System_VirtualDosMachines" = [ "Win32_System" ];
          "Win32_System_WinRT" = [ "Win32_System" ];
          "Win32_System_WinRT_AllJoyn" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Composition" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_CoreInputView" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Direct3D11" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Display" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Graphics" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Graphics_Capture" = [ "Win32_System_WinRT_Graphics" ];
          "Win32_System_WinRT_Graphics_Direct2D" = [ "Win32_System_WinRT_Graphics" ];
          "Win32_System_WinRT_Graphics_Imaging" = [ "Win32_System_WinRT_Graphics" ];
          "Win32_System_WinRT_Holographic" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Isolation" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_ML" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Media" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Metadata" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Pdf" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Printing" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Shell" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Storage" = [ "Win32_System_WinRT" ];
          "Win32_System_WindowsProgramming" = [ "Win32_System" ];
          "Win32_System_WindowsSync" = [ "Win32_System" ];
          "Win32_System_Wmi" = [ "Win32_System" ];
          "Win32_UI" = [ "Win32" ];
          "Win32_UI_Accessibility" = [ "Win32_UI" ];
          "Win32_UI_Animation" = [ "Win32_UI" ];
          "Win32_UI_ColorSystem" = [ "Win32_UI" ];
          "Win32_UI_Controls" = [ "Win32_UI" ];
          "Win32_UI_Controls_Dialogs" = [ "Win32_UI_Controls" ];
          "Win32_UI_Controls_RichEdit" = [ "Win32_UI_Controls" ];
          "Win32_UI_HiDpi" = [ "Win32_UI" ];
          "Win32_UI_Input" = [ "Win32_UI" ];
          "Win32_UI_Input_Ime" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Ink" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_KeyboardAndMouse" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Pointer" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Radial" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Touch" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_XboxController" = [ "Win32_UI_Input" ];
          "Win32_UI_InteractionContext" = [ "Win32_UI" ];
          "Win32_UI_LegacyWindowsEnvironmentFeatures" = [ "Win32_UI" ];
          "Win32_UI_Magnification" = [ "Win32_UI" ];
          "Win32_UI_Notifications" = [ "Win32_UI" ];
          "Win32_UI_Ribbon" = [ "Win32_UI" ];
          "Win32_UI_Shell" = [ "Win32_UI" ];
          "Win32_UI_Shell_Common" = [ "Win32_UI_Shell" ];
          "Win32_UI_Shell_PropertiesSystem" = [ "Win32_UI_Shell" ];
          "Win32_UI_TabletPC" = [ "Win32_UI" ];
          "Win32_UI_TextServices" = [ "Win32_UI" ];
          "Win32_UI_WindowsAndMessaging" = [ "Win32_UI" ];
          "Win32_UI_Wpf" = [ "Win32_UI" ];
          "Win32_Web" = [ "Win32" ];
          "Win32_Web_InternetExplorer" = [ "Win32_Web" ];
          "default" = [ "std" ];
          "std" = [ "windows-core/std" ];
        };
        resolvedDefaultFeatures = [ "Wdk" "Wdk_System" "Wdk_System_SystemInformation" "Wdk_System_SystemServices" "Wdk_System_Threading" "Win32" "Win32_Foundation" "Win32_NetworkManagement" "Win32_NetworkManagement_IpHelper" "Win32_NetworkManagement_Ndis" "Win32_NetworkManagement_NetManagement" "Win32_Networking" "Win32_Networking_WinSock" "Win32_Security" "Win32_Security_Authentication" "Win32_Security_Authentication_Identity" "Win32_Security_Authorization" "Win32_Storage" "Win32_Storage_FileSystem" "Win32_System" "Win32_System_Com" "Win32_System_Diagnostics" "Win32_System_Diagnostics_Debug" "Win32_System_IO" "Win32_System_Ioctl" "Win32_System_Kernel" "Win32_System_Memory" "Win32_System_Performance" "Win32_System_Power" "Win32_System_ProcessStatus" "Win32_System_Registry" "Win32_System_RemoteDesktop" "Win32_System_Rpc" "Win32_System_SystemInformation" "Win32_System_SystemServices" "Win32_System_Threading" "Win32_System_Variant" "Win32_System_WindowsProgramming" "Win32_System_Wmi" "Win32_UI" "Win32_UI_Shell" "default" "std" ];
      };
      "windows-core 0.52.0" = rec {
        crateName = "windows-core";
        version = "0.52.0";
        edition = "2021";
        sha256 = "1nc3qv7sy24x0nlnb32f7alzpd6f72l4p24vl65vydbyil669ark";
        libName = "windows_core";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows-targets";
            packageId = "windows-targets 0.52.6";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "windows-core 0.57.0" = rec {
        crateName = "windows-core";
        version = "0.57.0";
        edition = "2021";
        sha256 = "0bc3jxw2jw76xkk3ddvnp5b2m76qmbzv1qncgvb6qrlhl8wj9vfj";
        libName = "windows_core";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows-implement";
            packageId = "windows-implement";
          }
          {
            name = "windows-interface";
            packageId = "windows-interface";
          }
          {
            name = "windows-result";
            packageId = "windows-result 0.1.2";
          }
          {
            name = "windows-targets";
            packageId = "windows-targets 0.52.6";
          }
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "windows-implement" = rec {
        crateName = "windows-implement";
        version = "0.57.0";
        edition = "2021";
        sha256 = "1mqs7qypclnmx5r8yq5jy3g2d8i27vzag9yzzzxzpdnmb70ds1wi";
        procMacro = true;
        libName = "windows_implement";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.86";
          }
          {
            name = "quote";
            packageId = "quote 1.0.37";
          }
          {
            name = "syn";
            packageId = "syn 2.0.77";
            usesDefaultFeatures = false;
            features = [ "parsing" "proc-macro" "printing" "full" "derive" ];
          }
        ];

      };
      "windows-interface" = rec {
        crateName = "windows-interface";
        version = "0.57.0";
        edition = "2021";
        sha256 = "19zwlzr0q1z9s692681yb5w2lhvwcyx4v95s25hfdkd3isry9gi9";
        procMacro = true;
        libName = "windows_interface";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.86";
          }
          {
            name = "quote";
            packageId = "quote 1.0.37";
          }
          {
            name = "syn";
            packageId = "syn 2.0.77";
            usesDefaultFeatures = false;
            features = [ "parsing" "proc-macro" "printing" "full" "derive" "clone-impls" ];
          }
        ];

      };
      "windows-registry" = rec {
        crateName = "windows-registry";
        version = "0.2.0";
        edition = "2021";
        sha256 = "1c04923fq0rbvl3z0h67xr6rh2fgwkizhclhqv0j79i0nwdh0074";
        libName = "windows_registry";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows-result";
            packageId = "windows-result 0.2.0";
          }
          {
            name = "windows-strings";
            packageId = "windows-strings";
          }
          {
            name = "windows-targets";
            packageId = "windows-targets 0.52.6";
          }
        ];

      };
      "windows-result 0.1.2" = rec {
        crateName = "windows-result";
        version = "0.1.2";
        edition = "2021";
        sha256 = "1y274q1v0vy21lhkgslpxpq1m08hvr1mcs2l88h1b1gcx0136f2y";
        libName = "windows_result";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows-targets";
            packageId = "windows-targets 0.52.6";
          }
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "windows-result 0.2.0" = rec {
        crateName = "windows-result";
        version = "0.2.0";
        edition = "2021";
        sha256 = "03mf2z1xcy2slhhsm15z24p76qxgm2m74xdjp8bihyag47c4640x";
        libName = "windows_result";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows-targets";
            packageId = "windows-targets 0.52.6";
          }
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "windows-strings" = rec {
        crateName = "windows-strings";
        version = "0.1.0";
        edition = "2021";
        sha256 = "042dxvi3133f7dyi2pgcvknwkikk47k8bddwxbq5s0l6qhjv3nac";
        libName = "windows_strings";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows-result";
            packageId = "windows-result 0.2.0";
            usesDefaultFeatures = false;
          }
          {
            name = "windows-targets";
            packageId = "windows-targets 0.52.6";
          }
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "windows-sys 0.48.0" = rec {
        crateName = "windows-sys";
        version = "0.48.0";
        edition = "2018";
        sha256 = "1aan23v5gs7gya1lc46hqn9mdh8yph3fhxmhxlw36pn6pqc28zb7";
        libName = "windows_sys";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows-targets";
            packageId = "windows-targets 0.48.5";
          }
        ];
        features = {
          "Wdk_System" = [ "Wdk" ];
          "Wdk_System_OfflineRegistry" = [ "Wdk_System" ];
          "Win32_Data" = [ "Win32" ];
          "Win32_Data_HtmlHelp" = [ "Win32_Data" ];
          "Win32_Data_RightsManagement" = [ "Win32_Data" ];
          "Win32_Data_Xml" = [ "Win32_Data" ];
          "Win32_Data_Xml_MsXml" = [ "Win32_Data_Xml" ];
          "Win32_Data_Xml_XmlLite" = [ "Win32_Data_Xml" ];
          "Win32_Devices" = [ "Win32" ];
          "Win32_Devices_AllJoyn" = [ "Win32_Devices" ];
          "Win32_Devices_BiometricFramework" = [ "Win32_Devices" ];
          "Win32_Devices_Bluetooth" = [ "Win32_Devices" ];
          "Win32_Devices_Communication" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceAccess" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceAndDriverInstallation" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceQuery" = [ "Win32_Devices" ];
          "Win32_Devices_Display" = [ "Win32_Devices" ];
          "Win32_Devices_Enumeration" = [ "Win32_Devices" ];
          "Win32_Devices_Enumeration_Pnp" = [ "Win32_Devices_Enumeration" ];
          "Win32_Devices_Fax" = [ "Win32_Devices" ];
          "Win32_Devices_FunctionDiscovery" = [ "Win32_Devices" ];
          "Win32_Devices_Geolocation" = [ "Win32_Devices" ];
          "Win32_Devices_HumanInterfaceDevice" = [ "Win32_Devices" ];
          "Win32_Devices_ImageAcquisition" = [ "Win32_Devices" ];
          "Win32_Devices_PortableDevices" = [ "Win32_Devices" ];
          "Win32_Devices_Properties" = [ "Win32_Devices" ];
          "Win32_Devices_Pwm" = [ "Win32_Devices" ];
          "Win32_Devices_Sensors" = [ "Win32_Devices" ];
          "Win32_Devices_SerialCommunication" = [ "Win32_Devices" ];
          "Win32_Devices_Tapi" = [ "Win32_Devices" ];
          "Win32_Devices_Usb" = [ "Win32_Devices" ];
          "Win32_Devices_WebServicesOnDevices" = [ "Win32_Devices" ];
          "Win32_Foundation" = [ "Win32" ];
          "Win32_Gaming" = [ "Win32" ];
          "Win32_Globalization" = [ "Win32" ];
          "Win32_Graphics" = [ "Win32" ];
          "Win32_Graphics_Dwm" = [ "Win32_Graphics" ];
          "Win32_Graphics_Gdi" = [ "Win32_Graphics" ];
          "Win32_Graphics_Hlsl" = [ "Win32_Graphics" ];
          "Win32_Graphics_OpenGL" = [ "Win32_Graphics" ];
          "Win32_Graphics_Printing" = [ "Win32_Graphics" ];
          "Win32_Graphics_Printing_PrintTicket" = [ "Win32_Graphics_Printing" ];
          "Win32_Management" = [ "Win32" ];
          "Win32_Management_MobileDeviceManagementRegistration" = [ "Win32_Management" ];
          "Win32_Media" = [ "Win32" ];
          "Win32_Media_Audio" = [ "Win32_Media" ];
          "Win32_Media_Audio_Apo" = [ "Win32_Media_Audio" ];
          "Win32_Media_Audio_DirectMusic" = [ "Win32_Media_Audio" ];
          "Win32_Media_Audio_Endpoints" = [ "Win32_Media_Audio" ];
          "Win32_Media_Audio_XAudio2" = [ "Win32_Media_Audio" ];
          "Win32_Media_DeviceManager" = [ "Win32_Media" ];
          "Win32_Media_DxMediaObjects" = [ "Win32_Media" ];
          "Win32_Media_KernelStreaming" = [ "Win32_Media" ];
          "Win32_Media_LibrarySharingServices" = [ "Win32_Media" ];
          "Win32_Media_MediaPlayer" = [ "Win32_Media" ];
          "Win32_Media_Multimedia" = [ "Win32_Media" ];
          "Win32_Media_Speech" = [ "Win32_Media" ];
          "Win32_Media_Streaming" = [ "Win32_Media" ];
          "Win32_Media_WindowsMediaFormat" = [ "Win32_Media" ];
          "Win32_NetworkManagement" = [ "Win32" ];
          "Win32_NetworkManagement_Dhcp" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Dns" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_InternetConnectionWizard" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_IpHelper" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_MobileBroadband" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Multicast" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Ndis" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetBios" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetManagement" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetShell" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetworkDiagnosticsFramework" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetworkPolicyServer" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_P2P" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_QoS" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Rras" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Snmp" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WNet" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WebDav" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WiFi" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsConnectNow" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsConnectionManager" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsFilteringPlatform" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsFirewall" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsNetworkVirtualization" = [ "Win32_NetworkManagement" ];
          "Win32_Networking" = [ "Win32" ];
          "Win32_Networking_ActiveDirectory" = [ "Win32_Networking" ];
          "Win32_Networking_BackgroundIntelligentTransferService" = [ "Win32_Networking" ];
          "Win32_Networking_Clustering" = [ "Win32_Networking" ];
          "Win32_Networking_HttpServer" = [ "Win32_Networking" ];
          "Win32_Networking_Ldap" = [ "Win32_Networking" ];
          "Win32_Networking_NetworkListManager" = [ "Win32_Networking" ];
          "Win32_Networking_RemoteDifferentialCompression" = [ "Win32_Networking" ];
          "Win32_Networking_WebSocket" = [ "Win32_Networking" ];
          "Win32_Networking_WinHttp" = [ "Win32_Networking" ];
          "Win32_Networking_WinInet" = [ "Win32_Networking" ];
          "Win32_Networking_WinSock" = [ "Win32_Networking" ];
          "Win32_Networking_WindowsWebServices" = [ "Win32_Networking" ];
          "Win32_Security" = [ "Win32" ];
          "Win32_Security_AppLocker" = [ "Win32_Security" ];
          "Win32_Security_Authentication" = [ "Win32_Security" ];
          "Win32_Security_Authentication_Identity" = [ "Win32_Security_Authentication" ];
          "Win32_Security_Authentication_Identity_Provider" = [ "Win32_Security_Authentication_Identity" ];
          "Win32_Security_Authorization" = [ "Win32_Security" ];
          "Win32_Security_Authorization_UI" = [ "Win32_Security_Authorization" ];
          "Win32_Security_ConfigurationSnapin" = [ "Win32_Security" ];
          "Win32_Security_Credentials" = [ "Win32_Security" ];
          "Win32_Security_Cryptography" = [ "Win32_Security" ];
          "Win32_Security_Cryptography_Catalog" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_Certificates" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_Sip" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_UI" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_DiagnosticDataQuery" = [ "Win32_Security" ];
          "Win32_Security_DirectoryServices" = [ "Win32_Security" ];
          "Win32_Security_EnterpriseData" = [ "Win32_Security" ];
          "Win32_Security_ExtensibleAuthenticationProtocol" = [ "Win32_Security" ];
          "Win32_Security_Isolation" = [ "Win32_Security" ];
          "Win32_Security_LicenseProtection" = [ "Win32_Security" ];
          "Win32_Security_NetworkAccessProtection" = [ "Win32_Security" ];
          "Win32_Security_Tpm" = [ "Win32_Security" ];
          "Win32_Security_WinTrust" = [ "Win32_Security" ];
          "Win32_Security_WinWlx" = [ "Win32_Security" ];
          "Win32_Storage" = [ "Win32" ];
          "Win32_Storage_Cabinets" = [ "Win32_Storage" ];
          "Win32_Storage_CloudFilters" = [ "Win32_Storage" ];
          "Win32_Storage_Compression" = [ "Win32_Storage" ];
          "Win32_Storage_DataDeduplication" = [ "Win32_Storage" ];
          "Win32_Storage_DistributedFileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_EnhancedStorage" = [ "Win32_Storage" ];
          "Win32_Storage_FileHistory" = [ "Win32_Storage" ];
          "Win32_Storage_FileServerResourceManager" = [ "Win32_Storage" ];
          "Win32_Storage_FileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_Imapi" = [ "Win32_Storage" ];
          "Win32_Storage_IndexServer" = [ "Win32_Storage" ];
          "Win32_Storage_InstallableFileSystems" = [ "Win32_Storage" ];
          "Win32_Storage_IscsiDisc" = [ "Win32_Storage" ];
          "Win32_Storage_Jet" = [ "Win32_Storage" ];
          "Win32_Storage_OfflineFiles" = [ "Win32_Storage" ];
          "Win32_Storage_OperationRecorder" = [ "Win32_Storage" ];
          "Win32_Storage_Packaging" = [ "Win32_Storage" ];
          "Win32_Storage_Packaging_Appx" = [ "Win32_Storage_Packaging" ];
          "Win32_Storage_Packaging_Opc" = [ "Win32_Storage_Packaging" ];
          "Win32_Storage_ProjectedFileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_StructuredStorage" = [ "Win32_Storage" ];
          "Win32_Storage_Vhd" = [ "Win32_Storage" ];
          "Win32_Storage_VirtualDiskService" = [ "Win32_Storage" ];
          "Win32_Storage_Vss" = [ "Win32_Storage" ];
          "Win32_Storage_Xps" = [ "Win32_Storage" ];
          "Win32_Storage_Xps_Printing" = [ "Win32_Storage_Xps" ];
          "Win32_System" = [ "Win32" ];
          "Win32_System_AddressBook" = [ "Win32_System" ];
          "Win32_System_Antimalware" = [ "Win32_System" ];
          "Win32_System_ApplicationInstallationAndServicing" = [ "Win32_System" ];
          "Win32_System_ApplicationVerifier" = [ "Win32_System" ];
          "Win32_System_AssessmentTool" = [ "Win32_System" ];
          "Win32_System_ClrHosting" = [ "Win32_System" ];
          "Win32_System_Com" = [ "Win32_System" ];
          "Win32_System_Com_CallObj" = [ "Win32_System_Com" ];
          "Win32_System_Com_ChannelCredentials" = [ "Win32_System_Com" ];
          "Win32_System_Com_Events" = [ "Win32_System_Com" ];
          "Win32_System_Com_Marshal" = [ "Win32_System_Com" ];
          "Win32_System_Com_StructuredStorage" = [ "Win32_System_Com" ];
          "Win32_System_Com_UI" = [ "Win32_System_Com" ];
          "Win32_System_Com_Urlmon" = [ "Win32_System_Com" ];
          "Win32_System_ComponentServices" = [ "Win32_System" ];
          "Win32_System_Console" = [ "Win32_System" ];
          "Win32_System_Contacts" = [ "Win32_System" ];
          "Win32_System_CorrelationVector" = [ "Win32_System" ];
          "Win32_System_DataExchange" = [ "Win32_System" ];
          "Win32_System_DeploymentServices" = [ "Win32_System" ];
          "Win32_System_DesktopSharing" = [ "Win32_System" ];
          "Win32_System_DeveloperLicensing" = [ "Win32_System" ];
          "Win32_System_Diagnostics" = [ "Win32_System" ];
          "Win32_System_Diagnostics_Ceip" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ClrProfiling" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_Debug" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_Debug_ActiveScript" = [ "Win32_System_Diagnostics_Debug" ];
          "Win32_System_Diagnostics_Debug_Extensions" = [ "Win32_System_Diagnostics_Debug" ];
          "Win32_System_Diagnostics_Etw" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ProcessSnapshotting" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ToolHelp" = [ "Win32_System_Diagnostics" ];
          "Win32_System_DistributedTransactionCoordinator" = [ "Win32_System" ];
          "Win32_System_Environment" = [ "Win32_System" ];
          "Win32_System_ErrorReporting" = [ "Win32_System" ];
          "Win32_System_EventCollector" = [ "Win32_System" ];
          "Win32_System_EventLog" = [ "Win32_System" ];
          "Win32_System_EventNotificationService" = [ "Win32_System" ];
          "Win32_System_GroupPolicy" = [ "Win32_System" ];
          "Win32_System_HostCompute" = [ "Win32_System" ];
          "Win32_System_HostComputeNetwork" = [ "Win32_System" ];
          "Win32_System_HostComputeSystem" = [ "Win32_System" ];
          "Win32_System_Hypervisor" = [ "Win32_System" ];
          "Win32_System_IO" = [ "Win32_System" ];
          "Win32_System_Iis" = [ "Win32_System" ];
          "Win32_System_Ioctl" = [ "Win32_System" ];
          "Win32_System_JobObjects" = [ "Win32_System" ];
          "Win32_System_Js" = [ "Win32_System" ];
          "Win32_System_Kernel" = [ "Win32_System" ];
          "Win32_System_LibraryLoader" = [ "Win32_System" ];
          "Win32_System_Mailslots" = [ "Win32_System" ];
          "Win32_System_Mapi" = [ "Win32_System" ];
          "Win32_System_Memory" = [ "Win32_System" ];
          "Win32_System_Memory_NonVolatile" = [ "Win32_System_Memory" ];
          "Win32_System_MessageQueuing" = [ "Win32_System" ];
          "Win32_System_MixedReality" = [ "Win32_System" ];
          "Win32_System_Mmc" = [ "Win32_System" ];
          "Win32_System_Ole" = [ "Win32_System" ];
          "Win32_System_ParentalControls" = [ "Win32_System" ];
          "Win32_System_PasswordManagement" = [ "Win32_System" ];
          "Win32_System_Performance" = [ "Win32_System" ];
          "Win32_System_Performance_HardwareCounterProfiling" = [ "Win32_System_Performance" ];
          "Win32_System_Pipes" = [ "Win32_System" ];
          "Win32_System_Power" = [ "Win32_System" ];
          "Win32_System_ProcessStatus" = [ "Win32_System" ];
          "Win32_System_RealTimeCommunications" = [ "Win32_System" ];
          "Win32_System_Recovery" = [ "Win32_System" ];
          "Win32_System_Registry" = [ "Win32_System" ];
          "Win32_System_RemoteAssistance" = [ "Win32_System" ];
          "Win32_System_RemoteDesktop" = [ "Win32_System" ];
          "Win32_System_RemoteManagement" = [ "Win32_System" ];
          "Win32_System_RestartManager" = [ "Win32_System" ];
          "Win32_System_Restore" = [ "Win32_System" ];
          "Win32_System_Rpc" = [ "Win32_System" ];
          "Win32_System_Search" = [ "Win32_System" ];
          "Win32_System_Search_Common" = [ "Win32_System_Search" ];
          "Win32_System_SecurityCenter" = [ "Win32_System" ];
          "Win32_System_ServerBackup" = [ "Win32_System" ];
          "Win32_System_Services" = [ "Win32_System" ];
          "Win32_System_SettingsManagementInfrastructure" = [ "Win32_System" ];
          "Win32_System_SetupAndMigration" = [ "Win32_System" ];
          "Win32_System_Shutdown" = [ "Win32_System" ];
          "Win32_System_StationsAndDesktops" = [ "Win32_System" ];
          "Win32_System_SubsystemForLinux" = [ "Win32_System" ];
          "Win32_System_SystemInformation" = [ "Win32_System" ];
          "Win32_System_SystemServices" = [ "Win32_System" ];
          "Win32_System_TaskScheduler" = [ "Win32_System" ];
          "Win32_System_Threading" = [ "Win32_System" ];
          "Win32_System_Time" = [ "Win32_System" ];
          "Win32_System_TpmBaseServices" = [ "Win32_System" ];
          "Win32_System_UpdateAgent" = [ "Win32_System" ];
          "Win32_System_UpdateAssessment" = [ "Win32_System" ];
          "Win32_System_UserAccessLogging" = [ "Win32_System" ];
          "Win32_System_VirtualDosMachines" = [ "Win32_System" ];
          "Win32_System_WindowsProgramming" = [ "Win32_System" ];
          "Win32_System_WindowsSync" = [ "Win32_System" ];
          "Win32_System_Wmi" = [ "Win32_System" ];
          "Win32_UI" = [ "Win32" ];
          "Win32_UI_Accessibility" = [ "Win32_UI" ];
          "Win32_UI_Animation" = [ "Win32_UI" ];
          "Win32_UI_ColorSystem" = [ "Win32_UI" ];
          "Win32_UI_Controls" = [ "Win32_UI" ];
          "Win32_UI_Controls_Dialogs" = [ "Win32_UI_Controls" ];
          "Win32_UI_Controls_RichEdit" = [ "Win32_UI_Controls" ];
          "Win32_UI_HiDpi" = [ "Win32_UI" ];
          "Win32_UI_Input" = [ "Win32_UI" ];
          "Win32_UI_Input_Ime" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Ink" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_KeyboardAndMouse" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Pointer" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Radial" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Touch" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_XboxController" = [ "Win32_UI_Input" ];
          "Win32_UI_InteractionContext" = [ "Win32_UI" ];
          "Win32_UI_LegacyWindowsEnvironmentFeatures" = [ "Win32_UI" ];
          "Win32_UI_Magnification" = [ "Win32_UI" ];
          "Win32_UI_Notifications" = [ "Win32_UI" ];
          "Win32_UI_Ribbon" = [ "Win32_UI" ];
          "Win32_UI_Shell" = [ "Win32_UI" ];
          "Win32_UI_Shell_Common" = [ "Win32_UI_Shell" ];
          "Win32_UI_Shell_PropertiesSystem" = [ "Win32_UI_Shell" ];
          "Win32_UI_TabletPC" = [ "Win32_UI" ];
          "Win32_UI_TextServices" = [ "Win32_UI" ];
          "Win32_UI_WindowsAndMessaging" = [ "Win32_UI" ];
          "Win32_UI_Wpf" = [ "Win32_UI" ];
          "Win32_Web" = [ "Win32" ];
          "Win32_Web_InternetExplorer" = [ "Win32_Web" ];
        };
        resolvedDefaultFeatures = [ "Win32" "Win32_Foundation" "Win32_Globalization" "Win32_Networking" "Win32_Networking_WinSock" "Win32_Security" "Win32_Storage" "Win32_Storage_FileSystem" "Win32_System" "Win32_System_Com" "Win32_System_Console" "Win32_System_Diagnostics" "Win32_System_Diagnostics_Debug" "Win32_System_IO" "Win32_System_Pipes" "Win32_System_Registry" "Win32_System_Threading" "Win32_System_Time" "Win32_System_WindowsProgramming" "Win32_UI" "Win32_UI_Shell" "default" ];
      };
      "windows-sys 0.52.0" = rec {
        crateName = "windows-sys";
        version = "0.52.0";
        edition = "2021";
        sha256 = "0gd3v4ji88490zgb6b5mq5zgbvwv7zx1ibn8v3x83rwcdbryaar8";
        libName = "windows_sys";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows-targets";
            packageId = "windows-targets 0.52.6";
          }
        ];
        features = {
          "Wdk_Foundation" = [ "Wdk" ];
          "Wdk_Graphics" = [ "Wdk" ];
          "Wdk_Graphics_Direct3D" = [ "Wdk_Graphics" ];
          "Wdk_Storage" = [ "Wdk" ];
          "Wdk_Storage_FileSystem" = [ "Wdk_Storage" ];
          "Wdk_Storage_FileSystem_Minifilters" = [ "Wdk_Storage_FileSystem" ];
          "Wdk_System" = [ "Wdk" ];
          "Wdk_System_IO" = [ "Wdk_System" ];
          "Wdk_System_OfflineRegistry" = [ "Wdk_System" ];
          "Wdk_System_Registry" = [ "Wdk_System" ];
          "Wdk_System_SystemInformation" = [ "Wdk_System" ];
          "Wdk_System_SystemServices" = [ "Wdk_System" ];
          "Wdk_System_Threading" = [ "Wdk_System" ];
          "Win32_Data" = [ "Win32" ];
          "Win32_Data_HtmlHelp" = [ "Win32_Data" ];
          "Win32_Data_RightsManagement" = [ "Win32_Data" ];
          "Win32_Devices" = [ "Win32" ];
          "Win32_Devices_AllJoyn" = [ "Win32_Devices" ];
          "Win32_Devices_BiometricFramework" = [ "Win32_Devices" ];
          "Win32_Devices_Bluetooth" = [ "Win32_Devices" ];
          "Win32_Devices_Communication" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceAndDriverInstallation" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceQuery" = [ "Win32_Devices" ];
          "Win32_Devices_Display" = [ "Win32_Devices" ];
          "Win32_Devices_Enumeration" = [ "Win32_Devices" ];
          "Win32_Devices_Enumeration_Pnp" = [ "Win32_Devices_Enumeration" ];
          "Win32_Devices_Fax" = [ "Win32_Devices" ];
          "Win32_Devices_HumanInterfaceDevice" = [ "Win32_Devices" ];
          "Win32_Devices_PortableDevices" = [ "Win32_Devices" ];
          "Win32_Devices_Properties" = [ "Win32_Devices" ];
          "Win32_Devices_Pwm" = [ "Win32_Devices" ];
          "Win32_Devices_Sensors" = [ "Win32_Devices" ];
          "Win32_Devices_SerialCommunication" = [ "Win32_Devices" ];
          "Win32_Devices_Tapi" = [ "Win32_Devices" ];
          "Win32_Devices_Usb" = [ "Win32_Devices" ];
          "Win32_Devices_WebServicesOnDevices" = [ "Win32_Devices" ];
          "Win32_Foundation" = [ "Win32" ];
          "Win32_Gaming" = [ "Win32" ];
          "Win32_Globalization" = [ "Win32" ];
          "Win32_Graphics" = [ "Win32" ];
          "Win32_Graphics_Dwm" = [ "Win32_Graphics" ];
          "Win32_Graphics_Gdi" = [ "Win32_Graphics" ];
          "Win32_Graphics_GdiPlus" = [ "Win32_Graphics" ];
          "Win32_Graphics_Hlsl" = [ "Win32_Graphics" ];
          "Win32_Graphics_OpenGL" = [ "Win32_Graphics" ];
          "Win32_Graphics_Printing" = [ "Win32_Graphics" ];
          "Win32_Graphics_Printing_PrintTicket" = [ "Win32_Graphics_Printing" ];
          "Win32_Management" = [ "Win32" ];
          "Win32_Management_MobileDeviceManagementRegistration" = [ "Win32_Management" ];
          "Win32_Media" = [ "Win32" ];
          "Win32_Media_Audio" = [ "Win32_Media" ];
          "Win32_Media_DxMediaObjects" = [ "Win32_Media" ];
          "Win32_Media_KernelStreaming" = [ "Win32_Media" ];
          "Win32_Media_Multimedia" = [ "Win32_Media" ];
          "Win32_Media_Streaming" = [ "Win32_Media" ];
          "Win32_Media_WindowsMediaFormat" = [ "Win32_Media" ];
          "Win32_NetworkManagement" = [ "Win32" ];
          "Win32_NetworkManagement_Dhcp" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Dns" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_InternetConnectionWizard" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_IpHelper" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Multicast" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Ndis" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetBios" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetManagement" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetShell" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetworkDiagnosticsFramework" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_P2P" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_QoS" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Rras" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Snmp" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WNet" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WebDav" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WiFi" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsConnectionManager" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsFilteringPlatform" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsFirewall" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsNetworkVirtualization" = [ "Win32_NetworkManagement" ];
          "Win32_Networking" = [ "Win32" ];
          "Win32_Networking_ActiveDirectory" = [ "Win32_Networking" ];
          "Win32_Networking_Clustering" = [ "Win32_Networking" ];
          "Win32_Networking_HttpServer" = [ "Win32_Networking" ];
          "Win32_Networking_Ldap" = [ "Win32_Networking" ];
          "Win32_Networking_WebSocket" = [ "Win32_Networking" ];
          "Win32_Networking_WinHttp" = [ "Win32_Networking" ];
          "Win32_Networking_WinInet" = [ "Win32_Networking" ];
          "Win32_Networking_WinSock" = [ "Win32_Networking" ];
          "Win32_Networking_WindowsWebServices" = [ "Win32_Networking" ];
          "Win32_Security" = [ "Win32" ];
          "Win32_Security_AppLocker" = [ "Win32_Security" ];
          "Win32_Security_Authentication" = [ "Win32_Security" ];
          "Win32_Security_Authentication_Identity" = [ "Win32_Security_Authentication" ];
          "Win32_Security_Authorization" = [ "Win32_Security" ];
          "Win32_Security_Credentials" = [ "Win32_Security" ];
          "Win32_Security_Cryptography" = [ "Win32_Security" ];
          "Win32_Security_Cryptography_Catalog" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_Certificates" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_Sip" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_UI" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_DiagnosticDataQuery" = [ "Win32_Security" ];
          "Win32_Security_DirectoryServices" = [ "Win32_Security" ];
          "Win32_Security_EnterpriseData" = [ "Win32_Security" ];
          "Win32_Security_ExtensibleAuthenticationProtocol" = [ "Win32_Security" ];
          "Win32_Security_Isolation" = [ "Win32_Security" ];
          "Win32_Security_LicenseProtection" = [ "Win32_Security" ];
          "Win32_Security_NetworkAccessProtection" = [ "Win32_Security" ];
          "Win32_Security_WinTrust" = [ "Win32_Security" ];
          "Win32_Security_WinWlx" = [ "Win32_Security" ];
          "Win32_Storage" = [ "Win32" ];
          "Win32_Storage_Cabinets" = [ "Win32_Storage" ];
          "Win32_Storage_CloudFilters" = [ "Win32_Storage" ];
          "Win32_Storage_Compression" = [ "Win32_Storage" ];
          "Win32_Storage_DistributedFileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_FileHistory" = [ "Win32_Storage" ];
          "Win32_Storage_FileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_Imapi" = [ "Win32_Storage" ];
          "Win32_Storage_IndexServer" = [ "Win32_Storage" ];
          "Win32_Storage_InstallableFileSystems" = [ "Win32_Storage" ];
          "Win32_Storage_IscsiDisc" = [ "Win32_Storage" ];
          "Win32_Storage_Jet" = [ "Win32_Storage" ];
          "Win32_Storage_Nvme" = [ "Win32_Storage" ];
          "Win32_Storage_OfflineFiles" = [ "Win32_Storage" ];
          "Win32_Storage_OperationRecorder" = [ "Win32_Storage" ];
          "Win32_Storage_Packaging" = [ "Win32_Storage" ];
          "Win32_Storage_Packaging_Appx" = [ "Win32_Storage_Packaging" ];
          "Win32_Storage_ProjectedFileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_StructuredStorage" = [ "Win32_Storage" ];
          "Win32_Storage_Vhd" = [ "Win32_Storage" ];
          "Win32_Storage_Xps" = [ "Win32_Storage" ];
          "Win32_System" = [ "Win32" ];
          "Win32_System_AddressBook" = [ "Win32_System" ];
          "Win32_System_Antimalware" = [ "Win32_System" ];
          "Win32_System_ApplicationInstallationAndServicing" = [ "Win32_System" ];
          "Win32_System_ApplicationVerifier" = [ "Win32_System" ];
          "Win32_System_ClrHosting" = [ "Win32_System" ];
          "Win32_System_Com" = [ "Win32_System" ];
          "Win32_System_Com_Marshal" = [ "Win32_System_Com" ];
          "Win32_System_Com_StructuredStorage" = [ "Win32_System_Com" ];
          "Win32_System_Com_Urlmon" = [ "Win32_System_Com" ];
          "Win32_System_ComponentServices" = [ "Win32_System" ];
          "Win32_System_Console" = [ "Win32_System" ];
          "Win32_System_CorrelationVector" = [ "Win32_System" ];
          "Win32_System_DataExchange" = [ "Win32_System" ];
          "Win32_System_DeploymentServices" = [ "Win32_System" ];
          "Win32_System_DeveloperLicensing" = [ "Win32_System" ];
          "Win32_System_Diagnostics" = [ "Win32_System" ];
          "Win32_System_Diagnostics_Ceip" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_Debug" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_Debug_Extensions" = [ "Win32_System_Diagnostics_Debug" ];
          "Win32_System_Diagnostics_Etw" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ProcessSnapshotting" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ToolHelp" = [ "Win32_System_Diagnostics" ];
          "Win32_System_DistributedTransactionCoordinator" = [ "Win32_System" ];
          "Win32_System_Environment" = [ "Win32_System" ];
          "Win32_System_ErrorReporting" = [ "Win32_System" ];
          "Win32_System_EventCollector" = [ "Win32_System" ];
          "Win32_System_EventLog" = [ "Win32_System" ];
          "Win32_System_EventNotificationService" = [ "Win32_System" ];
          "Win32_System_GroupPolicy" = [ "Win32_System" ];
          "Win32_System_HostCompute" = [ "Win32_System" ];
          "Win32_System_HostComputeNetwork" = [ "Win32_System" ];
          "Win32_System_HostComputeSystem" = [ "Win32_System" ];
          "Win32_System_Hypervisor" = [ "Win32_System" ];
          "Win32_System_IO" = [ "Win32_System" ];
          "Win32_System_Iis" = [ "Win32_System" ];
          "Win32_System_Ioctl" = [ "Win32_System" ];
          "Win32_System_JobObjects" = [ "Win32_System" ];
          "Win32_System_Js" = [ "Win32_System" ];
          "Win32_System_Kernel" = [ "Win32_System" ];
          "Win32_System_LibraryLoader" = [ "Win32_System" ];
          "Win32_System_Mailslots" = [ "Win32_System" ];
          "Win32_System_Mapi" = [ "Win32_System" ];
          "Win32_System_Memory" = [ "Win32_System" ];
          "Win32_System_Memory_NonVolatile" = [ "Win32_System_Memory" ];
          "Win32_System_MessageQueuing" = [ "Win32_System" ];
          "Win32_System_MixedReality" = [ "Win32_System" ];
          "Win32_System_Ole" = [ "Win32_System" ];
          "Win32_System_PasswordManagement" = [ "Win32_System" ];
          "Win32_System_Performance" = [ "Win32_System" ];
          "Win32_System_Performance_HardwareCounterProfiling" = [ "Win32_System_Performance" ];
          "Win32_System_Pipes" = [ "Win32_System" ];
          "Win32_System_Power" = [ "Win32_System" ];
          "Win32_System_ProcessStatus" = [ "Win32_System" ];
          "Win32_System_Recovery" = [ "Win32_System" ];
          "Win32_System_Registry" = [ "Win32_System" ];
          "Win32_System_RemoteDesktop" = [ "Win32_System" ];
          "Win32_System_RemoteManagement" = [ "Win32_System" ];
          "Win32_System_RestartManager" = [ "Win32_System" ];
          "Win32_System_Restore" = [ "Win32_System" ];
          "Win32_System_Rpc" = [ "Win32_System" ];
          "Win32_System_Search" = [ "Win32_System" ];
          "Win32_System_Search_Common" = [ "Win32_System_Search" ];
          "Win32_System_SecurityCenter" = [ "Win32_System" ];
          "Win32_System_Services" = [ "Win32_System" ];
          "Win32_System_SetupAndMigration" = [ "Win32_System" ];
          "Win32_System_Shutdown" = [ "Win32_System" ];
          "Win32_System_StationsAndDesktops" = [ "Win32_System" ];
          "Win32_System_SubsystemForLinux" = [ "Win32_System" ];
          "Win32_System_SystemInformation" = [ "Win32_System" ];
          "Win32_System_SystemServices" = [ "Win32_System" ];
          "Win32_System_Threading" = [ "Win32_System" ];
          "Win32_System_Time" = [ "Win32_System" ];
          "Win32_System_TpmBaseServices" = [ "Win32_System" ];
          "Win32_System_UserAccessLogging" = [ "Win32_System" ];
          "Win32_System_Variant" = [ "Win32_System" ];
          "Win32_System_VirtualDosMachines" = [ "Win32_System" ];
          "Win32_System_WindowsProgramming" = [ "Win32_System" ];
          "Win32_System_Wmi" = [ "Win32_System" ];
          "Win32_UI" = [ "Win32" ];
          "Win32_UI_Accessibility" = [ "Win32_UI" ];
          "Win32_UI_ColorSystem" = [ "Win32_UI" ];
          "Win32_UI_Controls" = [ "Win32_UI" ];
          "Win32_UI_Controls_Dialogs" = [ "Win32_UI_Controls" ];
          "Win32_UI_HiDpi" = [ "Win32_UI" ];
          "Win32_UI_Input" = [ "Win32_UI" ];
          "Win32_UI_Input_Ime" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_KeyboardAndMouse" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Pointer" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Touch" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_XboxController" = [ "Win32_UI_Input" ];
          "Win32_UI_InteractionContext" = [ "Win32_UI" ];
          "Win32_UI_Magnification" = [ "Win32_UI" ];
          "Win32_UI_Shell" = [ "Win32_UI" ];
          "Win32_UI_Shell_PropertiesSystem" = [ "Win32_UI_Shell" ];
          "Win32_UI_TabletPC" = [ "Win32_UI" ];
          "Win32_UI_TextServices" = [ "Win32_UI" ];
          "Win32_UI_WindowsAndMessaging" = [ "Win32_UI" ];
          "Win32_Web" = [ "Win32" ];
          "Win32_Web_InternetExplorer" = [ "Win32_Web" ];
        };
        resolvedDefaultFeatures = [ "Wdk" "Wdk_Foundation" "Wdk_Storage" "Wdk_Storage_FileSystem" "Wdk_System" "Wdk_System_IO" "Win32" "Win32_Foundation" "Win32_NetworkManagement" "Win32_NetworkManagement_IpHelper" "Win32_Networking" "Win32_Networking_WinSock" "Win32_Security" "Win32_Storage" "Win32_Storage_FileSystem" "Win32_System" "Win32_System_Com" "Win32_System_Console" "Win32_System_Diagnostics" "Win32_System_Diagnostics_Debug" "Win32_System_IO" "Win32_System_Pipes" "Win32_System_SystemServices" "Win32_System_Threading" "Win32_System_WindowsProgramming" "Win32_UI" "Win32_UI_Input" "Win32_UI_Input_KeyboardAndMouse" "Win32_UI_Shell" "default" ];
      };
      "windows-sys 0.59.0" = rec {
        crateName = "windows-sys";
        version = "0.59.0";
        edition = "2021";
        sha256 = "0fw5672ziw8b3zpmnbp9pdv1famk74f1l9fcbc3zsrzdg56vqf0y";
        libName = "windows_sys";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows-targets";
            packageId = "windows-targets 0.52.6";
          }
        ];
        features = {
          "Wdk" = [ "Win32_Foundation" ];
          "Wdk_Devices" = [ "Wdk" ];
          "Wdk_Devices_Bluetooth" = [ "Wdk_Devices" ];
          "Wdk_Devices_HumanInterfaceDevice" = [ "Wdk_Devices" ];
          "Wdk_Foundation" = [ "Wdk" ];
          "Wdk_Graphics" = [ "Wdk" ];
          "Wdk_Graphics_Direct3D" = [ "Wdk_Graphics" ];
          "Wdk_NetworkManagement" = [ "Wdk" ];
          "Wdk_NetworkManagement_Ndis" = [ "Wdk_NetworkManagement" ];
          "Wdk_NetworkManagement_WindowsFilteringPlatform" = [ "Wdk_NetworkManagement" ];
          "Wdk_Storage" = [ "Wdk" ];
          "Wdk_Storage_FileSystem" = [ "Wdk_Storage" ];
          "Wdk_Storage_FileSystem_Minifilters" = [ "Wdk_Storage_FileSystem" ];
          "Wdk_System" = [ "Wdk" ];
          "Wdk_System_IO" = [ "Wdk_System" ];
          "Wdk_System_Memory" = [ "Wdk_System" ];
          "Wdk_System_OfflineRegistry" = [ "Wdk_System" ];
          "Wdk_System_Registry" = [ "Wdk_System" ];
          "Wdk_System_SystemInformation" = [ "Wdk_System" ];
          "Wdk_System_SystemServices" = [ "Wdk_System" ];
          "Wdk_System_Threading" = [ "Wdk_System" ];
          "Win32" = [ "Win32_Foundation" ];
          "Win32_Data" = [ "Win32" ];
          "Win32_Data_HtmlHelp" = [ "Win32_Data" ];
          "Win32_Data_RightsManagement" = [ "Win32_Data" ];
          "Win32_Devices" = [ "Win32" ];
          "Win32_Devices_AllJoyn" = [ "Win32_Devices" ];
          "Win32_Devices_BiometricFramework" = [ "Win32_Devices" ];
          "Win32_Devices_Bluetooth" = [ "Win32_Devices" ];
          "Win32_Devices_Communication" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceAndDriverInstallation" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceQuery" = [ "Win32_Devices" ];
          "Win32_Devices_Display" = [ "Win32_Devices" ];
          "Win32_Devices_Enumeration" = [ "Win32_Devices" ];
          "Win32_Devices_Enumeration_Pnp" = [ "Win32_Devices_Enumeration" ];
          "Win32_Devices_Fax" = [ "Win32_Devices" ];
          "Win32_Devices_HumanInterfaceDevice" = [ "Win32_Devices" ];
          "Win32_Devices_PortableDevices" = [ "Win32_Devices" ];
          "Win32_Devices_Properties" = [ "Win32_Devices" ];
          "Win32_Devices_Pwm" = [ "Win32_Devices" ];
          "Win32_Devices_Sensors" = [ "Win32_Devices" ];
          "Win32_Devices_SerialCommunication" = [ "Win32_Devices" ];
          "Win32_Devices_Tapi" = [ "Win32_Devices" ];
          "Win32_Devices_Usb" = [ "Win32_Devices" ];
          "Win32_Devices_WebServicesOnDevices" = [ "Win32_Devices" ];
          "Win32_Foundation" = [ "Win32" ];
          "Win32_Gaming" = [ "Win32" ];
          "Win32_Globalization" = [ "Win32" ];
          "Win32_Graphics" = [ "Win32" ];
          "Win32_Graphics_Dwm" = [ "Win32_Graphics" ];
          "Win32_Graphics_Gdi" = [ "Win32_Graphics" ];
          "Win32_Graphics_GdiPlus" = [ "Win32_Graphics" ];
          "Win32_Graphics_Hlsl" = [ "Win32_Graphics" ];
          "Win32_Graphics_OpenGL" = [ "Win32_Graphics" ];
          "Win32_Graphics_Printing" = [ "Win32_Graphics" ];
          "Win32_Graphics_Printing_PrintTicket" = [ "Win32_Graphics_Printing" ];
          "Win32_Management" = [ "Win32" ];
          "Win32_Management_MobileDeviceManagementRegistration" = [ "Win32_Management" ];
          "Win32_Media" = [ "Win32" ];
          "Win32_Media_Audio" = [ "Win32_Media" ];
          "Win32_Media_DxMediaObjects" = [ "Win32_Media" ];
          "Win32_Media_KernelStreaming" = [ "Win32_Media" ];
          "Win32_Media_Multimedia" = [ "Win32_Media" ];
          "Win32_Media_Streaming" = [ "Win32_Media" ];
          "Win32_Media_WindowsMediaFormat" = [ "Win32_Media" ];
          "Win32_NetworkManagement" = [ "Win32" ];
          "Win32_NetworkManagement_Dhcp" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Dns" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_InternetConnectionWizard" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_IpHelper" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Multicast" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Ndis" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetBios" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetManagement" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetShell" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetworkDiagnosticsFramework" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_P2P" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_QoS" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Rras" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Snmp" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WNet" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WebDav" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WiFi" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsConnectionManager" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsFilteringPlatform" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsFirewall" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsNetworkVirtualization" = [ "Win32_NetworkManagement" ];
          "Win32_Networking" = [ "Win32" ];
          "Win32_Networking_ActiveDirectory" = [ "Win32_Networking" ];
          "Win32_Networking_Clustering" = [ "Win32_Networking" ];
          "Win32_Networking_HttpServer" = [ "Win32_Networking" ];
          "Win32_Networking_Ldap" = [ "Win32_Networking" ];
          "Win32_Networking_WebSocket" = [ "Win32_Networking" ];
          "Win32_Networking_WinHttp" = [ "Win32_Networking" ];
          "Win32_Networking_WinInet" = [ "Win32_Networking" ];
          "Win32_Networking_WinSock" = [ "Win32_Networking" ];
          "Win32_Networking_WindowsWebServices" = [ "Win32_Networking" ];
          "Win32_Security" = [ "Win32" ];
          "Win32_Security_AppLocker" = [ "Win32_Security" ];
          "Win32_Security_Authentication" = [ "Win32_Security" ];
          "Win32_Security_Authentication_Identity" = [ "Win32_Security_Authentication" ];
          "Win32_Security_Authorization" = [ "Win32_Security" ];
          "Win32_Security_Credentials" = [ "Win32_Security" ];
          "Win32_Security_Cryptography" = [ "Win32_Security" ];
          "Win32_Security_Cryptography_Catalog" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_Certificates" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_Sip" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_UI" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_DiagnosticDataQuery" = [ "Win32_Security" ];
          "Win32_Security_DirectoryServices" = [ "Win32_Security" ];
          "Win32_Security_EnterpriseData" = [ "Win32_Security" ];
          "Win32_Security_ExtensibleAuthenticationProtocol" = [ "Win32_Security" ];
          "Win32_Security_Isolation" = [ "Win32_Security" ];
          "Win32_Security_LicenseProtection" = [ "Win32_Security" ];
          "Win32_Security_NetworkAccessProtection" = [ "Win32_Security" ];
          "Win32_Security_WinTrust" = [ "Win32_Security" ];
          "Win32_Security_WinWlx" = [ "Win32_Security" ];
          "Win32_Storage" = [ "Win32" ];
          "Win32_Storage_Cabinets" = [ "Win32_Storage" ];
          "Win32_Storage_CloudFilters" = [ "Win32_Storage" ];
          "Win32_Storage_Compression" = [ "Win32_Storage" ];
          "Win32_Storage_DistributedFileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_FileHistory" = [ "Win32_Storage" ];
          "Win32_Storage_FileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_Imapi" = [ "Win32_Storage" ];
          "Win32_Storage_IndexServer" = [ "Win32_Storage" ];
          "Win32_Storage_InstallableFileSystems" = [ "Win32_Storage" ];
          "Win32_Storage_IscsiDisc" = [ "Win32_Storage" ];
          "Win32_Storage_Jet" = [ "Win32_Storage" ];
          "Win32_Storage_Nvme" = [ "Win32_Storage" ];
          "Win32_Storage_OfflineFiles" = [ "Win32_Storage" ];
          "Win32_Storage_OperationRecorder" = [ "Win32_Storage" ];
          "Win32_Storage_Packaging" = [ "Win32_Storage" ];
          "Win32_Storage_Packaging_Appx" = [ "Win32_Storage_Packaging" ];
          "Win32_Storage_ProjectedFileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_StructuredStorage" = [ "Win32_Storage" ];
          "Win32_Storage_Vhd" = [ "Win32_Storage" ];
          "Win32_Storage_Xps" = [ "Win32_Storage" ];
          "Win32_System" = [ "Win32" ];
          "Win32_System_AddressBook" = [ "Win32_System" ];
          "Win32_System_Antimalware" = [ "Win32_System" ];
          "Win32_System_ApplicationInstallationAndServicing" = [ "Win32_System" ];
          "Win32_System_ApplicationVerifier" = [ "Win32_System" ];
          "Win32_System_ClrHosting" = [ "Win32_System" ];
          "Win32_System_Com" = [ "Win32_System" ];
          "Win32_System_Com_Marshal" = [ "Win32_System_Com" ];
          "Win32_System_Com_StructuredStorage" = [ "Win32_System_Com" ];
          "Win32_System_Com_Urlmon" = [ "Win32_System_Com" ];
          "Win32_System_ComponentServices" = [ "Win32_System" ];
          "Win32_System_Console" = [ "Win32_System" ];
          "Win32_System_CorrelationVector" = [ "Win32_System" ];
          "Win32_System_DataExchange" = [ "Win32_System" ];
          "Win32_System_DeploymentServices" = [ "Win32_System" ];
          "Win32_System_DeveloperLicensing" = [ "Win32_System" ];
          "Win32_System_Diagnostics" = [ "Win32_System" ];
          "Win32_System_Diagnostics_Ceip" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_Debug" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_Debug_Extensions" = [ "Win32_System_Diagnostics_Debug" ];
          "Win32_System_Diagnostics_Etw" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ProcessSnapshotting" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ToolHelp" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_TraceLogging" = [ "Win32_System_Diagnostics" ];
          "Win32_System_DistributedTransactionCoordinator" = [ "Win32_System" ];
          "Win32_System_Environment" = [ "Win32_System" ];
          "Win32_System_ErrorReporting" = [ "Win32_System" ];
          "Win32_System_EventCollector" = [ "Win32_System" ];
          "Win32_System_EventLog" = [ "Win32_System" ];
          "Win32_System_EventNotificationService" = [ "Win32_System" ];
          "Win32_System_GroupPolicy" = [ "Win32_System" ];
          "Win32_System_HostCompute" = [ "Win32_System" ];
          "Win32_System_HostComputeNetwork" = [ "Win32_System" ];
          "Win32_System_HostComputeSystem" = [ "Win32_System" ];
          "Win32_System_Hypervisor" = [ "Win32_System" ];
          "Win32_System_IO" = [ "Win32_System" ];
          "Win32_System_Iis" = [ "Win32_System" ];
          "Win32_System_Ioctl" = [ "Win32_System" ];
          "Win32_System_JobObjects" = [ "Win32_System" ];
          "Win32_System_Js" = [ "Win32_System" ];
          "Win32_System_Kernel" = [ "Win32_System" ];
          "Win32_System_LibraryLoader" = [ "Win32_System" ];
          "Win32_System_Mailslots" = [ "Win32_System" ];
          "Win32_System_Mapi" = [ "Win32_System" ];
          "Win32_System_Memory" = [ "Win32_System" ];
          "Win32_System_Memory_NonVolatile" = [ "Win32_System_Memory" ];
          "Win32_System_MessageQueuing" = [ "Win32_System" ];
          "Win32_System_MixedReality" = [ "Win32_System" ];
          "Win32_System_Ole" = [ "Win32_System" ];
          "Win32_System_PasswordManagement" = [ "Win32_System" ];
          "Win32_System_Performance" = [ "Win32_System" ];
          "Win32_System_Performance_HardwareCounterProfiling" = [ "Win32_System_Performance" ];
          "Win32_System_Pipes" = [ "Win32_System" ];
          "Win32_System_Power" = [ "Win32_System" ];
          "Win32_System_ProcessStatus" = [ "Win32_System" ];
          "Win32_System_Recovery" = [ "Win32_System" ];
          "Win32_System_Registry" = [ "Win32_System" ];
          "Win32_System_RemoteDesktop" = [ "Win32_System" ];
          "Win32_System_RemoteManagement" = [ "Win32_System" ];
          "Win32_System_RestartManager" = [ "Win32_System" ];
          "Win32_System_Restore" = [ "Win32_System" ];
          "Win32_System_Rpc" = [ "Win32_System" ];
          "Win32_System_Search" = [ "Win32_System" ];
          "Win32_System_Search_Common" = [ "Win32_System_Search" ];
          "Win32_System_SecurityCenter" = [ "Win32_System" ];
          "Win32_System_Services" = [ "Win32_System" ];
          "Win32_System_SetupAndMigration" = [ "Win32_System" ];
          "Win32_System_Shutdown" = [ "Win32_System" ];
          "Win32_System_StationsAndDesktops" = [ "Win32_System" ];
          "Win32_System_SubsystemForLinux" = [ "Win32_System" ];
          "Win32_System_SystemInformation" = [ "Win32_System" ];
          "Win32_System_SystemServices" = [ "Win32_System" ];
          "Win32_System_Threading" = [ "Win32_System" ];
          "Win32_System_Time" = [ "Win32_System" ];
          "Win32_System_TpmBaseServices" = [ "Win32_System" ];
          "Win32_System_UserAccessLogging" = [ "Win32_System" ];
          "Win32_System_Variant" = [ "Win32_System" ];
          "Win32_System_VirtualDosMachines" = [ "Win32_System" ];
          "Win32_System_WindowsProgramming" = [ "Win32_System" ];
          "Win32_System_Wmi" = [ "Win32_System" ];
          "Win32_UI" = [ "Win32" ];
          "Win32_UI_Accessibility" = [ "Win32_UI" ];
          "Win32_UI_ColorSystem" = [ "Win32_UI" ];
          "Win32_UI_Controls" = [ "Win32_UI" ];
          "Win32_UI_Controls_Dialogs" = [ "Win32_UI_Controls" ];
          "Win32_UI_HiDpi" = [ "Win32_UI" ];
          "Win32_UI_Input" = [ "Win32_UI" ];
          "Win32_UI_Input_Ime" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_KeyboardAndMouse" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Pointer" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Touch" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_XboxController" = [ "Win32_UI_Input" ];
          "Win32_UI_InteractionContext" = [ "Win32_UI" ];
          "Win32_UI_Magnification" = [ "Win32_UI" ];
          "Win32_UI_Shell" = [ "Win32_UI" ];
          "Win32_UI_Shell_Common" = [ "Win32_UI_Shell" ];
          "Win32_UI_Shell_PropertiesSystem" = [ "Win32_UI_Shell" ];
          "Win32_UI_TabletPC" = [ "Win32_UI" ];
          "Win32_UI_TextServices" = [ "Win32_UI" ];
          "Win32_UI_WindowsAndMessaging" = [ "Win32_UI" ];
          "Win32_Web" = [ "Win32" ];
          "Win32_Web_InternetExplorer" = [ "Win32_Web" ];
        };
        resolvedDefaultFeatures = [ "Win32" "Win32_Foundation" "Win32_Networking" "Win32_Networking_WinSock" "Win32_Security" "Win32_Security_Authentication" "Win32_Security_Authentication_Identity" "Win32_Security_Credentials" "Win32_Security_Cryptography" "Win32_Storage" "Win32_Storage_FileSystem" "Win32_System" "Win32_System_Console" "Win32_System_IO" "Win32_System_Memory" "Win32_System_SystemInformation" "Win32_System_Threading" "default" ];
      };
      "windows-targets 0.48.5" = rec {
        crateName = "windows-targets";
        version = "0.48.5";
        edition = "2018";
        sha256 = "034ljxqshifs1lan89xwpcy1hp0lhdh4b5n0d2z4fwjx2piacbws";
        libName = "windows_targets";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows_aarch64_gnullvm";
            packageId = "windows_aarch64_gnullvm 0.48.5";
            target = { target, features }: (pkgs.rust.lib.toRustTarget stdenv.hostPlatform == "aarch64-pc-windows-gnullvm");
          }
          {
            name = "windows_aarch64_msvc";
            packageId = "windows_aarch64_msvc 0.48.5";
            target = { target, features }: (("aarch64" == target."arch" or null) && ("msvc" == target."env" or null) && (!(target."windows_raw_dylib" or false)));
          }
          {
            name = "windows_i686_gnu";
            packageId = "windows_i686_gnu 0.48.5";
            target = { target, features }: (("x86" == target."arch" or null) && ("gnu" == target."env" or null) && (!(target."windows_raw_dylib" or false)));
          }
          {
            name = "windows_i686_msvc";
            packageId = "windows_i686_msvc 0.48.5";
            target = { target, features }: (("x86" == target."arch" or null) && ("msvc" == target."env" or null) && (!(target."windows_raw_dylib" or false)));
          }
          {
            name = "windows_x86_64_gnu";
            packageId = "windows_x86_64_gnu 0.48.5";
            target = { target, features }: (("x86_64" == target."arch" or null) && ("gnu" == target."env" or null) && (!("llvm" == target."abi" or null)) && (!(target."windows_raw_dylib" or false)));
          }
          {
            name = "windows_x86_64_gnullvm";
            packageId = "windows_x86_64_gnullvm 0.48.5";
            target = { target, features }: (pkgs.rust.lib.toRustTarget stdenv.hostPlatform == "x86_64-pc-windows-gnullvm");
          }
          {
            name = "windows_x86_64_msvc";
            packageId = "windows_x86_64_msvc 0.48.5";
            target = { target, features }: (("x86_64" == target."arch" or null) && ("msvc" == target."env" or null) && (!(target."windows_raw_dylib" or false)));
          }
        ];

      };
      "windows-targets 0.52.6" = rec {
        crateName = "windows-targets";
        version = "0.52.6";
        edition = "2021";
        sha256 = "0wwrx625nwlfp7k93r2rra568gad1mwd888h1jwnl0vfg5r4ywlv";
        libName = "windows_targets";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows_aarch64_gnullvm";
            packageId = "windows_aarch64_gnullvm 0.52.6";
            target = { target, features }: (pkgs.rust.lib.toRustTarget stdenv.hostPlatform == "aarch64-pc-windows-gnullvm");
          }
          {
            name = "windows_aarch64_msvc";
            packageId = "windows_aarch64_msvc 0.52.6";
            target = { target, features }: (("aarch64" == target."arch" or null) && ("msvc" == target."env" or null) && (!(target."windows_raw_dylib" or false)));
          }
          {
            name = "windows_i686_gnu";
            packageId = "windows_i686_gnu 0.52.6";
            target = { target, features }: (("x86" == target."arch" or null) && ("gnu" == target."env" or null) && (!("llvm" == target."abi" or null)) && (!(target."windows_raw_dylib" or false)));
          }
          {
            name = "windows_i686_gnullvm";
            packageId = "windows_i686_gnullvm";
            target = { target, features }: (pkgs.rust.lib.toRustTarget stdenv.hostPlatform == "i686-pc-windows-gnullvm");
          }
          {
            name = "windows_i686_msvc";
            packageId = "windows_i686_msvc 0.52.6";
            target = { target, features }: (("x86" == target."arch" or null) && ("msvc" == target."env" or null) && (!(target."windows_raw_dylib" or false)));
          }
          {
            name = "windows_x86_64_gnu";
            packageId = "windows_x86_64_gnu 0.52.6";
            target = { target, features }: (("x86_64" == target."arch" or null) && ("gnu" == target."env" or null) && (!("llvm" == target."abi" or null)) && (!(target."windows_raw_dylib" or false)));
          }
          {
            name = "windows_x86_64_gnullvm";
            packageId = "windows_x86_64_gnullvm 0.52.6";
            target = { target, features }: (pkgs.rust.lib.toRustTarget stdenv.hostPlatform == "x86_64-pc-windows-gnullvm");
          }
          {
            name = "windows_x86_64_msvc";
            packageId = "windows_x86_64_msvc 0.52.6";
            target = { target, features }: ((("x86_64" == target."arch" or null) || ("arm64ec" == target."arch" or null)) && ("msvc" == target."env" or null) && (!(target."windows_raw_dylib" or false)));
          }
        ];

      };
      "windows_aarch64_gnullvm 0.48.5" = rec {
        crateName = "windows_aarch64_gnullvm";
        version = "0.48.5";
        edition = "2018";
        sha256 = "1n05v7qblg1ci3i567inc7xrkmywczxrs1z3lj3rkkxw18py6f1b";
        authors = [
          "Microsoft"
        ];

      };
      "windows_aarch64_gnullvm 0.52.6" = rec {
        crateName = "windows_aarch64_gnullvm";
        version = "0.52.6";
        edition = "2021";
        sha256 = "1lrcq38cr2arvmz19v32qaggvj8bh1640mdm9c2fr877h0hn591j";
        authors = [
          "Microsoft"
        ];

      };
      "windows_aarch64_msvc 0.36.1" = rec {
        crateName = "windows_aarch64_msvc";
        version = "0.36.1";
        edition = "2018";
        sha256 = "0ixaxs2c37ll2smprzh0xq5p238zn8ylzb3lk1zddqmd77yw7f4v";
        authors = [
          "Microsoft"
        ];

      };
      "windows_aarch64_msvc 0.48.5" = rec {
        crateName = "windows_aarch64_msvc";
        version = "0.48.5";
        edition = "2018";
        sha256 = "1g5l4ry968p73g6bg6jgyvy9lb8fyhcs54067yzxpcpkf44k2dfw";
        authors = [
          "Microsoft"
        ];

      };
      "windows_aarch64_msvc 0.52.6" = rec {
        crateName = "windows_aarch64_msvc";
        version = "0.52.6";
        edition = "2021";
        sha256 = "0sfl0nysnz32yyfh773hpi49b1q700ah6y7sacmjbqjjn5xjmv09";
        authors = [
          "Microsoft"
        ];

      };
      "windows_i686_gnu 0.36.1" = rec {
        crateName = "windows_i686_gnu";
        version = "0.36.1";
        edition = "2018";
        sha256 = "1dm3svxfzamrv6kklyda9c3qylgwn5nwdps6p0kc9x6s077nq3hq";
        authors = [
          "Microsoft"
        ];

      };
      "windows_i686_gnu 0.48.5" = rec {
        crateName = "windows_i686_gnu";
        version = "0.48.5";
        edition = "2018";
        sha256 = "0gklnglwd9ilqx7ac3cn8hbhkraqisd0n83jxzf9837nvvkiand7";
        authors = [
          "Microsoft"
        ];

      };
      "windows_i686_gnu 0.52.6" = rec {
        crateName = "windows_i686_gnu";
        version = "0.52.6";
        edition = "2021";
        sha256 = "02zspglbykh1jh9pi7gn8g1f97jh1rrccni9ivmrfbl0mgamm6wf";
        authors = [
          "Microsoft"
        ];

      };
      "windows_i686_gnullvm" = rec {
        crateName = "windows_i686_gnullvm";
        version = "0.52.6";
        edition = "2021";
        sha256 = "0rpdx1537mw6slcpqa0rm3qixmsb79nbhqy5fsm3q2q9ik9m5vhf";
        authors = [
          "Microsoft"
        ];

      };
      "windows_i686_msvc 0.36.1" = rec {
        crateName = "windows_i686_msvc";
        version = "0.36.1";
        edition = "2018";
        sha256 = "097h2a7wig04wbmpi3rz1akdy4s8gslj5szsx8g2v0dj91qr3rz2";
        authors = [
          "Microsoft"
        ];

      };
      "windows_i686_msvc 0.48.5" = rec {
        crateName = "windows_i686_msvc";
        version = "0.48.5";
        edition = "2018";
        sha256 = "01m4rik437dl9rdf0ndnm2syh10hizvq0dajdkv2fjqcywrw4mcg";
        authors = [
          "Microsoft"
        ];

      };
      "windows_i686_msvc 0.52.6" = rec {
        crateName = "windows_i686_msvc";
        version = "0.52.6";
        edition = "2021";
        sha256 = "0rkcqmp4zzmfvrrrx01260q3xkpzi6fzi2x2pgdcdry50ny4h294";
        authors = [
          "Microsoft"
        ];

      };
      "windows_x86_64_gnu 0.36.1" = rec {
        crateName = "windows_x86_64_gnu";
        version = "0.36.1";
        edition = "2018";
        sha256 = "1qfrck3jnihymfrd01s8260d4snql8ks2p8yaabipi3nhwdigkad";
        authors = [
          "Microsoft"
        ];

      };
      "windows_x86_64_gnu 0.48.5" = rec {
        crateName = "windows_x86_64_gnu";
        version = "0.48.5";
        edition = "2018";
        sha256 = "13kiqqcvz2vnyxzydjh73hwgigsdr2z1xpzx313kxll34nyhmm2k";
        authors = [
          "Microsoft"
        ];

      };
      "windows_x86_64_gnu 0.52.6" = rec {
        crateName = "windows_x86_64_gnu";
        version = "0.52.6";
        edition = "2021";
        sha256 = "0y0sifqcb56a56mvn7xjgs8g43p33mfqkd8wj1yhrgxzma05qyhl";
        authors = [
          "Microsoft"
        ];

      };
      "windows_x86_64_gnullvm 0.48.5" = rec {
        crateName = "windows_x86_64_gnullvm";
        version = "0.48.5";
        edition = "2018";
        sha256 = "1k24810wfbgz8k48c2yknqjmiigmql6kk3knmddkv8k8g1v54yqb";
        authors = [
          "Microsoft"
        ];

      };
      "windows_x86_64_gnullvm 0.52.6" = rec {
        crateName = "windows_x86_64_gnullvm";
        version = "0.52.6";
        edition = "2021";
        sha256 = "03gda7zjx1qh8k9nnlgb7m3w3s1xkysg55hkd1wjch8pqhyv5m94";
        authors = [
          "Microsoft"
        ];

      };
      "windows_x86_64_msvc 0.36.1" = rec {
        crateName = "windows_x86_64_msvc";
        version = "0.36.1";
        edition = "2018";
        sha256 = "103n3xijm5vr7qxr1dps202ckfnv7njjnnfqmchg8gl5ii5cl4f8";
        authors = [
          "Microsoft"
        ];

      };
      "windows_x86_64_msvc 0.48.5" = rec {
        crateName = "windows_x86_64_msvc";
        version = "0.48.5";
        edition = "2018";
        sha256 = "0f4mdp895kkjh9zv8dxvn4pc10xr7839lf5pa9l0193i2pkgr57d";
        authors = [
          "Microsoft"
        ];

      };
      "windows_x86_64_msvc 0.52.6" = rec {
        crateName = "windows_x86_64_msvc";
        version = "0.52.6";
        edition = "2021";
        sha256 = "1v7rb5cibyzx8vak29pdrk8nx9hycsjs4w0jgms08qk49jl6v7sq";
        authors = [
          "Microsoft"
        ];

      };
      "winnow 0.5.40" = rec {
        crateName = "winnow";
        version = "0.5.40";
        edition = "2021";
        sha256 = "0xk8maai7gyxda673mmw3pj1hdizy5fpi7287vaywykkk19sk4zm";
        dependencies = [
          {
            name = "memchr";
            packageId = "memchr";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "debug" = [ "dep:anstream" "dep:anstyle" "dep:is-terminal" "dep:terminal_size" ];
          "default" = [ "std" ];
          "simd" = [ "dep:memchr" ];
          "std" = [ "alloc" "memchr?/std" ];
          "unstable-doc" = [ "alloc" "std" "simd" "unstable-recover" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "winnow 0.6.20" = rec {
        crateName = "winnow";
        version = "0.6.20";
        edition = "2021";
        sha256 = "16y4i8z9vh8hazjxg5mvmq0c5i35wlk8rxi5gkq6cn5vlb0zxh9n";
        dependencies = [
          {
            name = "memchr";
            packageId = "memchr";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "debug" = [ "std" "dep:anstream" "dep:anstyle" "dep:is-terminal" "dep:terminal_size" ];
          "default" = [ "std" ];
          "simd" = [ "dep:memchr" ];
          "std" = [ "alloc" "memchr?/std" ];
          "unstable-doc" = [ "alloc" "std" "simd" "unstable-recover" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "winreg" = rec {
        crateName = "winreg";
        version = "0.50.0";
        edition = "2018";
        sha256 = "1cddmp929k882mdh6i9f2as848f13qqna6czwsqzkh1pqnr5fkjj";
        authors = [
          "Igor Shaula <gentoo90@gmail.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.48.0";
            features = [ "Win32_Foundation" "Win32_System_Time" "Win32_System_Registry" "Win32_Security" "Win32_Storage_FileSystem" "Win32_System_Diagnostics_Debug" ];
          }
        ];
        features = {
          "chrono" = [ "dep:chrono" ];
          "serde" = [ "dep:serde" ];
          "serialization-serde" = [ "transactions" "serde" ];
        };
      };
      "ws_stream_wasm" = rec {
        crateName = "ws_stream_wasm";
        version = "0.7.4";
        edition = "2018";
        sha256 = "1x9p0zjmk89z0nnpc1qrzm7yfwaz8yj5fqmn4s3q3qvz47sgb6br";
        authors = [
          "Naja Melan <najamelan@autistici.org>"
        ];
        dependencies = [
          {
            name = "async_io_stream";
            packageId = "async_io_stream";
            features = [ "map_pharos" ];
          }
          {
            name = "futures";
            packageId = "futures";
            usesDefaultFeatures = false;
          }
          {
            name = "js-sys";
            packageId = "js-sys";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "pharos";
            packageId = "pharos";
          }
          {
            name = "send_wrapper";
            packageId = "send_wrapper 0.6.0";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
          }
          {
            name = "wasm-bindgen-futures";
            packageId = "wasm-bindgen-futures";
          }
          {
            name = "web-sys";
            packageId = "web-sys";
            features = [ "BinaryType" "Blob" "console" "MessageEvent" "WebSocket" "CloseEvent" "DomException" ];
          }
        ];
        buildDependencies = [
          {
            name = "rustc_version";
            packageId = "rustc_version";
          }
        ];
        devDependencies = [
          {
            name = "async_io_stream";
            packageId = "async_io_stream";
            features = [ "tokio_io" ];
          }
        ];
        features = {
          "tokio_io" = [ "async_io_stream/tokio_io" ];
        };
      };
      "wyz 0.2.0" = rec {
        crateName = "wyz";
        version = "0.2.0";
        edition = "2018";
        sha256 = "05028bk49b2ix1lz22sj65fnlxr0f29j2klkaqjxp6az3c6hprl5";
        authors = [
          "myrrlyn <self@myrrlyn.dev>"
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" ];
      };
      "wyz 0.5.1" = rec {
        crateName = "wyz";
        version = "0.5.1";
        edition = "2018";
        sha256 = "1vdrfy7i2bznnzjdl9vvrzljvs4s3qm8bnlgqwln6a941gy61wq5";
        authors = [
          "myrrlyn <self@myrrlyn.dev>"
        ];
        dependencies = [
          {
            name = "tap";
            packageId = "tap";
          }
        ];
        features = {
          "default" = [ "std" ];
          "garbage" = [ "once_cell" "typemap" ];
          "once_cell" = [ "dep:once_cell" ];
          "std" = [ "alloc" ];
          "typemap" = [ "dep:typemap" ];
        };
      };
      "x25519-dalek" = rec {
        crateName = "x25519-dalek";
        version = "2.0.1";
        edition = "2021";
        sha256 = "0xyjgqpsa0q6pprakdp58q1hy45rf8wnqqscgzx0gyw13hr6ir67";
        libName = "x25519_dalek";
        authors = [
          "Isis Lovecruft <isis@patternsinthevoid.net>"
          "DebugSteven <debugsteven@gmail.com>"
          "Henry de Valence <hdevalence@hdevalence.ca>"
        ];
        dependencies = [
          {
            name = "curve25519-dalek";
            packageId = "curve25519-dalek";
            usesDefaultFeatures = false;
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
            usesDefaultFeatures = false;
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "zeroize_derive" ];
          }
        ];
        devDependencies = [
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
            usesDefaultFeatures = false;
            features = [ "getrandom" ];
          }
        ];
        features = {
          "alloc" = [ "curve25519-dalek/alloc" "serde?/alloc" "zeroize?/alloc" ];
          "default" = [ "alloc" "precomputed-tables" "zeroize" ];
          "getrandom" = [ "rand_core/getrandom" ];
          "precomputed-tables" = [ "curve25519-dalek/precomputed-tables" ];
          "serde" = [ "dep:serde" "curve25519-dalek/serde" ];
          "zeroize" = [ "dep:zeroize" "curve25519-dalek/zeroize" ];
        };
        resolvedDefaultFeatures = [ "static_secrets" "zeroize" ];
      };
      "x509-parser" = rec {
        crateName = "x509-parser";
        version = "0.14.0";
        edition = "2018";
        sha256 = "1j7b3xxpwik38y9rajglmhis551gj3zz5irw1vj1bqkwnsvvxv70";
        libName = "x509_parser";
        authors = [
          "Pierre Chifflier <chifflier@wzdftpd.net>"
        ];
        dependencies = [
          {
            name = "asn1-rs";
            packageId = "asn1-rs";
            features = [ "datetime" ];
          }
          {
            name = "base64";
            packageId = "base64 0.13.1";
          }
          {
            name = "data-encoding";
            packageId = "data-encoding";
          }
          {
            name = "der-parser";
            packageId = "der-parser";
            features = [ "bigint" ];
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "nom";
            packageId = "nom";
          }
          {
            name = "oid-registry";
            packageId = "oid-registry";
            features = [ "crypto" "x509" "x962" ];
          }
          {
            name = "rusticata-macros";
            packageId = "rusticata-macros";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "time";
            packageId = "time";
            features = [ "formatting" ];
          }
        ];
        features = {
          "ring" = [ "dep:ring" ];
          "verify" = [ "ring" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "xattr" = rec {
        crateName = "xattr";
        version = "1.3.1";
        edition = "2021";
        sha256 = "0kqxm36w89vc6qcpn6pizlhgjgzq138sx4hdhbv2g6wk4ld4za4d";
        authors = [
          "Steven Allen <steven@stebalien.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (("freebsd" == target."os" or null) || ("netbsd" == target."os" or null));
          }
          {
            name = "linux-raw-sys";
            packageId = "linux-raw-sys";
            usesDefaultFeatures = false;
            target = { target, features }: ("linux" == target."os" or null);
            features = [ "std" ];
          }
          {
            name = "rustix";
            packageId = "rustix";
            usesDefaultFeatures = false;
            features = [ "fs" "std" ];
          }
        ];
        devDependencies = [
          {
            name = "rustix";
            packageId = "rustix";
            usesDefaultFeatures = false;
            features = [ "net" ];
          }
        ];
        features = {
          "default" = [ "unsupported" ];
        };
        resolvedDefaultFeatures = [ "default" "unsupported" ];
      };
      "xmlparser" = rec {
        crateName = "xmlparser";
        version = "0.13.6";
        edition = "2018";
        sha256 = "1r796g21c70p983ax0j6rmhzmalg4rhx61mvd4farxdhfyvy1zk6";
        authors = [
          "Yevhenii Reizner <razrfalcon@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "yaml-rust" = rec {
        crateName = "yaml-rust";
        version = "0.4.5";
        edition = "2018";
        sha256 = "118wbqrr4n6wgk5rjjnlrdlahawlxc1bdsx146mwk8f79in97han";
        libName = "yaml_rust";
        authors = [
          "Yuheng Chen <yuhengchen@sensetime.com>"
        ];
        dependencies = [
          {
            name = "linked-hash-map";
            packageId = "linked-hash-map";
          }
        ];

      };
      "yansi 0.5.1" = rec {
        crateName = "yansi";
        version = "0.5.1";
        edition = "2015";
        sha256 = "1v4qljgzh73knr7291cgwrf56zrvhmpn837n5n5pypzq1kciq109";
        authors = [
          "Sergio Benitez <sb@sergio.bz>"
        ];

      };
      "yansi 1.0.1" = rec {
        crateName = "yansi";
        version = "1.0.1";
        edition = "2021";
        sha256 = "0jdh55jyv0dpd38ij4qh60zglbw9aa8wafqai6m0wa7xaxk3mrfg";
        authors = [
          "Sergio Benitez <sb@sergio.bz>"
        ];
        features = {
          "default" = [ "std" ];
          "detect-env" = [ "std" ];
          "detect-tty" = [ "is-terminal" "std" ];
          "hyperlink" = [ "std" ];
          "is-terminal" = [ "dep:is-terminal" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "yasna" = rec {
        crateName = "yasna";
        version = "0.5.2";
        edition = "2018";
        sha256 = "1ka4ixrplnrfqyl1kymdj8cwpdp2k0kdr73b57hilcn1kiab6yz1";
        authors = [
          "Masaki Hara <ackie.h.gmai@gmail.com>"
        ];
        dependencies = [
          {
            name = "time";
            packageId = "time";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
        ];
        features = {
          "bit-vec" = [ "dep:bit-vec" ];
          "num-bigint" = [ "dep:num-bigint" ];
          "time" = [ "dep:time" ];
        };
        resolvedDefaultFeatures = [ "default" "std" "time" ];
      };
      "yup-oauth2" = rec {
        crateName = "yup-oauth2";
        version = "8.3.2";
        edition = "2018";
        sha256 = "1f1nsr2bfawab0cgjfxqxflxc952qn1xxhdmgxgsc1q9xc5a87dn";
        libName = "yup_oauth2";
        authors = [
          "Sebastian Thiel <byronimo@gmail.com>"
          "Lewin Bormann <lbo@spheniscida.de>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "base64";
            packageId = "base64 0.21.7";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "http";
            packageId = "http 0.2.12";
          }
          {
            name = "hyper";
            packageId = "hyper 0.14.30";
            features = [ "client" "server" "tcp" "http2" ];
          }
          {
            name = "hyper-rustls";
            packageId = "hyper-rustls 0.24.2";
            optional = true;
            features = [ "http2" ];
          }
          {
            name = "itertools";
            packageId = "itertools 0.12.1";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "percent-encoding";
            packageId = "percent-encoding";
          }
          {
            name = "rustls";
            packageId = "rustls 0.22.4";
            optional = true;
          }
          {
            name = "rustls-pemfile";
            packageId = "rustls-pemfile 1.0.4";
            optional = true;
          }
          {
            name = "seahash";
            packageId = "seahash";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "time";
            packageId = "time";
            features = [ "local-offset" "parsing" "serde" ];
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "fs" "macros" "io-std" "io-util" "time" "sync" "rt" ];
          }
          {
            name = "tower-service";
            packageId = "tower-service";
          }
          {
            name = "url";
            packageId = "url";
          }
        ];
        devDependencies = [
          {
            name = "hyper-rustls";
            packageId = "hyper-rustls 0.24.2";
          }
        ];
        features = {
          "default" = [ "hyper-rustls" "service_account" ];
          "hyper-rustls" = [ "dep:hyper-rustls" ];
          "hyper-tls" = [ "dep:hyper-tls" ];
          "rustls" = [ "dep:rustls" ];
          "rustls-pemfile" = [ "dep:rustls-pemfile" ];
          "service_account" = [ "hyper-rustls" "rustls" "rustls-pemfile" ];
        };
        resolvedDefaultFeatures = [ "default" "hyper-rustls" "rustls" "rustls-pemfile" "service_account" ];
      };
      "zerocopy" = rec {
        crateName = "zerocopy";
        version = "0.7.35";
        edition = "2018";
        sha256 = "1w36q7b9il2flg0qskapgi9ymgg7p985vniqd09vi0mwib8lz6qv";
        authors = [
          "Joshua Liebow-Feeser <joshlf@google.com>"
        ];
        dependencies = [
          {
            name = "byteorder";
            packageId = "byteorder";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "zerocopy-derive";
            packageId = "zerocopy-derive";
            optional = true;
          }
          {
            name = "zerocopy-derive";
            packageId = "zerocopy-derive";
            target = { target, features }: false;
          }
        ];
        devDependencies = [
          {
            name = "zerocopy-derive";
            packageId = "zerocopy-derive";
          }
        ];
        features = {
          "__internal_use_only_features_that_work_on_stable" = [ "alloc" "derive" "simd" ];
          "byteorder" = [ "dep:byteorder" ];
          "default" = [ "byteorder" ];
          "derive" = [ "zerocopy-derive" ];
          "simd-nightly" = [ "simd" ];
          "zerocopy-derive" = [ "dep:zerocopy-derive" ];
        };
        resolvedDefaultFeatures = [ "byteorder" "default" "derive" "simd" "zerocopy-derive" ];
      };
      "zerocopy-derive" = rec {
        crateName = "zerocopy-derive";
        version = "0.7.35";
        edition = "2018";
        sha256 = "0gnf2ap2y92nwdalzz3x7142f2b83sni66l39vxp2ijd6j080kzs";
        procMacro = true;
        libName = "zerocopy_derive";
        authors = [
          "Joshua Liebow-Feeser <joshlf@google.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.86";
          }
          {
            name = "quote";
            packageId = "quote 1.0.37";
          }
          {
            name = "syn";
            packageId = "syn 2.0.77";
          }
        ];

      };
      "zeroize" = rec {
        crateName = "zeroize";
        version = "1.8.1";
        edition = "2021";
        sha256 = "1pjdrmjwmszpxfd7r860jx54cyk94qk59x13sc307cvr5256glyf";
        authors = [
          "The RustCrypto Project Developers"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "zeroize_derive";
            packageId = "zeroize_derive";
            optional = true;
          }
        ];
        features = {
          "default" = [ "alloc" ];
          "derive" = [ "zeroize_derive" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "alloc" ];
          "zeroize_derive" = [ "dep:zeroize_derive" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "serde" "zeroize_derive" ];
      };
      "zeroize_derive" = rec {
        crateName = "zeroize_derive";
        version = "1.4.2";
        edition = "2021";
        sha256 = "0sczjlqjdmrp3wn62g7mw6p438c9j4jgp2f9zamd56991mdycdnf";
        procMacro = true;
        authors = [
          "The RustCrypto Project Developers"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.86";
          }
          {
            name = "quote";
            packageId = "quote 1.0.37";
          }
          {
            name = "syn";
            packageId = "syn 2.0.77";
            features = [ "full" "extra-traits" "visit" ];
          }
        ];

      };
      "zip 0.6.6" = rec {
        crateName = "zip";
        version = "0.6.6";
        edition = "2021";
        sha256 = "0qcjbqfvbwxi5g9wbymf2r05cvziic2qqj4xy64q3hp48vi980vn";
        authors = [
          "Mathijs van de Nes <git@mathijs.vd-nes.nl>"
          "Marli Frost <marli@frost.red>"
          "Ryan Levick <ryan.levick@gmail.com>"
        ];
        dependencies = [
          {
            name = "aes";
            packageId = "aes";
            optional = true;
          }
          {
            name = "byteorder";
            packageId = "byteorder";
          }
          {
            name = "bzip2";
            packageId = "bzip2";
            optional = true;
          }
          {
            name = "constant_time_eq";
            packageId = "constant_time_eq 0.1.5";
            optional = true;
          }
          {
            name = "crc32fast";
            packageId = "crc32fast";
          }
          {
            name = "crossbeam-utils";
            packageId = "crossbeam-utils";
            target = { target, features }: ((("arm" == target."arch" or null) && ("32" == target."pointer_width" or null)) || ("mips" == target."arch" or null) || ("powerpc" == target."arch" or null));
          }
          {
            name = "flate2";
            packageId = "flate2";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "hmac";
            packageId = "hmac";
            optional = true;
            features = [ "reset" ];
          }
          {
            name = "pbkdf2";
            packageId = "pbkdf2 0.11.0";
            optional = true;
          }
          {
            name = "sha1";
            packageId = "sha1";
            optional = true;
          }
          {
            name = "time";
            packageId = "time";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "zstd";
            packageId = "zstd 0.11.2+zstd.1.5.2";
            optional = true;
          }
        ];
        devDependencies = [
          {
            name = "time";
            packageId = "time";
            features = [ "formatting" "macros" ];
          }
        ];
        features = {
          "aes" = [ "dep:aes" ];
          "aes-crypto" = [ "aes" "constant_time_eq" "hmac" "pbkdf2" "sha1" ];
          "bzip2" = [ "dep:bzip2" ];
          "constant_time_eq" = [ "dep:constant_time_eq" ];
          "default" = [ "aes-crypto" "bzip2" "deflate" "time" "zstd" ];
          "deflate" = [ "flate2/rust_backend" ];
          "deflate-miniz" = [ "flate2/default" ];
          "deflate-zlib" = [ "flate2/zlib" ];
          "flate2" = [ "dep:flate2" ];
          "hmac" = [ "dep:hmac" ];
          "pbkdf2" = [ "dep:pbkdf2" ];
          "sha1" = [ "dep:sha1" ];
          "time" = [ "dep:time" ];
          "zstd" = [ "dep:zstd" ];
        };
        resolvedDefaultFeatures = [ "aes" "aes-crypto" "bzip2" "constant_time_eq" "default" "deflate" "flate2" "hmac" "pbkdf2" "sha1" "time" "zstd" ];
      };
      "zip 2.2.0" = rec {
        crateName = "zip";
        version = "2.2.0";
        edition = "2021";
        sha256 = "151lrzswjkhwzlr6dkmgbi4s51sa8dr496n6mwiswms0xa444pnw";
        build = "src/build.rs";
        authors = [
          "Mathijs van de Nes <git@mathijs.vd-nes.nl>"
          "Marli Frost <marli@frost.red>"
          "Ryan Levick <ryan.levick@gmail.com>"
          "Chris Hennick <hennickc@amazon.com>"
        ];
        dependencies = [
          {
            name = "arbitrary";
            packageId = "arbitrary";
            target = { target, features }: (target."fuzzing" or false);
            features = [ "derive" ];
          }
          {
            name = "crc32fast";
            packageId = "crc32fast";
          }
          {
            name = "crossbeam-utils";
            packageId = "crossbeam-utils";
            target = { target, features }: ((("arm" == target."arch" or null) && ("32" == target."pointer_width" or null)) || ("mips" == target."arch" or null) || ("powerpc" == target."arch" or null));
          }
          {
            name = "displaydoc";
            packageId = "displaydoc";
            usesDefaultFeatures = false;
          }
          {
            name = "flate2";
            packageId = "flate2";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "indexmap";
            packageId = "indexmap 2.5.0";
          }
          {
            name = "memchr";
            packageId = "memchr";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "zopfli";
            packageId = "zopfli";
            optional = true;
          }
        ];
        features = {
          "aes" = [ "dep:aes" ];
          "aes-crypto" = [ "aes" "constant_time_eq" "hmac" "pbkdf2" "sha1" "rand" "zeroize" ];
          "bzip2" = [ "dep:bzip2" ];
          "chrono" = [ "chrono/default" ];
          "constant_time_eq" = [ "dep:constant_time_eq" ];
          "default" = [ "aes-crypto" "bzip2" "deflate64" "deflate" "lzma" "time" "zstd" "xz" ];
          "deflate" = [ "flate2/rust_backend" "deflate-zopfli" "deflate-flate2" ];
          "deflate-flate2" = [ "flate2/any_impl" "_deflate-any" ];
          "deflate-miniz" = [ "deflate" "deflate-flate2" ];
          "deflate-zlib" = [ "flate2/zlib" "deflate-flate2" ];
          "deflate-zlib-ng" = [ "flate2/zlib-ng" "deflate-flate2" ];
          "deflate-zopfli" = [ "zopfli" "_deflate-any" ];
          "deflate64" = [ "dep:deflate64" ];
          "flate2" = [ "dep:flate2" ];
          "hmac" = [ "dep:hmac" ];
          "lzma" = [ "lzma-rs/stream" ];
          "lzma-rs" = [ "dep:lzma-rs" ];
          "pbkdf2" = [ "dep:pbkdf2" ];
          "rand" = [ "dep:rand" ];
          "sha1" = [ "dep:sha1" ];
          "time" = [ "dep:time" ];
          "xz" = [ "lzma-rs/raw_decoder" ];
          "zeroize" = [ "dep:zeroize" ];
          "zopfli" = [ "dep:zopfli" ];
          "zstd" = [ "dep:zstd" ];
        };
        resolvedDefaultFeatures = [ "_deflate-any" "deflate" "deflate-flate2" "deflate-zopfli" "flate2" "zopfli" ];
      };
      "zopfli" = rec {
        crateName = "zopfli";
        version = "0.8.1";
        edition = "2021";
        crateBin = [];
        sha256 = "0ip9azz9ldk19m0m1hdppz3n5zcz0cywbg1vx59g4p5c3cwry0g5";
        dependencies = [
          {
            name = "bumpalo";
            packageId = "bumpalo";
          }
          {
            name = "crc32fast";
            packageId = "crc32fast";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "lockfree-object-pool";
            packageId = "lockfree-object-pool";
            optional = true;
          }
          {
            name = "log";
            packageId = "log";
            optional = true;
          }
          {
            name = "once_cell";
            packageId = "once_cell";
            optional = true;
          }
          {
            name = "simd-adler32";
            packageId = "simd-adler32";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" "gzip" "zlib" ];
          "gzip" = [ "dep:crc32fast" ];
          "nightly" = [ "crc32fast?/nightly" ];
          "std" = [ "dep:log" "dep:lockfree-object-pool" "dep:once_cell" "crc32fast?/std" "simd-adler32?/std" ];
          "zlib" = [ "dep:simd-adler32" ];
        };
        resolvedDefaultFeatures = [ "default" "gzip" "std" "zlib" ];
      };
      "zstd 0.11.2+zstd.1.5.2" = rec {
        crateName = "zstd";
        version = "0.11.2+zstd.1.5.2";
        edition = "2018";
        sha256 = "1r7xlmgnifhxbfyid8vkcnd5ip16gx9hf89d1l0lzrpc4q1rdk10";
        authors = [
          "Alexandre Bury <alexandre.bury@gmail.com>"
        ];
        dependencies = [
          {
            name = "zstd-safe";
            packageId = "zstd-safe 5.0.2+zstd.1.5.2";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
        ];
        features = {
          "arrays" = [ "zstd-safe/arrays" ];
          "bindgen" = [ "zstd-safe/bindgen" ];
          "debug" = [ "zstd-safe/debug" ];
          "default" = [ "legacy" "arrays" "zdict_builder" ];
          "experimental" = [ "zstd-safe/experimental" ];
          "legacy" = [ "zstd-safe/legacy" ];
          "no_asm" = [ "zstd-safe/no_asm" ];
          "pkg-config" = [ "zstd-safe/pkg-config" ];
          "thin" = [ "zstd-safe/thin" ];
          "zdict_builder" = [ "zstd-safe/zdict_builder" ];
          "zstdmt" = [ "zstd-safe/zstdmt" ];
        };
        resolvedDefaultFeatures = [ "arrays" "default" "legacy" "zdict_builder" ];
      };
      "zstd 0.13.2" = rec {
        crateName = "zstd";
        version = "0.13.2";
        edition = "2018";
        sha256 = "1ygkr6wspm9clbp7ykyl0rv69cfsf9q4lic9wcqiwn34lrwbgwpw";
        authors = [
          "Alexandre Bury <alexandre.bury@gmail.com>"
        ];
        dependencies = [
          {
            name = "zstd-safe";
            packageId = "zstd-safe 7.2.1";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
        ];
        features = {
          "arrays" = [ "zstd-safe/arrays" ];
          "bindgen" = [ "zstd-safe/bindgen" ];
          "debug" = [ "zstd-safe/debug" ];
          "default" = [ "legacy" "arrays" "zdict_builder" ];
          "experimental" = [ "zstd-safe/experimental" ];
          "fat-lto" = [ "zstd-safe/fat-lto" ];
          "legacy" = [ "zstd-safe/legacy" ];
          "no_asm" = [ "zstd-safe/no_asm" ];
          "pkg-config" = [ "zstd-safe/pkg-config" ];
          "thin" = [ "zstd-safe/thin" ];
          "thin-lto" = [ "zstd-safe/thin-lto" ];
          "zdict_builder" = [ "zstd-safe/zdict_builder" ];
          "zstdmt" = [ "zstd-safe/zstdmt" ];
        };
        resolvedDefaultFeatures = [ "arrays" "default" "legacy" "zdict_builder" ];
      };
      "zstd-safe 5.0.2+zstd.1.5.2" = rec {
        crateName = "zstd-safe";
        version = "5.0.2+zstd.1.5.2";
        edition = "2018";
        sha256 = "1nzl4q3xl68pq58g9xlym299bvjdii8cl7ix595ym7jgw22maahx";
        libName = "zstd_safe";
        authors = [
          "Alexandre Bury <alexandre.bury@gmail.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "zstd-sys";
            packageId = "zstd-sys";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "bindgen" = [ "zstd-sys/bindgen" ];
          "debug" = [ "zstd-sys/debug" ];
          "default" = [ "legacy" "arrays" "zdict_builder" ];
          "experimental" = [ "zstd-sys/experimental" ];
          "legacy" = [ "zstd-sys/legacy" ];
          "no_asm" = [ "zstd-sys/no_asm" ];
          "pkg-config" = [ "zstd-sys/pkg-config" ];
          "std" = [ "zstd-sys/std" ];
          "thin" = [ "zstd-sys/thin" ];
          "zdict_builder" = [ "zstd-sys/zdict_builder" ];
          "zstdmt" = [ "zstd-sys/zstdmt" ];
        };
        resolvedDefaultFeatures = [ "arrays" "legacy" "std" "zdict_builder" ];
      };
      "zstd-safe 7.2.1" = rec {
        crateName = "zstd-safe";
        version = "7.2.1";
        edition = "2018";
        sha256 = "0nch85m5cr493y26yvndm6a8j6sd9mxpr2awrim3dslcnr6sp8sl";
        libName = "zstd_safe";
        authors = [
          "Alexandre Bury <alexandre.bury@gmail.com>"
        ];
        dependencies = [
          {
            name = "zstd-sys";
            packageId = "zstd-sys";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "bindgen" = [ "zstd-sys/bindgen" ];
          "debug" = [ "zstd-sys/debug" ];
          "default" = [ "legacy" "arrays" "zdict_builder" ];
          "experimental" = [ "zstd-sys/experimental" ];
          "fat-lto" = [ "zstd-sys/fat-lto" ];
          "legacy" = [ "zstd-sys/legacy" ];
          "no_asm" = [ "zstd-sys/no_asm" ];
          "pkg-config" = [ "zstd-sys/pkg-config" ];
          "std" = [ "zstd-sys/std" ];
          "thin" = [ "zstd-sys/thin" ];
          "thin-lto" = [ "zstd-sys/thin-lto" ];
          "zdict_builder" = [ "zstd-sys/zdict_builder" ];
          "zstdmt" = [ "zstd-sys/zstdmt" ];
        };
        resolvedDefaultFeatures = [ "arrays" "legacy" "std" "zdict_builder" ];
      };
      "zstd-sys" = rec {
        crateName = "zstd-sys";
        version = "2.0.12+zstd.1.5.6";
        edition = "2018";
        links = "zstd";
        sha256 = "04sc9svs555yw90d2xcjxr8lg3zqrycdxxlzkaflbjy3431l0kha";
        libName = "zstd_sys";
        authors = [
          "Alexandre Bury <alexandre.bury@gmail.com>"
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
            features = [ "parallel" ];
          }
          {
            name = "pkg-config";
            packageId = "pkg-config";
          }
        ];
        features = {
          "bindgen" = [ "dep:bindgen" ];
          "default" = [ "legacy" "zdict_builder" ];
        };
        resolvedDefaultFeatures = [ "default" "legacy" "std" "zdict_builder" ];
      };
    };

    #
# crate2nix/default.nix (excerpt start)
#

  /* Target (platform) data for conditional dependencies.
    This corresponds roughly to what buildRustCrate is setting.
  */
  makeDefaultTarget = platform: {
    unix = platform.isUnix;
    windows = platform.isWindows;
    fuchsia = true;
    test = false;

    /* We are choosing an arbitrary rust version to grab `lib` from,
      which is unfortunate, but `lib` has been version-agnostic the
      whole time so this is good enough for now.
    */
    os = pkgs.rust.lib.toTargetOs platform;
    arch = pkgs.rust.lib.toTargetArch platform;
    family = pkgs.rust.lib.toTargetFamily platform;
    vendor = pkgs.rust.lib.toTargetVendor platform;
    env = "gnu";
    endian =
      if platform.parsed.cpu.significantByte.name == "littleEndian"
      then "little" else "big";
    pointer_width = toString platform.parsed.cpu.bits;
    debug_assertions = false;
  };

  /* Filters common temp files and build files. */
  # TODO(pkolloch): Substitute with gitignore filter
  sourceFilter = name: type:
    let
      baseName = builtins.baseNameOf (builtins.toString name);
    in
      ! (
        # Filter out git
        baseName == ".gitignore"
        || (type == "directory" && baseName == ".git")

        # Filter out build results
        || (
          type == "directory" && (
            baseName == "target"
            || baseName == "_site"
            || baseName == ".sass-cache"
            || baseName == ".jekyll-metadata"
            || baseName == "build-artifacts"
          )
        )

        # Filter out nix-build result symlinks
        || (
          type == "symlink" && lib.hasPrefix "result" baseName
        )

        # Filter out IDE config
        || (
          type == "directory" && (
            baseName == ".idea" || baseName == ".vscode"
          )
        ) || lib.hasSuffix ".iml" baseName

        # Filter out nix build files
        || baseName == "Cargo.nix"

        # Filter out editor backup / swap files.
        || lib.hasSuffix "~" baseName
        || builtins.match "^\\.sw[a-z]$$" baseName != null
        || builtins.match "^\\..*\\.sw[a-z]$$" baseName != null
        || lib.hasSuffix ".tmp" baseName
        || lib.hasSuffix ".bak" baseName
        || baseName == "tests.nix"
      );

  /* Returns a crate which depends on successful test execution
    of crate given as the second argument.

    testCrateFlags: list of flags to pass to the test exectuable
    testInputs: list of packages that should be available during test execution
  */
  crateWithTest = { crate, testCrate, testCrateFlags, testInputs, testPreRun, testPostRun }:
    assert builtins.typeOf testCrateFlags == "list";
    assert builtins.typeOf testInputs == "list";
    assert builtins.typeOf testPreRun == "string";
    assert builtins.typeOf testPostRun == "string";
    let
      # override the `crate` so that it will build and execute tests instead of
      # building the actual lib and bin targets We just have to pass `--test`
      # to rustc and it will do the right thing.  We execute the tests and copy
      # their log and the test executables to $out for later inspection.
      test =
        let
          drv = testCrate.override
            (
              _: {
                buildTests = true;
              }
            );
          # If the user hasn't set any pre/post commands, we don't want to
          # insert empty lines. This means that any existing users of crate2nix
          # don't get a spurious rebuild unless they set these explicitly.
          testCommand = pkgs.lib.concatStringsSep "\n"
            (pkgs.lib.filter (s: s != "") [
              testPreRun
              "$f $testCrateFlags 2>&1 | tee -a $out"
              testPostRun
            ]);
        in
        pkgs.runCommand "run-tests-${testCrate.name}"
          {
            inherit testCrateFlags;
            buildInputs = testInputs;
          } ''
          set -e

          export RUST_BACKTRACE=1

          # recreate a file hierarchy as when running tests with cargo

          # the source for test data
          # It's necessary to locate the source in $NIX_BUILD_TOP/source/
          # instead of $NIX_BUILD_TOP/
          # because we compiled those test binaries in the former and not the latter.
          # So all paths will expect source tree to be there and not in the build top directly.
          # For example: $NIX_BUILD_TOP := /build in general, if you ask yourself.
          # NOTE: There could be edge cases if `crate.sourceRoot` does exist but
          # it's very hard to reason about them.
          # Open a bug if you run into this!
          mkdir -p source/
          cd source/

          ${pkgs.buildPackages.xorg.lndir}/bin/lndir ${crate.src}

          # build outputs
          testRoot=target/debug
          mkdir -p $testRoot

          # executables of the crate
          # we copy to prevent std::env::current_exe() to resolve to a store location
          for i in ${crate}/bin/*; do
            cp "$i" "$testRoot"
          done
          chmod +w -R .

          # test harness executables are suffixed with a hash, like cargo does
          # this allows to prevent name collision with the main
          # executables of the crate
          hash=$(basename $out)
          for file in ${drv}/tests/*; do
            f=$testRoot/$(basename $file)-$hash
            cp $file $f
            ${testCommand}
          done
        '';
    in
    pkgs.runCommand "${crate.name}-linked"
      {
        inherit (crate) outputs crateName;
        passthru = (crate.passthru or { }) // {
          inherit test;
        };
      }
      (lib.optionalString (stdenv.buildPlatform.canExecute stdenv.hostPlatform) ''
        echo tested by ${test}
      '' + ''
        ${lib.concatMapStringsSep "\n" (output: "ln -s ${crate.${output}} ${"$"}${output}") crate.outputs}
      '');

  /* A restricted overridable version of builtRustCratesWithFeatures. */
  buildRustCrateWithFeatures =
    { packageId
    , features ? rootFeatures
    , crateOverrides ? defaultCrateOverrides
    , buildRustCrateForPkgsFunc ? null
    , runTests ? false
    , testCrateFlags ? [ ]
    , testInputs ? [ ]
      # Any command to run immediatelly before a test is executed.
    , testPreRun ? ""
      # Any command run immediatelly after a test is executed.
    , testPostRun ? ""
    }:
    lib.makeOverridable
      (
        { features
        , crateOverrides
        , runTests
        , testCrateFlags
        , testInputs
        , testPreRun
        , testPostRun
        }:
        let
          buildRustCrateForPkgsFuncOverriden =
            if buildRustCrateForPkgsFunc != null
            then buildRustCrateForPkgsFunc
            else
              (
                if crateOverrides == pkgs.defaultCrateOverrides
                then buildRustCrateForPkgs
                else
                  pkgs: (buildRustCrateForPkgs pkgs).override {
                    defaultCrateOverrides = crateOverrides;
                  }
              );
          builtRustCrates = builtRustCratesWithFeatures {
            inherit packageId features;
            buildRustCrateForPkgsFunc = buildRustCrateForPkgsFuncOverriden;
            runTests = false;
          };
          builtTestRustCrates = builtRustCratesWithFeatures {
            inherit packageId features;
            buildRustCrateForPkgsFunc = buildRustCrateForPkgsFuncOverriden;
            runTests = true;
          };
          drv = builtRustCrates.crates.${packageId};
          testDrv = builtTestRustCrates.crates.${packageId};
          derivation =
            if runTests then
              crateWithTest
                {
                  crate = drv;
                  testCrate = testDrv;
                  inherit testCrateFlags testInputs testPreRun testPostRun;
                }
            else drv;
        in
        derivation
      )
      { inherit features crateOverrides runTests testCrateFlags testInputs testPreRun testPostRun; };

  /* Returns an attr set with packageId mapped to the result of buildRustCrateForPkgsFunc
    for the corresponding crate.
  */
  builtRustCratesWithFeatures =
    { packageId
    , features
    , crateConfigs ? crates
    , buildRustCrateForPkgsFunc
    , runTests
    , makeTarget ? makeDefaultTarget
    } @ args:
      assert (builtins.isAttrs crateConfigs);
      assert (builtins.isString packageId);
      assert (builtins.isList features);
      assert (builtins.isAttrs (makeTarget stdenv.hostPlatform));
      assert (builtins.isBool runTests);
      let
        rootPackageId = packageId;
        mergedFeatures = mergePackageFeatures
          (
            args // {
              inherit rootPackageId;
              target = makeTarget stdenv.hostPlatform // { test = runTests; };
            }
          );
        # Memoize built packages so that reappearing packages are only built once.
        builtByPackageIdByPkgs = mkBuiltByPackageIdByPkgs pkgs;
        mkBuiltByPackageIdByPkgs = pkgs:
          let
            self = {
              crates = lib.mapAttrs (packageId: value: buildByPackageIdForPkgsImpl self pkgs packageId) crateConfigs;
              target = makeTarget pkgs.stdenv.hostPlatform;
              build = mkBuiltByPackageIdByPkgs pkgs.buildPackages;
            };
          in
          self;
        buildByPackageIdForPkgsImpl = self: pkgs: packageId:
          let
            features = mergedFeatures."${packageId}" or [ ];
            crateConfig' = crateConfigs."${packageId}";
            crateConfig =
              builtins.removeAttrs crateConfig' [ "resolvedDefaultFeatures" "devDependencies" ];
            devDependencies =
              lib.optionals
                (runTests && packageId == rootPackageId)
                (crateConfig'.devDependencies or [ ]);
            dependencies =
              dependencyDerivations {
                inherit features;
                inherit (self) target;
                buildByPackageId = depPackageId:
                  # proc_macro crates must be compiled for the build architecture
                  if crateConfigs.${depPackageId}.procMacro or false
                  then self.build.crates.${depPackageId}
                  else self.crates.${depPackageId};
                dependencies =
                  (crateConfig.dependencies or [ ])
                  ++ devDependencies;
              };
            buildDependencies =
              dependencyDerivations {
                inherit features;
                inherit (self.build) target;
                buildByPackageId = depPackageId:
                  self.build.crates.${depPackageId};
                dependencies = crateConfig.buildDependencies or [ ];
              };
            dependenciesWithRenames =
              let
                buildDeps = filterEnabledDependencies {
                  inherit features;
                  inherit (self) target;
                  dependencies = crateConfig.dependencies or [ ] ++ devDependencies;
                };
                hostDeps = filterEnabledDependencies {
                  inherit features;
                  inherit (self.build) target;
                  dependencies = crateConfig.buildDependencies or [ ];
                };
              in
              lib.filter (d: d ? "rename") (hostDeps ++ buildDeps);
            # Crate renames have the form:
            #
            # {
            #    crate_name = [
            #       { version = "1.2.3"; rename = "crate_name01"; }
            #    ];
            #    # ...
            # }
            crateRenames =
              let
                grouped =
                  lib.groupBy
                    (dependency: dependency.name)
                    dependenciesWithRenames;
                versionAndRename = dep:
                  let
                    package = crateConfigs."${dep.packageId}";
                  in
                  { inherit (dep) rename; inherit (package) version; };
              in
              lib.mapAttrs (name: builtins.map versionAndRename) grouped;
          in
          buildRustCrateForPkgsFunc pkgs
            (
              crateConfig // {
                # https://github.com/NixOS/nixpkgs/issues/218712
                dontStrip = stdenv.hostPlatform.isDarwin;
                src = crateConfig.src or (
                  pkgs.fetchurl rec {
                    name = "${crateConfig.crateName}-${crateConfig.version}.tar.gz";
                    # https://www.pietroalbini.org/blog/downloading-crates-io/
                    # Not rate-limited, CDN URL.
                    url = "https://static.crates.io/crates/${crateConfig.crateName}/${crateConfig.crateName}-${crateConfig.version}.crate";
                    sha256 =
                      assert (lib.assertMsg (crateConfig ? sha256) "Missing sha256 for ${name}");
                      crateConfig.sha256;
                  }
                );
                extraRustcOpts = lib.lists.optional (targetFeatures != [ ]) "-C target-feature=${lib.concatMapStringsSep "," (x: "+${x}") targetFeatures}";
                inherit features dependencies buildDependencies crateRenames release;
              }
            );
      in
      builtByPackageIdByPkgs;

  /* Returns the actual derivations for the given dependencies. */
  dependencyDerivations =
    { buildByPackageId
    , features
    , dependencies
    , target
    }:
      assert (builtins.isList features);
      assert (builtins.isList dependencies);
      assert (builtins.isAttrs target);
      let
        enabledDependencies = filterEnabledDependencies {
          inherit dependencies features target;
        };
        depDerivation = dependency: buildByPackageId dependency.packageId;
      in
      map depDerivation enabledDependencies;

  /* Returns a sanitized version of val with all values substituted that cannot
    be serialized as JSON.
  */
  sanitizeForJson = val:
    if builtins.isAttrs val
    then lib.mapAttrs (n: sanitizeForJson) val
    else if builtins.isList val
    then builtins.map sanitizeForJson val
    else if builtins.isFunction val
    then "function"
    else val;

  /* Returns various tools to debug a crate. */
  debugCrate = { packageId, target ? makeDefaultTarget stdenv.hostPlatform }:
    assert (builtins.isString packageId);
    let
      debug = rec {
        # The built tree as passed to buildRustCrate.
        buildTree = buildRustCrateWithFeatures {
          buildRustCrateForPkgsFunc = _: lib.id;
          inherit packageId;
        };
        sanitizedBuildTree = sanitizeForJson buildTree;
        dependencyTree = sanitizeForJson
          (
            buildRustCrateWithFeatures {
              buildRustCrateForPkgsFunc = _: crate: {
                "01_crateName" = crate.crateName or false;
                "02_features" = crate.features or [ ];
                "03_dependencies" = crate.dependencies or [ ];
              };
              inherit packageId;
            }
          );
        mergedPackageFeatures = mergePackageFeatures {
          features = rootFeatures;
          inherit packageId target;
        };
        diffedDefaultPackageFeatures = diffDefaultPackageFeatures {
          inherit packageId target;
        };
      };
    in
    { internal = debug; };

  /* Returns differences between cargo default features and crate2nix default
    features.

    This is useful for verifying the feature resolution in crate2nix.
  */
  diffDefaultPackageFeatures =
    { crateConfigs ? crates
    , packageId
    , target
    }:
      assert (builtins.isAttrs crateConfigs);
      let
        prefixValues = prefix: lib.mapAttrs (n: v: { "${prefix}" = v; });
        mergedFeatures =
          prefixValues
            "crate2nix"
            (mergePackageFeatures { inherit crateConfigs packageId target; features = [ "default" ]; });
        configs = prefixValues "cargo" crateConfigs;
        combined = lib.foldAttrs (a: b: a // b) { } [ mergedFeatures configs ];
        onlyInCargo =
          builtins.attrNames
            (lib.filterAttrs (n: v: !(v ? "crate2nix") && (v ? "cargo")) combined);
        onlyInCrate2Nix =
          builtins.attrNames
            (lib.filterAttrs (n: v: (v ? "crate2nix") && !(v ? "cargo")) combined);
        differentFeatures = lib.filterAttrs
          (
            n: v:
              (v ? "crate2nix")
              && (v ? "cargo")
              && (v.crate2nix.features or [ ]) != (v."cargo".resolved_default_features or [ ])
          )
          combined;
      in
      builtins.toJSON {
        inherit onlyInCargo onlyInCrate2Nix differentFeatures;
      };

  /* Returns an attrset mapping packageId to the list of enabled features.

    If multiple paths to a dependency enable different features, the
    corresponding feature sets are merged. Features in rust are additive.
  */
  mergePackageFeatures =
    { crateConfigs ? crates
    , packageId
    , rootPackageId ? packageId
    , features ? rootFeatures
    , dependencyPath ? [ crates.${packageId}.crateName ]
    , featuresByPackageId ? { }
    , target
      # Adds devDependencies to the crate with rootPackageId.
    , runTests ? false
    , ...
    } @ args:
      assert (builtins.isAttrs crateConfigs);
      assert (builtins.isString packageId);
      assert (builtins.isString rootPackageId);
      assert (builtins.isList features);
      assert (builtins.isList dependencyPath);
      assert (builtins.isAttrs featuresByPackageId);
      assert (builtins.isAttrs target);
      assert (builtins.isBool runTests);
      let
        crateConfig = crateConfigs."${packageId}" or (builtins.throw "Package not found: ${packageId}");
        expandedFeatures = expandFeatures (crateConfig.features or { }) features;
        enabledFeatures = enableFeatures (crateConfig.dependencies or [ ]) expandedFeatures;
        depWithResolvedFeatures = dependency:
          let
            inherit (dependency) packageId;
            features = dependencyFeatures enabledFeatures dependency;
          in
          { inherit packageId features; };
        resolveDependencies = cache: path: dependencies:
          assert (builtins.isAttrs cache);
          assert (builtins.isList dependencies);
          let
            enabledDependencies = filterEnabledDependencies {
              inherit dependencies target;
              features = enabledFeatures;
            };
            directDependencies = map depWithResolvedFeatures enabledDependencies;
            foldOverCache = op: lib.foldl op cache directDependencies;
          in
          foldOverCache
            (
              cache: { packageId, features }:
                let
                  cacheFeatures = cache.${packageId} or [ ];
                  combinedFeatures = sortedUnique (cacheFeatures ++ features);
                in
                if cache ? ${packageId} && cache.${packageId} == combinedFeatures
                then cache
                else
                  mergePackageFeatures {
                    features = combinedFeatures;
                    featuresByPackageId = cache;
                    inherit crateConfigs packageId target runTests rootPackageId;
                  }
            );
        cacheWithSelf =
          let
            cacheFeatures = featuresByPackageId.${packageId} or [ ];
            combinedFeatures = sortedUnique (cacheFeatures ++ enabledFeatures);
          in
          featuresByPackageId // {
            "${packageId}" = combinedFeatures;
          };
        cacheWithDependencies =
          resolveDependencies cacheWithSelf "dep"
            (
              crateConfig.dependencies or [ ]
              ++ lib.optionals
                (runTests && packageId == rootPackageId)
                (crateConfig.devDependencies or [ ])
            );
        cacheWithAll =
          resolveDependencies
            cacheWithDependencies "build"
            (crateConfig.buildDependencies or [ ]);
      in
      cacheWithAll;

  /* Returns the enabled dependencies given the enabled features. */
  filterEnabledDependencies = { dependencies, features, target }:
    assert (builtins.isList dependencies);
    assert (builtins.isList features);
    assert (builtins.isAttrs target);

    lib.filter
      (
        dep:
        let
          targetFunc = dep.target or (features: true);
        in
        targetFunc { inherit features target; }
        && (
          !(dep.optional or false)
          || builtins.any (doesFeatureEnableDependency dep) features
        )
      )
      dependencies;

  /* Returns whether the given feature should enable the given dependency. */
  doesFeatureEnableDependency = dependency: feature:
    let
      name = dependency.rename or dependency.name;
      prefix = "${name}/";
      len = builtins.stringLength prefix;
      startsWithPrefix = builtins.substring 0 len feature == prefix;
    in
    feature == name || feature == "dep:" + name || startsWithPrefix;

  /* Returns the expanded features for the given inputFeatures by applying the
    rules in featureMap.

    featureMap is an attribute set which maps feature names to lists of further
    feature names to enable in case this feature is selected.
  */
  expandFeatures = featureMap: inputFeatures:
    assert (builtins.isAttrs featureMap);
    assert (builtins.isList inputFeatures);
    let
      expandFeaturesNoCycle = oldSeen: inputFeatures:
        if inputFeatures != [ ]
        then
          let
            # The feature we're currently expanding.
            feature = builtins.head inputFeatures;
            # All the features we've seen/expanded so far, including the one
            # we're currently processing.
            seen = oldSeen // { ${feature} = 1; };
            # Expand the feature but be careful to not re-introduce a feature
            # that we've already seen: this can easily cause a cycle, see issue
            # #209.
            enables = builtins.filter (f: !(seen ? "${f}")) (featureMap."${feature}" or [ ]);
          in
          [ feature ] ++ (expandFeaturesNoCycle seen (builtins.tail inputFeatures ++ enables))
        # No more features left, nothing to expand to.
        else [ ];
      outFeatures = expandFeaturesNoCycle { } inputFeatures;
    in
    sortedUnique outFeatures;

  /* This function adds optional dependencies as features if they are enabled
    indirectly by dependency features. This function mimics Cargo's behavior
    described in a note at:
    https://doc.rust-lang.org/nightly/cargo/reference/features.html#dependency-features
  */
  enableFeatures = dependencies: features:
    assert (builtins.isList features);
    assert (builtins.isList dependencies);
    let
      additionalFeatures = lib.concatMap
        (
          dependency:
            assert (builtins.isAttrs dependency);
            let
              enabled = builtins.any (doesFeatureEnableDependency dependency) features;
            in
            if (dependency.optional or false) && enabled
            then [ (dependency.rename or dependency.name) ]
            else [ ]
        )
        dependencies;
    in
    sortedUnique (features ++ additionalFeatures);

  /*
    Returns the actual features for the given dependency.

    features: The features of the crate that refers this dependency.
  */
  dependencyFeatures = features: dependency:
    assert (builtins.isList features);
    assert (builtins.isAttrs dependency);
    let
      defaultOrNil =
        if dependency.usesDefaultFeatures or true
        then [ "default" ]
        else [ ];
      explicitFeatures = dependency.features or [ ];
      additionalDependencyFeatures =
        let
          name = dependency.rename or dependency.name;
          stripPrefixMatch = prefix: s:
            if lib.hasPrefix prefix s
            then lib.removePrefix prefix s
            else null;
          extractFeature = feature: lib.findFirst
            (f: f != null)
            null
            (map (prefix: stripPrefixMatch prefix feature) [
              (name + "/")
              (name + "?/")
            ]);
          dependencyFeatures = lib.filter (f: f != null) (map extractFeature features);
        in
        dependencyFeatures;
    in
    defaultOrNil ++ explicitFeatures ++ additionalDependencyFeatures;

  /* Sorts and removes duplicates from a list of strings. */
  sortedUnique = features:
    assert (builtins.isList features);
    assert (builtins.all builtins.isString features);
    let
      outFeaturesSet = lib.foldl (set: feature: set // { "${feature}" = 1; }) { } features;
      outFeaturesUnique = builtins.attrNames outFeaturesSet;
    in
    builtins.sort (a: b: a < b) outFeaturesUnique;

  deprecationWarning = message: value:
    if strictDeprecation
    then builtins.throw "strictDeprecation enabled, aborting: ${message}"
    else builtins.trace message value;

  #
  # crate2nix/default.nix (excerpt end)
  #
  };
}

